// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sandbox/api/v1alpha1/sandbox_room.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SandboxRoomService_GenerateRoom_FullMethodName        = "/sandbox.api.v1alpha1.SandboxRoomService/GenerateRoom"
	SandboxRoomService_BuildStaticRoom_FullMethodName     = "/sandbox.api.v1alpha1.SandboxRoomService/BuildStaticRoom"
	SandboxRoomService_GetRoom_FullMethodName             = "/sandbox.api.v1alpha1.SandboxRoomService/GetRoom"
	SandboxRoomService_ListRooms_FullMethodName           = "/sandbox.api.v1alpha1.SandboxRoomService/ListRooms"
	SandboxRoomService_DeleteRoom_FullMethodName          = "/sandbox.api.v1alpha1.SandboxRoomService/DeleteRoom"
	SandboxRoomService_CheckLineOfSight_FullMethodName    = "/sandbox.api.v1alpha1.SandboxRoomService/CheckLineOfSight"
	SandboxRoomService_FindPath_FullMethodName            = "/sandbox.api.v1alpha1.SandboxRoomService/FindPath"
	SandboxRoomService_CalculateDistance_FullMethodName   = "/sandbox.api.v1alpha1.SandboxRoomService/CalculateDistance"
	SandboxRoomService_GetPositionsInRange_FullMethodName = "/sandbox.api.v1alpha1.SandboxRoomService/GetPositionsInRange"
	SandboxRoomService_PlaceEntity_FullMethodName         = "/sandbox.api.v1alpha1.SandboxRoomService/PlaceEntity"
	SandboxRoomService_MoveEntity_FullMethodName          = "/sandbox.api.v1alpha1.SandboxRoomService/MoveEntity"
	SandboxRoomService_RemoveEntity_FullMethodName        = "/sandbox.api.v1alpha1.SandboxRoomService/RemoveEntity"
	SandboxRoomService_GetEntitiesInRoom_FullMethodName   = "/sandbox.api.v1alpha1.SandboxRoomService/GetEntitiesInRoom"
	SandboxRoomService_CreateSandbox_FullMethodName       = "/sandbox.api.v1alpha1.SandboxRoomService/CreateSandbox"
	SandboxRoomService_GetSandbox_FullMethodName          = "/sandbox.api.v1alpha1.SandboxRoomService/GetSandbox"
	SandboxRoomService_DeleteSandbox_FullMethodName       = "/sandbox.api.v1alpha1.SandboxRoomService/DeleteSandbox"
)

// SandboxRoomServiceClient is the client API for SandboxRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxRoomServiceClient interface {
	// Room Creation & Management
	GenerateRoom(ctx context.Context, in *GenerateRoomRequest, opts ...grpc.CallOption) (*GenerateRoomResponse, error)
	BuildStaticRoom(ctx context.Context, in *BuildStaticRoomRequest, opts ...grpc.CallOption) (*BuildStaticRoomResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	// Spatial Queries
	CheckLineOfSight(ctx context.Context, in *CheckLineOfSightRequest, opts ...grpc.CallOption) (*CheckLineOfSightResponse, error)
	FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error)
	CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error)
	GetPositionsInRange(ctx context.Context, in *GetPositionsInRangeRequest, opts ...grpc.CallOption) (*GetPositionsInRangeResponse, error)
	// Entity Management
	PlaceEntity(ctx context.Context, in *PlaceEntityRequest, opts ...grpc.CallOption) (*PlaceEntityResponse, error)
	MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error)
	RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error)
	GetEntitiesInRoom(ctx context.Context, in *GetEntitiesInRoomRequest, opts ...grpc.CallOption) (*GetEntitiesInRoomResponse, error)
	// Sandbox Lifecycle
	CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc.CallOption) (*CreateSandboxResponse, error)
	GetSandbox(ctx context.Context, in *GetSandboxRequest, opts ...grpc.CallOption) (*GetSandboxResponse, error)
	DeleteSandbox(ctx context.Context, in *DeleteSandboxRequest, opts ...grpc.CallOption) (*DeleteSandboxResponse, error)
}

type sandboxRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxRoomServiceClient(cc grpc.ClientConnInterface) SandboxRoomServiceClient {
	return &sandboxRoomServiceClient{cc}
}

func (c *sandboxRoomServiceClient) GenerateRoom(ctx context.Context, in *GenerateRoomRequest, opts ...grpc.CallOption) (*GenerateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRoomResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_GenerateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) BuildStaticRoom(ctx context.Context, in *BuildStaticRoomRequest, opts ...grpc.CallOption) (*BuildStaticRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildStaticRoomResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_BuildStaticRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_ListRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) CheckLineOfSight(ctx context.Context, in *CheckLineOfSightRequest, opts ...grpc.CallOption) (*CheckLineOfSightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLineOfSightResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_CheckLineOfSight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPathResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_FindPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateDistanceResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_CalculateDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) GetPositionsInRange(ctx context.Context, in *GetPositionsInRangeRequest, opts ...grpc.CallOption) (*GetPositionsInRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPositionsInRangeResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_GetPositionsInRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) PlaceEntity(ctx context.Context, in *PlaceEntityRequest, opts ...grpc.CallOption) (*PlaceEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceEntityResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_PlaceEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveEntityResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_MoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_RemoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) GetEntitiesInRoom(ctx context.Context, in *GetEntitiesInRoomRequest, opts ...grpc.CallOption) (*GetEntitiesInRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesInRoomResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_GetEntitiesInRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc.CallOption) (*CreateSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSandboxResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_CreateSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) GetSandbox(ctx context.Context, in *GetSandboxRequest, opts ...grpc.CallOption) (*GetSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSandboxResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_GetSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxRoomServiceClient) DeleteSandbox(ctx context.Context, in *DeleteSandboxRequest, opts ...grpc.CallOption) (*DeleteSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSandboxResponse)
	err := c.cc.Invoke(ctx, SandboxRoomService_DeleteSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxRoomServiceServer is the server API for SandboxRoomService service.
// All implementations should embed UnimplementedSandboxRoomServiceServer
// for forward compatibility.
type SandboxRoomServiceServer interface {
	// Room Creation & Management
	GenerateRoom(context.Context, *GenerateRoomRequest) (*GenerateRoomResponse, error)
	BuildStaticRoom(context.Context, *BuildStaticRoomRequest) (*BuildStaticRoomResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	// Spatial Queries
	CheckLineOfSight(context.Context, *CheckLineOfSightRequest) (*CheckLineOfSightResponse, error)
	FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error)
	CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error)
	GetPositionsInRange(context.Context, *GetPositionsInRangeRequest) (*GetPositionsInRangeResponse, error)
	// Entity Management
	PlaceEntity(context.Context, *PlaceEntityRequest) (*PlaceEntityResponse, error)
	MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error)
	RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error)
	GetEntitiesInRoom(context.Context, *GetEntitiesInRoomRequest) (*GetEntitiesInRoomResponse, error)
	// Sandbox Lifecycle
	CreateSandbox(context.Context, *CreateSandboxRequest) (*CreateSandboxResponse, error)
	GetSandbox(context.Context, *GetSandboxRequest) (*GetSandboxResponse, error)
	DeleteSandbox(context.Context, *DeleteSandboxRequest) (*DeleteSandboxResponse, error)
}

// UnimplementedSandboxRoomServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSandboxRoomServiceServer struct{}

func (UnimplementedSandboxRoomServiceServer) GenerateRoom(context.Context, *GenerateRoomRequest) (*GenerateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoom not implemented")
}
func (UnimplementedSandboxRoomServiceServer) BuildStaticRoom(context.Context, *BuildStaticRoomRequest) (*BuildStaticRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildStaticRoom not implemented")
}
func (UnimplementedSandboxRoomServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedSandboxRoomServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedSandboxRoomServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedSandboxRoomServiceServer) CheckLineOfSight(context.Context, *CheckLineOfSightRequest) (*CheckLineOfSightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLineOfSight not implemented")
}
func (UnimplementedSandboxRoomServiceServer) FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPath not implemented")
}
func (UnimplementedSandboxRoomServiceServer) CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDistance not implemented")
}
func (UnimplementedSandboxRoomServiceServer) GetPositionsInRange(context.Context, *GetPositionsInRangeRequest) (*GetPositionsInRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionsInRange not implemented")
}
func (UnimplementedSandboxRoomServiceServer) PlaceEntity(context.Context, *PlaceEntityRequest) (*PlaceEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceEntity not implemented")
}
func (UnimplementedSandboxRoomServiceServer) MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEntity not implemented")
}
func (UnimplementedSandboxRoomServiceServer) RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}
func (UnimplementedSandboxRoomServiceServer) GetEntitiesInRoom(context.Context, *GetEntitiesInRoomRequest) (*GetEntitiesInRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesInRoom not implemented")
}
func (UnimplementedSandboxRoomServiceServer) CreateSandbox(context.Context, *CreateSandboxRequest) (*CreateSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSandbox not implemented")
}
func (UnimplementedSandboxRoomServiceServer) GetSandbox(context.Context, *GetSandboxRequest) (*GetSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSandbox not implemented")
}
func (UnimplementedSandboxRoomServiceServer) DeleteSandbox(context.Context, *DeleteSandboxRequest) (*DeleteSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSandbox not implemented")
}
func (UnimplementedSandboxRoomServiceServer) testEmbeddedByValue() {}

// UnsafeSandboxRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxRoomServiceServer will
// result in compilation errors.
type UnsafeSandboxRoomServiceServer interface {
	mustEmbedUnimplementedSandboxRoomServiceServer()
}

func RegisterSandboxRoomServiceServer(s grpc.ServiceRegistrar, srv SandboxRoomServiceServer) {
	// If the following call pancis, it indicates UnimplementedSandboxRoomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SandboxRoomService_ServiceDesc, srv)
}

func _SandboxRoomService_GenerateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).GenerateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_GenerateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).GenerateRoom(ctx, req.(*GenerateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_BuildStaticRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildStaticRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).BuildStaticRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_BuildStaticRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).BuildStaticRoom(ctx, req.(*BuildStaticRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_CheckLineOfSight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLineOfSightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).CheckLineOfSight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_CheckLineOfSight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).CheckLineOfSight(ctx, req.(*CheckLineOfSightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_FindPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).FindPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_FindPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).FindPath(ctx, req.(*FindPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_CalculateDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).CalculateDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_CalculateDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).CalculateDistance(ctx, req.(*CalculateDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_GetPositionsInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionsInRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).GetPositionsInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_GetPositionsInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).GetPositionsInRange(ctx, req.(*GetPositionsInRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_PlaceEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).PlaceEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_PlaceEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).PlaceEntity(ctx, req.(*PlaceEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_MoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).MoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_MoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).MoveEntity(ctx, req.(*MoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_RemoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).RemoveEntity(ctx, req.(*RemoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_GetEntitiesInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesInRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).GetEntitiesInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_GetEntitiesInRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).GetEntitiesInRoom(ctx, req.(*GetEntitiesInRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_CreateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).CreateSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_CreateSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).CreateSandbox(ctx, req.(*CreateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_GetSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).GetSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_GetSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).GetSandbox(ctx, req.(*GetSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxRoomService_DeleteSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxRoomServiceServer).DeleteSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SandboxRoomService_DeleteSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxRoomServiceServer).DeleteSandbox(ctx, req.(*DeleteSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SandboxRoomService_ServiceDesc is the grpc.ServiceDesc for SandboxRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SandboxRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sandbox.api.v1alpha1.SandboxRoomService",
	HandlerType: (*SandboxRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRoom",
			Handler:    _SandboxRoomService_GenerateRoom_Handler,
		},
		{
			MethodName: "BuildStaticRoom",
			Handler:    _SandboxRoomService_BuildStaticRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _SandboxRoomService_GetRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _SandboxRoomService_ListRooms_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _SandboxRoomService_DeleteRoom_Handler,
		},
		{
			MethodName: "CheckLineOfSight",
			Handler:    _SandboxRoomService_CheckLineOfSight_Handler,
		},
		{
			MethodName: "FindPath",
			Handler:    _SandboxRoomService_FindPath_Handler,
		},
		{
			MethodName: "CalculateDistance",
			Handler:    _SandboxRoomService_CalculateDistance_Handler,
		},
		{
			MethodName: "GetPositionsInRange",
			Handler:    _SandboxRoomService_GetPositionsInRange_Handler,
		},
		{
			MethodName: "PlaceEntity",
			Handler:    _SandboxRoomService_PlaceEntity_Handler,
		},
		{
			MethodName: "MoveEntity",
			Handler:    _SandboxRoomService_MoveEntity_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _SandboxRoomService_RemoveEntity_Handler,
		},
		{
			MethodName: "GetEntitiesInRoom",
			Handler:    _SandboxRoomService_GetEntitiesInRoom_Handler,
		},
		{
			MethodName: "CreateSandbox",
			Handler:    _SandboxRoomService_CreateSandbox_Handler,
		},
		{
			MethodName: "GetSandbox",
			Handler:    _SandboxRoomService_GetSandbox_Handler,
		},
		{
			MethodName: "DeleteSandbox",
			Handler:    _SandboxRoomService_DeleteSandbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sandbox/api/v1alpha1/sandbox_room.proto",
}
