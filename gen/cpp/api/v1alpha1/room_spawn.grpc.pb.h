// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/room_spawn.proto
#ifndef GRPC_api_2fv1alpha1_2froom_5fspawn_2eproto__INCLUDED
#define GRPC_api_2fv1alpha1_2froom_5fspawn_2eproto__INCLUDED

#include "api/v1alpha1/room_spawn.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace api {
namespace v1alpha1 {

// Entity spawning and management service for rooms
// Handles entity creation, placement, movement, and lifecycle management
class SpawnService final {
 public:
  static constexpr char const* service_full_name() {
    return "api.v1alpha1.SpawnService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Entity spawning operations
    virtual ::grpc::Status SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::api::v1alpha1::SpawnEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>> AsyncSpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>>(AsyncSpawnEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>> PrepareAsyncSpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>>(PrepareAsyncSpawnEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>> AsyncSpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>>(AsyncSpawnMultipleEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>> PrepareAsyncSpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>>(PrepareAsyncSpawnMultipleEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::api::v1alpha1::SpawnFromTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>> AsyncSpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>>(AsyncSpawnFromTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>> PrepareAsyncSpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>>(PrepareAsyncSpawnFromTemplateRaw(context, request, cq));
    }
    // Entity management operations
    virtual ::grpc::Status MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::api::v1alpha1::MoveEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>> AsyncMoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>>(AsyncMoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>> PrepareAsyncMoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>>(PrepareAsyncMoveEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::api::v1alpha1::UpdateEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>> AsyncUpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>>(AsyncUpdateEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>> PrepareAsyncUpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>>(PrepareAsyncUpdateEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::api::v1alpha1::RemoveEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>> AsyncRemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>>(AsyncRemoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>> PrepareAsyncRemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>>(PrepareAsyncRemoveEntityRaw(context, request, cq));
    }
    // Entity query operations
    virtual ::grpc::Status GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::api::v1alpha1::GetEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>> AsyncGetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>>(AsyncGetEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>> PrepareAsyncGetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>>(PrepareAsyncGetEntityRaw(context, request, cq));
    }
    virtual ::grpc::Status ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::api::v1alpha1::ListEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>> AsyncListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>>(AsyncListEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>> PrepareAsyncListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>>(PrepareAsyncListEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::api::v1alpha1::FindEntitiesByTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>> AsyncFindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>>(AsyncFindEntitiesByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>> PrepareAsyncFindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>>(PrepareAsyncFindEntitiesByTypeRaw(context, request, cq));
    }
    // Spawn template operations
    virtual ::grpc::Status ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::api::v1alpha1::ListSpawnTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>> AsyncListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>>(AsyncListSpawnTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>> PrepareAsyncListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>>(PrepareAsyncListSpawnTemplatesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::api::v1alpha1::CreateSpawnTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>> AsyncCreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>>(AsyncCreateSpawnTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>> PrepareAsyncCreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>>(PrepareAsyncCreateSpawnTemplateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::api::v1alpha1::GetSpawnTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>> AsyncGetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>>(AsyncGetSpawnTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>> PrepareAsyncGetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>>(PrepareAsyncGetSpawnTemplateRaw(context, request, cq));
    }
    // Batch operations
    virtual ::grpc::Status BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>> AsyncBatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>>(AsyncBatchSpawnEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>> PrepareAsyncBatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>>(PrepareAsyncBatchSpawnEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::api::v1alpha1::BatchMoveEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>> AsyncBatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>>(AsyncBatchMoveEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>> PrepareAsyncBatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>>(PrepareAsyncBatchMoveEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>> AsyncBatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>>(AsyncBatchRemoveEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>> PrepareAsyncBatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>>(PrepareAsyncBatchRemoveEntitiesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Entity spawning operations
      virtual void SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Entity management operations
      virtual void MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Entity query operations
      virtual void GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Spawn template operations
      virtual void ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Batch operations
      virtual void BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>* AsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnEntityResponse>* PrepareAsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* AsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* PrepareAsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>* AsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::SpawnFromTemplateResponse>* PrepareAsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>* AsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::MoveEntityResponse>* PrepareAsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>* AsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::UpdateEntityResponse>* PrepareAsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>* AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RemoveEntityResponse>* PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>* AsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetEntityResponse>* PrepareAsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>* AsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListEntitiesResponse>* PrepareAsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>* AsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::FindEntitiesByTypeResponse>* PrepareAsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>* AsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ListSpawnTemplatesResponse>* PrepareAsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>* AsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::CreateSpawnTemplateResponse>* PrepareAsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>* AsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetSpawnTemplateResponse>* PrepareAsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>* AsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchSpawnEntitiesResponse>* PrepareAsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>* AsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchMoveEntitiesResponse>* PrepareAsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>* AsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::BatchRemoveEntitiesResponse>* PrepareAsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::api::v1alpha1::SpawnEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>> AsyncSpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>>(AsyncSpawnEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>> PrepareAsyncSpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>>(PrepareAsyncSpawnEntityRaw(context, request, cq));
    }
    ::grpc::Status SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>> AsyncSpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>>(AsyncSpawnMultipleEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>> PrepareAsyncSpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>>(PrepareAsyncSpawnMultipleEntitiesRaw(context, request, cq));
    }
    ::grpc::Status SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::api::v1alpha1::SpawnFromTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>> AsyncSpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>>(AsyncSpawnFromTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>> PrepareAsyncSpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>>(PrepareAsyncSpawnFromTemplateRaw(context, request, cq));
    }
    ::grpc::Status MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::api::v1alpha1::MoveEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>> AsyncMoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>>(AsyncMoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>> PrepareAsyncMoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>>(PrepareAsyncMoveEntityRaw(context, request, cq));
    }
    ::grpc::Status UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::api::v1alpha1::UpdateEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>> AsyncUpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>>(AsyncUpdateEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>> PrepareAsyncUpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>>(PrepareAsyncUpdateEntityRaw(context, request, cq));
    }
    ::grpc::Status RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::api::v1alpha1::RemoveEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>> AsyncRemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>>(AsyncRemoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>> PrepareAsyncRemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>>(PrepareAsyncRemoveEntityRaw(context, request, cq));
    }
    ::grpc::Status GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::api::v1alpha1::GetEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>> AsyncGetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>>(AsyncGetEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>> PrepareAsyncGetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>>(PrepareAsyncGetEntityRaw(context, request, cq));
    }
    ::grpc::Status ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::api::v1alpha1::ListEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>> AsyncListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>>(AsyncListEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>> PrepareAsyncListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>>(PrepareAsyncListEntitiesRaw(context, request, cq));
    }
    ::grpc::Status FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::api::v1alpha1::FindEntitiesByTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>> AsyncFindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>>(AsyncFindEntitiesByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>> PrepareAsyncFindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>>(PrepareAsyncFindEntitiesByTypeRaw(context, request, cq));
    }
    ::grpc::Status ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::api::v1alpha1::ListSpawnTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>> AsyncListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>>(AsyncListSpawnTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>> PrepareAsyncListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>>(PrepareAsyncListSpawnTemplatesRaw(context, request, cq));
    }
    ::grpc::Status CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::api::v1alpha1::CreateSpawnTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>> AsyncCreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>>(AsyncCreateSpawnTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>> PrepareAsyncCreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>>(PrepareAsyncCreateSpawnTemplateRaw(context, request, cq));
    }
    ::grpc::Status GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::api::v1alpha1::GetSpawnTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>> AsyncGetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>>(AsyncGetSpawnTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>> PrepareAsyncGetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>>(PrepareAsyncGetSpawnTemplateRaw(context, request, cq));
    }
    ::grpc::Status BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>> AsyncBatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>>(AsyncBatchSpawnEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>> PrepareAsyncBatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>>(PrepareAsyncBatchSpawnEntitiesRaw(context, request, cq));
    }
    ::grpc::Status BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::api::v1alpha1::BatchMoveEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>> AsyncBatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>>(AsyncBatchMoveEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>> PrepareAsyncBatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>>(PrepareAsyncBatchMoveEntitiesRaw(context, request, cq));
    }
    ::grpc::Status BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>> AsyncBatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>>(AsyncBatchRemoveEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>> PrepareAsyncBatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>>(PrepareAsyncBatchRemoveEntitiesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>* AsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>* PrepareAsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* AsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* PrepareAsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>* AsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>* PrepareAsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>* AsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>* PrepareAsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>* AsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>* PrepareAsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>* AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>* PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>* AsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>* PrepareAsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>* AsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>* PrepareAsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>* AsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>* PrepareAsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>* AsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>* PrepareAsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>* AsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>* PrepareAsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>* AsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>* PrepareAsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>* AsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>* PrepareAsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>* AsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>* PrepareAsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>* AsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>* PrepareAsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SpawnEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_SpawnMultipleEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_SpawnFromTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_ListEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_FindEntitiesByType_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSpawnTemplates_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSpawnTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpawnTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchSpawnEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchMoveEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchRemoveEntities_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Entity spawning operations
    virtual ::grpc::Status SpawnEntity(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response);
    virtual ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response);
    virtual ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response);
    // Entity management operations
    virtual ::grpc::Status MoveEntity(::grpc::ServerContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response);
    virtual ::grpc::Status UpdateEntity(::grpc::ServerContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response);
    virtual ::grpc::Status RemoveEntity(::grpc::ServerContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response);
    // Entity query operations
    virtual ::grpc::Status GetEntity(::grpc::ServerContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response);
    virtual ::grpc::Status ListEntities(::grpc::ServerContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response);
    virtual ::grpc::Status FindEntitiesByType(::grpc::ServerContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response);
    // Spawn template operations
    virtual ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response);
    virtual ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response);
    virtual ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response);
    // Batch operations
    virtual ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response);
    virtual ::grpc::Status BatchMoveEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response);
    virtual ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnEntity(::grpc::ServerContext* context, ::api::v1alpha1::SpawnEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::SpawnEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnMultipleEntities(::grpc::ServerContext* context, ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnFromTemplate(::grpc::ServerContext* context, ::api::v1alpha1::SpawnFromTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::SpawnFromTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveEntity() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveEntity(::grpc::ServerContext* context, ::api::v1alpha1::MoveEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::MoveEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEntity(::grpc::ServerContext* context, ::api::v1alpha1::UpdateEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::UpdateEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntity(::grpc::ServerContext* context, ::api::v1alpha1::RemoveEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::RemoveEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntity() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntity(::grpc::ServerContext* context, ::api::v1alpha1::GetEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::GetEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListEntities() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEntities(::grpc::ServerContext* context, ::api::v1alpha1::ListEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::ListEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindEntitiesByType(::grpc::ServerContext* context, ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::FindEntitiesByTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpawnTemplates(::grpc::ServerContext* context, ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::ListSpawnTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpawnTemplate(::grpc::ServerContext* context, ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::CreateSpawnTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpawnTemplate(::grpc::ServerContext* context, ::api::v1alpha1::GetSpawnTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::GetSpawnTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchSpawnEntities(::grpc::ServerContext* context, ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::BatchSpawnEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchMoveEntities(::grpc::ServerContext* context, ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::BatchMoveEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchRemoveEntities(::grpc::ServerContext* context, ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::BatchRemoveEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SpawnEntity<WithAsyncMethod_SpawnMultipleEntities<WithAsyncMethod_SpawnFromTemplate<WithAsyncMethod_MoveEntity<WithAsyncMethod_UpdateEntity<WithAsyncMethod_RemoveEntity<WithAsyncMethod_GetEntity<WithAsyncMethod_ListEntities<WithAsyncMethod_FindEntitiesByType<WithAsyncMethod_ListSpawnTemplates<WithAsyncMethod_CreateSpawnTemplate<WithAsyncMethod_GetSpawnTemplate<WithAsyncMethod_BatchSpawnEntities<WithAsyncMethod_BatchMoveEntities<WithAsyncMethod_BatchRemoveEntities<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response) { return this->SpawnEntity(context, request, response); }));}
    void SetMessageAllocatorFor_SpawnEntity(
        ::grpc::MessageAllocator< ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response) { return this->SpawnMultipleEntities(context, request, response); }));}
    void SetMessageAllocatorFor_SpawnMultipleEntities(
        ::grpc::MessageAllocator< ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnMultipleEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response) { return this->SpawnFromTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_SpawnFromTemplate(
        ::grpc::MessageAllocator< ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnFromTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveEntity() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response) { return this->MoveEntity(context, request, response); }));}
    void SetMessageAllocatorFor_MoveEntity(
        ::grpc::MessageAllocator< ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response) { return this->UpdateEntity(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateEntity(
        ::grpc::MessageAllocator< ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response) { return this->RemoveEntity(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveEntity(
        ::grpc::MessageAllocator< ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEntity() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response) { return this->GetEntity(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntity(
        ::grpc::MessageAllocator< ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListEntities() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response) { return this->ListEntities(context, request, response); }));}
    void SetMessageAllocatorFor_ListEntities(
        ::grpc::MessageAllocator< ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response) { return this->FindEntitiesByType(context, request, response); }));}
    void SetMessageAllocatorFor_FindEntitiesByType(
        ::grpc::MessageAllocator< ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindEntitiesByType(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response) { return this->ListSpawnTemplates(context, request, response); }));}
    void SetMessageAllocatorFor_ListSpawnTemplates(
        ::grpc::MessageAllocator< ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSpawnTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response) { return this->CreateSpawnTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSpawnTemplate(
        ::grpc::MessageAllocator< ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSpawnTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response) { return this->GetSpawnTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpawnTemplate(
        ::grpc::MessageAllocator< ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpawnTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response) { return this->BatchSpawnEntities(context, request, response); }));}
    void SetMessageAllocatorFor_BatchSpawnEntities(
        ::grpc::MessageAllocator< ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchSpawnEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response) { return this->BatchMoveEntities(context, request, response); }));}
    void SetMessageAllocatorFor_BatchMoveEntities(
        ::grpc::MessageAllocator< ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchMoveEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response) { return this->BatchRemoveEntities(context, request, response); }));}
    void SetMessageAllocatorFor_BatchRemoveEntities(
        ::grpc::MessageAllocator< ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchRemoveEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SpawnEntity<WithCallbackMethod_SpawnMultipleEntities<WithCallbackMethod_SpawnFromTemplate<WithCallbackMethod_MoveEntity<WithCallbackMethod_UpdateEntity<WithCallbackMethod_RemoveEntity<WithCallbackMethod_GetEntity<WithCallbackMethod_ListEntities<WithCallbackMethod_FindEntitiesByType<WithCallbackMethod_ListSpawnTemplates<WithCallbackMethod_CreateSpawnTemplate<WithCallbackMethod_GetSpawnTemplate<WithCallbackMethod_BatchSpawnEntities<WithCallbackMethod_BatchMoveEntities<WithCallbackMethod_BatchRemoveEntities<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveEntity() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntity() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListEntities() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnMultipleEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnFromTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveEntity() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntity() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListEntities() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindEntitiesByType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpawnTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpawnTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpawnTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchSpawnEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchMoveEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchRemoveEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpawnEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpawnMultipleEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnMultipleEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpawnFromTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnFromTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveEntity() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEntity() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListEntities() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindEntitiesByType(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindEntitiesByType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSpawnTemplates(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSpawnTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSpawnTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSpawnTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpawnTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpawnTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchSpawnEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchSpawnEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchMoveEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchMoveEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchRemoveEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchRemoveEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpawnEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpawnEntity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse>* streamer) {
                       return this->StreamedSpawnEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpawnEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpawnEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnEntityRequest* /*request*/, ::api::v1alpha1::SpawnEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpawnEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::SpawnEntityRequest,::api::v1alpha1::SpawnEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpawnMultipleEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpawnMultipleEntities() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse>* streamer) {
                       return this->StreamedSpawnMultipleEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpawnMultipleEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpawnMultipleEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* /*request*/, ::api::v1alpha1::SpawnMultipleEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpawnMultipleEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::SpawnMultipleEntitiesRequest,::api::v1alpha1::SpawnMultipleEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpawnFromTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpawnFromTemplate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse>* streamer) {
                       return this->StreamedSpawnFromTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpawnFromTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpawnFromTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::SpawnFromTemplateRequest* /*request*/, ::api::v1alpha1::SpawnFromTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpawnFromTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::SpawnFromTemplateRequest,::api::v1alpha1::SpawnFromTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveEntity() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse>* streamer) {
                       return this->StreamedMoveEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::MoveEntityRequest* /*request*/, ::api::v1alpha1::MoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::MoveEntityRequest,::api::v1alpha1::MoveEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateEntity() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse>* streamer) {
                       return this->StreamedUpdateEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::UpdateEntityRequest* /*request*/, ::api::v1alpha1::UpdateEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::UpdateEntityRequest,::api::v1alpha1::UpdateEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse>* streamer) {
                       return this->StreamedRemoveEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RemoveEntityRequest* /*request*/, ::api::v1alpha1::RemoveEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::RemoveEntityRequest,::api::v1alpha1::RemoveEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntity() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse>* streamer) {
                       return this->StreamedGetEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetEntityRequest* /*request*/, ::api::v1alpha1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::GetEntityRequest,::api::v1alpha1::GetEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListEntities() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse>* streamer) {
                       return this->StreamedListEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListEntitiesRequest* /*request*/, ::api::v1alpha1::ListEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::ListEntitiesRequest,::api::v1alpha1::ListEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindEntitiesByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindEntitiesByType() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse>* streamer) {
                       return this->StreamedFindEntitiesByType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindEntitiesByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindEntitiesByType(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::FindEntitiesByTypeRequest* /*request*/, ::api::v1alpha1::FindEntitiesByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindEntitiesByType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::FindEntitiesByTypeRequest,::api::v1alpha1::FindEntitiesByTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSpawnTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSpawnTemplates() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse>* streamer) {
                       return this->StreamedListSpawnTemplates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSpawnTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSpawnTemplates(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ListSpawnTemplatesRequest* /*request*/, ::api::v1alpha1::ListSpawnTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSpawnTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::ListSpawnTemplatesRequest,::api::v1alpha1::ListSpawnTemplatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSpawnTemplate() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse>* streamer) {
                       return this->StreamedCreateSpawnTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::CreateSpawnTemplateRequest* /*request*/, ::api::v1alpha1::CreateSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSpawnTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::CreateSpawnTemplateRequest,::api::v1alpha1::CreateSpawnTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpawnTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpawnTemplate() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse>* streamer) {
                       return this->StreamedGetSpawnTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpawnTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpawnTemplate(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetSpawnTemplateRequest* /*request*/, ::api::v1alpha1::GetSpawnTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpawnTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::GetSpawnTemplateRequest,::api::v1alpha1::GetSpawnTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchSpawnEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchSpawnEntities() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse>* streamer) {
                       return this->StreamedBatchSpawnEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchSpawnEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchSpawnEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchSpawnEntitiesRequest* /*request*/, ::api::v1alpha1::BatchSpawnEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchSpawnEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::BatchSpawnEntitiesRequest,::api::v1alpha1::BatchSpawnEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchMoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchMoveEntities() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse>* streamer) {
                       return this->StreamedBatchMoveEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchMoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchMoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchMoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchMoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchMoveEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::BatchMoveEntitiesRequest,::api::v1alpha1::BatchMoveEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchRemoveEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchRemoveEntities() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse>* streamer) {
                       return this->StreamedBatchRemoveEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchRemoveEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchRemoveEntities(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::BatchRemoveEntitiesRequest* /*request*/, ::api::v1alpha1::BatchRemoveEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchRemoveEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::BatchRemoveEntitiesRequest,::api::v1alpha1::BatchRemoveEntitiesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SpawnEntity<WithStreamedUnaryMethod_SpawnMultipleEntities<WithStreamedUnaryMethod_SpawnFromTemplate<WithStreamedUnaryMethod_MoveEntity<WithStreamedUnaryMethod_UpdateEntity<WithStreamedUnaryMethod_RemoveEntity<WithStreamedUnaryMethod_GetEntity<WithStreamedUnaryMethod_ListEntities<WithStreamedUnaryMethod_FindEntitiesByType<WithStreamedUnaryMethod_ListSpawnTemplates<WithStreamedUnaryMethod_CreateSpawnTemplate<WithStreamedUnaryMethod_GetSpawnTemplate<WithStreamedUnaryMethod_BatchSpawnEntities<WithStreamedUnaryMethod_BatchMoveEntities<WithStreamedUnaryMethod_BatchRemoveEntities<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SpawnEntity<WithStreamedUnaryMethod_SpawnMultipleEntities<WithStreamedUnaryMethod_SpawnFromTemplate<WithStreamedUnaryMethod_MoveEntity<WithStreamedUnaryMethod_UpdateEntity<WithStreamedUnaryMethod_RemoveEntity<WithStreamedUnaryMethod_GetEntity<WithStreamedUnaryMethod_ListEntities<WithStreamedUnaryMethod_FindEntitiesByType<WithStreamedUnaryMethod_ListSpawnTemplates<WithStreamedUnaryMethod_CreateSpawnTemplate<WithStreamedUnaryMethod_GetSpawnTemplate<WithStreamedUnaryMethod_BatchSpawnEntities<WithStreamedUnaryMethod_BatchMoveEntities<WithStreamedUnaryMethod_BatchRemoveEntities<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace api


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_api_2fv1alpha1_2froom_5fspawn_2eproto__INCLUDED
