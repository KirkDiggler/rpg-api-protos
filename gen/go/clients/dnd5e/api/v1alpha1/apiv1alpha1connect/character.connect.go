// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dnd5e/api/v1alpha1/character.proto

package apiv1alpha1connect

import (
	v1alpha1 "clients/dnd5e/api/v1alpha1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CharacterServiceName is the fully-qualified name of the CharacterService service.
	CharacterServiceName = "dnd5e.api.v1alpha1.CharacterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CharacterServiceCreateDraftProcedure is the fully-qualified name of the CharacterService's
	// CreateDraft RPC.
	CharacterServiceCreateDraftProcedure = "/dnd5e.api.v1alpha1.CharacterService/CreateDraft"
	// CharacterServiceGetDraftProcedure is the fully-qualified name of the CharacterService's GetDraft
	// RPC.
	CharacterServiceGetDraftProcedure = "/dnd5e.api.v1alpha1.CharacterService/GetDraft"
	// CharacterServiceListDraftsProcedure is the fully-qualified name of the CharacterService's
	// ListDrafts RPC.
	CharacterServiceListDraftsProcedure = "/dnd5e.api.v1alpha1.CharacterService/ListDrafts"
	// CharacterServiceDeleteDraftProcedure is the fully-qualified name of the CharacterService's
	// DeleteDraft RPC.
	CharacterServiceDeleteDraftProcedure = "/dnd5e.api.v1alpha1.CharacterService/DeleteDraft"
	// CharacterServiceUpdateNameProcedure is the fully-qualified name of the CharacterService's
	// UpdateName RPC.
	CharacterServiceUpdateNameProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateName"
	// CharacterServiceUpdateRaceProcedure is the fully-qualified name of the CharacterService's
	// UpdateRace RPC.
	CharacterServiceUpdateRaceProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateRace"
	// CharacterServiceUpdateClassProcedure is the fully-qualified name of the CharacterService's
	// UpdateClass RPC.
	CharacterServiceUpdateClassProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateClass"
	// CharacterServiceUpdateBackgroundProcedure is the fully-qualified name of the CharacterService's
	// UpdateBackground RPC.
	CharacterServiceUpdateBackgroundProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateBackground"
	// CharacterServiceUpdateAbilityScoresProcedure is the fully-qualified name of the
	// CharacterService's UpdateAbilityScores RPC.
	CharacterServiceUpdateAbilityScoresProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateAbilityScores"
	// CharacterServiceUpdateSkillsProcedure is the fully-qualified name of the CharacterService's
	// UpdateSkills RPC.
	CharacterServiceUpdateSkillsProcedure = "/dnd5e.api.v1alpha1.CharacterService/UpdateSkills"
	// CharacterServiceValidateDraftProcedure is the fully-qualified name of the CharacterService's
	// ValidateDraft RPC.
	CharacterServiceValidateDraftProcedure = "/dnd5e.api.v1alpha1.CharacterService/ValidateDraft"
	// CharacterServiceFinalizeDraftProcedure is the fully-qualified name of the CharacterService's
	// FinalizeDraft RPC.
	CharacterServiceFinalizeDraftProcedure = "/dnd5e.api.v1alpha1.CharacterService/FinalizeDraft"
	// CharacterServiceGetCharacterProcedure is the fully-qualified name of the CharacterService's
	// GetCharacter RPC.
	CharacterServiceGetCharacterProcedure = "/dnd5e.api.v1alpha1.CharacterService/GetCharacter"
	// CharacterServiceListCharactersProcedure is the fully-qualified name of the CharacterService's
	// ListCharacters RPC.
	CharacterServiceListCharactersProcedure = "/dnd5e.api.v1alpha1.CharacterService/ListCharacters"
	// CharacterServiceDeleteCharacterProcedure is the fully-qualified name of the CharacterService's
	// DeleteCharacter RPC.
	CharacterServiceDeleteCharacterProcedure = "/dnd5e.api.v1alpha1.CharacterService/DeleteCharacter"
	// CharacterServiceListRacesProcedure is the fully-qualified name of the CharacterService's
	// ListRaces RPC.
	CharacterServiceListRacesProcedure = "/dnd5e.api.v1alpha1.CharacterService/ListRaces"
	// CharacterServiceListClassesProcedure is the fully-qualified name of the CharacterService's
	// ListClasses RPC.
	CharacterServiceListClassesProcedure = "/dnd5e.api.v1alpha1.CharacterService/ListClasses"
	// CharacterServiceListBackgroundsProcedure is the fully-qualified name of the CharacterService's
	// ListBackgrounds RPC.
	CharacterServiceListBackgroundsProcedure = "/dnd5e.api.v1alpha1.CharacterService/ListBackgrounds"
	// CharacterServiceGetRaceDetailsProcedure is the fully-qualified name of the CharacterService's
	// GetRaceDetails RPC.
	CharacterServiceGetRaceDetailsProcedure = "/dnd5e.api.v1alpha1.CharacterService/GetRaceDetails"
	// CharacterServiceGetClassDetailsProcedure is the fully-qualified name of the CharacterService's
	// GetClassDetails RPC.
	CharacterServiceGetClassDetailsProcedure = "/dnd5e.api.v1alpha1.CharacterService/GetClassDetails"
	// CharacterServiceGetBackgroundDetailsProcedure is the fully-qualified name of the
	// CharacterService's GetBackgroundDetails RPC.
	CharacterServiceGetBackgroundDetailsProcedure = "/dnd5e.api.v1alpha1.CharacterService/GetBackgroundDetails"
)

// CharacterServiceClient is a client for the dnd5e.api.v1alpha1.CharacterService service.
type CharacterServiceClient interface {
	// Draft lifecycle
	CreateDraft(context.Context, *connect.Request[v1alpha1.CreateDraftRequest]) (*connect.Response[v1alpha1.CreateDraftResponse], error)
	GetDraft(context.Context, *connect.Request[v1alpha1.GetDraftRequest]) (*connect.Response[v1alpha1.GetDraftResponse], error)
	ListDrafts(context.Context, *connect.Request[v1alpha1.ListDraftsRequest]) (*connect.Response[v1alpha1.ListDraftsResponse], error)
	DeleteDraft(context.Context, *connect.Request[v1alpha1.DeleteDraftRequest]) (*connect.Response[v1alpha1.DeleteDraftResponse], error)
	// Section-based updates (supports skip-around editing)
	UpdateName(context.Context, *connect.Request[v1alpha1.UpdateNameRequest]) (*connect.Response[v1alpha1.UpdateNameResponse], error)
	UpdateRace(context.Context, *connect.Request[v1alpha1.UpdateRaceRequest]) (*connect.Response[v1alpha1.UpdateRaceResponse], error)
	UpdateClass(context.Context, *connect.Request[v1alpha1.UpdateClassRequest]) (*connect.Response[v1alpha1.UpdateClassResponse], error)
	UpdateBackground(context.Context, *connect.Request[v1alpha1.UpdateBackgroundRequest]) (*connect.Response[v1alpha1.UpdateBackgroundResponse], error)
	UpdateAbilityScores(context.Context, *connect.Request[v1alpha1.UpdateAbilityScoresRequest]) (*connect.Response[v1alpha1.UpdateAbilityScoresResponse], error)
	UpdateSkills(context.Context, *connect.Request[v1alpha1.UpdateSkillsRequest]) (*connect.Response[v1alpha1.UpdateSkillsResponse], error)
	// Validation
	ValidateDraft(context.Context, *connect.Request[v1alpha1.ValidateDraftRequest]) (*connect.Response[v1alpha1.ValidateDraftResponse], error)
	// Character finalization
	FinalizeDraft(context.Context, *connect.Request[v1alpha1.FinalizeDraftRequest]) (*connect.Response[v1alpha1.FinalizeDraftResponse], error)
	// Completed character operations
	GetCharacter(context.Context, *connect.Request[v1alpha1.GetCharacterRequest]) (*connect.Response[v1alpha1.GetCharacterResponse], error)
	ListCharacters(context.Context, *connect.Request[v1alpha1.ListCharactersRequest]) (*connect.Response[v1alpha1.ListCharactersResponse], error)
	DeleteCharacter(context.Context, *connect.Request[v1alpha1.DeleteCharacterRequest]) (*connect.Response[v1alpha1.DeleteCharacterResponse], error)
	// Data loading for character creation UI
	ListRaces(context.Context, *connect.Request[v1alpha1.ListRacesRequest]) (*connect.Response[v1alpha1.ListRacesResponse], error)
	ListClasses(context.Context, *connect.Request[v1alpha1.ListClassesRequest]) (*connect.Response[v1alpha1.ListClassesResponse], error)
	ListBackgrounds(context.Context, *connect.Request[v1alpha1.ListBackgroundsRequest]) (*connect.Response[v1alpha1.ListBackgroundsResponse], error)
	GetRaceDetails(context.Context, *connect.Request[v1alpha1.GetRaceDetailsRequest]) (*connect.Response[v1alpha1.GetRaceDetailsResponse], error)
	GetClassDetails(context.Context, *connect.Request[v1alpha1.GetClassDetailsRequest]) (*connect.Response[v1alpha1.GetClassDetailsResponse], error)
	GetBackgroundDetails(context.Context, *connect.Request[v1alpha1.GetBackgroundDetailsRequest]) (*connect.Response[v1alpha1.GetBackgroundDetailsResponse], error)
}

// NewCharacterServiceClient constructs a client for the dnd5e.api.v1alpha1.CharacterService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCharacterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CharacterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	characterServiceMethods := v1alpha1.File_dnd5e_api_v1alpha1_character_proto.Services().ByName("CharacterService").Methods()
	return &characterServiceClient{
		createDraft: connect.NewClient[v1alpha1.CreateDraftRequest, v1alpha1.CreateDraftResponse](
			httpClient,
			baseURL+CharacterServiceCreateDraftProcedure,
			connect.WithSchema(characterServiceMethods.ByName("CreateDraft")),
			connect.WithClientOptions(opts...),
		),
		getDraft: connect.NewClient[v1alpha1.GetDraftRequest, v1alpha1.GetDraftResponse](
			httpClient,
			baseURL+CharacterServiceGetDraftProcedure,
			connect.WithSchema(characterServiceMethods.ByName("GetDraft")),
			connect.WithClientOptions(opts...),
		),
		listDrafts: connect.NewClient[v1alpha1.ListDraftsRequest, v1alpha1.ListDraftsResponse](
			httpClient,
			baseURL+CharacterServiceListDraftsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ListDrafts")),
			connect.WithClientOptions(opts...),
		),
		deleteDraft: connect.NewClient[v1alpha1.DeleteDraftRequest, v1alpha1.DeleteDraftResponse](
			httpClient,
			baseURL+CharacterServiceDeleteDraftProcedure,
			connect.WithSchema(characterServiceMethods.ByName("DeleteDraft")),
			connect.WithClientOptions(opts...),
		),
		updateName: connect.NewClient[v1alpha1.UpdateNameRequest, v1alpha1.UpdateNameResponse](
			httpClient,
			baseURL+CharacterServiceUpdateNameProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateName")),
			connect.WithClientOptions(opts...),
		),
		updateRace: connect.NewClient[v1alpha1.UpdateRaceRequest, v1alpha1.UpdateRaceResponse](
			httpClient,
			baseURL+CharacterServiceUpdateRaceProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateRace")),
			connect.WithClientOptions(opts...),
		),
		updateClass: connect.NewClient[v1alpha1.UpdateClassRequest, v1alpha1.UpdateClassResponse](
			httpClient,
			baseURL+CharacterServiceUpdateClassProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateClass")),
			connect.WithClientOptions(opts...),
		),
		updateBackground: connect.NewClient[v1alpha1.UpdateBackgroundRequest, v1alpha1.UpdateBackgroundResponse](
			httpClient,
			baseURL+CharacterServiceUpdateBackgroundProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateBackground")),
			connect.WithClientOptions(opts...),
		),
		updateAbilityScores: connect.NewClient[v1alpha1.UpdateAbilityScoresRequest, v1alpha1.UpdateAbilityScoresResponse](
			httpClient,
			baseURL+CharacterServiceUpdateAbilityScoresProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateAbilityScores")),
			connect.WithClientOptions(opts...),
		),
		updateSkills: connect.NewClient[v1alpha1.UpdateSkillsRequest, v1alpha1.UpdateSkillsResponse](
			httpClient,
			baseURL+CharacterServiceUpdateSkillsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("UpdateSkills")),
			connect.WithClientOptions(opts...),
		),
		validateDraft: connect.NewClient[v1alpha1.ValidateDraftRequest, v1alpha1.ValidateDraftResponse](
			httpClient,
			baseURL+CharacterServiceValidateDraftProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ValidateDraft")),
			connect.WithClientOptions(opts...),
		),
		finalizeDraft: connect.NewClient[v1alpha1.FinalizeDraftRequest, v1alpha1.FinalizeDraftResponse](
			httpClient,
			baseURL+CharacterServiceFinalizeDraftProcedure,
			connect.WithSchema(characterServiceMethods.ByName("FinalizeDraft")),
			connect.WithClientOptions(opts...),
		),
		getCharacter: connect.NewClient[v1alpha1.GetCharacterRequest, v1alpha1.GetCharacterResponse](
			httpClient,
			baseURL+CharacterServiceGetCharacterProcedure,
			connect.WithSchema(characterServiceMethods.ByName("GetCharacter")),
			connect.WithClientOptions(opts...),
		),
		listCharacters: connect.NewClient[v1alpha1.ListCharactersRequest, v1alpha1.ListCharactersResponse](
			httpClient,
			baseURL+CharacterServiceListCharactersProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ListCharacters")),
			connect.WithClientOptions(opts...),
		),
		deleteCharacter: connect.NewClient[v1alpha1.DeleteCharacterRequest, v1alpha1.DeleteCharacterResponse](
			httpClient,
			baseURL+CharacterServiceDeleteCharacterProcedure,
			connect.WithSchema(characterServiceMethods.ByName("DeleteCharacter")),
			connect.WithClientOptions(opts...),
		),
		listRaces: connect.NewClient[v1alpha1.ListRacesRequest, v1alpha1.ListRacesResponse](
			httpClient,
			baseURL+CharacterServiceListRacesProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ListRaces")),
			connect.WithClientOptions(opts...),
		),
		listClasses: connect.NewClient[v1alpha1.ListClassesRequest, v1alpha1.ListClassesResponse](
			httpClient,
			baseURL+CharacterServiceListClassesProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ListClasses")),
			connect.WithClientOptions(opts...),
		),
		listBackgrounds: connect.NewClient[v1alpha1.ListBackgroundsRequest, v1alpha1.ListBackgroundsResponse](
			httpClient,
			baseURL+CharacterServiceListBackgroundsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("ListBackgrounds")),
			connect.WithClientOptions(opts...),
		),
		getRaceDetails: connect.NewClient[v1alpha1.GetRaceDetailsRequest, v1alpha1.GetRaceDetailsResponse](
			httpClient,
			baseURL+CharacterServiceGetRaceDetailsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("GetRaceDetails")),
			connect.WithClientOptions(opts...),
		),
		getClassDetails: connect.NewClient[v1alpha1.GetClassDetailsRequest, v1alpha1.GetClassDetailsResponse](
			httpClient,
			baseURL+CharacterServiceGetClassDetailsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("GetClassDetails")),
			connect.WithClientOptions(opts...),
		),
		getBackgroundDetails: connect.NewClient[v1alpha1.GetBackgroundDetailsRequest, v1alpha1.GetBackgroundDetailsResponse](
			httpClient,
			baseURL+CharacterServiceGetBackgroundDetailsProcedure,
			connect.WithSchema(characterServiceMethods.ByName("GetBackgroundDetails")),
			connect.WithClientOptions(opts...),
		),
	}
}

// characterServiceClient implements CharacterServiceClient.
type characterServiceClient struct {
	createDraft          *connect.Client[v1alpha1.CreateDraftRequest, v1alpha1.CreateDraftResponse]
	getDraft             *connect.Client[v1alpha1.GetDraftRequest, v1alpha1.GetDraftResponse]
	listDrafts           *connect.Client[v1alpha1.ListDraftsRequest, v1alpha1.ListDraftsResponse]
	deleteDraft          *connect.Client[v1alpha1.DeleteDraftRequest, v1alpha1.DeleteDraftResponse]
	updateName           *connect.Client[v1alpha1.UpdateNameRequest, v1alpha1.UpdateNameResponse]
	updateRace           *connect.Client[v1alpha1.UpdateRaceRequest, v1alpha1.UpdateRaceResponse]
	updateClass          *connect.Client[v1alpha1.UpdateClassRequest, v1alpha1.UpdateClassResponse]
	updateBackground     *connect.Client[v1alpha1.UpdateBackgroundRequest, v1alpha1.UpdateBackgroundResponse]
	updateAbilityScores  *connect.Client[v1alpha1.UpdateAbilityScoresRequest, v1alpha1.UpdateAbilityScoresResponse]
	updateSkills         *connect.Client[v1alpha1.UpdateSkillsRequest, v1alpha1.UpdateSkillsResponse]
	validateDraft        *connect.Client[v1alpha1.ValidateDraftRequest, v1alpha1.ValidateDraftResponse]
	finalizeDraft        *connect.Client[v1alpha1.FinalizeDraftRequest, v1alpha1.FinalizeDraftResponse]
	getCharacter         *connect.Client[v1alpha1.GetCharacterRequest, v1alpha1.GetCharacterResponse]
	listCharacters       *connect.Client[v1alpha1.ListCharactersRequest, v1alpha1.ListCharactersResponse]
	deleteCharacter      *connect.Client[v1alpha1.DeleteCharacterRequest, v1alpha1.DeleteCharacterResponse]
	listRaces            *connect.Client[v1alpha1.ListRacesRequest, v1alpha1.ListRacesResponse]
	listClasses          *connect.Client[v1alpha1.ListClassesRequest, v1alpha1.ListClassesResponse]
	listBackgrounds      *connect.Client[v1alpha1.ListBackgroundsRequest, v1alpha1.ListBackgroundsResponse]
	getRaceDetails       *connect.Client[v1alpha1.GetRaceDetailsRequest, v1alpha1.GetRaceDetailsResponse]
	getClassDetails      *connect.Client[v1alpha1.GetClassDetailsRequest, v1alpha1.GetClassDetailsResponse]
	getBackgroundDetails *connect.Client[v1alpha1.GetBackgroundDetailsRequest, v1alpha1.GetBackgroundDetailsResponse]
}

// CreateDraft calls dnd5e.api.v1alpha1.CharacterService.CreateDraft.
func (c *characterServiceClient) CreateDraft(ctx context.Context, req *connect.Request[v1alpha1.CreateDraftRequest]) (*connect.Response[v1alpha1.CreateDraftResponse], error) {
	return c.createDraft.CallUnary(ctx, req)
}

// GetDraft calls dnd5e.api.v1alpha1.CharacterService.GetDraft.
func (c *characterServiceClient) GetDraft(ctx context.Context, req *connect.Request[v1alpha1.GetDraftRequest]) (*connect.Response[v1alpha1.GetDraftResponse], error) {
	return c.getDraft.CallUnary(ctx, req)
}

// ListDrafts calls dnd5e.api.v1alpha1.CharacterService.ListDrafts.
func (c *characterServiceClient) ListDrafts(ctx context.Context, req *connect.Request[v1alpha1.ListDraftsRequest]) (*connect.Response[v1alpha1.ListDraftsResponse], error) {
	return c.listDrafts.CallUnary(ctx, req)
}

// DeleteDraft calls dnd5e.api.v1alpha1.CharacterService.DeleteDraft.
func (c *characterServiceClient) DeleteDraft(ctx context.Context, req *connect.Request[v1alpha1.DeleteDraftRequest]) (*connect.Response[v1alpha1.DeleteDraftResponse], error) {
	return c.deleteDraft.CallUnary(ctx, req)
}

// UpdateName calls dnd5e.api.v1alpha1.CharacterService.UpdateName.
func (c *characterServiceClient) UpdateName(ctx context.Context, req *connect.Request[v1alpha1.UpdateNameRequest]) (*connect.Response[v1alpha1.UpdateNameResponse], error) {
	return c.updateName.CallUnary(ctx, req)
}

// UpdateRace calls dnd5e.api.v1alpha1.CharacterService.UpdateRace.
func (c *characterServiceClient) UpdateRace(ctx context.Context, req *connect.Request[v1alpha1.UpdateRaceRequest]) (*connect.Response[v1alpha1.UpdateRaceResponse], error) {
	return c.updateRace.CallUnary(ctx, req)
}

// UpdateClass calls dnd5e.api.v1alpha1.CharacterService.UpdateClass.
func (c *characterServiceClient) UpdateClass(ctx context.Context, req *connect.Request[v1alpha1.UpdateClassRequest]) (*connect.Response[v1alpha1.UpdateClassResponse], error) {
	return c.updateClass.CallUnary(ctx, req)
}

// UpdateBackground calls dnd5e.api.v1alpha1.CharacterService.UpdateBackground.
func (c *characterServiceClient) UpdateBackground(ctx context.Context, req *connect.Request[v1alpha1.UpdateBackgroundRequest]) (*connect.Response[v1alpha1.UpdateBackgroundResponse], error) {
	return c.updateBackground.CallUnary(ctx, req)
}

// UpdateAbilityScores calls dnd5e.api.v1alpha1.CharacterService.UpdateAbilityScores.
func (c *characterServiceClient) UpdateAbilityScores(ctx context.Context, req *connect.Request[v1alpha1.UpdateAbilityScoresRequest]) (*connect.Response[v1alpha1.UpdateAbilityScoresResponse], error) {
	return c.updateAbilityScores.CallUnary(ctx, req)
}

// UpdateSkills calls dnd5e.api.v1alpha1.CharacterService.UpdateSkills.
func (c *characterServiceClient) UpdateSkills(ctx context.Context, req *connect.Request[v1alpha1.UpdateSkillsRequest]) (*connect.Response[v1alpha1.UpdateSkillsResponse], error) {
	return c.updateSkills.CallUnary(ctx, req)
}

// ValidateDraft calls dnd5e.api.v1alpha1.CharacterService.ValidateDraft.
func (c *characterServiceClient) ValidateDraft(ctx context.Context, req *connect.Request[v1alpha1.ValidateDraftRequest]) (*connect.Response[v1alpha1.ValidateDraftResponse], error) {
	return c.validateDraft.CallUnary(ctx, req)
}

// FinalizeDraft calls dnd5e.api.v1alpha1.CharacterService.FinalizeDraft.
func (c *characterServiceClient) FinalizeDraft(ctx context.Context, req *connect.Request[v1alpha1.FinalizeDraftRequest]) (*connect.Response[v1alpha1.FinalizeDraftResponse], error) {
	return c.finalizeDraft.CallUnary(ctx, req)
}

// GetCharacter calls dnd5e.api.v1alpha1.CharacterService.GetCharacter.
func (c *characterServiceClient) GetCharacter(ctx context.Context, req *connect.Request[v1alpha1.GetCharacterRequest]) (*connect.Response[v1alpha1.GetCharacterResponse], error) {
	return c.getCharacter.CallUnary(ctx, req)
}

// ListCharacters calls dnd5e.api.v1alpha1.CharacterService.ListCharacters.
func (c *characterServiceClient) ListCharacters(ctx context.Context, req *connect.Request[v1alpha1.ListCharactersRequest]) (*connect.Response[v1alpha1.ListCharactersResponse], error) {
	return c.listCharacters.CallUnary(ctx, req)
}

// DeleteCharacter calls dnd5e.api.v1alpha1.CharacterService.DeleteCharacter.
func (c *characterServiceClient) DeleteCharacter(ctx context.Context, req *connect.Request[v1alpha1.DeleteCharacterRequest]) (*connect.Response[v1alpha1.DeleteCharacterResponse], error) {
	return c.deleteCharacter.CallUnary(ctx, req)
}

// ListRaces calls dnd5e.api.v1alpha1.CharacterService.ListRaces.
func (c *characterServiceClient) ListRaces(ctx context.Context, req *connect.Request[v1alpha1.ListRacesRequest]) (*connect.Response[v1alpha1.ListRacesResponse], error) {
	return c.listRaces.CallUnary(ctx, req)
}

// ListClasses calls dnd5e.api.v1alpha1.CharacterService.ListClasses.
func (c *characterServiceClient) ListClasses(ctx context.Context, req *connect.Request[v1alpha1.ListClassesRequest]) (*connect.Response[v1alpha1.ListClassesResponse], error) {
	return c.listClasses.CallUnary(ctx, req)
}

// ListBackgrounds calls dnd5e.api.v1alpha1.CharacterService.ListBackgrounds.
func (c *characterServiceClient) ListBackgrounds(ctx context.Context, req *connect.Request[v1alpha1.ListBackgroundsRequest]) (*connect.Response[v1alpha1.ListBackgroundsResponse], error) {
	return c.listBackgrounds.CallUnary(ctx, req)
}

// GetRaceDetails calls dnd5e.api.v1alpha1.CharacterService.GetRaceDetails.
func (c *characterServiceClient) GetRaceDetails(ctx context.Context, req *connect.Request[v1alpha1.GetRaceDetailsRequest]) (*connect.Response[v1alpha1.GetRaceDetailsResponse], error) {
	return c.getRaceDetails.CallUnary(ctx, req)
}

// GetClassDetails calls dnd5e.api.v1alpha1.CharacterService.GetClassDetails.
func (c *characterServiceClient) GetClassDetails(ctx context.Context, req *connect.Request[v1alpha1.GetClassDetailsRequest]) (*connect.Response[v1alpha1.GetClassDetailsResponse], error) {
	return c.getClassDetails.CallUnary(ctx, req)
}

// GetBackgroundDetails calls dnd5e.api.v1alpha1.CharacterService.GetBackgroundDetails.
func (c *characterServiceClient) GetBackgroundDetails(ctx context.Context, req *connect.Request[v1alpha1.GetBackgroundDetailsRequest]) (*connect.Response[v1alpha1.GetBackgroundDetailsResponse], error) {
	return c.getBackgroundDetails.CallUnary(ctx, req)
}

// CharacterServiceHandler is an implementation of the dnd5e.api.v1alpha1.CharacterService service.
type CharacterServiceHandler interface {
	// Draft lifecycle
	CreateDraft(context.Context, *connect.Request[v1alpha1.CreateDraftRequest]) (*connect.Response[v1alpha1.CreateDraftResponse], error)
	GetDraft(context.Context, *connect.Request[v1alpha1.GetDraftRequest]) (*connect.Response[v1alpha1.GetDraftResponse], error)
	ListDrafts(context.Context, *connect.Request[v1alpha1.ListDraftsRequest]) (*connect.Response[v1alpha1.ListDraftsResponse], error)
	DeleteDraft(context.Context, *connect.Request[v1alpha1.DeleteDraftRequest]) (*connect.Response[v1alpha1.DeleteDraftResponse], error)
	// Section-based updates (supports skip-around editing)
	UpdateName(context.Context, *connect.Request[v1alpha1.UpdateNameRequest]) (*connect.Response[v1alpha1.UpdateNameResponse], error)
	UpdateRace(context.Context, *connect.Request[v1alpha1.UpdateRaceRequest]) (*connect.Response[v1alpha1.UpdateRaceResponse], error)
	UpdateClass(context.Context, *connect.Request[v1alpha1.UpdateClassRequest]) (*connect.Response[v1alpha1.UpdateClassResponse], error)
	UpdateBackground(context.Context, *connect.Request[v1alpha1.UpdateBackgroundRequest]) (*connect.Response[v1alpha1.UpdateBackgroundResponse], error)
	UpdateAbilityScores(context.Context, *connect.Request[v1alpha1.UpdateAbilityScoresRequest]) (*connect.Response[v1alpha1.UpdateAbilityScoresResponse], error)
	UpdateSkills(context.Context, *connect.Request[v1alpha1.UpdateSkillsRequest]) (*connect.Response[v1alpha1.UpdateSkillsResponse], error)
	// Validation
	ValidateDraft(context.Context, *connect.Request[v1alpha1.ValidateDraftRequest]) (*connect.Response[v1alpha1.ValidateDraftResponse], error)
	// Character finalization
	FinalizeDraft(context.Context, *connect.Request[v1alpha1.FinalizeDraftRequest]) (*connect.Response[v1alpha1.FinalizeDraftResponse], error)
	// Completed character operations
	GetCharacter(context.Context, *connect.Request[v1alpha1.GetCharacterRequest]) (*connect.Response[v1alpha1.GetCharacterResponse], error)
	ListCharacters(context.Context, *connect.Request[v1alpha1.ListCharactersRequest]) (*connect.Response[v1alpha1.ListCharactersResponse], error)
	DeleteCharacter(context.Context, *connect.Request[v1alpha1.DeleteCharacterRequest]) (*connect.Response[v1alpha1.DeleteCharacterResponse], error)
	// Data loading for character creation UI
	ListRaces(context.Context, *connect.Request[v1alpha1.ListRacesRequest]) (*connect.Response[v1alpha1.ListRacesResponse], error)
	ListClasses(context.Context, *connect.Request[v1alpha1.ListClassesRequest]) (*connect.Response[v1alpha1.ListClassesResponse], error)
	ListBackgrounds(context.Context, *connect.Request[v1alpha1.ListBackgroundsRequest]) (*connect.Response[v1alpha1.ListBackgroundsResponse], error)
	GetRaceDetails(context.Context, *connect.Request[v1alpha1.GetRaceDetailsRequest]) (*connect.Response[v1alpha1.GetRaceDetailsResponse], error)
	GetClassDetails(context.Context, *connect.Request[v1alpha1.GetClassDetailsRequest]) (*connect.Response[v1alpha1.GetClassDetailsResponse], error)
	GetBackgroundDetails(context.Context, *connect.Request[v1alpha1.GetBackgroundDetailsRequest]) (*connect.Response[v1alpha1.GetBackgroundDetailsResponse], error)
}

// NewCharacterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCharacterServiceHandler(svc CharacterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	characterServiceMethods := v1alpha1.File_dnd5e_api_v1alpha1_character_proto.Services().ByName("CharacterService").Methods()
	characterServiceCreateDraftHandler := connect.NewUnaryHandler(
		CharacterServiceCreateDraftProcedure,
		svc.CreateDraft,
		connect.WithSchema(characterServiceMethods.ByName("CreateDraft")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceGetDraftHandler := connect.NewUnaryHandler(
		CharacterServiceGetDraftProcedure,
		svc.GetDraft,
		connect.WithSchema(characterServiceMethods.ByName("GetDraft")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceListDraftsHandler := connect.NewUnaryHandler(
		CharacterServiceListDraftsProcedure,
		svc.ListDrafts,
		connect.WithSchema(characterServiceMethods.ByName("ListDrafts")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceDeleteDraftHandler := connect.NewUnaryHandler(
		CharacterServiceDeleteDraftProcedure,
		svc.DeleteDraft,
		connect.WithSchema(characterServiceMethods.ByName("DeleteDraft")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateNameHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateNameProcedure,
		svc.UpdateName,
		connect.WithSchema(characterServiceMethods.ByName("UpdateName")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateRaceHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateRaceProcedure,
		svc.UpdateRace,
		connect.WithSchema(characterServiceMethods.ByName("UpdateRace")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateClassHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateClassProcedure,
		svc.UpdateClass,
		connect.WithSchema(characterServiceMethods.ByName("UpdateClass")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateBackgroundHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateBackgroundProcedure,
		svc.UpdateBackground,
		connect.WithSchema(characterServiceMethods.ByName("UpdateBackground")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateAbilityScoresHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateAbilityScoresProcedure,
		svc.UpdateAbilityScores,
		connect.WithSchema(characterServiceMethods.ByName("UpdateAbilityScores")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceUpdateSkillsHandler := connect.NewUnaryHandler(
		CharacterServiceUpdateSkillsProcedure,
		svc.UpdateSkills,
		connect.WithSchema(characterServiceMethods.ByName("UpdateSkills")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceValidateDraftHandler := connect.NewUnaryHandler(
		CharacterServiceValidateDraftProcedure,
		svc.ValidateDraft,
		connect.WithSchema(characterServiceMethods.ByName("ValidateDraft")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceFinalizeDraftHandler := connect.NewUnaryHandler(
		CharacterServiceFinalizeDraftProcedure,
		svc.FinalizeDraft,
		connect.WithSchema(characterServiceMethods.ByName("FinalizeDraft")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceGetCharacterHandler := connect.NewUnaryHandler(
		CharacterServiceGetCharacterProcedure,
		svc.GetCharacter,
		connect.WithSchema(characterServiceMethods.ByName("GetCharacter")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceListCharactersHandler := connect.NewUnaryHandler(
		CharacterServiceListCharactersProcedure,
		svc.ListCharacters,
		connect.WithSchema(characterServiceMethods.ByName("ListCharacters")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceDeleteCharacterHandler := connect.NewUnaryHandler(
		CharacterServiceDeleteCharacterProcedure,
		svc.DeleteCharacter,
		connect.WithSchema(characterServiceMethods.ByName("DeleteCharacter")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceListRacesHandler := connect.NewUnaryHandler(
		CharacterServiceListRacesProcedure,
		svc.ListRaces,
		connect.WithSchema(characterServiceMethods.ByName("ListRaces")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceListClassesHandler := connect.NewUnaryHandler(
		CharacterServiceListClassesProcedure,
		svc.ListClasses,
		connect.WithSchema(characterServiceMethods.ByName("ListClasses")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceListBackgroundsHandler := connect.NewUnaryHandler(
		CharacterServiceListBackgroundsProcedure,
		svc.ListBackgrounds,
		connect.WithSchema(characterServiceMethods.ByName("ListBackgrounds")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceGetRaceDetailsHandler := connect.NewUnaryHandler(
		CharacterServiceGetRaceDetailsProcedure,
		svc.GetRaceDetails,
		connect.WithSchema(characterServiceMethods.ByName("GetRaceDetails")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceGetClassDetailsHandler := connect.NewUnaryHandler(
		CharacterServiceGetClassDetailsProcedure,
		svc.GetClassDetails,
		connect.WithSchema(characterServiceMethods.ByName("GetClassDetails")),
		connect.WithHandlerOptions(opts...),
	)
	characterServiceGetBackgroundDetailsHandler := connect.NewUnaryHandler(
		CharacterServiceGetBackgroundDetailsProcedure,
		svc.GetBackgroundDetails,
		connect.WithSchema(characterServiceMethods.ByName("GetBackgroundDetails")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dnd5e.api.v1alpha1.CharacterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CharacterServiceCreateDraftProcedure:
			characterServiceCreateDraftHandler.ServeHTTP(w, r)
		case CharacterServiceGetDraftProcedure:
			characterServiceGetDraftHandler.ServeHTTP(w, r)
		case CharacterServiceListDraftsProcedure:
			characterServiceListDraftsHandler.ServeHTTP(w, r)
		case CharacterServiceDeleteDraftProcedure:
			characterServiceDeleteDraftHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateNameProcedure:
			characterServiceUpdateNameHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateRaceProcedure:
			characterServiceUpdateRaceHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateClassProcedure:
			characterServiceUpdateClassHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateBackgroundProcedure:
			characterServiceUpdateBackgroundHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateAbilityScoresProcedure:
			characterServiceUpdateAbilityScoresHandler.ServeHTTP(w, r)
		case CharacterServiceUpdateSkillsProcedure:
			characterServiceUpdateSkillsHandler.ServeHTTP(w, r)
		case CharacterServiceValidateDraftProcedure:
			characterServiceValidateDraftHandler.ServeHTTP(w, r)
		case CharacterServiceFinalizeDraftProcedure:
			characterServiceFinalizeDraftHandler.ServeHTTP(w, r)
		case CharacterServiceGetCharacterProcedure:
			characterServiceGetCharacterHandler.ServeHTTP(w, r)
		case CharacterServiceListCharactersProcedure:
			characterServiceListCharactersHandler.ServeHTTP(w, r)
		case CharacterServiceDeleteCharacterProcedure:
			characterServiceDeleteCharacterHandler.ServeHTTP(w, r)
		case CharacterServiceListRacesProcedure:
			characterServiceListRacesHandler.ServeHTTP(w, r)
		case CharacterServiceListClassesProcedure:
			characterServiceListClassesHandler.ServeHTTP(w, r)
		case CharacterServiceListBackgroundsProcedure:
			characterServiceListBackgroundsHandler.ServeHTTP(w, r)
		case CharacterServiceGetRaceDetailsProcedure:
			characterServiceGetRaceDetailsHandler.ServeHTTP(w, r)
		case CharacterServiceGetClassDetailsProcedure:
			characterServiceGetClassDetailsHandler.ServeHTTP(w, r)
		case CharacterServiceGetBackgroundDetailsProcedure:
			characterServiceGetBackgroundDetailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCharacterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCharacterServiceHandler struct{}

func (UnimplementedCharacterServiceHandler) CreateDraft(context.Context, *connect.Request[v1alpha1.CreateDraftRequest]) (*connect.Response[v1alpha1.CreateDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.CreateDraft is not implemented"))
}

func (UnimplementedCharacterServiceHandler) GetDraft(context.Context, *connect.Request[v1alpha1.GetDraftRequest]) (*connect.Response[v1alpha1.GetDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.GetDraft is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ListDrafts(context.Context, *connect.Request[v1alpha1.ListDraftsRequest]) (*connect.Response[v1alpha1.ListDraftsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ListDrafts is not implemented"))
}

func (UnimplementedCharacterServiceHandler) DeleteDraft(context.Context, *connect.Request[v1alpha1.DeleteDraftRequest]) (*connect.Response[v1alpha1.DeleteDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.DeleteDraft is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateName(context.Context, *connect.Request[v1alpha1.UpdateNameRequest]) (*connect.Response[v1alpha1.UpdateNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateName is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateRace(context.Context, *connect.Request[v1alpha1.UpdateRaceRequest]) (*connect.Response[v1alpha1.UpdateRaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateRace is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateClass(context.Context, *connect.Request[v1alpha1.UpdateClassRequest]) (*connect.Response[v1alpha1.UpdateClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateClass is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateBackground(context.Context, *connect.Request[v1alpha1.UpdateBackgroundRequest]) (*connect.Response[v1alpha1.UpdateBackgroundResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateBackground is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateAbilityScores(context.Context, *connect.Request[v1alpha1.UpdateAbilityScoresRequest]) (*connect.Response[v1alpha1.UpdateAbilityScoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateAbilityScores is not implemented"))
}

func (UnimplementedCharacterServiceHandler) UpdateSkills(context.Context, *connect.Request[v1alpha1.UpdateSkillsRequest]) (*connect.Response[v1alpha1.UpdateSkillsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.UpdateSkills is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ValidateDraft(context.Context, *connect.Request[v1alpha1.ValidateDraftRequest]) (*connect.Response[v1alpha1.ValidateDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ValidateDraft is not implemented"))
}

func (UnimplementedCharacterServiceHandler) FinalizeDraft(context.Context, *connect.Request[v1alpha1.FinalizeDraftRequest]) (*connect.Response[v1alpha1.FinalizeDraftResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.FinalizeDraft is not implemented"))
}

func (UnimplementedCharacterServiceHandler) GetCharacter(context.Context, *connect.Request[v1alpha1.GetCharacterRequest]) (*connect.Response[v1alpha1.GetCharacterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.GetCharacter is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ListCharacters(context.Context, *connect.Request[v1alpha1.ListCharactersRequest]) (*connect.Response[v1alpha1.ListCharactersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ListCharacters is not implemented"))
}

func (UnimplementedCharacterServiceHandler) DeleteCharacter(context.Context, *connect.Request[v1alpha1.DeleteCharacterRequest]) (*connect.Response[v1alpha1.DeleteCharacterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.DeleteCharacter is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ListRaces(context.Context, *connect.Request[v1alpha1.ListRacesRequest]) (*connect.Response[v1alpha1.ListRacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ListRaces is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ListClasses(context.Context, *connect.Request[v1alpha1.ListClassesRequest]) (*connect.Response[v1alpha1.ListClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ListClasses is not implemented"))
}

func (UnimplementedCharacterServiceHandler) ListBackgrounds(context.Context, *connect.Request[v1alpha1.ListBackgroundsRequest]) (*connect.Response[v1alpha1.ListBackgroundsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.ListBackgrounds is not implemented"))
}

func (UnimplementedCharacterServiceHandler) GetRaceDetails(context.Context, *connect.Request[v1alpha1.GetRaceDetailsRequest]) (*connect.Response[v1alpha1.GetRaceDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.GetRaceDetails is not implemented"))
}

func (UnimplementedCharacterServiceHandler) GetClassDetails(context.Context, *connect.Request[v1alpha1.GetClassDetailsRequest]) (*connect.Response[v1alpha1.GetClassDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.GetClassDetails is not implemented"))
}

func (UnimplementedCharacterServiceHandler) GetBackgroundDetails(context.Context, *connect.Request[v1alpha1.GetBackgroundDetailsRequest]) (*connect.Response[v1alpha1.GetBackgroundDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dnd5e.api.v1alpha1.CharacterService.GetBackgroundDetails is not implemented"))
}
