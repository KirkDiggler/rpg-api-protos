// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/room_environments.proto

#include "api/v1alpha1/room_environments.pb.h"
#include "api/v1alpha1/room_environments.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace api {
namespace v1alpha1 {

static const char* EnvironmentService_method_names[] = {
  "/api.v1alpha1.EnvironmentService/GenerateRoom",
  "/api.v1alpha1.EnvironmentService/GetRoomDetails",
  "/api.v1alpha1.EnvironmentService/ListRooms",
  "/api.v1alpha1.EnvironmentService/UpdateRoom",
  "/api.v1alpha1.EnvironmentService/DeleteRoom",
  "/api.v1alpha1.EnvironmentService/ValidateRoomConfig",
  "/api.v1alpha1.EnvironmentService/ListRoomTemplates",
  "/api.v1alpha1.EnvironmentService/CreateRoomTemplate",
};

std::unique_ptr< EnvironmentService::Stub> EnvironmentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvironmentService::Stub> stub(new EnvironmentService::Stub(channel, options));
  return stub;
}

EnvironmentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenerateRoom_(EnvironmentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoomDetails_(EnvironmentService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRooms_(EnvironmentService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRoom_(EnvironmentService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoom_(EnvironmentService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateRoomConfig_(EnvironmentService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRoomTemplates_(EnvironmentService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRoomTemplate_(EnvironmentService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnvironmentService::Stub::GenerateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateRoomRequest& request, ::api::v1alpha1::GenerateRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GenerateRoomRequest, ::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateRoom_, context, request, response);
}

void EnvironmentService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateRoomRequest* request, ::api::v1alpha1::GenerateRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GenerateRoomRequest, ::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateRoomRequest* request, ::api::v1alpha1::GenerateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateRoomResponse>* EnvironmentService::Stub::PrepareAsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GenerateRoomResponse, ::api::v1alpha1::GenerateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateRoomResponse>* EnvironmentService::Stub::AsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GetRoomDetails(::grpc::ClientContext* context, const ::api::v1alpha1::GetRoomDetailsRequest& request, ::api::v1alpha1::GetRoomDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetRoomDetailsRequest, ::api::v1alpha1::GetRoomDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoomDetails_, context, request, response);
}

void EnvironmentService::Stub::async::GetRoomDetails(::grpc::ClientContext* context, const ::api::v1alpha1::GetRoomDetailsRequest* request, ::api::v1alpha1::GetRoomDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetRoomDetailsRequest, ::api::v1alpha1::GetRoomDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomDetails_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GetRoomDetails(::grpc::ClientContext* context, const ::api::v1alpha1::GetRoomDetailsRequest* request, ::api::v1alpha1::GetRoomDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRoomDetailsResponse>* EnvironmentService::Stub::PrepareAsyncGetRoomDetailsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRoomDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetRoomDetailsResponse, ::api::v1alpha1::GetRoomDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoomDetails_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRoomDetailsResponse>* EnvironmentService::Stub::AsyncGetRoomDetailsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRoomDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::ListRooms(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomsRequest& request, ::api::v1alpha1::ListRoomsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ListRoomsRequest, ::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRooms_, context, request, response);
}

void EnvironmentService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomsRequest* request, ::api::v1alpha1::ListRoomsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ListRoomsRequest, ::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomsRequest* request, ::api::v1alpha1::ListRoomsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListRoomsResponse>* EnvironmentService::Stub::PrepareAsyncListRoomsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ListRoomsResponse, ::api::v1alpha1::ListRoomsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListRoomsResponse>* EnvironmentService::Stub::AsyncListRoomsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::UpdateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateRoomRequest& request, ::api::v1alpha1::UpdateRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::UpdateRoomRequest, ::api::v1alpha1::UpdateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRoom_, context, request, response);
}

void EnvironmentService::Stub::async::UpdateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateRoomRequest* request, ::api::v1alpha1::UpdateRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::UpdateRoomRequest, ::api::v1alpha1::UpdateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRoom_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::UpdateRoom(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateRoomRequest* request, ::api::v1alpha1::UpdateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateRoomResponse>* EnvironmentService::Stub::PrepareAsyncUpdateRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::UpdateRoomResponse, ::api::v1alpha1::UpdateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateRoomResponse>* EnvironmentService::Stub::AsyncUpdateRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::DeleteRoom(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteRoomRequest& request, ::api::v1alpha1::DeleteRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::DeleteRoomRequest, ::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRoom_, context, request, response);
}

void EnvironmentService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteRoomRequest* request, ::api::v1alpha1::DeleteRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::DeleteRoomRequest, ::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteRoomRequest* request, ::api::v1alpha1::DeleteRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::DeleteRoomResponse>* EnvironmentService::Stub::PrepareAsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::DeleteRoomResponse, ::api::v1alpha1::DeleteRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::DeleteRoomResponse>* EnvironmentService::Stub::AsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::ValidateRoomConfig(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest& request, ::api::v1alpha1::ValidateRoomConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ValidateRoomConfigRequest, ::api::v1alpha1::ValidateRoomConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateRoomConfig_, context, request, response);
}

void EnvironmentService::Stub::async::ValidateRoomConfig(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest* request, ::api::v1alpha1::ValidateRoomConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ValidateRoomConfigRequest, ::api::v1alpha1::ValidateRoomConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateRoomConfig_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::ValidateRoomConfig(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest* request, ::api::v1alpha1::ValidateRoomConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateRoomConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateRoomConfigResponse>* EnvironmentService::Stub::PrepareAsyncValidateRoomConfigRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ValidateRoomConfigResponse, ::api::v1alpha1::ValidateRoomConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateRoomConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateRoomConfigResponse>* EnvironmentService::Stub::AsyncValidateRoomConfigRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateRoomConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::ListRoomTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest& request, ::api::v1alpha1::ListRoomTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ListRoomTemplatesRequest, ::api::v1alpha1::ListRoomTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRoomTemplates_, context, request, response);
}

void EnvironmentService::Stub::async::ListRoomTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest* request, ::api::v1alpha1::ListRoomTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ListRoomTemplatesRequest, ::api::v1alpha1::ListRoomTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRoomTemplates_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::ListRoomTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest* request, ::api::v1alpha1::ListRoomTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRoomTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListRoomTemplatesResponse>* EnvironmentService::Stub::PrepareAsyncListRoomTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ListRoomTemplatesResponse, ::api::v1alpha1::ListRoomTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRoomTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListRoomTemplatesResponse>* EnvironmentService::Stub::AsyncListRoomTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRoomTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::CreateRoomTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest& request, ::api::v1alpha1::CreateRoomTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::CreateRoomTemplateRequest, ::api::v1alpha1::CreateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRoomTemplate_, context, request, response);
}

void EnvironmentService::Stub::async::CreateRoomTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest* request, ::api::v1alpha1::CreateRoomTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::CreateRoomTemplateRequest, ::api::v1alpha1::CreateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoomTemplate_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::CreateRoomTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest* request, ::api::v1alpha1::CreateRoomTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoomTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateRoomTemplateResponse>* EnvironmentService::Stub::PrepareAsyncCreateRoomTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::CreateRoomTemplateResponse, ::api::v1alpha1::CreateRoomTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRoomTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateRoomTemplateResponse>* EnvironmentService::Stub::AsyncCreateRoomTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRoomTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnvironmentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::GenerateRoomRequest, ::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GenerateRoomRequest* req,
             ::api::v1alpha1::GenerateRoomResponse* resp) {
               return service->GenerateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::GetRoomDetailsRequest, ::api::v1alpha1::GetRoomDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetRoomDetailsRequest* req,
             ::api::v1alpha1::GetRoomDetailsResponse* resp) {
               return service->GetRoomDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::ListRoomsRequest, ::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ListRoomsRequest* req,
             ::api::v1alpha1::ListRoomsResponse* resp) {
               return service->ListRooms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::UpdateRoomRequest, ::api::v1alpha1::UpdateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::UpdateRoomRequest* req,
             ::api::v1alpha1::UpdateRoomResponse* resp) {
               return service->UpdateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::DeleteRoomRequest, ::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::DeleteRoomRequest* req,
             ::api::v1alpha1::DeleteRoomResponse* resp) {
               return service->DeleteRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::ValidateRoomConfigRequest, ::api::v1alpha1::ValidateRoomConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ValidateRoomConfigRequest* req,
             ::api::v1alpha1::ValidateRoomConfigResponse* resp) {
               return service->ValidateRoomConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::ListRoomTemplatesRequest, ::api::v1alpha1::ListRoomTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ListRoomTemplatesRequest* req,
             ::api::v1alpha1::ListRoomTemplatesResponse* resp) {
               return service->ListRoomTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::api::v1alpha1::CreateRoomTemplateRequest, ::api::v1alpha1::CreateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::CreateRoomTemplateRequest* req,
             ::api::v1alpha1::CreateRoomTemplateResponse* resp) {
               return service->CreateRoomTemplate(ctx, req, resp);
             }, this)));
}

EnvironmentService::Service::~Service() {
}

::grpc::Status EnvironmentService::Service::GenerateRoom(::grpc::ServerContext* context, const ::api::v1alpha1::GenerateRoomRequest* request, ::api::v1alpha1::GenerateRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GetRoomDetails(::grpc::ServerContext* context, const ::api::v1alpha1::GetRoomDetailsRequest* request, ::api::v1alpha1::GetRoomDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::ListRooms(::grpc::ServerContext* context, const ::api::v1alpha1::ListRoomsRequest* request, ::api::v1alpha1::ListRoomsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::UpdateRoom(::grpc::ServerContext* context, const ::api::v1alpha1::UpdateRoomRequest* request, ::api::v1alpha1::UpdateRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::DeleteRoom(::grpc::ServerContext* context, const ::api::v1alpha1::DeleteRoomRequest* request, ::api::v1alpha1::DeleteRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::ValidateRoomConfig(::grpc::ServerContext* context, const ::api::v1alpha1::ValidateRoomConfigRequest* request, ::api::v1alpha1::ValidateRoomConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::ListRoomTemplates(::grpc::ServerContext* context, const ::api::v1alpha1::ListRoomTemplatesRequest* request, ::api::v1alpha1::ListRoomTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::CreateRoomTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::CreateRoomTemplateRequest* request, ::api::v1alpha1::CreateRoomTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

