// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/dice.proto

#include "api/v1alpha1/dice.pb.h"
#include "api/v1alpha1/dice.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace api {
namespace v1alpha1 {

static const char* DiceService_method_names[] = {
  "/api.v1alpha1.DiceService/RollDice",
  "/api.v1alpha1.DiceService/GetRollSession",
  "/api.v1alpha1.DiceService/ClearRollSession",
};

std::unique_ptr< DiceService::Stub> DiceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DiceService::Stub> stub(new DiceService::Stub(channel, options));
  return stub;
}

DiceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RollDice_(DiceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRollSession_(DiceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearRollSession_(DiceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DiceService::Stub::RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::api::v1alpha1::RollDiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollDice_, context, request, response);
}

void DiceService::Stub::async::RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollDice_, context, request, response, std::move(f));
}

void DiceService::Stub::async::RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollDice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>* DiceService::Stub::PrepareAsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::RollDiceResponse, ::api::v1alpha1::RollDiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollDice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>* DiceService::Stub::AsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollDiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiceService::Stub::GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::api::v1alpha1::GetRollSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRollSession_, context, request, response);
}

void DiceService::Stub::async::GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRollSession_, context, request, response, std::move(f));
}

void DiceService::Stub::async::GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRollSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>* DiceService::Stub::PrepareAsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetRollSessionResponse, ::api::v1alpha1::GetRollSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRollSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>* DiceService::Stub::AsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRollSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiceService::Stub::ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::api::v1alpha1::ClearRollSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearRollSession_, context, request, response);
}

void DiceService::Stub::async::ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearRollSession_, context, request, response, std::move(f));
}

void DiceService::Stub::async::ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearRollSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>* DiceService::Stub::PrepareAsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ClearRollSessionResponse, ::api::v1alpha1::ClearRollSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearRollSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>* DiceService::Stub::AsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearRollSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

DiceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::RollDiceRequest* req,
             ::api::v1alpha1::RollDiceResponse* resp) {
               return service->RollDice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetRollSessionRequest* req,
             ::api::v1alpha1::GetRollSessionResponse* resp) {
               return service->GetRollSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ClearRollSessionRequest* req,
             ::api::v1alpha1::ClearRollSessionResponse* resp) {
               return service->ClearRollSession(ctx, req, resp);
             }, this)));
}

DiceService::Service::~Service() {
}

::grpc::Status DiceService::Service::RollDice(::grpc::ServerContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::GetRollSession(::grpc::ServerContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::ClearRollSession(::grpc::ServerContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

