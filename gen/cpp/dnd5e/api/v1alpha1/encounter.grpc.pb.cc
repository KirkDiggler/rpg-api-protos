// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dnd5e/api/v1alpha1/encounter.proto

#include "dnd5e/api/v1alpha1/encounter.pb.h"
#include "dnd5e/api/v1alpha1/encounter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace dnd5e {
namespace api {
namespace v1alpha1 {

static const char* EncounterService_method_names[] = {
  "/dnd5e.api.v1alpha1.EncounterService/DungeonStart",
};

std::unique_ptr< EncounterService::Stub> EncounterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EncounterService::Stub> stub(new EncounterService::Stub(channel, options));
  return stub;
}

EncounterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DungeonStart_(EncounterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EncounterService::Stub::DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DungeonStart_, context, request, response);
}

void EncounterService::Stub::async::DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DungeonStart_, context, request, response, std::move(f));
}

void EncounterService::Stub::async::DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DungeonStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>* EncounterService::Stub::PrepareAsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::DungeonStartResponse, ::dnd5e::api::v1alpha1::DungeonStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DungeonStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>* EncounterService::Stub::AsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDungeonStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

EncounterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncounterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncounterService::Service, ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncounterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::DungeonStartRequest* req,
             ::dnd5e::api::v1alpha1::DungeonStartResponse* resp) {
               return service->DungeonStart(ctx, req, resp);
             }, this)));
}

EncounterService::Service::~Service() {
}

::grpc::Status EncounterService::Service::DungeonStart(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dnd5e
}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

