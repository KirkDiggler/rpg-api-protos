// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/dice.proto
#ifndef GRPC_api_2fv1alpha1_2fdice_2eproto__INCLUDED
#define GRPC_api_2fv1alpha1_2fdice_2eproto__INCLUDED

#include "api/v1alpha1/dice.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace api {
namespace v1alpha1 {

// Generic dice service for all RPG systems
// Provides universal dice mechanics with entity+context grouping
class DiceService final {
 public:
  static constexpr char const* service_full_name() {
    return "api.v1alpha1.DiceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Roll dice and store in a session
    virtual ::grpc::Status RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::api::v1alpha1::RollDiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>> AsyncRollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>>(AsyncRollDiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>> PrepareAsyncRollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>>(PrepareAsyncRollDiceRaw(context, request, cq));
    }
    // Get existing roll session
    virtual ::grpc::Status GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::api::v1alpha1::GetRollSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>> AsyncGetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>>(AsyncGetRollSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>> PrepareAsyncGetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>>(PrepareAsyncGetRollSessionRaw(context, request, cq));
    }
    // Clear a roll session
    virtual ::grpc::Status ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::api::v1alpha1::ClearRollSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>> AsyncClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>>(AsyncClearRollSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>> PrepareAsyncClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>>(PrepareAsyncClearRollSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Roll dice and store in a session
      virtual void RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get existing roll session
      virtual void GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Clear a roll session
      virtual void ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>* AsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::RollDiceResponse>* PrepareAsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>* AsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::GetRollSessionResponse>* PrepareAsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>* AsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::v1alpha1::ClearRollSessionResponse>* PrepareAsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::api::v1alpha1::RollDiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>> AsyncRollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>>(AsyncRollDiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>> PrepareAsyncRollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>>(PrepareAsyncRollDiceRaw(context, request, cq));
    }
    ::grpc::Status GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::api::v1alpha1::GetRollSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>> AsyncGetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>>(AsyncGetRollSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>> PrepareAsyncGetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>>(PrepareAsyncGetRollSessionRaw(context, request, cq));
    }
    ::grpc::Status ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::api::v1alpha1::ClearRollSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>> AsyncClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>>(AsyncClearRollSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>> PrepareAsyncClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>>(PrepareAsyncClearRollSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, std::function<void(::grpc::Status)>) override;
      void RollDice(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearRollSession(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>* AsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollDiceResponse>* PrepareAsyncRollDiceRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollDiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>* AsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetRollSessionResponse>* PrepareAsyncGetRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetRollSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>* AsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ClearRollSessionResponse>* PrepareAsyncClearRollSessionRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ClearRollSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RollDice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRollSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearRollSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Roll dice and store in a session
    virtual ::grpc::Status RollDice(::grpc::ServerContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response);
    // Get existing roll session
    virtual ::grpc::Status GetRollSession(::grpc::ServerContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response);
    // Clear a roll session
    virtual ::grpc::Status ClearRollSession(::grpc::ServerContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RollDice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollDice(::grpc::ServerContext* context, ::api::v1alpha1::RollDiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::RollDiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRollSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRollSession(::grpc::ServerContext* context, ::api::v1alpha1::GetRollSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::GetRollSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearRollSession(::grpc::ServerContext* context, ::api::v1alpha1::ClearRollSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::v1alpha1::ClearRollSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RollDice<WithAsyncMethod_GetRollSession<WithAsyncMethod_ClearRollSession<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RollDice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::RollDiceRequest* request, ::api::v1alpha1::RollDiceResponse* response) { return this->RollDice(context, request, response); }));}
    void SetMessageAllocatorFor_RollDice(
        ::grpc::MessageAllocator< ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollDice(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRollSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::GetRollSessionRequest* request, ::api::v1alpha1::GetRollSessionResponse* response) { return this->GetRollSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetRollSession(
        ::grpc::MessageAllocator< ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRollSession(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::api::v1alpha1::ClearRollSessionRequest* request, ::api::v1alpha1::ClearRollSessionResponse* response) { return this->ClearRollSession(context, request, response); }));}
    void SetMessageAllocatorFor_ClearRollSession(
        ::grpc::MessageAllocator< ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearRollSession(
      ::grpc::CallbackServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RollDice<WithCallbackMethod_GetRollSession<WithCallbackMethod_ClearRollSession<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RollDice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRollSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RollDice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollDice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRollSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRollSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearRollSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RollDice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RollDice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollDice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRollSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRollSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRollSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearRollSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearRollSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RollDice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RollDice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::RollDiceRequest, ::api::v1alpha1::RollDiceResponse>* streamer) {
                       return this->StreamedRollDice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RollDice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RollDice(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::RollDiceRequest* /*request*/, ::api::v1alpha1::RollDiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollDice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::RollDiceRequest,::api::v1alpha1::RollDiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRollSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::GetRollSessionRequest, ::api::v1alpha1::GetRollSessionResponse>* streamer) {
                       return this->StreamedGetRollSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::GetRollSessionRequest* /*request*/, ::api::v1alpha1::GetRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRollSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::GetRollSessionRequest,::api::v1alpha1::GetRollSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearRollSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearRollSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::api::v1alpha1::ClearRollSessionRequest, ::api::v1alpha1::ClearRollSessionResponse>* streamer) {
                       return this->StreamedClearRollSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearRollSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearRollSession(::grpc::ServerContext* /*context*/, const ::api::v1alpha1::ClearRollSessionRequest* /*request*/, ::api::v1alpha1::ClearRollSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearRollSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::v1alpha1::ClearRollSessionRequest,::api::v1alpha1::ClearRollSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RollDice<WithStreamedUnaryMethod_GetRollSession<WithStreamedUnaryMethod_ClearRollSession<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RollDice<WithStreamedUnaryMethod_GetRollSession<WithStreamedUnaryMethod_ClearRollSession<Service > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace api


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_api_2fv1alpha1_2fdice_2eproto__INCLUDED
