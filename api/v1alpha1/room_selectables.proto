syntax = "proto3";

package api.v1alpha1;

import "api/v1alpha1/room_common.proto";

// Selection table service for random generation and content selection
// Handles loot tables, encounter tables, and other random selection systems
service SelectionTableService {
  // Selection table operations
  rpc CreateSelectionTable(CreateSelectionTableRequest) returns (CreateSelectionTableResponse);
  rpc GetSelectionTable(GetSelectionTableRequest) returns (GetSelectionTableResponse);
  rpc UpdateSelectionTable(UpdateSelectionTableRequest) returns (UpdateSelectionTableResponse);
  rpc DeleteSelectionTable(DeleteSelectionTableRequest) returns (DeleteSelectionTableResponse);
  rpc ListSelectionTables(ListSelectionTablesRequest) returns (ListSelectionTablesResponse);

  // Selection operations
  rpc RollOnTable(RollOnTableRequest) returns (RollOnTableResponse);
  rpc RollMultiple(RollMultipleRequest) returns (RollMultipleResponse);
  rpc RollWithModifiers(RollWithModifiersRequest) returns (RollWithModifiersResponse);

  // Batch operations
  rpc BatchRollTables(BatchRollTablesRequest) returns (BatchRollTablesResponse);
  rpc GenerateEncounter(GenerateEncounterRequest) returns (GenerateEncounterResponse);
  rpc GenerateLoot(GenerateLootRequest) returns (GenerateLootResponse);

  // Table management
  rpc ValidateSelectionTable(ValidateSelectionTableRequest) returns (ValidateSelectionTableResponse);
  rpc GetTableStatistics(GetTableStatisticsRequest) returns (GetTableStatisticsResponse);
  rpc ExportSelectionTable(ExportSelectionTableRequest) returns (ExportSelectionTableResponse);
  rpc ImportSelectionTable(ImportSelectionTableRequest) returns (ImportSelectionTableResponse);
}

// Create selection table request
message CreateSelectionTableRequest {
  // Table definition
  SelectionTable table = 1;

  // Whether to make table public
  bool is_public = 2;

  // Validation options
  TableValidationOptions validation_options = 3;
}

// Selection table definition
message SelectionTable {
  // Table identifier
  string id = 1;

  // Table name
  string name = 2;

  // Table description
  string description = 3;

  // Table category
  string category = 4; // "loot", "encounter", "treasure", "random_event"

  // Table type
  SelectionTableType table_type = 5;

  // Dice configuration for rolls
  DiceConfiguration dice_config = 6;

  // Table entries
  repeated TableEntry entries = 7;

  // Table metadata
  SelectionTableMetadata metadata = 8;

  // Nested tables that can be referenced
  repeated string nested_table_ids = 9;

  // Table options
  TableOptions options = 10;
}

// Types of selection tables
enum SelectionTableType {
  SELECTION_TABLE_TYPE_UNSPECIFIED = 0;
  SELECTION_TABLE_TYPE_WEIGHTED = 1; // Weighted random selection
  SELECTION_TABLE_TYPE_DICE_RANGE = 2; // Dice roll ranges (1-10, 11-20, etc.)
  SELECTION_TABLE_TYPE_SEQUENTIAL = 3; // Sequential selection
  SELECTION_TABLE_TYPE_CONDITIONAL = 4; // Conditional based on parameters
  SELECTION_TABLE_TYPE_NESTED = 5; // Contains references to other tables
}

// Dice configuration for table rolls
message DiceConfiguration {
  // Dice notation (e.g., "1d100", "2d6", "1d20")
  string dice_notation = 1;

  // Modifier to add to roll
  int32 modifier = 2;

  // Minimum roll result
  int32 min_roll = 3;

  // Maximum roll result
  int32 max_roll = 4;

  // Whether to reroll on certain results
  repeated int32 reroll_on = 5;

  // Whether to explode dice (roll again on max)
  bool exploding_dice = 6;
}

// Individual table entry
message TableEntry {
  // Entry identifier
  string id = 1;

  // Entry name/title
  string name = 2;

  // Entry description
  string description = 3;

  // Roll range for dice-based tables
  RollRange roll_range = 4;

  // Weight for weighted tables
  double weight = 5;

  // Entry result
  TableEntryResult result = 6;

  // Conditions for conditional tables
  repeated EntryCondition conditions = 7;

  // Whether this entry can appear multiple times
  bool allow_duplicates = 8;

  // Maximum times this entry can be selected
  int32 max_selections = 9;
}

// Roll range for dice-based entries
message RollRange {
  // Minimum roll (inclusive)
  int32 min = 1;

  // Maximum roll (inclusive)
  int32 max = 2;
}

// Result of a table entry selection
message TableEntryResult {
  // Result type
  TableEntryResultType result_type = 1;

  // Result data
  oneof result_data {
    ItemResult item_result = 2;
    EntityResult entity_result = 3;
    NestedTableResult nested_table_result = 4;
    TextResult text_result = 5;
    EffectResult effect_result = 6;
    MultipleResult multiple_result = 7;
  }
}

// Types of table entry results
enum TableEntryResultType {
  TABLE_ENTRY_RESULT_TYPE_UNSPECIFIED = 0;
  TABLE_ENTRY_RESULT_TYPE_ITEM = 1; // Item or loot
  TABLE_ENTRY_RESULT_TYPE_ENTITY = 2; // Monster or NPC
  TABLE_ENTRY_RESULT_TYPE_NESTED_TABLE = 3; // Roll on another table
  TABLE_ENTRY_RESULT_TYPE_TEXT = 4; // Text description/event
  TABLE_ENTRY_RESULT_TYPE_EFFECT = 5; // Game effect or spell
  TABLE_ENTRY_RESULT_TYPE_MULTIPLE = 6; // Multiple results combined
}

// Item result from table
message ItemResult {
  // Item identifier
  string item_id = 1;

  // Item name
  string item_name = 2;

  // Item quantity
  QuantityRange quantity = 3;

  // Item rarity
  string rarity = 4;

  // Item value in gold pieces
  int32 value_gp = 5;

  // Item properties
  map<string, string> properties = 6;

  // Whether item is magical
  bool is_magical = 7;

  // Item condition
  string condition = 8; // "new", "used", "damaged", "broken"
}

// Quantity range for items
message QuantityRange {
  // Minimum quantity
  int32 min = 1;

  // Maximum quantity
  int32 max = 2;

  // Dice notation for quantity (optional)
  string dice_notation = 3;
}

// Entity result from table
message EntityResult {
  // Entity type
  string entity_type = 1;

  // Entity identifier or template
  string entity_id = 2;

  // Entity name
  string entity_name = 3;

  // Number of entities
  QuantityRange quantity = 4;

  // Challenge rating (for monsters)
  double challenge_rating = 5;

  // Entity properties
  map<string, string> properties = 6;

  // Spawn preferences
  EntitySpawnPreferences spawn_preferences = 7;
}

// Spawn preferences for entities from tables
message EntitySpawnPreferences {
  // Preferred spawn locations
  repeated string preferred_locations = 1; // "corner", "center", "edge", "random"

  // Formation for multiple entities
  string formation = 2; // "scattered", "grouped", "line", "circle"

  // Behavior settings
  string behavior = 3; // "hostile", "neutral", "friendly", "patrol"

  // Special instructions
  string special_instructions = 4;
}

// Nested table result
message NestedTableResult {
  // Table to roll on
  string table_id = 1;

  // Number of rolls to make
  int32 roll_count = 2;

  // Modifiers to apply to nested rolls
  repeated RollModifier modifiers = 3;

  // Whether to combine results
  bool combine_results = 4;
}

// Roll modifier for nested tables
message RollModifier {
  // Modifier type
  string modifier_type = 1; // "add", "multiply", "reroll_on", "advantage", "disadvantage"

  // Modifier value
  double value = 2;

  // Condition for when to apply modifier
  string condition = 3;
}

// Text result from table
message TextResult {
  // Result text
  string text = 1;

  // Text category
  string category = 2; // "event", "description", "rumor", "quest_hook"

  // Variables to substitute in text
  map<string, string> variables = 3;

  // Whether text requires further action
  bool requires_action = 4;

  // Action type if required
  string action_type = 5;
}

// Effect result from table
message EffectResult {
  // Effect type
  string effect_type = 1; // "spell", "trap", "environmental", "magical"

  // Effect name
  string effect_name = 2;

  // Effect description
  string description = 3;

  // Effect parameters
  map<string, string> parameters = 4;

  // Effect duration
  string duration = 5;

  // Effect intensity
  double intensity = 6;

  // Area of effect (using spatial service definition)
  string area_of_effect_description = 7;
}

// Multiple results combined
message MultipleResult {
  // Individual results
  repeated TableEntryResult results = 1;

  // How to combine results
  string combination_method = 2; // "all", "choose_one", "weighted_choice"

  // Number to choose if using choice method
  int32 choose_count = 3;
}

// Condition for conditional table entries
message EntryCondition {
  // Condition type
  string condition_type = 1; // "parameter", "roll", "time", "location"

  // Parameter name for parameter conditions
  string parameter_name = 2;

  // Comparison operator
  string operator = 3; // "equals", "greater_than", "less_than", "contains"

  // Expected value
  string expected_value = 4;

  // Whether condition is required or optional
  bool is_required = 5;
}

// Table options and settings
message TableOptions {
  // Allow duplicate results in single roll
  bool allow_duplicates = 1;

  // Maximum results per roll
  int32 max_results_per_roll = 2;

  // Default number of rolls
  int32 default_roll_count = 3;

  // Whether to sort results
  bool sort_results = 4;

  // Sort criteria
  string sort_criteria = 5; // "alphabetical", "value", "rarity", "roll_order"

  // Whether to group similar results
  bool group_similar_results = 6;
}

// Selection table metadata
message SelectionTableMetadata {
  // Table author
  string author = 1;

  // Table version
  string version = 2;

  // Creation timestamp
  int64 created_at = 3;

  // Last update timestamp
  int64 updated_at = 4;

  // Usage statistics
  TableUsageStats usage_stats = 5;

  // Table tags
  repeated string tags = 6;

  // Source material
  string source = 7;

  // Copyright information
  string copyright = 8;

  // Whether table is official content
  bool is_official = 9;
}

// Usage statistics for selection table
message TableUsageStats {
  // Number of times table has been rolled
  int64 roll_count = 1;

  // Total results generated
  int64 results_generated = 2;

  // Most common result
  string most_common_result = 3;

  // Least common result
  string least_common_result = 4;

  // Average rolls per session
  double average_rolls_per_session = 5;

  // Last used timestamp
  int64 last_used = 6;
}

// Table validation options
message TableValidationOptions {
  // Check for roll range gaps
  bool check_range_gaps = 1;

  // Check for overlapping ranges
  bool check_range_overlaps = 2;

  // Validate nested table references
  bool validate_nested_references = 3;

  // Check weight distribution
  bool check_weight_distribution = 4;

  // Validate dice configuration
  bool validate_dice_config = 5;
}

// Create selection table response
message CreateSelectionTableResponse {
  // Created table
  SelectionTable table = 1;

  // Validation results
  ValidationResult validation_result = 2;

  // Creation confirmation
  string message = 3;
}

// Get selection table request
message GetSelectionTableRequest {
  // Table identifier
  string table_id = 1;

  // Whether to include usage statistics
  bool include_statistics = 2;

  // Whether to include entry details
  bool include_entry_details = 3;
}

// Get selection table response
message GetSelectionTableResponse {
  // Requested table
  SelectionTable table = 1;

  // Table statistics (if requested)
  TableStatistics statistics = 2;
}

// Detailed statistics for selection table
message TableStatistics {
  // Basic usage stats
  TableUsageStats usage_stats = 1;

  // Entry selection frequency
  map<string, int64> entry_frequency = 2;

  // Average roll results
  double average_roll = 3;

  // Roll distribution
  map<int32, int64> roll_distribution = 4;

  // Result type breakdown
  map<string, int64> result_type_counts = 5;

  // Performance metrics
  TablePerformanceStats performance_stats = 6;
}

// Performance statistics for table operations
message TablePerformanceStats {
  // Average roll time (milliseconds)
  double average_roll_time_ms = 1;

  // Cache hit ratio
  double cache_hit_ratio = 2;

  // Memory usage
  int64 memory_usage_bytes = 3;

  // Last optimization timestamp
  int64 last_optimized = 4;
}

// Update selection table request
message UpdateSelectionTableRequest {
  // Table identifier
  string table_id = 1;

  // Updated table data
  SelectionTable table = 2;

  // Update options
  TableUpdateOptions update_options = 3;
}

// Options for table updates
message TableUpdateOptions {
  // Whether to preserve usage statistics
  bool preserve_statistics = 1;

  // Whether to validate after update
  bool validate_after_update = 2;

  // Whether to backup old version
  bool create_backup = 3;

  // Update reason
  string update_reason = 4;
}

// Update selection table response
message UpdateSelectionTableResponse {
  // Updated table
  SelectionTable table = 1;

  // Validation results
  ValidationResult validation_result = 2;

  // Update confirmation
  string message = 3;
}

// Delete selection table request
message DeleteSelectionTableRequest {
  // Table identifier
  string table_id = 1;

  // Whether to force deletion even if referenced by other tables
  bool force = 2;
}

// Delete selection table response
message DeleteSelectionTableResponse {
  // Deletion confirmation
  string message = 1;

  // Number of references that were removed
  int32 references_removed = 2;
}

// List selection tables request
message ListSelectionTablesRequest {
  // Table filter
  SelectionTableFilter filter = 1;

  // Pagination
  PageInfo page_info = 2;

  // Sort options
  TableSortOptions sort_options = 3;

  // Whether to include table statistics
  bool include_statistics = 4;
}

// Filter for selection tables
message SelectionTableFilter {
  // Table categories
  repeated string categories = 1;

  // Table types
  repeated SelectionTableType table_types = 2;

  // Author filter
  string author = 3;

  // Search term in name/description
  string search_term = 4;

  // Tags to match
  repeated string tags = 5;

  // Only official content
  bool official_only = 6;

  // Only public tables
  bool public_only = 7;
}

// Sort options for table lists
message TableSortOptions {
  // Field to sort by
  TableSortField sort_by = 1;

  // Sort direction
  TableSortDirection direction = 2;
}

// Sort direction for tables
enum TableSortDirection {
  TABLE_SORT_DIRECTION_UNSPECIFIED = 0;
  TABLE_SORT_DIRECTION_ASC = 1;
  TABLE_SORT_DIRECTION_DESC = 2;
}

// Available sort fields for tables
enum TableSortField {
  TABLE_SORT_FIELD_UNSPECIFIED = 0;
  TABLE_SORT_FIELD_NAME = 1;
  TABLE_SORT_FIELD_CREATED_AT = 2;
  TABLE_SORT_FIELD_UPDATED_AT = 3;
  TABLE_SORT_FIELD_USAGE_COUNT = 4;
  TABLE_SORT_FIELD_CATEGORY = 5;
}

// List selection tables response
message ListSelectionTablesResponse {
  // List of tables
  repeated SelectionTable tables = 1;

  // Pagination information
  PageInfo page_info = 2;

  // List statistics
  TableListStats list_stats = 3;
}

// Statistics for table list
message TableListStats {
  // Total tables matching filter
  int32 total_count = 1;

  // Tables returned in this page
  int32 returned_count = 2;

  // Tables by category breakdown
  map<string, int32> tables_by_category = 3;

  // Tables by type breakdown
  map<string, int32> tables_by_type = 4;

  // Most popular table
  string most_popular_table = 5;
}

// Roll on table request
message RollOnTableRequest {
  // Table to roll on
  string table_id = 1;

  // Number of rolls to make
  int32 roll_count = 2;

  // Roll parameters
  map<string, string> parameters = 3;

  // Roll options
  RollOptions options = 4;
}

// Options for table rolls
message RollOptions {
  // Random seed for reproducible results
  string seed = 1;

  // Roll modifiers
  repeated RollModifier modifiers = 2;

  // Whether to show roll details
  bool show_roll_details = 3;

  // Whether to group similar results
  bool group_similar = 4;

  // Maximum results to return
  int32 max_results = 5;

  // Whether to allow rerolls
  bool allow_rerolls = 6;
}

// Roll on table response
message RollOnTableResponse {
  // Roll results
  repeated RollResult results = 1;

  // Roll statistics
  RollStats roll_stats = 2;

  // Table that was rolled
  string table_id = 3;

  // Roll session information
  RollSession session = 4;
}

// Individual roll result
message RollResult {
  // Result identifier
  string result_id = 1;

  // Table entry that was selected
  TableEntry selected_entry = 2;

  // Actual roll value
  int32 roll_value = 3;

  // Result data
  TableEntryResult result_data = 4;

  // Roll details
  RollDetails roll_details = 5;

  // Whether this result was modified
  bool was_modified = 6;

  // Modification reason
  string modification_reason = 7;
}

// Details about the roll itself
message RollDetails {
  // Dice that were rolled
  repeated int32 dice_values = 1;

  // Modifiers applied
  int32 total_modifier = 2;

  // Raw roll before modifiers
  int32 raw_roll = 3;

  // Final roll after modifiers
  int32 final_roll = 4;

  // Dice notation used
  string dice_notation = 5;

  // Any rerolls that occurred
  repeated int32 rerolls = 6;
}

// Statistics for roll operation
message RollStats {
  // Roll execution time
  int64 roll_time_ms = 1;

  // Number of dice rolled
  int32 dice_rolled = 2;

  // Number of rerolls
  int32 rerolls_made = 3;

  // Average roll value
  double average_roll = 4;

  // Highest roll
  int32 highest_roll = 5;

  // Lowest roll
  int32 lowest_roll = 6;
}

// Roll session information
message RollSession {
  // Session identifier
  string session_id = 1;

  // When session expires
  int64 expires_at = 2;

  // Number of rolls in session
  int32 roll_count = 3;

  // Session parameters
  map<string, string> parameters = 4;
}

// Roll multiple tables request
message RollMultipleRequest {
  // Tables to roll with their configurations
  repeated TableRollConfig table_rolls = 1;

  // Global roll options
  RollOptions global_options = 2;

  // Whether to correlate results between tables
  bool correlate_results = 3;
}

// Configuration for rolling a single table
message TableRollConfig {
  // Table identifier
  string table_id = 1;

  // Number of rolls for this table
  int32 roll_count = 2;

  // Table-specific parameters
  map<string, string> parameters = 3;

  // Table-specific modifiers
  repeated RollModifier modifiers = 4;
}

// Roll multiple tables response
message RollMultipleResponse {
  // Results organized by table
  map<string, TableRollResults> results_by_table = 1;

  // Combined results if correlation requested
  repeated CombinedResult combined_results = 2;

  // Overall roll statistics
  MultiRollStats multi_roll_stats = 3;
}

// Results for a single table in multi-roll
message TableRollResults {
  // Table identifier
  string table_id = 1;

  // Roll results for this table
  repeated RollResult results = 2;

  // Table-specific statistics
  RollStats stats = 3;
}

// Combined result from multiple tables
message CombinedResult {
  // Result identifier
  string result_id = 1;

  // Components from different tables
  repeated ResultComponent components = 2;

  // Combined description
  string description = 3;

  // Total value (if applicable)
  double total_value = 4;
}

// Component of a combined result
message ResultComponent {
  // Source table
  string table_id = 1;

  // Result from that table
  RollResult result = 2;

  // How this component relates to the combined result
  string relationship = 3; // "primary", "modifier", "additional", "flavor"
}

// Statistics for multiple table rolls
message MultiRollStats {
  // Total execution time
  int64 total_time_ms = 1;

  // Number of tables rolled
  int32 tables_rolled = 2;

  // Total results generated
  int32 total_results = 3;

  // Average time per table
  double average_time_per_table_ms = 4;

  // Number of correlations found
  int32 correlations_found = 5;
}

// Roll with modifiers request
message RollWithModifiersRequest {
  // Table to roll on
  string table_id = 1;

  // Roll modifiers to apply
  repeated RollModifier modifiers = 2;

  // Number of rolls
  int32 roll_count = 3;

  // Roll options
  RollOptions options = 4;
}

// Roll with modifiers response
message RollWithModifiersResponse {
  // Modified roll results
  repeated RollResult results = 1;

  // Modifier effects
  repeated ModifierEffect modifier_effects = 2;

  // Roll statistics
  RollStats roll_stats = 3;
}

// Effect of a modifier on rolls
message ModifierEffect {
  // Modifier that was applied
  RollModifier modifier = 1;

  // How many rolls were affected
  int32 rolls_affected = 2;

  // Average change caused by modifier
  double average_change = 3;

  // Description of effect
  string effect_description = 4;
}

// Batch roll tables request
message BatchRollTablesRequest {
  // Batch of roll operations
  repeated BatchRollOperation roll_operations = 1;

  // Batch options
  BatchRollOptions batch_options = 2;
}

// Individual roll operation in batch
message BatchRollOperation {
  // Operation identifier
  string operation_id = 1;

  // Table to roll on
  string table_id = 2;

  // Number of rolls
  int32 roll_count = 3;

  // Operation parameters
  map<string, string> parameters = 4;

  // Operation-specific options
  RollOptions options = 5;
}

// Options for batch roll operations
message BatchRollOptions {
  // Whether to execute operations in parallel
  bool parallel_execution = 1;

  // Maximum execution time for entire batch
  int32 timeout_ms = 2;

  // Whether to abort all if any fail
  bool all_or_nothing = 3;

  // Whether to correlate results across operations
  bool correlate_across_operations = 4;
}

// Batch roll tables response
message BatchRollTablesResponse {
  // Successful roll operations
  repeated BatchRollResult successful_operations = 1;

  // Failed roll operations
  repeated BatchRollFailure failed_operations = 2;

  // Batch statistics
  BatchRollStats batch_stats = 3;

  // Cross-operation correlations (if requested)
  repeated OperationCorrelation correlations = 4;
}

// Result of successful batch roll operation
message BatchRollResult {
  // Operation identifier
  string operation_id = 1;

  // Roll results
  repeated RollResult results = 2;

  // Operation statistics
  RollStats stats = 3;
}

// Failed batch roll operation
message BatchRollFailure {
  // Operation identifier
  string operation_id = 1;

  // Table that failed to roll
  string table_id = 2;

  // Failure reason
  string failure_reason = 3;

  // Error details
  repeated RoomError errors = 4;
}

// Statistics for batch roll operations
message BatchRollStats {
  // Total batch execution time
  int64 total_batch_time_ms = 1;

  // Successful operations
  int32 successful_operations = 2;

  // Failed operations
  int32 failed_operations = 3;

  // Total results generated
  int32 total_results = 4;

  // Average operation time
  double average_operation_time_ms = 5;

  // Whether parallel execution was used
  bool used_parallel_execution = 6;
}

// Correlation between batch operations
message OperationCorrelation {
  // Operations involved in correlation
  repeated string operation_ids = 1;

  // Type of correlation
  string correlation_type = 2; // "complementary", "contradictory", "reinforcing"

  // Correlation strength (0.0-1.0)
  double strength = 3;

  // Description of correlation
  string description = 4;
}

// Generate encounter request
message GenerateEncounterRequest {
  // Room to generate encounter for
  string room_id = 1;

  // Encounter parameters
  EncounterParameters encounter_params = 2;

  // Tables to use for generation
  EncounterTables encounter_tables = 3;

  // Generation options
  EncounterGenerationOptions options = 4;
}

// Parameters for encounter generation
message EncounterParameters {
  // Party level for scaling
  int32 party_level = 1;

  // Number of party members
  int32 party_size = 2;

  // Desired encounter difficulty
  string difficulty = 3; // "easy", "medium", "hard", "deadly"

  // Encounter theme
  string theme = 4; // "combat", "social", "exploration", "mixed"

  // Environment type
  string environment = 5; // "dungeon", "wilderness", "urban", "planar"

  // Special requirements
  repeated string requirements = 6;
}

// Tables used for encounter generation
message EncounterTables {
  // Primary encounter table
  string primary_table_id = 1;

  // Monster/NPC selection table
  string creature_table_id = 2;

  // Treasure/loot table
  string treasure_table_id = 3;

  // Environmental features table
  string environment_table_id = 4;

  // Complication/twist table
  string complication_table_id = 5;
}

// Options for encounter generation
message EncounterGenerationOptions {
  // Random seed for reproducible encounters
  string seed = 1;

  // Whether to include treasure
  bool include_treasure = 2;

  // Whether to add environmental features
  bool add_environmental_features = 3;

  // Whether to include complications
  bool include_complications = 4;

  // Maximum creatures in encounter
  int32 max_creatures = 5;

  // Whether to balance encounter difficulty
  bool balance_difficulty = 6;
}

// Generate encounter response
message GenerateEncounterResponse {
  // Generated encounter
  GeneratedEncounter encounter = 1;

  // Generation statistics
  EncounterGenerationStats generation_stats = 2;

  // Tables used in generation
  repeated string tables_used = 3;
}

// Generated encounter result
message GeneratedEncounter {
  // Encounter identifier
  string encounter_id = 1;

  // Encounter name/title
  string name = 2;

  // Encounter description
  string description = 3;

  // Creatures in encounter
  repeated EncounterCreature creatures = 4;

  // Treasure in encounter
  repeated TreasureItem treasure = 5;

  // Environmental features
  repeated EnvironmentalFeature environmental_features = 6;

  // Complications or twists
  repeated EncounterComplication complications = 7;

  // Encounter difficulty rating
  string difficulty_rating = 8;

  // Estimated challenge rating
  double challenge_rating = 9;
}

// Creature in generated encounter
message EncounterCreature {
  // Creature identifier
  string creature_id = 1;

  // Creature name
  string name = 2;

  // Number of this creature type
  int32 quantity = 3;

  // Challenge rating
  double challenge_rating = 4;

  // Role in encounter
  string role = 5; // "leader", "minion", "elite", "solo"

  // Spawn preferences
  EntitySpawnPreferences spawn_preferences = 6;

  // Special instructions
  string special_instructions = 7;
}

// Treasure item in encounter
message TreasureItem {
  // Item identifier
  string item_id = 1;

  // Item name
  string name = 2;

  // Item quantity
  int32 quantity = 3;

  // Item value
  int32 value_gp = 4;

  // Item rarity
  string rarity = 5;

  // Whether item is magical
  bool is_magical = 6;

  // Item location in encounter
  string location = 7; // "on_creature", "hidden", "obvious", "trapped"
}

// Environmental feature in encounter
message EnvironmentalFeature {
  // Feature identifier
  string feature_id = 1;

  // Feature name
  string name = 2;

  // Feature description
  string description = 3;

  // Feature type
  string feature_type = 4; // "terrain", "hazard", "cover", "interactive"

  // Preferred location
  string preferred_location = 5;

  // Game effects
  repeated string effects = 6;
}

// Complication in encounter
message EncounterComplication {
  // Complication identifier
  string complication_id = 1;

  // Complication name
  string name = 2;

  // Complication description
  string description = 3;

  // When complication triggers
  string trigger = 4; // "start", "mid_combat", "creature_death", "condition"

  // Complication effects
  repeated string effects = 5;
}

// Statistics for encounter generation
message EncounterGenerationStats {
  // Generation time
  int64 generation_time_ms = 1;

  // Number of table rolls made
  int32 table_rolls_made = 2;

  // Number of creatures generated
  int32 creatures_generated = 3;

  // Number of treasure items generated
  int32 treasure_items_generated = 4;

  // Actual difficulty achieved
  string actual_difficulty = 5;

  // Challenge rating calculation
  double calculated_cr = 6;
}

// Generate loot request
message GenerateLootRequest {
  // Loot generation parameters
  LootParameters loot_params = 1;

  // Loot tables to use
  LootTables loot_tables = 2;

  // Generation options
  LootGenerationOptions options = 3;
}

// Parameters for loot generation
message LootParameters {
  // Challenge rating for loot scaling
  double challenge_rating = 1;

  // Party level for loot appropriateness
  int32 party_level = 2;

  // Loot type preference
  string loot_type = 3; // "treasure", "equipment", "consumables", "mixed"

  // Loot rarity preference
  string rarity_preference = 4; // "common", "uncommon", "rare", "very_rare", "legendary"

  // Total value budget (in gold pieces)
  int32 value_budget_gp = 5;

  // Loot source
  string source = 6; // "hoard", "individual", "room", "quest_reward"
}

// Tables used for loot generation
message LootTables {
  // Primary loot table
  string primary_table_id = 1;

  // Magic item table
  string magic_item_table_id = 2;

  // Mundane equipment table
  string equipment_table_id = 3;

  // Consumables table
  string consumables_table_id = 4;

  // Currency/gems table
  string currency_table_id = 5;
}

// Options for loot generation
message LootGenerationOptions {
  // Random seed
  string seed = 1;

  // Whether to include cursed items
  bool include_cursed_items = 2;

  // Whether to vary item conditions
  bool vary_item_conditions = 3;

  // Maximum number of items
  int32 max_items = 4;

  // Whether to bundle similar items
  bool bundle_similar_items = 5;

  // Whether to include item descriptions
  bool include_descriptions = 6;
}

// Generate loot response
message GenerateLootResponse {
  // Generated loot
  GeneratedLoot loot = 1;

  // Generation statistics
  LootGenerationStats generation_stats = 2;

  // Tables used
  repeated string tables_used = 3;
}

// Generated loot result
message GeneratedLoot {
  // Loot identifier
  string loot_id = 1;

  // Loot description
  string description = 2;

  // Individual loot items
  repeated GeneratedLootItem items = 3;

  // Total loot value
  int32 total_value_gp = 4;

  // Loot rarity distribution
  map<string, int32> rarity_distribution = 5;

  // Special notes about the loot
  repeated string special_notes = 6;
}

// Individual loot item
message GeneratedLootItem {
  // Item identifier
  string item_id = 1;

  // Item name
  string name = 2;

  // Item description
  string description = 3;

  // Item quantity
  int32 quantity = 4;

  // Item value per unit
  int32 unit_value_gp = 5;

  // Total value for this stack
  int32 total_value_gp = 6;

  // Item rarity
  string rarity = 7;

  // Item type
  string item_type = 8; // "weapon", "armor", "consumable", "treasure", "currency"

  // Item condition
  string condition = 9;

  // Whether item is magical
  bool is_magical = 10;

  // Whether item is cursed
  bool is_cursed = 11;

  // Item properties
  map<string, string> properties = 12;
}

// Statistics for loot generation
message LootGenerationStats {
  // Generation time
  int64 generation_time_ms = 1;

  // Number of table rolls
  int32 table_rolls_made = 2;

  // Items generated
  int32 items_generated = 3;

  // Value generated vs budget
  int32 value_generated_gp = 4;
  int32 value_budget_gp = 5;

  // Rarity breakdown
  map<string, int32> rarity_counts = 6;
}

// Validate selection table request
message ValidateSelectionTableRequest {
  // Table to validate
  SelectionTable table = 1;

  // Validation options
  TableValidationOptions validation_options = 2;
}

// Validate selection table response
message ValidateSelectionTableResponse {
  // Overall validation result
  ValidationResult validation_result = 1;

  // Detailed validation checks
  repeated TableValidationCheck validation_checks = 2;

  // Validation statistics
  TableValidationStats validation_stats = 3;
}

// Individual table validation check
message TableValidationCheck {
  // Check name
  string check_name = 1;

  // Check result
  TableValidationCheckResult result = 2;

  // Check message
  string message = 3;

  // Severity
  TableValidationSeverity severity = 4;

  // Entry ID if check is entry-specific
  string entry_id = 5;

  // Suggested fix
  string suggested_fix = 6;
}

// Result of a table validation check
enum TableValidationCheckResult {
  TABLE_VALIDATION_CHECK_RESULT_UNSPECIFIED = 0;
  TABLE_VALIDATION_CHECK_RESULT_PASS = 1;
  TABLE_VALIDATION_CHECK_RESULT_FAIL = 2;
  TABLE_VALIDATION_CHECK_RESULT_WARNING = 3;
  TABLE_VALIDATION_CHECK_RESULT_SKIP = 4;
}

// Severity of table validation issues
enum TableValidationSeverity {
  TABLE_VALIDATION_SEVERITY_UNSPECIFIED = 0;
  TABLE_VALIDATION_SEVERITY_INFO = 1;
  TABLE_VALIDATION_SEVERITY_WARNING = 2;
  TABLE_VALIDATION_SEVERITY_ERROR = 3;
  TABLE_VALIDATION_SEVERITY_CRITICAL = 4;
}

// Statistics for table validation
message TableValidationStats {
  // Validation time
  int64 validation_time_ms = 1;

  // Checks performed
  int32 checks_performed = 2;

  // Checks passed
  int32 checks_passed = 3;

  // Checks failed
  int32 checks_failed = 4;

  // Warnings generated
  int32 warnings_generated = 5;
}

// Get table statistics request
message GetTableStatisticsRequest {
  // Table identifier
  string table_id = 1;

  // Time range for statistics
  TableTimeRange time_range = 2;

  // Level of detail
  StatisticsDetail detail_level = 3;
}

// Level of statistical detail
enum StatisticsDetail {
  STATISTICS_DETAIL_UNSPECIFIED = 0;
  STATISTICS_DETAIL_BASIC = 1; // Basic usage stats only
  STATISTICS_DETAIL_DETAILED = 2; // Include distributions and frequency
  STATISTICS_DETAIL_COMPREHENSIVE = 3; // Include all available metrics
}

// Time range for table statistics
message TableTimeRange {
  int64 start_time = 1;
  int64 end_time = 2;
}

// Get table statistics response
message GetTableStatisticsResponse {
  // Table statistics
  TableStatistics statistics = 1;

  // Statistical analysis
  StatisticalAnalysis analysis = 2;
}

// Statistical analysis of table usage
message StatisticalAnalysis {
  // Roll distribution analysis
  RollDistributionAnalysis roll_distribution = 1;

  // Entry selection analysis
  EntrySelectionAnalysis entry_selection = 2;

  // Performance analysis
  PerformanceAnalysis performance = 3;

  // Trends over time
  repeated TrendData trends = 4;
}

// Analysis of roll distribution
message RollDistributionAnalysis {
  // Expected vs actual distribution
  map<int32, double> expected_frequency = 1;
  map<int32, double> actual_frequency = 2;

  // Chi-square test result
  double chi_square_statistic = 3;
  double p_value = 4;

  // Distribution uniformity
  double uniformity_score = 5;

  // Outlier rolls
  repeated int32 outlier_rolls = 6;
}

// Analysis of entry selection patterns
message EntrySelectionAnalysis {
  // Most/least selected entries
  string most_selected_entry = 1;
  string least_selected_entry = 2;

  // Selection bias score
  double selection_bias = 3;

  // Entropy of selections
  double selection_entropy = 4;

  // Clustering of selections
  repeated SelectionCluster clusters = 5;
}

// Cluster of similar selections
message SelectionCluster {
  // Cluster identifier
  string cluster_id = 1;

  // Entries in cluster
  repeated string entry_ids = 2;

  // Cluster frequency
  double frequency = 3;

  // Cluster characteristics
  string characteristics = 4;
}

// Performance analysis
message PerformanceAnalysis {
  // Performance trend
  string performance_trend = 1; // "improving", "stable", "degrading"

  // Bottlenecks identified
  repeated string bottlenecks = 2;

  // Optimization recommendations
  repeated string recommendations = 3;

  // Resource usage patterns
  ResourceUsagePattern resource_usage = 4;
}

// Resource usage pattern
message ResourceUsagePattern {
  // Memory usage trend
  string memory_trend = 1;

  // CPU usage pattern
  string cpu_pattern = 2;

  // Cache effectiveness
  double cache_effectiveness = 3;

  // Peak usage times
  repeated int64 peak_usage_times = 4;
}

// Trend data over time
message TrendData {
  // Trend name
  string trend_name = 1;

  // Time period
  TableTimeRange time_period = 2;

  // Trend direction
  string direction = 3; // "increasing", "decreasing", "stable", "cyclical"

  // Trend strength
  double strength = 4;

  // Data points
  repeated TrendPoint data_points = 5;
}

// Individual trend data point
message TrendPoint {
  // Timestamp
  int64 timestamp = 1;

  // Value at this time
  double value = 2;

  // Context or notes
  string context = 3;
}

// Export selection table request
message ExportSelectionTableRequest {
  // Table identifier
  string table_id = 1;

  // Export format
  ExportFormat format = 2;

  // Export options
  ExportOptions export_options = 3;
}

// Available export formats
enum ExportFormat {
  EXPORT_FORMAT_UNSPECIFIED = 0;
  EXPORT_FORMAT_JSON = 1;
  EXPORT_FORMAT_CSV = 2;
  EXPORT_FORMAT_XML = 3;
  EXPORT_FORMAT_YAML = 4;
  EXPORT_FORMAT_PROTOBUF = 5;
}

// Options for table export
message ExportOptions {
  // Whether to include metadata
  bool include_metadata = 1;

  // Whether to include statistics
  bool include_statistics = 2;

  // Whether to include usage history
  bool include_usage_history = 3;

  // Compression type
  string compression = 4; // "none", "gzip", "zip"

  // Character encoding
  string encoding = 5; // "utf-8", "ascii"
}

// Export selection table response
message ExportSelectionTableResponse {
  // Exported data
  bytes exported_data = 1;

  // Export format used
  ExportFormat format = 2;

  // Export metadata
  ExportMetadata export_metadata = 3;
}

// Metadata about export
message ExportMetadata {
  // Export timestamp
  int64 exported_at = 1;

  // Export size
  int64 size_bytes = 2;

  // Compression ratio (if compressed)
  double compression_ratio = 3;

  // Checksum
  string checksum = 4;

  // Export version
  string export_version = 5;
}

// Import selection table request
message ImportSelectionTableRequest {
  // Data to import
  bytes import_data = 1;

  // Import format
  ExportFormat format = 2;

  // Import options
  ImportOptions import_options = 3;
}

// Options for table import
message ImportOptions {
  // Whether to validate during import
  bool validate_during_import = 1;

  // Whether to overwrite existing table
  bool overwrite_existing = 2;

  // Whether to preserve original IDs
  bool preserve_ids = 3;

  // Whether to update metadata
  bool update_metadata = 4;

  // Import source description
  string source_description = 5;
}

// Import selection table response
message ImportSelectionTableResponse {
  // Imported table
  SelectionTable imported_table = 1;

  // Import result
  ImportResult import_result = 2;

  // Import statistics
  ImportStats import_stats = 3;
}

// Result of import operation
message ImportResult {
  // Whether import was successful
  bool success = 1;

  // Import warnings
  repeated RoomError warnings = 2;

  // Import errors
  repeated RoomError errors = 3;

  // Items imported
  int32 items_imported = 4;

  // Items skipped
  int32 items_skipped = 5;
}

// Statistics for import operation
message ImportStats {
  // Import time
  int64 import_time_ms = 1;

  // Data processed
  int64 data_processed_bytes = 2;

  // Validation time
  int64 validation_time_ms = 3;

  // Processing rate
  double processing_rate_mbps = 4;
}
