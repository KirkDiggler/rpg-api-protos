// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: api/v1alpha1/dice.proto
// Protobuf C++ Version: 6.31.1

#include "api/v1alpha1/dice.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace api {
namespace v1alpha1 {

inline constexpr RollDiceRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        notation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        modifier_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        count_{0},
        ttl_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollDiceRequest::RollDiceRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollDiceRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollDiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollDiceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollDiceRequestDefaultTypeInternal() {}
  union {
    RollDiceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollDiceRequestDefaultTypeInternal _RollDiceRequest_default_instance_;

inline constexpr GetRollSessionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR GetRollSessionRequest::GetRollSessionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GetRollSessionRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetRollSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRollSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRollSessionRequestDefaultTypeInternal() {}
  union {
    GetRollSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRollSessionRequestDefaultTypeInternal _GetRollSessionRequest_default_instance_;

inline constexpr DiceRoll::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dice_{},
        _dice_cached_byte_size_{0},
        dropped_{},
        _dropped_cached_byte_size_{0},
        roll_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        notation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_{0},
        dice_total_{0},
        modifier_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DiceRoll::DiceRoll(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DiceRoll_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DiceRollDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiceRollDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiceRollDefaultTypeInternal() {}
  union {
    DiceRoll _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiceRollDefaultTypeInternal _DiceRoll_default_instance_;

inline constexpr ClearRollSessionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rolls_cleared_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClearRollSessionResponse::ClearRollSessionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ClearRollSessionResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClearRollSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearRollSessionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearRollSessionResponseDefaultTypeInternal() {}
  union {
    ClearRollSessionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearRollSessionResponseDefaultTypeInternal _ClearRollSessionResponse_default_instance_;

inline constexpr ClearRollSessionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ClearRollSessionRequest::ClearRollSessionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ClearRollSessionRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClearRollSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearRollSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearRollSessionRequestDefaultTypeInternal() {}
  union {
    ClearRollSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearRollSessionRequestDefaultTypeInternal _ClearRollSessionRequest_default_instance_;

inline constexpr RollDiceResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rolls_{},
        expires_at_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR RollDiceResponse::RollDiceResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollDiceResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollDiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollDiceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollDiceResponseDefaultTypeInternal() {}
  union {
    RollDiceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollDiceResponseDefaultTypeInternal _RollDiceResponse_default_instance_;

inline constexpr GetRollSessionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rolls_{},
        expires_at_{::int64_t{0}},
        created_at_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR GetRollSessionResponse::GetRollSessionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GetRollSessionResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetRollSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRollSessionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRollSessionResponseDefaultTypeInternal() {}
  union {
    GetRollSessionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRollSessionResponseDefaultTypeInternal _GetRollSessionResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace api
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_api_2fv1alpha1_2fdice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_api_2fv1alpha1_2fdice_2eproto = nullptr;
const ::uint32_t
    TableStruct_api_2fv1alpha1_2fdice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.notation_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.ttl_seconds_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceRequest, _impl_.modifier_description_),
        0,
        1,
        2,
        4,
        5,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceResponse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceResponse, _impl_.rolls_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::RollDiceResponse, _impl_.expires_at_),
        ~0u,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.roll_id_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.notation_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.dice_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.dropped_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.dice_total_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::DiceRoll, _impl_.modifier_),
        0,
        1,
        ~0u,
        3,
        ~0u,
        2,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionRequest, _impl_.context_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionResponse, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionResponse, _impl_.rolls_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionResponse, _impl_.expires_at_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::GetRollSessionResponse, _impl_.created_at_),
        ~0u,
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionRequest, _impl_.context_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionResponse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::api::v1alpha1::ClearRollSessionResponse, _impl_.rolls_cleared_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::api::v1alpha1::RollDiceRequest)},
        {15, sizeof(::api::v1alpha1::RollDiceResponse)},
        {22, sizeof(::api::v1alpha1::DiceRoll)},
        {41, sizeof(::api::v1alpha1::GetRollSessionRequest)},
        {48, sizeof(::api::v1alpha1::GetRollSessionResponse)},
        {57, sizeof(::api::v1alpha1::ClearRollSessionRequest)},
        {64, sizeof(::api::v1alpha1::ClearRollSessionResponse)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::api::v1alpha1::_RollDiceRequest_default_instance_._instance,
    &::api::v1alpha1::_RollDiceResponse_default_instance_._instance,
    &::api::v1alpha1::_DiceRoll_default_instance_._instance,
    &::api::v1alpha1::_GetRollSessionRequest_default_instance_._instance,
    &::api::v1alpha1::_GetRollSessionResponse_default_instance_._instance,
    &::api::v1alpha1::_ClearRollSessionRequest_default_instance_._instance,
    &::api::v1alpha1::_ClearRollSessionResponse_default_instance_._instance,
};
const char descriptor_table_protodef_api_2fv1alpha1_2fdice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027api/v1alpha1/dice.proto\022\014api.v1alpha1\""
    "\316\001\n\017RollDiceRequest\022\033\n\tentity_id\030\001 \001(\tR\010"
    "entityId\022\030\n\007context\030\002 \001(\tR\007context\022\032\n\010no"
    "tation\030\003 \001(\tR\010notation\022\024\n\005count\030\004 \001(\005R\005c"
    "ount\022\037\n\013ttl_seconds\030\005 \001(\005R\nttlSeconds\0221\n"
    "\024modifier_description\030\006 \001(\tR\023modifierDes"
    "cription\"_\n\020RollDiceResponse\022,\n\005rolls\030\001 "
    "\003(\0132\026.api.v1alpha1.DiceRollR\005rolls\022\035\n\nex"
    "pires_at\030\002 \001(\003R\texpiresAt\"\340\001\n\010DiceRoll\022\027"
    "\n\007roll_id\030\001 \001(\tR\006rollId\022\032\n\010notation\030\002 \001("
    "\tR\010notation\022\022\n\004dice\030\003 \003(\005R\004dice\022\024\n\005total"
    "\030\004 \001(\005R\005total\022\030\n\007dropped\030\005 \003(\005R\007dropped\022"
    " \n\013description\030\006 \001(\tR\013description\022\035\n\ndic"
    "e_total\030\007 \001(\005R\tdiceTotal\022\032\n\010modifier\030\010 \001"
    "(\005R\010modifier\"N\n\025GetRollSessionRequest\022\033\n"
    "\tentity_id\030\001 \001(\tR\010entityId\022\030\n\007context\030\002 "
    "\001(\tR\007context\"\204\001\n\026GetRollSessionResponse\022"
    ",\n\005rolls\030\001 \003(\0132\026.api.v1alpha1.DiceRollR\005"
    "rolls\022\035\n\nexpires_at\030\002 \001(\003R\texpiresAt\022\035\n\n"
    "created_at\030\003 \001(\003R\tcreatedAt\"P\n\027ClearRoll"
    "SessionRequest\022\033\n\tentity_id\030\001 \001(\tR\010entit"
    "yId\022\030\n\007context\030\002 \001(\tR\007context\"Y\n\030ClearRo"
    "llSessionResponse\022\030\n\007message\030\001 \001(\tR\007mess"
    "age\022#\n\rrolls_cleared\030\002 \001(\005R\014rollsCleared"
    "2\230\002\n\013DiceService\022I\n\010RollDice\022\035.api.v1alp"
    "ha1.RollDiceRequest\032\036.api.v1alpha1.RollD"
    "iceResponse\022[\n\016GetRollSession\022#.api.v1al"
    "pha1.GetRollSessionRequest\032$.api.v1alpha"
    "1.GetRollSessionResponse\022a\n\020ClearRollSes"
    "sion\022%.api.v1alpha1.ClearRollSessionRequ"
    "est\032&.api.v1alpha1.ClearRollSessionRespo"
    "nseB\265\001\n\020com.api.v1alpha1B\tDiceProtoP\001ZEg"
    "ithub.com/KirkDiggler/rpg-api-protos/gen"
    "/go/api/v1alpha1;apiv1alpha1\242\002\003AXX\252\002\014Api"
    ".V1alpha1\312\002\014Api\\V1alpha1\342\002\030Api\\V1alpha1\\"
    "GPBMetadata\352\002\rApi::V1alpha1b\006proto3"
};
static ::absl::once_flag descriptor_table_api_2fv1alpha1_2fdice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_api_2fv1alpha1_2fdice_2eproto = {
    false,
    false,
    1435,
    descriptor_table_protodef_api_2fv1alpha1_2fdice_2eproto,
    "api/v1alpha1/dice.proto",
    &descriptor_table_api_2fv1alpha1_2fdice_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_api_2fv1alpha1_2fdice_2eproto::offsets,
    file_level_enum_descriptors_api_2fv1alpha1_2fdice_2eproto,
    file_level_service_descriptors_api_2fv1alpha1_2fdice_2eproto,
};
namespace api {
namespace v1alpha1 {
// ===================================================================

class RollDiceRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollDiceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_._has_bits_);
};

RollDiceRequest::RollDiceRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollDiceRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.RollDiceRequest)
}
PROTOBUF_NDEBUG_INLINE RollDiceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::RollDiceRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        context_(arena, from.context_),
        notation_(arena, from.notation_),
        modifier_description_(arena, from.modifier_description_) {}

RollDiceRequest::RollDiceRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollDiceRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollDiceRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollDiceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, count_),
           offsetof(Impl_, ttl_seconds_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::ttl_seconds_));

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.RollDiceRequest)
}
PROTOBUF_NDEBUG_INLINE RollDiceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        context_(arena),
        notation_(arena),
        modifier_description_(arena) {}

inline void RollDiceRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           0,
           offsetof(Impl_, ttl_seconds_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::ttl_seconds_));
}
RollDiceRequest::~RollDiceRequest() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.RollDiceRequest)
  SharedDtor(*this);
}
inline void RollDiceRequest::SharedDtor(MessageLite& self) {
  RollDiceRequest& this_ = static_cast<RollDiceRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.notation_.Destroy();
  this_._impl_.modifier_description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollDiceRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollDiceRequest(arena);
}
constexpr auto RollDiceRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollDiceRequest),
                                            alignof(RollDiceRequest));
}
constexpr auto RollDiceRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollDiceRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollDiceRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollDiceRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollDiceRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollDiceRequest>(), &RollDiceRequest::ByteSizeLong,
              &RollDiceRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_._cached_size_),
          false,
      },
      &RollDiceRequest::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollDiceRequest_class_data_ =
        RollDiceRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollDiceRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollDiceRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollDiceRequest_class_data_.tc_table);
  return RollDiceRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 81, 2>
RollDiceRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollDiceRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::RollDiceRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.entity_id_)}},
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.context_)}},
    // string notation = 3 [json_name = "notation"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.notation_)}},
    // int32 count = 4 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollDiceRequest, _impl_.count_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.count_)}},
    // int32 ttl_seconds = 5 [json_name = "ttlSeconds"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollDiceRequest, _impl_.ttl_seconds_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.ttl_seconds_)}},
    // string modifier_description = 6 [json_name = "modifierDescription"];
    {::_pbi::TcParser::FastUS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.modifier_description_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string notation = 3 [json_name = "notation"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.notation_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 count = 4 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.count_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 ttl_seconds = 5 [json_name = "ttlSeconds"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.ttl_seconds_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string modifier_description = 6 [json_name = "modifierDescription"];
    {PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.modifier_description_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\11\7\10\0\0\24\0"
    "api.v1alpha1.RollDiceRequest"
    "entity_id"
    "context"
    "notation"
    "modifier_description"
  }},
};
PROTOBUF_NOINLINE void RollDiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.RollDiceRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.notation_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.modifier_description_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000030u) != 0) {
    ::memset(&_impl_.count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ttl_seconds_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.ttl_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollDiceRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollDiceRequest& this_ = static_cast<const RollDiceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollDiceRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollDiceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.RollDiceRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.RollDiceRequest.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.RollDiceRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string notation = 3 [json_name = "notation"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_notation().empty()) {
      const ::std::string& _s = this_._internal_notation();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.RollDiceRequest.notation");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int32 count = 4 [json_name = "count"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_count(), target);
    }
  }

  // int32 ttl_seconds = 5 [json_name = "ttlSeconds"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_ttl_seconds() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_ttl_seconds(), target);
    }
  }

  // string modifier_description = 6 [json_name = "modifierDescription"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_modifier_description().empty()) {
      const ::std::string& _s = this_._internal_modifier_description();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.RollDiceRequest.modifier_description");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.RollDiceRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollDiceRequest::ByteSizeLong(const MessageLite& base) {
  const RollDiceRequest& this_ = static_cast<const RollDiceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollDiceRequest::ByteSizeLong() const {
  const RollDiceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.RollDiceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string notation = 3 [json_name = "notation"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_notation().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_notation());
      }
    }
    // string modifier_description = 6 [json_name = "modifierDescription"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_modifier_description().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_modifier_description());
      }
    }
    // int32 count = 4 [json_name = "count"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
    // int32 ttl_seconds = 5 [json_name = "ttlSeconds"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_ttl_seconds() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ttl_seconds());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollDiceRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollDiceRequest*>(&to_msg);
  auto& from = static_cast<const RollDiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.RollDiceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_notation().empty()) {
        _this->_internal_set_notation(from._internal_notation());
      } else {
        if (_this->_impl_.notation_.IsDefault()) {
          _this->_internal_set_notation("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_modifier_description().empty()) {
        _this->_internal_set_modifier_description(from._internal_modifier_description());
      } else {
        if (_this->_impl_.modifier_description_.IsDefault()) {
          _this->_internal_set_modifier_description("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_ttl_seconds() != 0) {
        _this->_impl_.ttl_seconds_ = from._impl_.ttl_seconds_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollDiceRequest::CopyFrom(const RollDiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.RollDiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollDiceRequest::InternalSwap(RollDiceRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.notation_, &other->_impl_.notation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modifier_description_, &other->_impl_.modifier_description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.ttl_seconds_)
      + sizeof(RollDiceRequest::_impl_.ttl_seconds_)
      - PROTOBUF_FIELD_OFFSET(RollDiceRequest, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::google::protobuf::Metadata RollDiceRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollDiceResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollDiceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_._has_bits_);
};

RollDiceResponse::RollDiceResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollDiceResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.RollDiceResponse)
}
PROTOBUF_NDEBUG_INLINE RollDiceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::RollDiceResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rolls_{visibility, arena, from.rolls_} {}

RollDiceResponse::RollDiceResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollDiceResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollDiceResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollDiceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.expires_at_ = from._impl_.expires_at_;

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.RollDiceResponse)
}
PROTOBUF_NDEBUG_INLINE RollDiceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        rolls_{visibility, arena} {}

inline void RollDiceResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.expires_at_ = {};
}
RollDiceResponse::~RollDiceResponse() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.RollDiceResponse)
  SharedDtor(*this);
}
inline void RollDiceResponse::SharedDtor(MessageLite& self) {
  RollDiceResponse& this_ = static_cast<RollDiceResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollDiceResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollDiceResponse(arena);
}
constexpr auto RollDiceResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_.rolls_) +
          decltype(RollDiceResponse::_impl_.rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RollDiceResponse), alignof(RollDiceResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RollDiceResponse::PlacementNew_,
                                 sizeof(RollDiceResponse),
                                 alignof(RollDiceResponse));
  }
}
constexpr auto RollDiceResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollDiceResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollDiceResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollDiceResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollDiceResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollDiceResponse>(), &RollDiceResponse::ByteSizeLong,
              &RollDiceResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_._cached_size_),
          false,
      },
      &RollDiceResponse::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollDiceResponse_class_data_ =
        RollDiceResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollDiceResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollDiceResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollDiceResponse_class_data_.tc_table);
  return RollDiceResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
RollDiceResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RollDiceResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::RollDiceResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 expires_at = 2 [json_name = "expiresAt"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollDiceResponse, _impl_.expires_at_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_.expires_at_)}},
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_.rolls_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_.rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 expires_at = 2 [json_name = "expiresAt"];
    {PROTOBUF_FIELD_OFFSET(RollDiceResponse, _impl_.expires_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::api::v1alpha1::DiceRoll>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RollDiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.RollDiceResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolls_.Clear();
  _impl_.expires_at_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollDiceResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollDiceResponse& this_ = static_cast<const RollDiceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollDiceResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollDiceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.RollDiceResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_rolls_size());
       i < n; i++) {
    const auto& repfield = this_._internal_rolls().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int64 expires_at = 2 [json_name = "expiresAt"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_expires_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_expires_at(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.RollDiceResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollDiceResponse::ByteSizeLong(const MessageLite& base) {
  const RollDiceResponse& this_ = static_cast<const RollDiceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollDiceResponse::ByteSizeLong() const {
  const RollDiceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.RollDiceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {
      total_size += 1UL * this_._internal_rolls_size();
      for (const auto& msg : this_._internal_rolls()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // int64 expires_at = 2 [json_name = "expiresAt"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_expires_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_expires_at());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollDiceResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollDiceResponse*>(&to_msg);
  auto& from = static_cast<const RollDiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.RollDiceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rolls()->MergeFrom(
      from._internal_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_expires_at() != 0) {
      _this->_impl_.expires_at_ = from._impl_.expires_at_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollDiceResponse::CopyFrom(const RollDiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.RollDiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollDiceResponse::InternalSwap(RollDiceResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolls_.InternalSwap(&other->_impl_.rolls_);
  swap(_impl_.expires_at_, other->_impl_.expires_at_);
}

::google::protobuf::Metadata RollDiceResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DiceRoll::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DiceRoll>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_._has_bits_);
};

DiceRoll::DiceRoll(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DiceRoll_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.DiceRoll)
}
PROTOBUF_NDEBUG_INLINE DiceRoll::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::DiceRoll& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dice_{visibility, arena, from.dice_},
        _dice_cached_byte_size_{0},
        dropped_{visibility, arena, from.dropped_},
        _dropped_cached_byte_size_{0},
        roll_id_(arena, from.roll_id_),
        notation_(arena, from.notation_),
        description_(arena, from.description_) {}

DiceRoll::DiceRoll(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DiceRoll& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DiceRoll_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DiceRoll* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_),
           offsetof(Impl_, modifier_) -
               offsetof(Impl_, total_) +
               sizeof(Impl_::modifier_));

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.DiceRoll)
}
PROTOBUF_NDEBUG_INLINE DiceRoll::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        dice_{visibility, arena},
        _dice_cached_byte_size_{0},
        dropped_{visibility, arena},
        _dropped_cached_byte_size_{0},
        roll_id_(arena),
        notation_(arena),
        description_(arena) {}

inline void DiceRoll::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_),
           0,
           offsetof(Impl_, modifier_) -
               offsetof(Impl_, total_) +
               sizeof(Impl_::modifier_));
}
DiceRoll::~DiceRoll() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.DiceRoll)
  SharedDtor(*this);
}
inline void DiceRoll::SharedDtor(MessageLite& self) {
  DiceRoll& this_ = static_cast<DiceRoll&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.roll_id_.Destroy();
  this_._impl_.notation_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DiceRoll::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DiceRoll(arena);
}
constexpr auto DiceRoll::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dice_) +
          decltype(DiceRoll::_impl_.dice_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dropped_) +
          decltype(DiceRoll::_impl_.dropped_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DiceRoll), alignof(DiceRoll), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DiceRoll::PlacementNew_,
                                 sizeof(DiceRoll),
                                 alignof(DiceRoll));
  }
}
constexpr auto DiceRoll::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DiceRoll_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DiceRoll::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DiceRoll>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DiceRoll::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DiceRoll>(), &DiceRoll::ByteSizeLong,
              &DiceRoll::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_._cached_size_),
          false,
      },
      &DiceRoll::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DiceRoll_class_data_ =
        DiceRoll::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DiceRoll::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DiceRoll_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DiceRoll_class_data_.tc_table);
  return DiceRoll_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 64, 2>
DiceRoll::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DiceRoll_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::DiceRoll>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 modifier = 8 [json_name = "modifier"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceRoll, _impl_.modifier_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.modifier_)}},
    // string roll_id = 1 [json_name = "rollId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.roll_id_)}},
    // string notation = 2 [json_name = "notation"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.notation_)}},
    // repeated int32 dice = 3 [json_name = "dice"];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dice_)}},
    // int32 total = 4 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceRoll, _impl_.total_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.total_)}},
    // repeated int32 dropped = 5 [json_name = "dropped"];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dropped_)}},
    // string description = 6 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.description_)}},
    // int32 dice_total = 7 [json_name = "diceTotal"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceRoll, _impl_.dice_total_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dice_total_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string roll_id = 1 [json_name = "rollId"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.roll_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string notation = 2 [json_name = "notation"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.notation_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated int32 dice = 3 [json_name = "dice"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dice_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 total = 4 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.total_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 dropped = 5 [json_name = "dropped"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dropped_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // string description = 6 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.description_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 dice_total = 7 [json_name = "diceTotal"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.dice_total_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 modifier = 8 [json_name = "modifier"];
    {PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.modifier_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\7\10\0\0\0\13\0\0\0\0\0\0\0\0\0"
    "api.v1alpha1.DiceRoll"
    "roll_id"
    "notation"
    "description"
  }},
};
PROTOBUF_NOINLINE void DiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.DiceRoll)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dice_.Clear();
  _impl_.dropped_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.roll_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.notation_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000038u) != 0) {
    ::memset(&_impl_.total_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.modifier_) -
        reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.modifier_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DiceRoll::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DiceRoll& this_ = static_cast<const DiceRoll&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DiceRoll::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DiceRoll& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.DiceRoll)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string roll_id = 1 [json_name = "rollId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_roll_id().empty()) {
      const ::std::string& _s = this_._internal_roll_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.DiceRoll.roll_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string notation = 2 [json_name = "notation"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_notation().empty()) {
      const ::std::string& _s = this_._internal_notation();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.DiceRoll.notation");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // repeated int32 dice = 3 [json_name = "dice"];
  {
    int byte_size = this_._impl_._dice_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, this_._internal_dice(), byte_size, target);
    }
  }

  // int32 total = 4 [json_name = "total"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_total() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_total(), target);
    }
  }

  // repeated int32 dropped = 5 [json_name = "dropped"];
  {
    int byte_size = this_._impl_._dropped_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, this_._internal_dropped(), byte_size, target);
    }
  }

  // string description = 6 [json_name = "description"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_description().empty()) {
      const ::std::string& _s = this_._internal_description();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.DiceRoll.description");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int32 dice_total = 7 [json_name = "diceTotal"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_dice_total() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_dice_total(), target);
    }
  }

  // int32 modifier = 8 [json_name = "modifier"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_modifier() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_modifier(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.DiceRoll)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DiceRoll::ByteSizeLong(const MessageLite& base) {
  const DiceRoll& this_ = static_cast<const DiceRoll&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DiceRoll::ByteSizeLong() const {
  const DiceRoll& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.DiceRoll)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 dice = 3 [json_name = "dice"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_dice(), 1,
              this_._impl_._dice_cached_byte_size_);
    }
    // repeated int32 dropped = 5 [json_name = "dropped"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_dropped(), 1,
              this_._impl_._dropped_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string roll_id = 1 [json_name = "rollId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_roll_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_roll_id());
      }
    }
    // string notation = 2 [json_name = "notation"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_notation().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_notation());
      }
    }
    // string description = 6 [json_name = "description"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_description().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_description());
      }
    }
    // int32 total = 4 [json_name = "total"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_total() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_total());
      }
    }
    // int32 dice_total = 7 [json_name = "diceTotal"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_dice_total() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_dice_total());
      }
    }
    // int32 modifier = 8 [json_name = "modifier"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_modifier() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_modifier());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DiceRoll::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DiceRoll*>(&to_msg);
  auto& from = static_cast<const DiceRoll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.DiceRoll)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dice()->MergeFrom(from._internal_dice());
  _this->_internal_mutable_dropped()->MergeFrom(from._internal_dropped());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_roll_id().empty()) {
        _this->_internal_set_roll_id(from._internal_roll_id());
      } else {
        if (_this->_impl_.roll_id_.IsDefault()) {
          _this->_internal_set_roll_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_notation().empty()) {
        _this->_internal_set_notation(from._internal_notation());
      } else {
        if (_this->_impl_.notation_.IsDefault()) {
          _this->_internal_set_notation("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_description().empty()) {
        _this->_internal_set_description(from._internal_description());
      } else {
        if (_this->_impl_.description_.IsDefault()) {
          _this->_internal_set_description("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_total() != 0) {
        _this->_impl_.total_ = from._impl_.total_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_dice_total() != 0) {
        _this->_impl_.dice_total_ = from._impl_.dice_total_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_modifier() != 0) {
        _this->_impl_.modifier_ = from._impl_.modifier_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DiceRoll::CopyFrom(const DiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DiceRoll::InternalSwap(DiceRoll* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dice_.InternalSwap(&other->_impl_.dice_);
  _impl_.dropped_.InternalSwap(&other->_impl_.dropped_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.roll_id_, &other->_impl_.roll_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.notation_, &other->_impl_.notation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.modifier_)
      + sizeof(DiceRoll::_impl_.modifier_)
      - PROTOBUF_FIELD_OFFSET(DiceRoll, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::google::protobuf::Metadata DiceRoll::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetRollSessionRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GetRollSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_._has_bits_);
};

GetRollSessionRequest::GetRollSessionRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetRollSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.GetRollSessionRequest)
}
PROTOBUF_NDEBUG_INLINE GetRollSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::GetRollSessionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        context_(arena, from.context_) {}

GetRollSessionRequest::GetRollSessionRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GetRollSessionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetRollSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetRollSessionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.GetRollSessionRequest)
}
PROTOBUF_NDEBUG_INLINE GetRollSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        context_(arena) {}

inline void GetRollSessionRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetRollSessionRequest::~GetRollSessionRequest() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.GetRollSessionRequest)
  SharedDtor(*this);
}
inline void GetRollSessionRequest::SharedDtor(MessageLite& self) {
  GetRollSessionRequest& this_ = static_cast<GetRollSessionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GetRollSessionRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GetRollSessionRequest(arena);
}
constexpr auto GetRollSessionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetRollSessionRequest),
                                            alignof(GetRollSessionRequest));
}
constexpr auto GetRollSessionRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GetRollSessionRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GetRollSessionRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GetRollSessionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GetRollSessionRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GetRollSessionRequest>(), &GetRollSessionRequest::ByteSizeLong,
              &GetRollSessionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_._cached_size_),
          false,
      },
      &GetRollSessionRequest::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GetRollSessionRequest_class_data_ =
        GetRollSessionRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GetRollSessionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GetRollSessionRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GetRollSessionRequest_class_data_.tc_table);
  return GetRollSessionRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2>
GetRollSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    GetRollSessionRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::GetRollSessionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_.context_)}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_.entity_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(GetRollSessionRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\11\7\0\0\0\0\0"
    "api.v1alpha1.GetRollSessionRequest"
    "entity_id"
    "context"
  }},
};
PROTOBUF_NOINLINE void GetRollSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.GetRollSessionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GetRollSessionRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GetRollSessionRequest& this_ = static_cast<const GetRollSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GetRollSessionRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GetRollSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.GetRollSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.GetRollSessionRequest.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.GetRollSessionRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.GetRollSessionRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GetRollSessionRequest::ByteSizeLong(const MessageLite& base) {
  const GetRollSessionRequest& this_ = static_cast<const GetRollSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GetRollSessionRequest::ByteSizeLong() const {
  const GetRollSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.GetRollSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GetRollSessionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetRollSessionRequest*>(&to_msg);
  auto& from = static_cast<const GetRollSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.GetRollSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetRollSessionRequest::CopyFrom(const GetRollSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.GetRollSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetRollSessionRequest::InternalSwap(GetRollSessionRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
}

::google::protobuf::Metadata GetRollSessionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetRollSessionResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GetRollSessionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_._has_bits_);
};

GetRollSessionResponse::GetRollSessionResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetRollSessionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.GetRollSessionResponse)
}
PROTOBUF_NDEBUG_INLINE GetRollSessionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::GetRollSessionResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rolls_{visibility, arena, from.rolls_} {}

GetRollSessionResponse::GetRollSessionResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GetRollSessionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetRollSessionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetRollSessionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, expires_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, expires_at_),
           offsetof(Impl_, created_at_) -
               offsetof(Impl_, expires_at_) +
               sizeof(Impl_::created_at_));

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.GetRollSessionResponse)
}
PROTOBUF_NDEBUG_INLINE GetRollSessionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        rolls_{visibility, arena} {}

inline void GetRollSessionResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, expires_at_),
           0,
           offsetof(Impl_, created_at_) -
               offsetof(Impl_, expires_at_) +
               sizeof(Impl_::created_at_));
}
GetRollSessionResponse::~GetRollSessionResponse() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.GetRollSessionResponse)
  SharedDtor(*this);
}
inline void GetRollSessionResponse::SharedDtor(MessageLite& self) {
  GetRollSessionResponse& this_ = static_cast<GetRollSessionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GetRollSessionResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GetRollSessionResponse(arena);
}
constexpr auto GetRollSessionResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.rolls_) +
          decltype(GetRollSessionResponse::_impl_.rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetRollSessionResponse), alignof(GetRollSessionResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetRollSessionResponse::PlacementNew_,
                                 sizeof(GetRollSessionResponse),
                                 alignof(GetRollSessionResponse));
  }
}
constexpr auto GetRollSessionResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GetRollSessionResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GetRollSessionResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GetRollSessionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GetRollSessionResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GetRollSessionResponse>(), &GetRollSessionResponse::ByteSizeLong,
              &GetRollSessionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_._cached_size_),
          false,
      },
      &GetRollSessionResponse::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GetRollSessionResponse_class_data_ =
        GetRollSessionResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GetRollSessionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GetRollSessionResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GetRollSessionResponse_class_data_.tc_table);
  return GetRollSessionResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
GetRollSessionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    GetRollSessionResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::GetRollSessionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.rolls_)}},
    // int64 expires_at = 2 [json_name = "expiresAt"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetRollSessionResponse, _impl_.expires_at_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.expires_at_)}},
    // int64 created_at = 3 [json_name = "createdAt"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetRollSessionResponse, _impl_.created_at_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 expires_at = 2 [json_name = "expiresAt"];
    {PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.expires_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 created_at = 3 [json_name = "createdAt"];
    {PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.created_at_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::api::v1alpha1::DiceRoll>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void GetRollSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.GetRollSessionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.expires_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.created_at_) -
        reinterpret_cast<char*>(&_impl_.expires_at_)) + sizeof(_impl_.created_at_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GetRollSessionResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GetRollSessionResponse& this_ = static_cast<const GetRollSessionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GetRollSessionResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GetRollSessionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.GetRollSessionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_rolls_size());
       i < n; i++) {
    const auto& repfield = this_._internal_rolls().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int64 expires_at = 2 [json_name = "expiresAt"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_expires_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_expires_at(), target);
    }
  }

  // int64 created_at = 3 [json_name = "createdAt"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_created_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_created_at(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.GetRollSessionResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GetRollSessionResponse::ByteSizeLong(const MessageLite& base) {
  const GetRollSessionResponse& this_ = static_cast<const GetRollSessionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GetRollSessionResponse::ByteSizeLong() const {
  const GetRollSessionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.GetRollSessionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .api.v1alpha1.DiceRoll rolls = 1 [json_name = "rolls"];
    {
      total_size += 1UL * this_._internal_rolls_size();
      for (const auto& msg : this_._internal_rolls()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int64 expires_at = 2 [json_name = "expiresAt"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_expires_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_expires_at());
      }
    }
    // int64 created_at = 3 [json_name = "createdAt"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_created_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_created_at());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GetRollSessionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetRollSessionResponse*>(&to_msg);
  auto& from = static_cast<const GetRollSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.GetRollSessionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rolls()->MergeFrom(
      from._internal_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_expires_at() != 0) {
        _this->_impl_.expires_at_ = from._impl_.expires_at_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_created_at() != 0) {
        _this->_impl_.created_at_ = from._impl_.created_at_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetRollSessionResponse::CopyFrom(const GetRollSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.GetRollSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetRollSessionResponse::InternalSwap(GetRollSessionResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolls_.InternalSwap(&other->_impl_.rolls_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.created_at_)
      + sizeof(GetRollSessionResponse::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(GetRollSessionResponse, _impl_.expires_at_)>(
          reinterpret_cast<char*>(&_impl_.expires_at_),
          reinterpret_cast<char*>(&other->_impl_.expires_at_));
}

::google::protobuf::Metadata GetRollSessionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClearRollSessionRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ClearRollSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_._has_bits_);
};

ClearRollSessionRequest::ClearRollSessionRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClearRollSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.ClearRollSessionRequest)
}
PROTOBUF_NDEBUG_INLINE ClearRollSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::ClearRollSessionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        context_(arena, from.context_) {}

ClearRollSessionRequest::ClearRollSessionRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ClearRollSessionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClearRollSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClearRollSessionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.ClearRollSessionRequest)
}
PROTOBUF_NDEBUG_INLINE ClearRollSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        context_(arena) {}

inline void ClearRollSessionRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ClearRollSessionRequest::~ClearRollSessionRequest() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.ClearRollSessionRequest)
  SharedDtor(*this);
}
inline void ClearRollSessionRequest::SharedDtor(MessageLite& self) {
  ClearRollSessionRequest& this_ = static_cast<ClearRollSessionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ClearRollSessionRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ClearRollSessionRequest(arena);
}
constexpr auto ClearRollSessionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ClearRollSessionRequest),
                                            alignof(ClearRollSessionRequest));
}
constexpr auto ClearRollSessionRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ClearRollSessionRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ClearRollSessionRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ClearRollSessionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ClearRollSessionRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ClearRollSessionRequest>(), &ClearRollSessionRequest::ByteSizeLong,
              &ClearRollSessionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_._cached_size_),
          false,
      },
      &ClearRollSessionRequest::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ClearRollSessionRequest_class_data_ =
        ClearRollSessionRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ClearRollSessionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ClearRollSessionRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ClearRollSessionRequest_class_data_.tc_table);
  return ClearRollSessionRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2>
ClearRollSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ClearRollSessionRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::ClearRollSessionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_.context_)}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_.entity_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(ClearRollSessionRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\11\7\0\0\0\0\0"
    "api.v1alpha1.ClearRollSessionRequest"
    "entity_id"
    "context"
  }},
};
PROTOBUF_NOINLINE void ClearRollSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.ClearRollSessionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ClearRollSessionRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ClearRollSessionRequest& this_ = static_cast<const ClearRollSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ClearRollSessionRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ClearRollSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.ClearRollSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.ClearRollSessionRequest.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.ClearRollSessionRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.ClearRollSessionRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ClearRollSessionRequest::ByteSizeLong(const MessageLite& base) {
  const ClearRollSessionRequest& this_ = static_cast<const ClearRollSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ClearRollSessionRequest::ByteSizeLong() const {
  const ClearRollSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.ClearRollSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ClearRollSessionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClearRollSessionRequest*>(&to_msg);
  auto& from = static_cast<const ClearRollSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.ClearRollSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClearRollSessionRequest::CopyFrom(const ClearRollSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.ClearRollSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClearRollSessionRequest::InternalSwap(ClearRollSessionRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
}

::google::protobuf::Metadata ClearRollSessionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClearRollSessionResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ClearRollSessionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_._has_bits_);
};

ClearRollSessionResponse::ClearRollSessionResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClearRollSessionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1alpha1.ClearRollSessionResponse)
}
PROTOBUF_NDEBUG_INLINE ClearRollSessionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::api::v1alpha1::ClearRollSessionResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

ClearRollSessionResponse::ClearRollSessionResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ClearRollSessionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClearRollSessionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClearRollSessionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.rolls_cleared_ = from._impl_.rolls_cleared_;

  // @@protoc_insertion_point(copy_constructor:api.v1alpha1.ClearRollSessionResponse)
}
PROTOBUF_NDEBUG_INLINE ClearRollSessionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        message_(arena) {}

inline void ClearRollSessionResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rolls_cleared_ = {};
}
ClearRollSessionResponse::~ClearRollSessionResponse() {
  // @@protoc_insertion_point(destructor:api.v1alpha1.ClearRollSessionResponse)
  SharedDtor(*this);
}
inline void ClearRollSessionResponse::SharedDtor(MessageLite& self) {
  ClearRollSessionResponse& this_ = static_cast<ClearRollSessionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ClearRollSessionResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ClearRollSessionResponse(arena);
}
constexpr auto ClearRollSessionResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ClearRollSessionResponse),
                                            alignof(ClearRollSessionResponse));
}
constexpr auto ClearRollSessionResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ClearRollSessionResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ClearRollSessionResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ClearRollSessionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ClearRollSessionResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ClearRollSessionResponse>(), &ClearRollSessionResponse::ByteSizeLong,
              &ClearRollSessionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_._cached_size_),
          false,
      },
      &ClearRollSessionResponse::kDescriptorMethods,
      &descriptor_table_api_2fv1alpha1_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ClearRollSessionResponse_class_data_ =
        ClearRollSessionResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ClearRollSessionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ClearRollSessionResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ClearRollSessionResponse_class_data_.tc_table);
  return ClearRollSessionResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2>
ClearRollSessionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ClearRollSessionResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::api::v1alpha1::ClearRollSessionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 rolls_cleared = 2 [json_name = "rollsCleared"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClearRollSessionResponse, _impl_.rolls_cleared_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_.rolls_cleared_)}},
    // string message = 1 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 rolls_cleared = 2 [json_name = "rollsCleared"];
    {PROTOBUF_FIELD_OFFSET(ClearRollSessionResponse, _impl_.rolls_cleared_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\45\7\0\0\0\0\0\0"
    "api.v1alpha1.ClearRollSessionResponse"
    "message"
  }},
};
PROTOBUF_NOINLINE void ClearRollSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1alpha1.ClearRollSessionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.rolls_cleared_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ClearRollSessionResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ClearRollSessionResponse& this_ = static_cast<const ClearRollSessionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ClearRollSessionResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ClearRollSessionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:api.v1alpha1.ClearRollSessionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string message = 1 [json_name = "message"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_message().empty()) {
      const ::std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "api.v1alpha1.ClearRollSessionResponse.message");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 rolls_cleared = 2 [json_name = "rollsCleared"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_rolls_cleared() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_rolls_cleared(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1alpha1.ClearRollSessionResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ClearRollSessionResponse::ByteSizeLong(const MessageLite& base) {
  const ClearRollSessionResponse& this_ = static_cast<const ClearRollSessionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ClearRollSessionResponse::ByteSizeLong() const {
  const ClearRollSessionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:api.v1alpha1.ClearRollSessionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string message = 1 [json_name = "message"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // int32 rolls_cleared = 2 [json_name = "rollsCleared"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_rolls_cleared() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_rolls_cleared());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ClearRollSessionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClearRollSessionResponse*>(&to_msg);
  auto& from = static_cast<const ClearRollSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1alpha1.ClearRollSessionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_rolls_cleared() != 0) {
        _this->_impl_.rolls_cleared_ = from._impl_.rolls_cleared_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClearRollSessionResponse::CopyFrom(const ClearRollSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1alpha1.ClearRollSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClearRollSessionResponse::InternalSwap(ClearRollSessionResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.rolls_cleared_, other->_impl_.rolls_cleared_);
}

::google::protobuf::Metadata ClearRollSessionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_api_2fv1alpha1_2fdice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
