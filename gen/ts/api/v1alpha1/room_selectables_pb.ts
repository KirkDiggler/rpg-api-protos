// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file api/v1alpha1/room_selectables.proto (package api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { PageInfo, RoomError, ValidationResult } from "./room_common_pb";
import { file_api_v1alpha1_room_common } from "./room_common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/room_selectables.proto.
 */
export const file_api_v1alpha1_room_selectables: GenFile = /*@__PURE__*/
  fileDesc("", [file_api_v1alpha1_room_common]);

/**
 * Create selection table request
 *
 * @generated from message api.v1alpha1.CreateSelectionTableRequest
 */
export type CreateSelectionTableRequest = Message<"api.v1alpha1.CreateSelectionTableRequest"> & {
  /**
   * Table definition
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 1;
   */
  table?: SelectionTable;

  /**
   * Whether to make table public
   *
   * @generated from field: bool is_public = 2;
   */
  isPublic: boolean;

  /**
   * Validation options
   *
   * @generated from field: api.v1alpha1.TableValidationOptions validation_options = 3;
   */
  validationOptions?: TableValidationOptions;
};

/**
 * Describes the message api.v1alpha1.CreateSelectionTableRequest.
 * Use `create(CreateSelectionTableRequestSchema)` to create a new message.
 */
export const CreateSelectionTableRequestSchema: GenMessage<CreateSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 0);

/**
 * Selection table definition
 *
 * @generated from message api.v1alpha1.SelectionTable
 */
export type SelectionTable = Message<"api.v1alpha1.SelectionTable"> & {
  /**
   * Table identifier
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Table name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Table description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Table category
   *
   * "loot", "encounter", "treasure", "random_event"
   *
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * Table type
   *
   * @generated from field: api.v1alpha1.SelectionTableType table_type = 5;
   */
  tableType: SelectionTableType;

  /**
   * Dice configuration for rolls
   *
   * @generated from field: api.v1alpha1.DiceConfiguration dice_config = 6;
   */
  diceConfig?: DiceConfiguration;

  /**
   * Table entries
   *
   * @generated from field: repeated api.v1alpha1.TableEntry entries = 7;
   */
  entries: TableEntry[];

  /**
   * Table metadata
   *
   * @generated from field: api.v1alpha1.SelectionTableMetadata metadata = 8;
   */
  metadata?: SelectionTableMetadata;

  /**
   * Nested tables that can be referenced
   *
   * @generated from field: repeated string nested_table_ids = 9;
   */
  nestedTableIds: string[];

  /**
   * Table options
   *
   * @generated from field: api.v1alpha1.TableOptions options = 10;
   */
  options?: TableOptions;
};

/**
 * Describes the message api.v1alpha1.SelectionTable.
 * Use `create(SelectionTableSchema)` to create a new message.
 */
export const SelectionTableSchema: GenMessage<SelectionTable> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 1);

/**
 * Dice configuration for table rolls
 *
 * @generated from message api.v1alpha1.DiceConfiguration
 */
export type DiceConfiguration = Message<"api.v1alpha1.DiceConfiguration"> & {
  /**
   * Dice notation (e.g., "1d100", "2d6", "1d20")
   *
   * @generated from field: string dice_notation = 1;
   */
  diceNotation: string;

  /**
   * Modifier to add to roll
   *
   * @generated from field: int32 modifier = 2;
   */
  modifier: number;

  /**
   * Minimum roll result
   *
   * @generated from field: int32 min_roll = 3;
   */
  minRoll: number;

  /**
   * Maximum roll result
   *
   * @generated from field: int32 max_roll = 4;
   */
  maxRoll: number;

  /**
   * Whether to reroll on certain results
   *
   * @generated from field: repeated int32 reroll_on = 5;
   */
  rerollOn: number[];

  /**
   * Whether to explode dice (roll again on max)
   *
   * @generated from field: bool exploding_dice = 6;
   */
  explodingDice: boolean;
};

/**
 * Describes the message api.v1alpha1.DiceConfiguration.
 * Use `create(DiceConfigurationSchema)` to create a new message.
 */
export const DiceConfigurationSchema: GenMessage<DiceConfiguration> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 2);

/**
 * Individual table entry
 *
 * @generated from message api.v1alpha1.TableEntry
 */
export type TableEntry = Message<"api.v1alpha1.TableEntry"> & {
  /**
   * Entry identifier
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Entry name/title
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Entry description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Roll range for dice-based tables
   *
   * @generated from field: api.v1alpha1.RollRange roll_range = 4;
   */
  rollRange?: RollRange;

  /**
   * Weight for weighted tables
   *
   * @generated from field: double weight = 5;
   */
  weight: number;

  /**
   * Entry result
   *
   * @generated from field: api.v1alpha1.TableEntryResult result = 6;
   */
  result?: TableEntryResult;

  /**
   * Conditions for conditional tables
   *
   * @generated from field: repeated api.v1alpha1.EntryCondition conditions = 7;
   */
  conditions: EntryCondition[];

  /**
   * Whether this entry can appear multiple times
   *
   * @generated from field: bool allow_duplicates = 8;
   */
  allowDuplicates: boolean;

  /**
   * Maximum times this entry can be selected
   *
   * @generated from field: int32 max_selections = 9;
   */
  maxSelections: number;
};

/**
 * Describes the message api.v1alpha1.TableEntry.
 * Use `create(TableEntrySchema)` to create a new message.
 */
export const TableEntrySchema: GenMessage<TableEntry> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 3);

/**
 * Roll range for dice-based entries
 *
 * @generated from message api.v1alpha1.RollRange
 */
export type RollRange = Message<"api.v1alpha1.RollRange"> & {
  /**
   * Minimum roll (inclusive)
   *
   * @generated from field: int32 min = 1;
   */
  min: number;

  /**
   * Maximum roll (inclusive)
   *
   * @generated from field: int32 max = 2;
   */
  max: number;
};

/**
 * Describes the message api.v1alpha1.RollRange.
 * Use `create(RollRangeSchema)` to create a new message.
 */
export const RollRangeSchema: GenMessage<RollRange> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 4);

/**
 * Result of a table entry selection
 *
 * @generated from message api.v1alpha1.TableEntryResult
 */
export type TableEntryResult = Message<"api.v1alpha1.TableEntryResult"> & {
  /**
   * Result type
   *
   * @generated from field: api.v1alpha1.TableEntryResultType result_type = 1;
   */
  resultType: TableEntryResultType;

  /**
   * Result data
   *
   * @generated from oneof api.v1alpha1.TableEntryResult.result_data
   */
  resultData: {
    /**
     * @generated from field: api.v1alpha1.ItemResult item_result = 2;
     */
    value: ItemResult;
    case: "itemResult";
  } | {
    /**
     * @generated from field: api.v1alpha1.EntityResult entity_result = 3;
     */
    value: EntityResult;
    case: "entityResult";
  } | {
    /**
     * @generated from field: api.v1alpha1.NestedTableResult nested_table_result = 4;
     */
    value: NestedTableResult;
    case: "nestedTableResult";
  } | {
    /**
     * @generated from field: api.v1alpha1.TextResult text_result = 5;
     */
    value: TextResult;
    case: "textResult";
  } | {
    /**
     * @generated from field: api.v1alpha1.EffectResult effect_result = 6;
     */
    value: EffectResult;
    case: "effectResult";
  } | {
    /**
     * @generated from field: api.v1alpha1.MultipleResult multiple_result = 7;
     */
    value: MultipleResult;
    case: "multipleResult";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message api.v1alpha1.TableEntryResult.
 * Use `create(TableEntryResultSchema)` to create a new message.
 */
export const TableEntryResultSchema: GenMessage<TableEntryResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 5);

/**
 * Item result from table
 *
 * @generated from message api.v1alpha1.ItemResult
 */
export type ItemResult = Message<"api.v1alpha1.ItemResult"> & {
  /**
   * Item identifier
   *
   * @generated from field: string item_id = 1;
   */
  itemId: string;

  /**
   * Item name
   *
   * @generated from field: string item_name = 2;
   */
  itemName: string;

  /**
   * Item quantity
   *
   * @generated from field: api.v1alpha1.QuantityRange quantity = 3;
   */
  quantity?: QuantityRange;

  /**
   * Item rarity
   *
   * @generated from field: string rarity = 4;
   */
  rarity: string;

  /**
   * Item value in gold pieces
   *
   * @generated from field: int32 value_gp = 5;
   */
  valueGp: number;

  /**
   * Item properties
   *
   * @generated from field: map<string, string> properties = 6;
   */
  properties: { [key: string]: string };

  /**
   * Whether item is magical
   *
   * @generated from field: bool is_magical = 7;
   */
  isMagical: boolean;

  /**
   * Item condition
   *
   * "new", "used", "damaged", "broken"
   *
   * @generated from field: string condition = 8;
   */
  condition: string;
};

/**
 * Describes the message api.v1alpha1.ItemResult.
 * Use `create(ItemResultSchema)` to create a new message.
 */
export const ItemResultSchema: GenMessage<ItemResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 6);

/**
 * Quantity range for items
 *
 * @generated from message api.v1alpha1.QuantityRange
 */
export type QuantityRange = Message<"api.v1alpha1.QuantityRange"> & {
  /**
   * Minimum quantity
   *
   * @generated from field: int32 min = 1;
   */
  min: number;

  /**
   * Maximum quantity
   *
   * @generated from field: int32 max = 2;
   */
  max: number;

  /**
   * Dice notation for quantity (optional)
   *
   * @generated from field: string dice_notation = 3;
   */
  diceNotation: string;
};

/**
 * Describes the message api.v1alpha1.QuantityRange.
 * Use `create(QuantityRangeSchema)` to create a new message.
 */
export const QuantityRangeSchema: GenMessage<QuantityRange> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 7);

/**
 * Entity result from table
 *
 * @generated from message api.v1alpha1.EntityResult
 */
export type EntityResult = Message<"api.v1alpha1.EntityResult"> & {
  /**
   * Entity type
   *
   * @generated from field: string entity_type = 1;
   */
  entityType: string;

  /**
   * Entity identifier or template
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Entity name
   *
   * @generated from field: string entity_name = 3;
   */
  entityName: string;

  /**
   * Number of entities
   *
   * @generated from field: api.v1alpha1.QuantityRange quantity = 4;
   */
  quantity?: QuantityRange;

  /**
   * Challenge rating (for monsters)
   *
   * @generated from field: double challenge_rating = 5;
   */
  challengeRating: number;

  /**
   * Entity properties
   *
   * @generated from field: map<string, string> properties = 6;
   */
  properties: { [key: string]: string };

  /**
   * Spawn preferences
   *
   * @generated from field: api.v1alpha1.EntitySpawnPreferences spawn_preferences = 7;
   */
  spawnPreferences?: EntitySpawnPreferences;
};

/**
 * Describes the message api.v1alpha1.EntityResult.
 * Use `create(EntityResultSchema)` to create a new message.
 */
export const EntityResultSchema: GenMessage<EntityResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 8);

/**
 * Spawn preferences for entities from tables
 *
 * @generated from message api.v1alpha1.EntitySpawnPreferences
 */
export type EntitySpawnPreferences = Message<"api.v1alpha1.EntitySpawnPreferences"> & {
  /**
   * Preferred spawn locations
   *
   * "corner", "center", "edge", "random"
   *
   * @generated from field: repeated string preferred_locations = 1;
   */
  preferredLocations: string[];

  /**
   * Formation for multiple entities
   *
   * "scattered", "grouped", "line", "circle"
   *
   * @generated from field: string formation = 2;
   */
  formation: string;

  /**
   * Behavior settings
   *
   * "hostile", "neutral", "friendly", "patrol"
   *
   * @generated from field: string behavior = 3;
   */
  behavior: string;

  /**
   * Special instructions
   *
   * @generated from field: string special_instructions = 4;
   */
  specialInstructions: string;
};

/**
 * Describes the message api.v1alpha1.EntitySpawnPreferences.
 * Use `create(EntitySpawnPreferencesSchema)` to create a new message.
 */
export const EntitySpawnPreferencesSchema: GenMessage<EntitySpawnPreferences> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 9);

/**
 * Nested table result
 *
 * @generated from message api.v1alpha1.NestedTableResult
 */
export type NestedTableResult = Message<"api.v1alpha1.NestedTableResult"> & {
  /**
   * Table to roll on
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Number of rolls to make
   *
   * @generated from field: int32 roll_count = 2;
   */
  rollCount: number;

  /**
   * Modifiers to apply to nested rolls
   *
   * @generated from field: repeated api.v1alpha1.RollModifier modifiers = 3;
   */
  modifiers: RollModifier[];

  /**
   * Whether to combine results
   *
   * @generated from field: bool combine_results = 4;
   */
  combineResults: boolean;
};

/**
 * Describes the message api.v1alpha1.NestedTableResult.
 * Use `create(NestedTableResultSchema)` to create a new message.
 */
export const NestedTableResultSchema: GenMessage<NestedTableResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 10);

/**
 * Roll modifier for nested tables
 *
 * @generated from message api.v1alpha1.RollModifier
 */
export type RollModifier = Message<"api.v1alpha1.RollModifier"> & {
  /**
   * Modifier type
   *
   * "add", "multiply", "reroll_on", "advantage", "disadvantage"
   *
   * @generated from field: string modifier_type = 1;
   */
  modifierType: string;

  /**
   * Modifier value
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * Condition for when to apply modifier
   *
   * @generated from field: string condition = 3;
   */
  condition: string;
};

/**
 * Describes the message api.v1alpha1.RollModifier.
 * Use `create(RollModifierSchema)` to create a new message.
 */
export const RollModifierSchema: GenMessage<RollModifier> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 11);

/**
 * Text result from table
 *
 * @generated from message api.v1alpha1.TextResult
 */
export type TextResult = Message<"api.v1alpha1.TextResult"> & {
  /**
   * Result text
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * Text category
   *
   * "event", "description", "rumor", "quest_hook"
   *
   * @generated from field: string category = 2;
   */
  category: string;

  /**
   * Variables to substitute in text
   *
   * @generated from field: map<string, string> variables = 3;
   */
  variables: { [key: string]: string };

  /**
   * Whether text requires further action
   *
   * @generated from field: bool requires_action = 4;
   */
  requiresAction: boolean;

  /**
   * Action type if required
   *
   * @generated from field: string action_type = 5;
   */
  actionType: string;
};

/**
 * Describes the message api.v1alpha1.TextResult.
 * Use `create(TextResultSchema)` to create a new message.
 */
export const TextResultSchema: GenMessage<TextResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 12);

/**
 * Effect result from table
 *
 * @generated from message api.v1alpha1.EffectResult
 */
export type EffectResult = Message<"api.v1alpha1.EffectResult"> & {
  /**
   * Effect type
   *
   * "spell", "trap", "environmental", "magical"
   *
   * @generated from field: string effect_type = 1;
   */
  effectType: string;

  /**
   * Effect name
   *
   * @generated from field: string effect_name = 2;
   */
  effectName: string;

  /**
   * Effect description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Effect parameters
   *
   * @generated from field: map<string, string> parameters = 4;
   */
  parameters: { [key: string]: string };

  /**
   * Effect duration
   *
   * @generated from field: string duration = 5;
   */
  duration: string;

  /**
   * Effect intensity
   *
   * @generated from field: double intensity = 6;
   */
  intensity: number;

  /**
   * Area of effect (using spatial service definition)
   *
   * @generated from field: string area_of_effect_description = 7;
   */
  areaOfEffectDescription: string;
};

/**
 * Describes the message api.v1alpha1.EffectResult.
 * Use `create(EffectResultSchema)` to create a new message.
 */
export const EffectResultSchema: GenMessage<EffectResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 13);

/**
 * Multiple results combined
 *
 * @generated from message api.v1alpha1.MultipleResult
 */
export type MultipleResult = Message<"api.v1alpha1.MultipleResult"> & {
  /**
   * Individual results
   *
   * @generated from field: repeated api.v1alpha1.TableEntryResult results = 1;
   */
  results: TableEntryResult[];

  /**
   * How to combine results
   *
   * "all", "choose_one", "weighted_choice"
   *
   * @generated from field: string combination_method = 2;
   */
  combinationMethod: string;

  /**
   * Number to choose if using choice method
   *
   * @generated from field: int32 choose_count = 3;
   */
  chooseCount: number;
};

/**
 * Describes the message api.v1alpha1.MultipleResult.
 * Use `create(MultipleResultSchema)` to create a new message.
 */
export const MultipleResultSchema: GenMessage<MultipleResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 14);

/**
 * Condition for conditional table entries
 *
 * @generated from message api.v1alpha1.EntryCondition
 */
export type EntryCondition = Message<"api.v1alpha1.EntryCondition"> & {
  /**
   * Condition type
   *
   * "parameter", "roll", "time", "location"
   *
   * @generated from field: string condition_type = 1;
   */
  conditionType: string;

  /**
   * Parameter name for parameter conditions
   *
   * @generated from field: string parameter_name = 2;
   */
  parameterName: string;

  /**
   * Comparison operator
   *
   * "equals", "greater_than", "less_than", "contains"
   *
   * @generated from field: string operator = 3;
   */
  operator: string;

  /**
   * Expected value
   *
   * @generated from field: string expected_value = 4;
   */
  expectedValue: string;

  /**
   * Whether condition is required or optional
   *
   * @generated from field: bool is_required = 5;
   */
  isRequired: boolean;
};

/**
 * Describes the message api.v1alpha1.EntryCondition.
 * Use `create(EntryConditionSchema)` to create a new message.
 */
export const EntryConditionSchema: GenMessage<EntryCondition> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 15);

/**
 * Table options and settings
 *
 * @generated from message api.v1alpha1.TableOptions
 */
export type TableOptions = Message<"api.v1alpha1.TableOptions"> & {
  /**
   * Allow duplicate results in single roll
   *
   * @generated from field: bool allow_duplicates = 1;
   */
  allowDuplicates: boolean;

  /**
   * Maximum results per roll
   *
   * @generated from field: int32 max_results_per_roll = 2;
   */
  maxResultsPerRoll: number;

  /**
   * Default number of rolls
   *
   * @generated from field: int32 default_roll_count = 3;
   */
  defaultRollCount: number;

  /**
   * Whether to sort results
   *
   * @generated from field: bool sort_results = 4;
   */
  sortResults: boolean;

  /**
   * Sort criteria
   *
   * "alphabetical", "value", "rarity", "roll_order"
   *
   * @generated from field: string sort_criteria = 5;
   */
  sortCriteria: string;

  /**
   * Whether to group similar results
   *
   * @generated from field: bool group_similar_results = 6;
   */
  groupSimilarResults: boolean;
};

/**
 * Describes the message api.v1alpha1.TableOptions.
 * Use `create(TableOptionsSchema)` to create a new message.
 */
export const TableOptionsSchema: GenMessage<TableOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 16);

/**
 * Selection table metadata
 *
 * @generated from message api.v1alpha1.SelectionTableMetadata
 */
export type SelectionTableMetadata = Message<"api.v1alpha1.SelectionTableMetadata"> & {
  /**
   * Table author
   *
   * @generated from field: string author = 1;
   */
  author: string;

  /**
   * Table version
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Creation timestamp
   *
   * @generated from field: int64 created_at = 3;
   */
  createdAt: bigint;

  /**
   * Last update timestamp
   *
   * @generated from field: int64 updated_at = 4;
   */
  updatedAt: bigint;

  /**
   * Usage statistics
   *
   * @generated from field: api.v1alpha1.TableUsageStats usage_stats = 5;
   */
  usageStats?: TableUsageStats;

  /**
   * Table tags
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * Source material
   *
   * @generated from field: string source = 7;
   */
  source: string;

  /**
   * Copyright information
   *
   * @generated from field: string copyright = 8;
   */
  copyright: string;

  /**
   * Whether table is official content
   *
   * @generated from field: bool is_official = 9;
   */
  isOfficial: boolean;
};

/**
 * Describes the message api.v1alpha1.SelectionTableMetadata.
 * Use `create(SelectionTableMetadataSchema)` to create a new message.
 */
export const SelectionTableMetadataSchema: GenMessage<SelectionTableMetadata> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 17);

/**
 * Usage statistics for selection table
 *
 * @generated from message api.v1alpha1.TableUsageStats
 */
export type TableUsageStats = Message<"api.v1alpha1.TableUsageStats"> & {
  /**
   * Number of times table has been rolled
   *
   * @generated from field: int64 roll_count = 1;
   */
  rollCount: bigint;

  /**
   * Total results generated
   *
   * @generated from field: int64 results_generated = 2;
   */
  resultsGenerated: bigint;

  /**
   * Most common result
   *
   * @generated from field: string most_common_result = 3;
   */
  mostCommonResult: string;

  /**
   * Least common result
   *
   * @generated from field: string least_common_result = 4;
   */
  leastCommonResult: string;

  /**
   * Average rolls per session
   *
   * @generated from field: double average_rolls_per_session = 5;
   */
  averageRollsPerSession: number;

  /**
   * Last used timestamp
   *
   * @generated from field: int64 last_used = 6;
   */
  lastUsed: bigint;
};

/**
 * Describes the message api.v1alpha1.TableUsageStats.
 * Use `create(TableUsageStatsSchema)` to create a new message.
 */
export const TableUsageStatsSchema: GenMessage<TableUsageStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 18);

/**
 * Table validation options
 *
 * @generated from message api.v1alpha1.TableValidationOptions
 */
export type TableValidationOptions = Message<"api.v1alpha1.TableValidationOptions"> & {
  /**
   * Check for roll range gaps
   *
   * @generated from field: bool check_range_gaps = 1;
   */
  checkRangeGaps: boolean;

  /**
   * Check for overlapping ranges
   *
   * @generated from field: bool check_range_overlaps = 2;
   */
  checkRangeOverlaps: boolean;

  /**
   * Validate nested table references
   *
   * @generated from field: bool validate_nested_references = 3;
   */
  validateNestedReferences: boolean;

  /**
   * Check weight distribution
   *
   * @generated from field: bool check_weight_distribution = 4;
   */
  checkWeightDistribution: boolean;

  /**
   * Validate dice configuration
   *
   * @generated from field: bool validate_dice_config = 5;
   */
  validateDiceConfig: boolean;
};

/**
 * Describes the message api.v1alpha1.TableValidationOptions.
 * Use `create(TableValidationOptionsSchema)` to create a new message.
 */
export const TableValidationOptionsSchema: GenMessage<TableValidationOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 19);

/**
 * Create selection table response
 *
 * @generated from message api.v1alpha1.CreateSelectionTableResponse
 */
export type CreateSelectionTableResponse = Message<"api.v1alpha1.CreateSelectionTableResponse"> & {
  /**
   * Created table
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 1;
   */
  table?: SelectionTable;

  /**
   * Validation results
   *
   * @generated from field: api.v1alpha1.ValidationResult validation_result = 2;
   */
  validationResult?: ValidationResult;

  /**
   * Creation confirmation
   *
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message api.v1alpha1.CreateSelectionTableResponse.
 * Use `create(CreateSelectionTableResponseSchema)` to create a new message.
 */
export const CreateSelectionTableResponseSchema: GenMessage<CreateSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 20);

/**
 * Get selection table request
 *
 * @generated from message api.v1alpha1.GetSelectionTableRequest
 */
export type GetSelectionTableRequest = Message<"api.v1alpha1.GetSelectionTableRequest"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Whether to include usage statistics
   *
   * @generated from field: bool include_statistics = 2;
   */
  includeStatistics: boolean;

  /**
   * Whether to include entry details
   *
   * @generated from field: bool include_entry_details = 3;
   */
  includeEntryDetails: boolean;
};

/**
 * Describes the message api.v1alpha1.GetSelectionTableRequest.
 * Use `create(GetSelectionTableRequestSchema)` to create a new message.
 */
export const GetSelectionTableRequestSchema: GenMessage<GetSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 21);

/**
 * Get selection table response
 *
 * @generated from message api.v1alpha1.GetSelectionTableResponse
 */
export type GetSelectionTableResponse = Message<"api.v1alpha1.GetSelectionTableResponse"> & {
  /**
   * Requested table
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 1;
   */
  table?: SelectionTable;

  /**
   * Table statistics (if requested)
   *
   * @generated from field: api.v1alpha1.TableStatistics statistics = 2;
   */
  statistics?: TableStatistics;
};

/**
 * Describes the message api.v1alpha1.GetSelectionTableResponse.
 * Use `create(GetSelectionTableResponseSchema)` to create a new message.
 */
export const GetSelectionTableResponseSchema: GenMessage<GetSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 22);

/**
 * Detailed statistics for selection table
 *
 * @generated from message api.v1alpha1.TableStatistics
 */
export type TableStatistics = Message<"api.v1alpha1.TableStatistics"> & {
  /**
   * Basic usage stats
   *
   * @generated from field: api.v1alpha1.TableUsageStats usage_stats = 1;
   */
  usageStats?: TableUsageStats;

  /**
   * Entry selection frequency
   *
   * @generated from field: map<string, int64> entry_frequency = 2;
   */
  entryFrequency: { [key: string]: bigint };

  /**
   * Average roll results
   *
   * @generated from field: double average_roll = 3;
   */
  averageRoll: number;

  /**
   * Roll distribution
   *
   * @generated from field: map<int32, int64> roll_distribution = 4;
   */
  rollDistribution: { [key: number]: bigint };

  /**
   * Result type breakdown
   *
   * @generated from field: map<string, int64> result_type_counts = 5;
   */
  resultTypeCounts: { [key: string]: bigint };

  /**
   * Performance metrics
   *
   * @generated from field: api.v1alpha1.TablePerformanceStats performance_stats = 6;
   */
  performanceStats?: TablePerformanceStats;
};

/**
 * Describes the message api.v1alpha1.TableStatistics.
 * Use `create(TableStatisticsSchema)` to create a new message.
 */
export const TableStatisticsSchema: GenMessage<TableStatistics> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 23);

/**
 * Performance statistics for table operations
 *
 * @generated from message api.v1alpha1.TablePerformanceStats
 */
export type TablePerformanceStats = Message<"api.v1alpha1.TablePerformanceStats"> & {
  /**
   * Average roll time (milliseconds)
   *
   * @generated from field: double average_roll_time_ms = 1;
   */
  averageRollTimeMs: number;

  /**
   * Cache hit ratio
   *
   * @generated from field: double cache_hit_ratio = 2;
   */
  cacheHitRatio: number;

  /**
   * Memory usage
   *
   * @generated from field: int64 memory_usage_bytes = 3;
   */
  memoryUsageBytes: bigint;

  /**
   * Last optimization timestamp
   *
   * @generated from field: int64 last_optimized = 4;
   */
  lastOptimized: bigint;
};

/**
 * Describes the message api.v1alpha1.TablePerformanceStats.
 * Use `create(TablePerformanceStatsSchema)` to create a new message.
 */
export const TablePerformanceStatsSchema: GenMessage<TablePerformanceStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 24);

/**
 * Update selection table request
 *
 * @generated from message api.v1alpha1.UpdateSelectionTableRequest
 */
export type UpdateSelectionTableRequest = Message<"api.v1alpha1.UpdateSelectionTableRequest"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Updated table data
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 2;
   */
  table?: SelectionTable;

  /**
   * Update options
   *
   * @generated from field: api.v1alpha1.TableUpdateOptions update_options = 3;
   */
  updateOptions?: TableUpdateOptions;
};

/**
 * Describes the message api.v1alpha1.UpdateSelectionTableRequest.
 * Use `create(UpdateSelectionTableRequestSchema)` to create a new message.
 */
export const UpdateSelectionTableRequestSchema: GenMessage<UpdateSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 25);

/**
 * Options for table updates
 *
 * @generated from message api.v1alpha1.TableUpdateOptions
 */
export type TableUpdateOptions = Message<"api.v1alpha1.TableUpdateOptions"> & {
  /**
   * Whether to preserve usage statistics
   *
   * @generated from field: bool preserve_statistics = 1;
   */
  preserveStatistics: boolean;

  /**
   * Whether to validate after update
   *
   * @generated from field: bool validate_after_update = 2;
   */
  validateAfterUpdate: boolean;

  /**
   * Whether to backup old version
   *
   * @generated from field: bool create_backup = 3;
   */
  createBackup: boolean;

  /**
   * Update reason
   *
   * @generated from field: string update_reason = 4;
   */
  updateReason: string;
};

/**
 * Describes the message api.v1alpha1.TableUpdateOptions.
 * Use `create(TableUpdateOptionsSchema)` to create a new message.
 */
export const TableUpdateOptionsSchema: GenMessage<TableUpdateOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 26);

/**
 * Update selection table response
 *
 * @generated from message api.v1alpha1.UpdateSelectionTableResponse
 */
export type UpdateSelectionTableResponse = Message<"api.v1alpha1.UpdateSelectionTableResponse"> & {
  /**
   * Updated table
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 1;
   */
  table?: SelectionTable;

  /**
   * Validation results
   *
   * @generated from field: api.v1alpha1.ValidationResult validation_result = 2;
   */
  validationResult?: ValidationResult;

  /**
   * Update confirmation
   *
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message api.v1alpha1.UpdateSelectionTableResponse.
 * Use `create(UpdateSelectionTableResponseSchema)` to create a new message.
 */
export const UpdateSelectionTableResponseSchema: GenMessage<UpdateSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 27);

/**
 * Delete selection table request
 *
 * @generated from message api.v1alpha1.DeleteSelectionTableRequest
 */
export type DeleteSelectionTableRequest = Message<"api.v1alpha1.DeleteSelectionTableRequest"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Whether to force deletion even if referenced by other tables
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message api.v1alpha1.DeleteSelectionTableRequest.
 * Use `create(DeleteSelectionTableRequestSchema)` to create a new message.
 */
export const DeleteSelectionTableRequestSchema: GenMessage<DeleteSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 28);

/**
 * Delete selection table response
 *
 * @generated from message api.v1alpha1.DeleteSelectionTableResponse
 */
export type DeleteSelectionTableResponse = Message<"api.v1alpha1.DeleteSelectionTableResponse"> & {
  /**
   * Deletion confirmation
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Number of references that were removed
   *
   * @generated from field: int32 references_removed = 2;
   */
  referencesRemoved: number;
};

/**
 * Describes the message api.v1alpha1.DeleteSelectionTableResponse.
 * Use `create(DeleteSelectionTableResponseSchema)` to create a new message.
 */
export const DeleteSelectionTableResponseSchema: GenMessage<DeleteSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 29);

/**
 * List selection tables request
 *
 * @generated from message api.v1alpha1.ListSelectionTablesRequest
 */
export type ListSelectionTablesRequest = Message<"api.v1alpha1.ListSelectionTablesRequest"> & {
  /**
   * Table filter
   *
   * @generated from field: api.v1alpha1.SelectionTableFilter filter = 1;
   */
  filter?: SelectionTableFilter;

  /**
   * Pagination
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo;

  /**
   * Sort options
   *
   * @generated from field: api.v1alpha1.TableSortOptions sort_options = 3;
   */
  sortOptions?: TableSortOptions;

  /**
   * Whether to include table statistics
   *
   * @generated from field: bool include_statistics = 4;
   */
  includeStatistics: boolean;
};

/**
 * Describes the message api.v1alpha1.ListSelectionTablesRequest.
 * Use `create(ListSelectionTablesRequestSchema)` to create a new message.
 */
export const ListSelectionTablesRequestSchema: GenMessage<ListSelectionTablesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 30);

/**
 * Filter for selection tables
 *
 * @generated from message api.v1alpha1.SelectionTableFilter
 */
export type SelectionTableFilter = Message<"api.v1alpha1.SelectionTableFilter"> & {
  /**
   * Table categories
   *
   * @generated from field: repeated string categories = 1;
   */
  categories: string[];

  /**
   * Table types
   *
   * @generated from field: repeated api.v1alpha1.SelectionTableType table_types = 2;
   */
  tableTypes: SelectionTableType[];

  /**
   * Author filter
   *
   * @generated from field: string author = 3;
   */
  author: string;

  /**
   * Search term in name/description
   *
   * @generated from field: string search_term = 4;
   */
  searchTerm: string;

  /**
   * Tags to match
   *
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * Only official content
   *
   * @generated from field: bool official_only = 6;
   */
  officialOnly: boolean;

  /**
   * Only public tables
   *
   * @generated from field: bool public_only = 7;
   */
  publicOnly: boolean;
};

/**
 * Describes the message api.v1alpha1.SelectionTableFilter.
 * Use `create(SelectionTableFilterSchema)` to create a new message.
 */
export const SelectionTableFilterSchema: GenMessage<SelectionTableFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 31);

/**
 * Sort options for table lists
 *
 * @generated from message api.v1alpha1.TableSortOptions
 */
export type TableSortOptions = Message<"api.v1alpha1.TableSortOptions"> & {
  /**
   * Field to sort by
   *
   * @generated from field: api.v1alpha1.TableSortField sort_by = 1;
   */
  sortBy: TableSortField;

  /**
   * Sort direction
   *
   * @generated from field: api.v1alpha1.TableSortDirection direction = 2;
   */
  direction: TableSortDirection;
};

/**
 * Describes the message api.v1alpha1.TableSortOptions.
 * Use `create(TableSortOptionsSchema)` to create a new message.
 */
export const TableSortOptionsSchema: GenMessage<TableSortOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 32);

/**
 * List selection tables response
 *
 * @generated from message api.v1alpha1.ListSelectionTablesResponse
 */
export type ListSelectionTablesResponse = Message<"api.v1alpha1.ListSelectionTablesResponse"> & {
  /**
   * List of tables
   *
   * @generated from field: repeated api.v1alpha1.SelectionTable tables = 1;
   */
  tables: SelectionTable[];

  /**
   * Pagination information
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo;

  /**
   * List statistics
   *
   * @generated from field: api.v1alpha1.TableListStats list_stats = 3;
   */
  listStats?: TableListStats;
};

/**
 * Describes the message api.v1alpha1.ListSelectionTablesResponse.
 * Use `create(ListSelectionTablesResponseSchema)` to create a new message.
 */
export const ListSelectionTablesResponseSchema: GenMessage<ListSelectionTablesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 33);

/**
 * Statistics for table list
 *
 * @generated from message api.v1alpha1.TableListStats
 */
export type TableListStats = Message<"api.v1alpha1.TableListStats"> & {
  /**
   * Total tables matching filter
   *
   * @generated from field: int32 total_count = 1;
   */
  totalCount: number;

  /**
   * Tables returned in this page
   *
   * @generated from field: int32 returned_count = 2;
   */
  returnedCount: number;

  /**
   * Tables by category breakdown
   *
   * @generated from field: map<string, int32> tables_by_category = 3;
   */
  tablesByCategory: { [key: string]: number };

  /**
   * Tables by type breakdown
   *
   * @generated from field: map<string, int32> tables_by_type = 4;
   */
  tablesByType: { [key: string]: number };

  /**
   * Most popular table
   *
   * @generated from field: string most_popular_table = 5;
   */
  mostPopularTable: string;
};

/**
 * Describes the message api.v1alpha1.TableListStats.
 * Use `create(TableListStatsSchema)` to create a new message.
 */
export const TableListStatsSchema: GenMessage<TableListStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 34);

/**
 * Roll on table request
 *
 * @generated from message api.v1alpha1.RollOnTableRequest
 */
export type RollOnTableRequest = Message<"api.v1alpha1.RollOnTableRequest"> & {
  /**
   * Table to roll on
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Number of rolls to make
   *
   * @generated from field: int32 roll_count = 2;
   */
  rollCount: number;

  /**
   * Roll parameters
   *
   * @generated from field: map<string, string> parameters = 3;
   */
  parameters: { [key: string]: string };

  /**
   * Roll options
   *
   * @generated from field: api.v1alpha1.RollOptions options = 4;
   */
  options?: RollOptions;
};

/**
 * Describes the message api.v1alpha1.RollOnTableRequest.
 * Use `create(RollOnTableRequestSchema)` to create a new message.
 */
export const RollOnTableRequestSchema: GenMessage<RollOnTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 35);

/**
 * Options for table rolls
 *
 * @generated from message api.v1alpha1.RollOptions
 */
export type RollOptions = Message<"api.v1alpha1.RollOptions"> & {
  /**
   * Random seed for reproducible results
   *
   * @generated from field: string seed = 1;
   */
  seed: string;

  /**
   * Roll modifiers
   *
   * @generated from field: repeated api.v1alpha1.RollModifier modifiers = 2;
   */
  modifiers: RollModifier[];

  /**
   * Whether to show roll details
   *
   * @generated from field: bool show_roll_details = 3;
   */
  showRollDetails: boolean;

  /**
   * Whether to group similar results
   *
   * @generated from field: bool group_similar = 4;
   */
  groupSimilar: boolean;

  /**
   * Maximum results to return
   *
   * @generated from field: int32 max_results = 5;
   */
  maxResults: number;

  /**
   * Whether to allow rerolls
   *
   * @generated from field: bool allow_rerolls = 6;
   */
  allowRerolls: boolean;
};

/**
 * Describes the message api.v1alpha1.RollOptions.
 * Use `create(RollOptionsSchema)` to create a new message.
 */
export const RollOptionsSchema: GenMessage<RollOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 36);

/**
 * Roll on table response
 *
 * @generated from message api.v1alpha1.RollOnTableResponse
 */
export type RollOnTableResponse = Message<"api.v1alpha1.RollOnTableResponse"> & {
  /**
   * Roll results
   *
   * @generated from field: repeated api.v1alpha1.RollResult results = 1;
   */
  results: RollResult[];

  /**
   * Roll statistics
   *
   * @generated from field: api.v1alpha1.RollStats roll_stats = 2;
   */
  rollStats?: RollStats;

  /**
   * Table that was rolled
   *
   * @generated from field: string table_id = 3;
   */
  tableId: string;

  /**
   * Roll session information
   *
   * @generated from field: api.v1alpha1.RollSession session = 4;
   */
  session?: RollSession;
};

/**
 * Describes the message api.v1alpha1.RollOnTableResponse.
 * Use `create(RollOnTableResponseSchema)` to create a new message.
 */
export const RollOnTableResponseSchema: GenMessage<RollOnTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 37);

/**
 * Individual roll result
 *
 * @generated from message api.v1alpha1.RollResult
 */
export type RollResult = Message<"api.v1alpha1.RollResult"> & {
  /**
   * Result identifier
   *
   * @generated from field: string result_id = 1;
   */
  resultId: string;

  /**
   * Table entry that was selected
   *
   * @generated from field: api.v1alpha1.TableEntry selected_entry = 2;
   */
  selectedEntry?: TableEntry;

  /**
   * Actual roll value
   *
   * @generated from field: int32 roll_value = 3;
   */
  rollValue: number;

  /**
   * Result data
   *
   * @generated from field: api.v1alpha1.TableEntryResult result_data = 4;
   */
  resultData?: TableEntryResult;

  /**
   * Roll details
   *
   * @generated from field: api.v1alpha1.RollDetails roll_details = 5;
   */
  rollDetails?: RollDetails;

  /**
   * Whether this result was modified
   *
   * @generated from field: bool was_modified = 6;
   */
  wasModified: boolean;

  /**
   * Modification reason
   *
   * @generated from field: string modification_reason = 7;
   */
  modificationReason: string;
};

/**
 * Describes the message api.v1alpha1.RollResult.
 * Use `create(RollResultSchema)` to create a new message.
 */
export const RollResultSchema: GenMessage<RollResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 38);

/**
 * Details about the roll itself
 *
 * @generated from message api.v1alpha1.RollDetails
 */
export type RollDetails = Message<"api.v1alpha1.RollDetails"> & {
  /**
   * Dice that were rolled
   *
   * @generated from field: repeated int32 dice_values = 1;
   */
  diceValues: number[];

  /**
   * Modifiers applied
   *
   * @generated from field: int32 total_modifier = 2;
   */
  totalModifier: number;

  /**
   * Raw roll before modifiers
   *
   * @generated from field: int32 raw_roll = 3;
   */
  rawRoll: number;

  /**
   * Final roll after modifiers
   *
   * @generated from field: int32 final_roll = 4;
   */
  finalRoll: number;

  /**
   * Dice notation used
   *
   * @generated from field: string dice_notation = 5;
   */
  diceNotation: string;

  /**
   * Any rerolls that occurred
   *
   * @generated from field: repeated int32 rerolls = 6;
   */
  rerolls: number[];
};

/**
 * Describes the message api.v1alpha1.RollDetails.
 * Use `create(RollDetailsSchema)` to create a new message.
 */
export const RollDetailsSchema: GenMessage<RollDetails> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 39);

/**
 * Statistics for roll operation
 *
 * @generated from message api.v1alpha1.RollStats
 */
export type RollStats = Message<"api.v1alpha1.RollStats"> & {
  /**
   * Roll execution time
   *
   * @generated from field: int64 roll_time_ms = 1;
   */
  rollTimeMs: bigint;

  /**
   * Number of dice rolled
   *
   * @generated from field: int32 dice_rolled = 2;
   */
  diceRolled: number;

  /**
   * Number of rerolls
   *
   * @generated from field: int32 rerolls_made = 3;
   */
  rerollsMade: number;

  /**
   * Average roll value
   *
   * @generated from field: double average_roll = 4;
   */
  averageRoll: number;

  /**
   * Highest roll
   *
   * @generated from field: int32 highest_roll = 5;
   */
  highestRoll: number;

  /**
   * Lowest roll
   *
   * @generated from field: int32 lowest_roll = 6;
   */
  lowestRoll: number;
};

/**
 * Describes the message api.v1alpha1.RollStats.
 * Use `create(RollStatsSchema)` to create a new message.
 */
export const RollStatsSchema: GenMessage<RollStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 40);

/**
 * Roll session information
 *
 * @generated from message api.v1alpha1.RollSession
 */
export type RollSession = Message<"api.v1alpha1.RollSession"> & {
  /**
   * Session identifier
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * When session expires
   *
   * @generated from field: int64 expires_at = 2;
   */
  expiresAt: bigint;

  /**
   * Number of rolls in session
   *
   * @generated from field: int32 roll_count = 3;
   */
  rollCount: number;

  /**
   * Session parameters
   *
   * @generated from field: map<string, string> parameters = 4;
   */
  parameters: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.RollSession.
 * Use `create(RollSessionSchema)` to create a new message.
 */
export const RollSessionSchema: GenMessage<RollSession> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 41);

/**
 * Roll multiple tables request
 *
 * @generated from message api.v1alpha1.RollMultipleRequest
 */
export type RollMultipleRequest = Message<"api.v1alpha1.RollMultipleRequest"> & {
  /**
   * Tables to roll with their configurations
   *
   * @generated from field: repeated api.v1alpha1.TableRollConfig table_rolls = 1;
   */
  tableRolls: TableRollConfig[];

  /**
   * Global roll options
   *
   * @generated from field: api.v1alpha1.RollOptions global_options = 2;
   */
  globalOptions?: RollOptions;

  /**
   * Whether to correlate results between tables
   *
   * @generated from field: bool correlate_results = 3;
   */
  correlateResults: boolean;
};

/**
 * Describes the message api.v1alpha1.RollMultipleRequest.
 * Use `create(RollMultipleRequestSchema)` to create a new message.
 */
export const RollMultipleRequestSchema: GenMessage<RollMultipleRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 42);

/**
 * Configuration for rolling a single table
 *
 * @generated from message api.v1alpha1.TableRollConfig
 */
export type TableRollConfig = Message<"api.v1alpha1.TableRollConfig"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Number of rolls for this table
   *
   * @generated from field: int32 roll_count = 2;
   */
  rollCount: number;

  /**
   * Table-specific parameters
   *
   * @generated from field: map<string, string> parameters = 3;
   */
  parameters: { [key: string]: string };

  /**
   * Table-specific modifiers
   *
   * @generated from field: repeated api.v1alpha1.RollModifier modifiers = 4;
   */
  modifiers: RollModifier[];
};

/**
 * Describes the message api.v1alpha1.TableRollConfig.
 * Use `create(TableRollConfigSchema)` to create a new message.
 */
export const TableRollConfigSchema: GenMessage<TableRollConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 43);

/**
 * Roll multiple tables response
 *
 * @generated from message api.v1alpha1.RollMultipleResponse
 */
export type RollMultipleResponse = Message<"api.v1alpha1.RollMultipleResponse"> & {
  /**
   * Results organized by table
   *
   * @generated from field: map<string, api.v1alpha1.TableRollResults> results_by_table = 1;
   */
  resultsByTable: { [key: string]: TableRollResults };

  /**
   * Combined results if correlation requested
   *
   * @generated from field: repeated api.v1alpha1.CombinedResult combined_results = 2;
   */
  combinedResults: CombinedResult[];

  /**
   * Overall roll statistics
   *
   * @generated from field: api.v1alpha1.MultiRollStats multi_roll_stats = 3;
   */
  multiRollStats?: MultiRollStats;
};

/**
 * Describes the message api.v1alpha1.RollMultipleResponse.
 * Use `create(RollMultipleResponseSchema)` to create a new message.
 */
export const RollMultipleResponseSchema: GenMessage<RollMultipleResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 44);

/**
 * Results for a single table in multi-roll
 *
 * @generated from message api.v1alpha1.TableRollResults
 */
export type TableRollResults = Message<"api.v1alpha1.TableRollResults"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Roll results for this table
   *
   * @generated from field: repeated api.v1alpha1.RollResult results = 2;
   */
  results: RollResult[];

  /**
   * Table-specific statistics
   *
   * @generated from field: api.v1alpha1.RollStats stats = 3;
   */
  stats?: RollStats;
};

/**
 * Describes the message api.v1alpha1.TableRollResults.
 * Use `create(TableRollResultsSchema)` to create a new message.
 */
export const TableRollResultsSchema: GenMessage<TableRollResults> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 45);

/**
 * Combined result from multiple tables
 *
 * @generated from message api.v1alpha1.CombinedResult
 */
export type CombinedResult = Message<"api.v1alpha1.CombinedResult"> & {
  /**
   * Result identifier
   *
   * @generated from field: string result_id = 1;
   */
  resultId: string;

  /**
   * Components from different tables
   *
   * @generated from field: repeated api.v1alpha1.ResultComponent components = 2;
   */
  components: ResultComponent[];

  /**
   * Combined description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Total value (if applicable)
   *
   * @generated from field: double total_value = 4;
   */
  totalValue: number;
};

/**
 * Describes the message api.v1alpha1.CombinedResult.
 * Use `create(CombinedResultSchema)` to create a new message.
 */
export const CombinedResultSchema: GenMessage<CombinedResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 46);

/**
 * Component of a combined result
 *
 * @generated from message api.v1alpha1.ResultComponent
 */
export type ResultComponent = Message<"api.v1alpha1.ResultComponent"> & {
  /**
   * Source table
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Result from that table
   *
   * @generated from field: api.v1alpha1.RollResult result = 2;
   */
  result?: RollResult;

  /**
   * How this component relates to the combined result
   *
   * "primary", "modifier", "additional", "flavor"
   *
   * @generated from field: string relationship = 3;
   */
  relationship: string;
};

/**
 * Describes the message api.v1alpha1.ResultComponent.
 * Use `create(ResultComponentSchema)` to create a new message.
 */
export const ResultComponentSchema: GenMessage<ResultComponent> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 47);

/**
 * Statistics for multiple table rolls
 *
 * @generated from message api.v1alpha1.MultiRollStats
 */
export type MultiRollStats = Message<"api.v1alpha1.MultiRollStats"> & {
  /**
   * Total execution time
   *
   * @generated from field: int64 total_time_ms = 1;
   */
  totalTimeMs: bigint;

  /**
   * Number of tables rolled
   *
   * @generated from field: int32 tables_rolled = 2;
   */
  tablesRolled: number;

  /**
   * Total results generated
   *
   * @generated from field: int32 total_results = 3;
   */
  totalResults: number;

  /**
   * Average time per table
   *
   * @generated from field: double average_time_per_table_ms = 4;
   */
  averageTimePerTableMs: number;

  /**
   * Number of correlations found
   *
   * @generated from field: int32 correlations_found = 5;
   */
  correlationsFound: number;
};

/**
 * Describes the message api.v1alpha1.MultiRollStats.
 * Use `create(MultiRollStatsSchema)` to create a new message.
 */
export const MultiRollStatsSchema: GenMessage<MultiRollStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 48);

/**
 * Roll with modifiers request
 *
 * @generated from message api.v1alpha1.RollWithModifiersRequest
 */
export type RollWithModifiersRequest = Message<"api.v1alpha1.RollWithModifiersRequest"> & {
  /**
   * Table to roll on
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Roll modifiers to apply
   *
   * @generated from field: repeated api.v1alpha1.RollModifier modifiers = 2;
   */
  modifiers: RollModifier[];

  /**
   * Number of rolls
   *
   * @generated from field: int32 roll_count = 3;
   */
  rollCount: number;

  /**
   * Roll options
   *
   * @generated from field: api.v1alpha1.RollOptions options = 4;
   */
  options?: RollOptions;
};

/**
 * Describes the message api.v1alpha1.RollWithModifiersRequest.
 * Use `create(RollWithModifiersRequestSchema)` to create a new message.
 */
export const RollWithModifiersRequestSchema: GenMessage<RollWithModifiersRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 49);

/**
 * Roll with modifiers response
 *
 * @generated from message api.v1alpha1.RollWithModifiersResponse
 */
export type RollWithModifiersResponse = Message<"api.v1alpha1.RollWithModifiersResponse"> & {
  /**
   * Modified roll results
   *
   * @generated from field: repeated api.v1alpha1.RollResult results = 1;
   */
  results: RollResult[];

  /**
   * Modifier effects
   *
   * @generated from field: repeated api.v1alpha1.ModifierEffect modifier_effects = 2;
   */
  modifierEffects: ModifierEffect[];

  /**
   * Roll statistics
   *
   * @generated from field: api.v1alpha1.RollStats roll_stats = 3;
   */
  rollStats?: RollStats;
};

/**
 * Describes the message api.v1alpha1.RollWithModifiersResponse.
 * Use `create(RollWithModifiersResponseSchema)` to create a new message.
 */
export const RollWithModifiersResponseSchema: GenMessage<RollWithModifiersResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 50);

/**
 * Effect of a modifier on rolls
 *
 * @generated from message api.v1alpha1.ModifierEffect
 */
export type ModifierEffect = Message<"api.v1alpha1.ModifierEffect"> & {
  /**
   * Modifier that was applied
   *
   * @generated from field: api.v1alpha1.RollModifier modifier = 1;
   */
  modifier?: RollModifier;

  /**
   * How many rolls were affected
   *
   * @generated from field: int32 rolls_affected = 2;
   */
  rollsAffected: number;

  /**
   * Average change caused by modifier
   *
   * @generated from field: double average_change = 3;
   */
  averageChange: number;

  /**
   * Description of effect
   *
   * @generated from field: string effect_description = 4;
   */
  effectDescription: string;
};

/**
 * Describes the message api.v1alpha1.ModifierEffect.
 * Use `create(ModifierEffectSchema)` to create a new message.
 */
export const ModifierEffectSchema: GenMessage<ModifierEffect> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 51);

/**
 * Batch roll tables request
 *
 * @generated from message api.v1alpha1.BatchRollTablesRequest
 */
export type BatchRollTablesRequest = Message<"api.v1alpha1.BatchRollTablesRequest"> & {
  /**
   * Batch of roll operations
   *
   * @generated from field: repeated api.v1alpha1.BatchRollOperation roll_operations = 1;
   */
  rollOperations: BatchRollOperation[];

  /**
   * Batch options
   *
   * @generated from field: api.v1alpha1.BatchRollOptions batch_options = 2;
   */
  batchOptions?: BatchRollOptions;
};

/**
 * Describes the message api.v1alpha1.BatchRollTablesRequest.
 * Use `create(BatchRollTablesRequestSchema)` to create a new message.
 */
export const BatchRollTablesRequestSchema: GenMessage<BatchRollTablesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 52);

/**
 * Individual roll operation in batch
 *
 * @generated from message api.v1alpha1.BatchRollOperation
 */
export type BatchRollOperation = Message<"api.v1alpha1.BatchRollOperation"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Table to roll on
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Number of rolls
   *
   * @generated from field: int32 roll_count = 3;
   */
  rollCount: number;

  /**
   * Operation parameters
   *
   * @generated from field: map<string, string> parameters = 4;
   */
  parameters: { [key: string]: string };

  /**
   * Operation-specific options
   *
   * @generated from field: api.v1alpha1.RollOptions options = 5;
   */
  options?: RollOptions;
};

/**
 * Describes the message api.v1alpha1.BatchRollOperation.
 * Use `create(BatchRollOperationSchema)` to create a new message.
 */
export const BatchRollOperationSchema: GenMessage<BatchRollOperation> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 53);

/**
 * Options for batch roll operations
 *
 * @generated from message api.v1alpha1.BatchRollOptions
 */
export type BatchRollOptions = Message<"api.v1alpha1.BatchRollOptions"> & {
  /**
   * Whether to execute operations in parallel
   *
   * @generated from field: bool parallel_execution = 1;
   */
  parallelExecution: boolean;

  /**
   * Maximum execution time for entire batch
   *
   * @generated from field: int32 timeout_ms = 2;
   */
  timeoutMs: number;

  /**
   * Whether to abort all if any fail
   *
   * @generated from field: bool all_or_nothing = 3;
   */
  allOrNothing: boolean;

  /**
   * Whether to correlate results across operations
   *
   * @generated from field: bool correlate_across_operations = 4;
   */
  correlateAcrossOperations: boolean;
};

/**
 * Describes the message api.v1alpha1.BatchRollOptions.
 * Use `create(BatchRollOptionsSchema)` to create a new message.
 */
export const BatchRollOptionsSchema: GenMessage<BatchRollOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 54);

/**
 * Batch roll tables response
 *
 * @generated from message api.v1alpha1.BatchRollTablesResponse
 */
export type BatchRollTablesResponse = Message<"api.v1alpha1.BatchRollTablesResponse"> & {
  /**
   * Successful roll operations
   *
   * @generated from field: repeated api.v1alpha1.BatchRollResult successful_operations = 1;
   */
  successfulOperations: BatchRollResult[];

  /**
   * Failed roll operations
   *
   * @generated from field: repeated api.v1alpha1.BatchRollFailure failed_operations = 2;
   */
  failedOperations: BatchRollFailure[];

  /**
   * Batch statistics
   *
   * @generated from field: api.v1alpha1.BatchRollStats batch_stats = 3;
   */
  batchStats?: BatchRollStats;

  /**
   * Cross-operation correlations (if requested)
   *
   * @generated from field: repeated api.v1alpha1.OperationCorrelation correlations = 4;
   */
  correlations: OperationCorrelation[];
};

/**
 * Describes the message api.v1alpha1.BatchRollTablesResponse.
 * Use `create(BatchRollTablesResponseSchema)` to create a new message.
 */
export const BatchRollTablesResponseSchema: GenMessage<BatchRollTablesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 55);

/**
 * Result of successful batch roll operation
 *
 * @generated from message api.v1alpha1.BatchRollResult
 */
export type BatchRollResult = Message<"api.v1alpha1.BatchRollResult"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Roll results
   *
   * @generated from field: repeated api.v1alpha1.RollResult results = 2;
   */
  results: RollResult[];

  /**
   * Operation statistics
   *
   * @generated from field: api.v1alpha1.RollStats stats = 3;
   */
  stats?: RollStats;
};

/**
 * Describes the message api.v1alpha1.BatchRollResult.
 * Use `create(BatchRollResultSchema)` to create a new message.
 */
export const BatchRollResultSchema: GenMessage<BatchRollResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 56);

/**
 * Failed batch roll operation
 *
 * @generated from message api.v1alpha1.BatchRollFailure
 */
export type BatchRollFailure = Message<"api.v1alpha1.BatchRollFailure"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Table that failed to roll
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Failure reason
   *
   * @generated from field: string failure_reason = 3;
   */
  failureReason: string;

  /**
   * Error details
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 4;
   */
  errors: RoomError[];
};

/**
 * Describes the message api.v1alpha1.BatchRollFailure.
 * Use `create(BatchRollFailureSchema)` to create a new message.
 */
export const BatchRollFailureSchema: GenMessage<BatchRollFailure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 57);

/**
 * Statistics for batch roll operations
 *
 * @generated from message api.v1alpha1.BatchRollStats
 */
export type BatchRollStats = Message<"api.v1alpha1.BatchRollStats"> & {
  /**
   * Total batch execution time
   *
   * @generated from field: int64 total_batch_time_ms = 1;
   */
  totalBatchTimeMs: bigint;

  /**
   * Successful operations
   *
   * @generated from field: int32 successful_operations = 2;
   */
  successfulOperations: number;

  /**
   * Failed operations
   *
   * @generated from field: int32 failed_operations = 3;
   */
  failedOperations: number;

  /**
   * Total results generated
   *
   * @generated from field: int32 total_results = 4;
   */
  totalResults: number;

  /**
   * Average operation time
   *
   * @generated from field: double average_operation_time_ms = 5;
   */
  averageOperationTimeMs: number;

  /**
   * Whether parallel execution was used
   *
   * @generated from field: bool used_parallel_execution = 6;
   */
  usedParallelExecution: boolean;
};

/**
 * Describes the message api.v1alpha1.BatchRollStats.
 * Use `create(BatchRollStatsSchema)` to create a new message.
 */
export const BatchRollStatsSchema: GenMessage<BatchRollStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 58);

/**
 * Correlation between batch operations
 *
 * @generated from message api.v1alpha1.OperationCorrelation
 */
export type OperationCorrelation = Message<"api.v1alpha1.OperationCorrelation"> & {
  /**
   * Operations involved in correlation
   *
   * @generated from field: repeated string operation_ids = 1;
   */
  operationIds: string[];

  /**
   * Type of correlation
   *
   * "complementary", "contradictory", "reinforcing"
   *
   * @generated from field: string correlation_type = 2;
   */
  correlationType: string;

  /**
   * Correlation strength (0.0-1.0)
   *
   * @generated from field: double strength = 3;
   */
  strength: number;

  /**
   * Description of correlation
   *
   * @generated from field: string description = 4;
   */
  description: string;
};

/**
 * Describes the message api.v1alpha1.OperationCorrelation.
 * Use `create(OperationCorrelationSchema)` to create a new message.
 */
export const OperationCorrelationSchema: GenMessage<OperationCorrelation> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 59);

/**
 * Generate encounter request
 *
 * @generated from message api.v1alpha1.GenerateEncounterRequest
 */
export type GenerateEncounterRequest = Message<"api.v1alpha1.GenerateEncounterRequest"> & {
  /**
   * Room to generate encounter for
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Encounter parameters
   *
   * @generated from field: api.v1alpha1.EncounterParameters encounter_params = 2;
   */
  encounterParams?: EncounterParameters;

  /**
   * Tables to use for generation
   *
   * @generated from field: api.v1alpha1.EncounterTables encounter_tables = 3;
   */
  encounterTables?: EncounterTables;

  /**
   * Generation options
   *
   * @generated from field: api.v1alpha1.EncounterGenerationOptions options = 4;
   */
  options?: EncounterGenerationOptions;
};

/**
 * Describes the message api.v1alpha1.GenerateEncounterRequest.
 * Use `create(GenerateEncounterRequestSchema)` to create a new message.
 */
export const GenerateEncounterRequestSchema: GenMessage<GenerateEncounterRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 60);

/**
 * Parameters for encounter generation
 *
 * @generated from message api.v1alpha1.EncounterParameters
 */
export type EncounterParameters = Message<"api.v1alpha1.EncounterParameters"> & {
  /**
   * Party level for scaling
   *
   * @generated from field: int32 party_level = 1;
   */
  partyLevel: number;

  /**
   * Number of party members
   *
   * @generated from field: int32 party_size = 2;
   */
  partySize: number;

  /**
   * Desired encounter difficulty
   *
   * "easy", "medium", "hard", "deadly"
   *
   * @generated from field: string difficulty = 3;
   */
  difficulty: string;

  /**
   * Encounter theme
   *
   * "combat", "social", "exploration", "mixed"
   *
   * @generated from field: string theme = 4;
   */
  theme: string;

  /**
   * Environment type
   *
   * "dungeon", "wilderness", "urban", "planar"
   *
   * @generated from field: string environment = 5;
   */
  environment: string;

  /**
   * Special requirements
   *
   * @generated from field: repeated string requirements = 6;
   */
  requirements: string[];
};

/**
 * Describes the message api.v1alpha1.EncounterParameters.
 * Use `create(EncounterParametersSchema)` to create a new message.
 */
export const EncounterParametersSchema: GenMessage<EncounterParameters> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 61);

/**
 * Tables used for encounter generation
 *
 * @generated from message api.v1alpha1.EncounterTables
 */
export type EncounterTables = Message<"api.v1alpha1.EncounterTables"> & {
  /**
   * Primary encounter table
   *
   * @generated from field: string primary_table_id = 1;
   */
  primaryTableId: string;

  /**
   * Monster/NPC selection table
   *
   * @generated from field: string creature_table_id = 2;
   */
  creatureTableId: string;

  /**
   * Treasure/loot table
   *
   * @generated from field: string treasure_table_id = 3;
   */
  treasureTableId: string;

  /**
   * Environmental features table
   *
   * @generated from field: string environment_table_id = 4;
   */
  environmentTableId: string;

  /**
   * Complication/twist table
   *
   * @generated from field: string complication_table_id = 5;
   */
  complicationTableId: string;
};

/**
 * Describes the message api.v1alpha1.EncounterTables.
 * Use `create(EncounterTablesSchema)` to create a new message.
 */
export const EncounterTablesSchema: GenMessage<EncounterTables> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 62);

/**
 * Options for encounter generation
 *
 * @generated from message api.v1alpha1.EncounterGenerationOptions
 */
export type EncounterGenerationOptions = Message<"api.v1alpha1.EncounterGenerationOptions"> & {
  /**
   * Random seed for reproducible encounters
   *
   * @generated from field: string seed = 1;
   */
  seed: string;

  /**
   * Whether to include treasure
   *
   * @generated from field: bool include_treasure = 2;
   */
  includeTreasure: boolean;

  /**
   * Whether to add environmental features
   *
   * @generated from field: bool add_environmental_features = 3;
   */
  addEnvironmentalFeatures: boolean;

  /**
   * Whether to include complications
   *
   * @generated from field: bool include_complications = 4;
   */
  includeComplications: boolean;

  /**
   * Maximum creatures in encounter
   *
   * @generated from field: int32 max_creatures = 5;
   */
  maxCreatures: number;

  /**
   * Whether to balance encounter difficulty
   *
   * @generated from field: bool balance_difficulty = 6;
   */
  balanceDifficulty: boolean;
};

/**
 * Describes the message api.v1alpha1.EncounterGenerationOptions.
 * Use `create(EncounterGenerationOptionsSchema)` to create a new message.
 */
export const EncounterGenerationOptionsSchema: GenMessage<EncounterGenerationOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 63);

/**
 * Generate encounter response
 *
 * @generated from message api.v1alpha1.GenerateEncounterResponse
 */
export type GenerateEncounterResponse = Message<"api.v1alpha1.GenerateEncounterResponse"> & {
  /**
   * Generated encounter
   *
   * @generated from field: api.v1alpha1.GeneratedEncounter encounter = 1;
   */
  encounter?: GeneratedEncounter;

  /**
   * Generation statistics
   *
   * @generated from field: api.v1alpha1.EncounterGenerationStats generation_stats = 2;
   */
  generationStats?: EncounterGenerationStats;

  /**
   * Tables used in generation
   *
   * @generated from field: repeated string tables_used = 3;
   */
  tablesUsed: string[];
};

/**
 * Describes the message api.v1alpha1.GenerateEncounterResponse.
 * Use `create(GenerateEncounterResponseSchema)` to create a new message.
 */
export const GenerateEncounterResponseSchema: GenMessage<GenerateEncounterResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 64);

/**
 * Generated encounter result
 *
 * @generated from message api.v1alpha1.GeneratedEncounter
 */
export type GeneratedEncounter = Message<"api.v1alpha1.GeneratedEncounter"> & {
  /**
   * Encounter identifier
   *
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * Encounter name/title
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Encounter description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Creatures in encounter
   *
   * @generated from field: repeated api.v1alpha1.EncounterCreature creatures = 4;
   */
  creatures: EncounterCreature[];

  /**
   * Treasure in encounter
   *
   * @generated from field: repeated api.v1alpha1.TreasureItem treasure = 5;
   */
  treasure: TreasureItem[];

  /**
   * Environmental features
   *
   * @generated from field: repeated api.v1alpha1.EnvironmentalFeature environmental_features = 6;
   */
  environmentalFeatures: EnvironmentalFeature[];

  /**
   * Complications or twists
   *
   * @generated from field: repeated api.v1alpha1.EncounterComplication complications = 7;
   */
  complications: EncounterComplication[];

  /**
   * Encounter difficulty rating
   *
   * @generated from field: string difficulty_rating = 8;
   */
  difficultyRating: string;

  /**
   * Estimated challenge rating
   *
   * @generated from field: double challenge_rating = 9;
   */
  challengeRating: number;
};

/**
 * Describes the message api.v1alpha1.GeneratedEncounter.
 * Use `create(GeneratedEncounterSchema)` to create a new message.
 */
export const GeneratedEncounterSchema: GenMessage<GeneratedEncounter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 65);

/**
 * Creature in generated encounter
 *
 * @generated from message api.v1alpha1.EncounterCreature
 */
export type EncounterCreature = Message<"api.v1alpha1.EncounterCreature"> & {
  /**
   * Creature identifier
   *
   * @generated from field: string creature_id = 1;
   */
  creatureId: string;

  /**
   * Creature name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Number of this creature type
   *
   * @generated from field: int32 quantity = 3;
   */
  quantity: number;

  /**
   * Challenge rating
   *
   * @generated from field: double challenge_rating = 4;
   */
  challengeRating: number;

  /**
   * Role in encounter
   *
   * "leader", "minion", "elite", "solo"
   *
   * @generated from field: string role = 5;
   */
  role: string;

  /**
   * Spawn preferences
   *
   * @generated from field: api.v1alpha1.EntitySpawnPreferences spawn_preferences = 6;
   */
  spawnPreferences?: EntitySpawnPreferences;

  /**
   * Special instructions
   *
   * @generated from field: string special_instructions = 7;
   */
  specialInstructions: string;
};

/**
 * Describes the message api.v1alpha1.EncounterCreature.
 * Use `create(EncounterCreatureSchema)` to create a new message.
 */
export const EncounterCreatureSchema: GenMessage<EncounterCreature> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 66);

/**
 * Treasure item in encounter
 *
 * @generated from message api.v1alpha1.TreasureItem
 */
export type TreasureItem = Message<"api.v1alpha1.TreasureItem"> & {
  /**
   * Item identifier
   *
   * @generated from field: string item_id = 1;
   */
  itemId: string;

  /**
   * Item name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Item quantity
   *
   * @generated from field: int32 quantity = 3;
   */
  quantity: number;

  /**
   * Item value
   *
   * @generated from field: int32 value_gp = 4;
   */
  valueGp: number;

  /**
   * Item rarity
   *
   * @generated from field: string rarity = 5;
   */
  rarity: string;

  /**
   * Whether item is magical
   *
   * @generated from field: bool is_magical = 6;
   */
  isMagical: boolean;

  /**
   * Item location in encounter
   *
   * "on_creature", "hidden", "obvious", "trapped"
   *
   * @generated from field: string location = 7;
   */
  location: string;
};

/**
 * Describes the message api.v1alpha1.TreasureItem.
 * Use `create(TreasureItemSchema)` to create a new message.
 */
export const TreasureItemSchema: GenMessage<TreasureItem> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 67);

/**
 * Environmental feature in encounter
 *
 * @generated from message api.v1alpha1.EnvironmentalFeature
 */
export type EnvironmentalFeature = Message<"api.v1alpha1.EnvironmentalFeature"> & {
  /**
   * Feature identifier
   *
   * @generated from field: string feature_id = 1;
   */
  featureId: string;

  /**
   * Feature name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Feature description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Feature type
   *
   * "terrain", "hazard", "cover", "interactive"
   *
   * @generated from field: string feature_type = 4;
   */
  featureType: string;

  /**
   * Preferred location
   *
   * @generated from field: string preferred_location = 5;
   */
  preferredLocation: string;

  /**
   * Game effects
   *
   * @generated from field: repeated string effects = 6;
   */
  effects: string[];
};

/**
 * Describes the message api.v1alpha1.EnvironmentalFeature.
 * Use `create(EnvironmentalFeatureSchema)` to create a new message.
 */
export const EnvironmentalFeatureSchema: GenMessage<EnvironmentalFeature> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 68);

/**
 * Complication in encounter
 *
 * @generated from message api.v1alpha1.EncounterComplication
 */
export type EncounterComplication = Message<"api.v1alpha1.EncounterComplication"> & {
  /**
   * Complication identifier
   *
   * @generated from field: string complication_id = 1;
   */
  complicationId: string;

  /**
   * Complication name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Complication description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * When complication triggers
   *
   * "start", "mid_combat", "creature_death", "condition"
   *
   * @generated from field: string trigger = 4;
   */
  trigger: string;

  /**
   * Complication effects
   *
   * @generated from field: repeated string effects = 5;
   */
  effects: string[];
};

/**
 * Describes the message api.v1alpha1.EncounterComplication.
 * Use `create(EncounterComplicationSchema)` to create a new message.
 */
export const EncounterComplicationSchema: GenMessage<EncounterComplication> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 69);

/**
 * Statistics for encounter generation
 *
 * @generated from message api.v1alpha1.EncounterGenerationStats
 */
export type EncounterGenerationStats = Message<"api.v1alpha1.EncounterGenerationStats"> & {
  /**
   * Generation time
   *
   * @generated from field: int64 generation_time_ms = 1;
   */
  generationTimeMs: bigint;

  /**
   * Number of table rolls made
   *
   * @generated from field: int32 table_rolls_made = 2;
   */
  tableRollsMade: number;

  /**
   * Number of creatures generated
   *
   * @generated from field: int32 creatures_generated = 3;
   */
  creaturesGenerated: number;

  /**
   * Number of treasure items generated
   *
   * @generated from field: int32 treasure_items_generated = 4;
   */
  treasureItemsGenerated: number;

  /**
   * Actual difficulty achieved
   *
   * @generated from field: string actual_difficulty = 5;
   */
  actualDifficulty: string;

  /**
   * Challenge rating calculation
   *
   * @generated from field: double calculated_cr = 6;
   */
  calculatedCr: number;
};

/**
 * Describes the message api.v1alpha1.EncounterGenerationStats.
 * Use `create(EncounterGenerationStatsSchema)` to create a new message.
 */
export const EncounterGenerationStatsSchema: GenMessage<EncounterGenerationStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 70);

/**
 * Generate loot request
 *
 * @generated from message api.v1alpha1.GenerateLootRequest
 */
export type GenerateLootRequest = Message<"api.v1alpha1.GenerateLootRequest"> & {
  /**
   * Loot generation parameters
   *
   * @generated from field: api.v1alpha1.LootParameters loot_params = 1;
   */
  lootParams?: LootParameters;

  /**
   * Loot tables to use
   *
   * @generated from field: api.v1alpha1.LootTables loot_tables = 2;
   */
  lootTables?: LootTables;

  /**
   * Generation options
   *
   * @generated from field: api.v1alpha1.LootGenerationOptions options = 3;
   */
  options?: LootGenerationOptions;
};

/**
 * Describes the message api.v1alpha1.GenerateLootRequest.
 * Use `create(GenerateLootRequestSchema)` to create a new message.
 */
export const GenerateLootRequestSchema: GenMessage<GenerateLootRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 71);

/**
 * Parameters for loot generation
 *
 * @generated from message api.v1alpha1.LootParameters
 */
export type LootParameters = Message<"api.v1alpha1.LootParameters"> & {
  /**
   * Challenge rating for loot scaling
   *
   * @generated from field: double challenge_rating = 1;
   */
  challengeRating: number;

  /**
   * Party level for loot appropriateness
   *
   * @generated from field: int32 party_level = 2;
   */
  partyLevel: number;

  /**
   * Loot type preference
   *
   * "treasure", "equipment", "consumables", "mixed"
   *
   * @generated from field: string loot_type = 3;
   */
  lootType: string;

  /**
   * Loot rarity preference
   *
   * "common", "uncommon", "rare", "very_rare", "legendary"
   *
   * @generated from field: string rarity_preference = 4;
   */
  rarityPreference: string;

  /**
   * Total value budget (in gold pieces)
   *
   * @generated from field: int32 value_budget_gp = 5;
   */
  valueBudgetGp: number;

  /**
   * Loot source
   *
   * "hoard", "individual", "room", "quest_reward"
   *
   * @generated from field: string source = 6;
   */
  source: string;
};

/**
 * Describes the message api.v1alpha1.LootParameters.
 * Use `create(LootParametersSchema)` to create a new message.
 */
export const LootParametersSchema: GenMessage<LootParameters> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 72);

/**
 * Tables used for loot generation
 *
 * @generated from message api.v1alpha1.LootTables
 */
export type LootTables = Message<"api.v1alpha1.LootTables"> & {
  /**
   * Primary loot table
   *
   * @generated from field: string primary_table_id = 1;
   */
  primaryTableId: string;

  /**
   * Magic item table
   *
   * @generated from field: string magic_item_table_id = 2;
   */
  magicItemTableId: string;

  /**
   * Mundane equipment table
   *
   * @generated from field: string equipment_table_id = 3;
   */
  equipmentTableId: string;

  /**
   * Consumables table
   *
   * @generated from field: string consumables_table_id = 4;
   */
  consumablesTableId: string;

  /**
   * Currency/gems table
   *
   * @generated from field: string currency_table_id = 5;
   */
  currencyTableId: string;
};

/**
 * Describes the message api.v1alpha1.LootTables.
 * Use `create(LootTablesSchema)` to create a new message.
 */
export const LootTablesSchema: GenMessage<LootTables> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 73);

/**
 * Options for loot generation
 *
 * @generated from message api.v1alpha1.LootGenerationOptions
 */
export type LootGenerationOptions = Message<"api.v1alpha1.LootGenerationOptions"> & {
  /**
   * Random seed
   *
   * @generated from field: string seed = 1;
   */
  seed: string;

  /**
   * Whether to include cursed items
   *
   * @generated from field: bool include_cursed_items = 2;
   */
  includeCursedItems: boolean;

  /**
   * Whether to vary item conditions
   *
   * @generated from field: bool vary_item_conditions = 3;
   */
  varyItemConditions: boolean;

  /**
   * Maximum number of items
   *
   * @generated from field: int32 max_items = 4;
   */
  maxItems: number;

  /**
   * Whether to bundle similar items
   *
   * @generated from field: bool bundle_similar_items = 5;
   */
  bundleSimilarItems: boolean;

  /**
   * Whether to include item descriptions
   *
   * @generated from field: bool include_descriptions = 6;
   */
  includeDescriptions: boolean;
};

/**
 * Describes the message api.v1alpha1.LootGenerationOptions.
 * Use `create(LootGenerationOptionsSchema)` to create a new message.
 */
export const LootGenerationOptionsSchema: GenMessage<LootGenerationOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 74);

/**
 * Generate loot response
 *
 * @generated from message api.v1alpha1.GenerateLootResponse
 */
export type GenerateLootResponse = Message<"api.v1alpha1.GenerateLootResponse"> & {
  /**
   * Generated loot
   *
   * @generated from field: api.v1alpha1.GeneratedLoot loot = 1;
   */
  loot?: GeneratedLoot;

  /**
   * Generation statistics
   *
   * @generated from field: api.v1alpha1.LootGenerationStats generation_stats = 2;
   */
  generationStats?: LootGenerationStats;

  /**
   * Tables used
   *
   * @generated from field: repeated string tables_used = 3;
   */
  tablesUsed: string[];
};

/**
 * Describes the message api.v1alpha1.GenerateLootResponse.
 * Use `create(GenerateLootResponseSchema)` to create a new message.
 */
export const GenerateLootResponseSchema: GenMessage<GenerateLootResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 75);

/**
 * Generated loot result
 *
 * @generated from message api.v1alpha1.GeneratedLoot
 */
export type GeneratedLoot = Message<"api.v1alpha1.GeneratedLoot"> & {
  /**
   * Loot identifier
   *
   * @generated from field: string loot_id = 1;
   */
  lootId: string;

  /**
   * Loot description
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Individual loot items
   *
   * @generated from field: repeated api.v1alpha1.GeneratedLootItem items = 3;
   */
  items: GeneratedLootItem[];

  /**
   * Total loot value
   *
   * @generated from field: int32 total_value_gp = 4;
   */
  totalValueGp: number;

  /**
   * Loot rarity distribution
   *
   * @generated from field: map<string, int32> rarity_distribution = 5;
   */
  rarityDistribution: { [key: string]: number };

  /**
   * Special notes about the loot
   *
   * @generated from field: repeated string special_notes = 6;
   */
  specialNotes: string[];
};

/**
 * Describes the message api.v1alpha1.GeneratedLoot.
 * Use `create(GeneratedLootSchema)` to create a new message.
 */
export const GeneratedLootSchema: GenMessage<GeneratedLoot> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 76);

/**
 * Individual loot item
 *
 * @generated from message api.v1alpha1.GeneratedLootItem
 */
export type GeneratedLootItem = Message<"api.v1alpha1.GeneratedLootItem"> & {
  /**
   * Item identifier
   *
   * @generated from field: string item_id = 1;
   */
  itemId: string;

  /**
   * Item name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Item description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Item quantity
   *
   * @generated from field: int32 quantity = 4;
   */
  quantity: number;

  /**
   * Item value per unit
   *
   * @generated from field: int32 unit_value_gp = 5;
   */
  unitValueGp: number;

  /**
   * Total value for this stack
   *
   * @generated from field: int32 total_value_gp = 6;
   */
  totalValueGp: number;

  /**
   * Item rarity
   *
   * @generated from field: string rarity = 7;
   */
  rarity: string;

  /**
   * Item type
   *
   * "weapon", "armor", "consumable", "treasure", "currency"
   *
   * @generated from field: string item_type = 8;
   */
  itemType: string;

  /**
   * Item condition
   *
   * @generated from field: string condition = 9;
   */
  condition: string;

  /**
   * Whether item is magical
   *
   * @generated from field: bool is_magical = 10;
   */
  isMagical: boolean;

  /**
   * Whether item is cursed
   *
   * @generated from field: bool is_cursed = 11;
   */
  isCursed: boolean;

  /**
   * Item properties
   *
   * @generated from field: map<string, string> properties = 12;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.GeneratedLootItem.
 * Use `create(GeneratedLootItemSchema)` to create a new message.
 */
export const GeneratedLootItemSchema: GenMessage<GeneratedLootItem> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 77);

/**
 * Statistics for loot generation
 *
 * @generated from message api.v1alpha1.LootGenerationStats
 */
export type LootGenerationStats = Message<"api.v1alpha1.LootGenerationStats"> & {
  /**
   * Generation time
   *
   * @generated from field: int64 generation_time_ms = 1;
   */
  generationTimeMs: bigint;

  /**
   * Number of table rolls
   *
   * @generated from field: int32 table_rolls_made = 2;
   */
  tableRollsMade: number;

  /**
   * Items generated
   *
   * @generated from field: int32 items_generated = 3;
   */
  itemsGenerated: number;

  /**
   * Value generated vs budget
   *
   * @generated from field: int32 value_generated_gp = 4;
   */
  valueGeneratedGp: number;

  /**
   * @generated from field: int32 value_budget_gp = 5;
   */
  valueBudgetGp: number;

  /**
   * Rarity breakdown
   *
   * @generated from field: map<string, int32> rarity_counts = 6;
   */
  rarityCounts: { [key: string]: number };
};

/**
 * Describes the message api.v1alpha1.LootGenerationStats.
 * Use `create(LootGenerationStatsSchema)` to create a new message.
 */
export const LootGenerationStatsSchema: GenMessage<LootGenerationStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 78);

/**
 * Validate selection table request
 *
 * @generated from message api.v1alpha1.ValidateSelectionTableRequest
 */
export type ValidateSelectionTableRequest = Message<"api.v1alpha1.ValidateSelectionTableRequest"> & {
  /**
   * Table to validate
   *
   * @generated from field: api.v1alpha1.SelectionTable table = 1;
   */
  table?: SelectionTable;

  /**
   * Validation options
   *
   * @generated from field: api.v1alpha1.TableValidationOptions validation_options = 2;
   */
  validationOptions?: TableValidationOptions;
};

/**
 * Describes the message api.v1alpha1.ValidateSelectionTableRequest.
 * Use `create(ValidateSelectionTableRequestSchema)` to create a new message.
 */
export const ValidateSelectionTableRequestSchema: GenMessage<ValidateSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 79);

/**
 * Validate selection table response
 *
 * @generated from message api.v1alpha1.ValidateSelectionTableResponse
 */
export type ValidateSelectionTableResponse = Message<"api.v1alpha1.ValidateSelectionTableResponse"> & {
  /**
   * Overall validation result
   *
   * @generated from field: api.v1alpha1.ValidationResult validation_result = 1;
   */
  validationResult?: ValidationResult;

  /**
   * Detailed validation checks
   *
   * @generated from field: repeated api.v1alpha1.TableValidationCheck validation_checks = 2;
   */
  validationChecks: TableValidationCheck[];

  /**
   * Validation statistics
   *
   * @generated from field: api.v1alpha1.TableValidationStats validation_stats = 3;
   */
  validationStats?: TableValidationStats;
};

/**
 * Describes the message api.v1alpha1.ValidateSelectionTableResponse.
 * Use `create(ValidateSelectionTableResponseSchema)` to create a new message.
 */
export const ValidateSelectionTableResponseSchema: GenMessage<ValidateSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 80);

/**
 * Individual table validation check
 *
 * @generated from message api.v1alpha1.TableValidationCheck
 */
export type TableValidationCheck = Message<"api.v1alpha1.TableValidationCheck"> & {
  /**
   * Check name
   *
   * @generated from field: string check_name = 1;
   */
  checkName: string;

  /**
   * Check result
   *
   * @generated from field: api.v1alpha1.TableValidationCheckResult result = 2;
   */
  result: TableValidationCheckResult;

  /**
   * Check message
   *
   * @generated from field: string message = 3;
   */
  message: string;

  /**
   * Severity
   *
   * @generated from field: api.v1alpha1.TableValidationSeverity severity = 4;
   */
  severity: TableValidationSeverity;

  /**
   * Entry ID if check is entry-specific
   *
   * @generated from field: string entry_id = 5;
   */
  entryId: string;

  /**
   * Suggested fix
   *
   * @generated from field: string suggested_fix = 6;
   */
  suggestedFix: string;
};

/**
 * Describes the message api.v1alpha1.TableValidationCheck.
 * Use `create(TableValidationCheckSchema)` to create a new message.
 */
export const TableValidationCheckSchema: GenMessage<TableValidationCheck> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 81);

/**
 * Statistics for table validation
 *
 * @generated from message api.v1alpha1.TableValidationStats
 */
export type TableValidationStats = Message<"api.v1alpha1.TableValidationStats"> & {
  /**
   * Validation time
   *
   * @generated from field: int64 validation_time_ms = 1;
   */
  validationTimeMs: bigint;

  /**
   * Checks performed
   *
   * @generated from field: int32 checks_performed = 2;
   */
  checksPerformed: number;

  /**
   * Checks passed
   *
   * @generated from field: int32 checks_passed = 3;
   */
  checksPassed: number;

  /**
   * Checks failed
   *
   * @generated from field: int32 checks_failed = 4;
   */
  checksFailed: number;

  /**
   * Warnings generated
   *
   * @generated from field: int32 warnings_generated = 5;
   */
  warningsGenerated: number;
};

/**
 * Describes the message api.v1alpha1.TableValidationStats.
 * Use `create(TableValidationStatsSchema)` to create a new message.
 */
export const TableValidationStatsSchema: GenMessage<TableValidationStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 82);

/**
 * Get table statistics request
 *
 * @generated from message api.v1alpha1.GetTableStatisticsRequest
 */
export type GetTableStatisticsRequest = Message<"api.v1alpha1.GetTableStatisticsRequest"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Time range for statistics
   *
   * @generated from field: api.v1alpha1.TableTimeRange time_range = 2;
   */
  timeRange?: TableTimeRange;

  /**
   * Level of detail
   *
   * @generated from field: api.v1alpha1.StatisticsDetail detail_level = 3;
   */
  detailLevel: StatisticsDetail;
};

/**
 * Describes the message api.v1alpha1.GetTableStatisticsRequest.
 * Use `create(GetTableStatisticsRequestSchema)` to create a new message.
 */
export const GetTableStatisticsRequestSchema: GenMessage<GetTableStatisticsRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 83);

/**
 * Time range for table statistics
 *
 * @generated from message api.v1alpha1.TableTimeRange
 */
export type TableTimeRange = Message<"api.v1alpha1.TableTimeRange"> & {
  /**
   * @generated from field: int64 start_time = 1;
   */
  startTime: bigint;

  /**
   * @generated from field: int64 end_time = 2;
   */
  endTime: bigint;
};

/**
 * Describes the message api.v1alpha1.TableTimeRange.
 * Use `create(TableTimeRangeSchema)` to create a new message.
 */
export const TableTimeRangeSchema: GenMessage<TableTimeRange> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 84);

/**
 * Get table statistics response
 *
 * @generated from message api.v1alpha1.GetTableStatisticsResponse
 */
export type GetTableStatisticsResponse = Message<"api.v1alpha1.GetTableStatisticsResponse"> & {
  /**
   * Table statistics
   *
   * @generated from field: api.v1alpha1.TableStatistics statistics = 1;
   */
  statistics?: TableStatistics;

  /**
   * Statistical analysis
   *
   * @generated from field: api.v1alpha1.StatisticalAnalysis analysis = 2;
   */
  analysis?: StatisticalAnalysis;
};

/**
 * Describes the message api.v1alpha1.GetTableStatisticsResponse.
 * Use `create(GetTableStatisticsResponseSchema)` to create a new message.
 */
export const GetTableStatisticsResponseSchema: GenMessage<GetTableStatisticsResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 85);

/**
 * Statistical analysis of table usage
 *
 * @generated from message api.v1alpha1.StatisticalAnalysis
 */
export type StatisticalAnalysis = Message<"api.v1alpha1.StatisticalAnalysis"> & {
  /**
   * Roll distribution analysis
   *
   * @generated from field: api.v1alpha1.RollDistributionAnalysis roll_distribution = 1;
   */
  rollDistribution?: RollDistributionAnalysis;

  /**
   * Entry selection analysis
   *
   * @generated from field: api.v1alpha1.EntrySelectionAnalysis entry_selection = 2;
   */
  entrySelection?: EntrySelectionAnalysis;

  /**
   * Performance analysis
   *
   * @generated from field: api.v1alpha1.PerformanceAnalysis performance = 3;
   */
  performance?: PerformanceAnalysis;

  /**
   * Trends over time
   *
   * @generated from field: repeated api.v1alpha1.TrendData trends = 4;
   */
  trends: TrendData[];
};

/**
 * Describes the message api.v1alpha1.StatisticalAnalysis.
 * Use `create(StatisticalAnalysisSchema)` to create a new message.
 */
export const StatisticalAnalysisSchema: GenMessage<StatisticalAnalysis> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 86);

/**
 * Analysis of roll distribution
 *
 * @generated from message api.v1alpha1.RollDistributionAnalysis
 */
export type RollDistributionAnalysis = Message<"api.v1alpha1.RollDistributionAnalysis"> & {
  /**
   * Expected vs actual distribution
   *
   * @generated from field: map<int32, double> expected_frequency = 1;
   */
  expectedFrequency: { [key: number]: number };

  /**
   * @generated from field: map<int32, double> actual_frequency = 2;
   */
  actualFrequency: { [key: number]: number };

  /**
   * Chi-square test result
   *
   * @generated from field: double chi_square_statistic = 3;
   */
  chiSquareStatistic: number;

  /**
   * @generated from field: double p_value = 4;
   */
  pValue: number;

  /**
   * Distribution uniformity
   *
   * @generated from field: double uniformity_score = 5;
   */
  uniformityScore: number;

  /**
   * Outlier rolls
   *
   * @generated from field: repeated int32 outlier_rolls = 6;
   */
  outlierRolls: number[];
};

/**
 * Describes the message api.v1alpha1.RollDistributionAnalysis.
 * Use `create(RollDistributionAnalysisSchema)` to create a new message.
 */
export const RollDistributionAnalysisSchema: GenMessage<RollDistributionAnalysis> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 87);

/**
 * Analysis of entry selection patterns
 *
 * @generated from message api.v1alpha1.EntrySelectionAnalysis
 */
export type EntrySelectionAnalysis = Message<"api.v1alpha1.EntrySelectionAnalysis"> & {
  /**
   * Most/least selected entries
   *
   * @generated from field: string most_selected_entry = 1;
   */
  mostSelectedEntry: string;

  /**
   * @generated from field: string least_selected_entry = 2;
   */
  leastSelectedEntry: string;

  /**
   * Selection bias score
   *
   * @generated from field: double selection_bias = 3;
   */
  selectionBias: number;

  /**
   * Entropy of selections
   *
   * @generated from field: double selection_entropy = 4;
   */
  selectionEntropy: number;

  /**
   * Clustering of selections
   *
   * @generated from field: repeated api.v1alpha1.SelectionCluster clusters = 5;
   */
  clusters: SelectionCluster[];
};

/**
 * Describes the message api.v1alpha1.EntrySelectionAnalysis.
 * Use `create(EntrySelectionAnalysisSchema)` to create a new message.
 */
export const EntrySelectionAnalysisSchema: GenMessage<EntrySelectionAnalysis> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 88);

/**
 * Cluster of similar selections
 *
 * @generated from message api.v1alpha1.SelectionCluster
 */
export type SelectionCluster = Message<"api.v1alpha1.SelectionCluster"> & {
  /**
   * Cluster identifier
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * Entries in cluster
   *
   * @generated from field: repeated string entry_ids = 2;
   */
  entryIds: string[];

  /**
   * Cluster frequency
   *
   * @generated from field: double frequency = 3;
   */
  frequency: number;

  /**
   * Cluster characteristics
   *
   * @generated from field: string characteristics = 4;
   */
  characteristics: string;
};

/**
 * Describes the message api.v1alpha1.SelectionCluster.
 * Use `create(SelectionClusterSchema)` to create a new message.
 */
export const SelectionClusterSchema: GenMessage<SelectionCluster> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 89);

/**
 * Performance analysis
 *
 * @generated from message api.v1alpha1.PerformanceAnalysis
 */
export type PerformanceAnalysis = Message<"api.v1alpha1.PerformanceAnalysis"> & {
  /**
   * Performance trend
   *
   * "improving", "stable", "degrading"
   *
   * @generated from field: string performance_trend = 1;
   */
  performanceTrend: string;

  /**
   * Bottlenecks identified
   *
   * @generated from field: repeated string bottlenecks = 2;
   */
  bottlenecks: string[];

  /**
   * Optimization recommendations
   *
   * @generated from field: repeated string recommendations = 3;
   */
  recommendations: string[];

  /**
   * Resource usage patterns
   *
   * @generated from field: api.v1alpha1.ResourceUsagePattern resource_usage = 4;
   */
  resourceUsage?: ResourceUsagePattern;
};

/**
 * Describes the message api.v1alpha1.PerformanceAnalysis.
 * Use `create(PerformanceAnalysisSchema)` to create a new message.
 */
export const PerformanceAnalysisSchema: GenMessage<PerformanceAnalysis> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 90);

/**
 * Resource usage pattern
 *
 * @generated from message api.v1alpha1.ResourceUsagePattern
 */
export type ResourceUsagePattern = Message<"api.v1alpha1.ResourceUsagePattern"> & {
  /**
   * Memory usage trend
   *
   * @generated from field: string memory_trend = 1;
   */
  memoryTrend: string;

  /**
   * CPU usage pattern
   *
   * @generated from field: string cpu_pattern = 2;
   */
  cpuPattern: string;

  /**
   * Cache effectiveness
   *
   * @generated from field: double cache_effectiveness = 3;
   */
  cacheEffectiveness: number;

  /**
   * Peak usage times
   *
   * @generated from field: repeated int64 peak_usage_times = 4;
   */
  peakUsageTimes: bigint[];
};

/**
 * Describes the message api.v1alpha1.ResourceUsagePattern.
 * Use `create(ResourceUsagePatternSchema)` to create a new message.
 */
export const ResourceUsagePatternSchema: GenMessage<ResourceUsagePattern> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 91);

/**
 * Trend data over time
 *
 * @generated from message api.v1alpha1.TrendData
 */
export type TrendData = Message<"api.v1alpha1.TrendData"> & {
  /**
   * Trend name
   *
   * @generated from field: string trend_name = 1;
   */
  trendName: string;

  /**
   * Time period
   *
   * @generated from field: api.v1alpha1.TableTimeRange time_period = 2;
   */
  timePeriod?: TableTimeRange;

  /**
   * Trend direction
   *
   * "increasing", "decreasing", "stable", "cyclical"
   *
   * @generated from field: string direction = 3;
   */
  direction: string;

  /**
   * Trend strength
   *
   * @generated from field: double strength = 4;
   */
  strength: number;

  /**
   * Data points
   *
   * @generated from field: repeated api.v1alpha1.TrendPoint data_points = 5;
   */
  dataPoints: TrendPoint[];
};

/**
 * Describes the message api.v1alpha1.TrendData.
 * Use `create(TrendDataSchema)` to create a new message.
 */
export const TrendDataSchema: GenMessage<TrendData> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 92);

/**
 * Individual trend data point
 *
 * @generated from message api.v1alpha1.TrendPoint
 */
export type TrendPoint = Message<"api.v1alpha1.TrendPoint"> & {
  /**
   * Timestamp
   *
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * Value at this time
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * Context or notes
   *
   * @generated from field: string context = 3;
   */
  context: string;
};

/**
 * Describes the message api.v1alpha1.TrendPoint.
 * Use `create(TrendPointSchema)` to create a new message.
 */
export const TrendPointSchema: GenMessage<TrendPoint> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 93);

/**
 * Export selection table request
 *
 * @generated from message api.v1alpha1.ExportSelectionTableRequest
 */
export type ExportSelectionTableRequest = Message<"api.v1alpha1.ExportSelectionTableRequest"> & {
  /**
   * Table identifier
   *
   * @generated from field: string table_id = 1;
   */
  tableId: string;

  /**
   * Export format
   *
   * @generated from field: api.v1alpha1.ExportFormat format = 2;
   */
  format: ExportFormat;

  /**
   * Export options
   *
   * @generated from field: api.v1alpha1.ExportOptions export_options = 3;
   */
  exportOptions?: ExportOptions;
};

/**
 * Describes the message api.v1alpha1.ExportSelectionTableRequest.
 * Use `create(ExportSelectionTableRequestSchema)` to create a new message.
 */
export const ExportSelectionTableRequestSchema: GenMessage<ExportSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 94);

/**
 * Options for table export
 *
 * @generated from message api.v1alpha1.ExportOptions
 */
export type ExportOptions = Message<"api.v1alpha1.ExportOptions"> & {
  /**
   * Whether to include metadata
   *
   * @generated from field: bool include_metadata = 1;
   */
  includeMetadata: boolean;

  /**
   * Whether to include statistics
   *
   * @generated from field: bool include_statistics = 2;
   */
  includeStatistics: boolean;

  /**
   * Whether to include usage history
   *
   * @generated from field: bool include_usage_history = 3;
   */
  includeUsageHistory: boolean;

  /**
   * Compression type
   *
   * "none", "gzip", "zip"
   *
   * @generated from field: string compression = 4;
   */
  compression: string;

  /**
   * Character encoding
   *
   * "utf-8", "ascii"
   *
   * @generated from field: string encoding = 5;
   */
  encoding: string;
};

/**
 * Describes the message api.v1alpha1.ExportOptions.
 * Use `create(ExportOptionsSchema)` to create a new message.
 */
export const ExportOptionsSchema: GenMessage<ExportOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 95);

/**
 * Export selection table response
 *
 * @generated from message api.v1alpha1.ExportSelectionTableResponse
 */
export type ExportSelectionTableResponse = Message<"api.v1alpha1.ExportSelectionTableResponse"> & {
  /**
   * Exported data
   *
   * @generated from field: bytes exported_data = 1;
   */
  exportedData: Uint8Array;

  /**
   * Export format used
   *
   * @generated from field: api.v1alpha1.ExportFormat format = 2;
   */
  format: ExportFormat;

  /**
   * Export metadata
   *
   * @generated from field: api.v1alpha1.ExportMetadata export_metadata = 3;
   */
  exportMetadata?: ExportMetadata;
};

/**
 * Describes the message api.v1alpha1.ExportSelectionTableResponse.
 * Use `create(ExportSelectionTableResponseSchema)` to create a new message.
 */
export const ExportSelectionTableResponseSchema: GenMessage<ExportSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 96);

/**
 * Metadata about export
 *
 * @generated from message api.v1alpha1.ExportMetadata
 */
export type ExportMetadata = Message<"api.v1alpha1.ExportMetadata"> & {
  /**
   * Export timestamp
   *
   * @generated from field: int64 exported_at = 1;
   */
  exportedAt: bigint;

  /**
   * Export size
   *
   * @generated from field: int64 size_bytes = 2;
   */
  sizeBytes: bigint;

  /**
   * Compression ratio (if compressed)
   *
   * @generated from field: double compression_ratio = 3;
   */
  compressionRatio: number;

  /**
   * Checksum
   *
   * @generated from field: string checksum = 4;
   */
  checksum: string;

  /**
   * Export version
   *
   * @generated from field: string export_version = 5;
   */
  exportVersion: string;
};

/**
 * Describes the message api.v1alpha1.ExportMetadata.
 * Use `create(ExportMetadataSchema)` to create a new message.
 */
export const ExportMetadataSchema: GenMessage<ExportMetadata> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 97);

/**
 * Import selection table request
 *
 * @generated from message api.v1alpha1.ImportSelectionTableRequest
 */
export type ImportSelectionTableRequest = Message<"api.v1alpha1.ImportSelectionTableRequest"> & {
  /**
   * Data to import
   *
   * @generated from field: bytes import_data = 1;
   */
  importData: Uint8Array;

  /**
   * Import format
   *
   * @generated from field: api.v1alpha1.ExportFormat format = 2;
   */
  format: ExportFormat;

  /**
   * Import options
   *
   * @generated from field: api.v1alpha1.ImportOptions import_options = 3;
   */
  importOptions?: ImportOptions;
};

/**
 * Describes the message api.v1alpha1.ImportSelectionTableRequest.
 * Use `create(ImportSelectionTableRequestSchema)` to create a new message.
 */
export const ImportSelectionTableRequestSchema: GenMessage<ImportSelectionTableRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 98);

/**
 * Options for table import
 *
 * @generated from message api.v1alpha1.ImportOptions
 */
export type ImportOptions = Message<"api.v1alpha1.ImportOptions"> & {
  /**
   * Whether to validate during import
   *
   * @generated from field: bool validate_during_import = 1;
   */
  validateDuringImport: boolean;

  /**
   * Whether to overwrite existing table
   *
   * @generated from field: bool overwrite_existing = 2;
   */
  overwriteExisting: boolean;

  /**
   * Whether to preserve original IDs
   *
   * @generated from field: bool preserve_ids = 3;
   */
  preserveIds: boolean;

  /**
   * Whether to update metadata
   *
   * @generated from field: bool update_metadata = 4;
   */
  updateMetadata: boolean;

  /**
   * Import source description
   *
   * @generated from field: string source_description = 5;
   */
  sourceDescription: string;
};

/**
 * Describes the message api.v1alpha1.ImportOptions.
 * Use `create(ImportOptionsSchema)` to create a new message.
 */
export const ImportOptionsSchema: GenMessage<ImportOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 99);

/**
 * Import selection table response
 *
 * @generated from message api.v1alpha1.ImportSelectionTableResponse
 */
export type ImportSelectionTableResponse = Message<"api.v1alpha1.ImportSelectionTableResponse"> & {
  /**
   * Imported table
   *
   * @generated from field: api.v1alpha1.SelectionTable imported_table = 1;
   */
  importedTable?: SelectionTable;

  /**
   * Import result
   *
   * @generated from field: api.v1alpha1.ImportResult import_result = 2;
   */
  importResult?: ImportResult;

  /**
   * Import statistics
   *
   * @generated from field: api.v1alpha1.ImportStats import_stats = 3;
   */
  importStats?: ImportStats;
};

/**
 * Describes the message api.v1alpha1.ImportSelectionTableResponse.
 * Use `create(ImportSelectionTableResponseSchema)` to create a new message.
 */
export const ImportSelectionTableResponseSchema: GenMessage<ImportSelectionTableResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 100);

/**
 * Result of import operation
 *
 * @generated from message api.v1alpha1.ImportResult
 */
export type ImportResult = Message<"api.v1alpha1.ImportResult"> & {
  /**
   * Whether import was successful
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Import warnings
   *
   * @generated from field: repeated api.v1alpha1.RoomError warnings = 2;
   */
  warnings: RoomError[];

  /**
   * Import errors
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 3;
   */
  errors: RoomError[];

  /**
   * Items imported
   *
   * @generated from field: int32 items_imported = 4;
   */
  itemsImported: number;

  /**
   * Items skipped
   *
   * @generated from field: int32 items_skipped = 5;
   */
  itemsSkipped: number;
};

/**
 * Describes the message api.v1alpha1.ImportResult.
 * Use `create(ImportResultSchema)` to create a new message.
 */
export const ImportResultSchema: GenMessage<ImportResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 101);

/**
 * Statistics for import operation
 *
 * @generated from message api.v1alpha1.ImportStats
 */
export type ImportStats = Message<"api.v1alpha1.ImportStats"> & {
  /**
   * Import time
   *
   * @generated from field: int64 import_time_ms = 1;
   */
  importTimeMs: bigint;

  /**
   * Data processed
   *
   * @generated from field: int64 data_processed_bytes = 2;
   */
  dataProcessedBytes: bigint;

  /**
   * Validation time
   *
   * @generated from field: int64 validation_time_ms = 3;
   */
  validationTimeMs: bigint;

  /**
   * Processing rate
   *
   * @generated from field: double processing_rate_mbps = 4;
   */
  processingRateMbps: number;
};

/**
 * Describes the message api.v1alpha1.ImportStats.
 * Use `create(ImportStatsSchema)` to create a new message.
 */
export const ImportStatsSchema: GenMessage<ImportStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_selectables, 102);

/**
 * Types of selection tables
 *
 * @generated from enum api.v1alpha1.SelectionTableType
 */
export enum SelectionTableType {
  /**
   * @generated from enum value: SELECTION_TABLE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Weighted random selection
   *
   * @generated from enum value: SELECTION_TABLE_TYPE_WEIGHTED = 1;
   */
  WEIGHTED = 1,

  /**
   * Dice roll ranges (1-10, 11-20, etc.)
   *
   * @generated from enum value: SELECTION_TABLE_TYPE_DICE_RANGE = 2;
   */
  DICE_RANGE = 2,

  /**
   * Sequential selection
   *
   * @generated from enum value: SELECTION_TABLE_TYPE_SEQUENTIAL = 3;
   */
  SEQUENTIAL = 3,

  /**
   * Conditional based on parameters
   *
   * @generated from enum value: SELECTION_TABLE_TYPE_CONDITIONAL = 4;
   */
  CONDITIONAL = 4,

  /**
   * Contains references to other tables
   *
   * @generated from enum value: SELECTION_TABLE_TYPE_NESTED = 5;
   */
  NESTED = 5,
}

/**
 * Describes the enum api.v1alpha1.SelectionTableType.
 */
export const SelectionTableTypeSchema: GenEnum<SelectionTableType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 0);

/**
 * Types of table entry results
 *
 * @generated from enum api.v1alpha1.TableEntryResultType
 */
export enum TableEntryResultType {
  /**
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Item or loot
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_ITEM = 1;
   */
  ITEM = 1,

  /**
   * Monster or NPC
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_ENTITY = 2;
   */
  ENTITY = 2,

  /**
   * Roll on another table
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_NESTED_TABLE = 3;
   */
  NESTED_TABLE = 3,

  /**
   * Text description/event
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_TEXT = 4;
   */
  TEXT = 4,

  /**
   * Game effect or spell
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_EFFECT = 5;
   */
  EFFECT = 5,

  /**
   * Multiple results combined
   *
   * @generated from enum value: TABLE_ENTRY_RESULT_TYPE_MULTIPLE = 6;
   */
  MULTIPLE = 6,
}

/**
 * Describes the enum api.v1alpha1.TableEntryResultType.
 */
export const TableEntryResultTypeSchema: GenEnum<TableEntryResultType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 1);

/**
 * Sort direction for tables
 *
 * @generated from enum api.v1alpha1.TableSortDirection
 */
export enum TableSortDirection {
  /**
   * @generated from enum value: TABLE_SORT_DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TABLE_SORT_DIRECTION_ASC = 1;
   */
  ASC = 1,

  /**
   * @generated from enum value: TABLE_SORT_DIRECTION_DESC = 2;
   */
  DESC = 2,
}

/**
 * Describes the enum api.v1alpha1.TableSortDirection.
 */
export const TableSortDirectionSchema: GenEnum<TableSortDirection> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 2);

/**
 * Available sort fields for tables
 *
 * @generated from enum api.v1alpha1.TableSortField
 */
export enum TableSortField {
  /**
   * @generated from enum value: TABLE_SORT_FIELD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TABLE_SORT_FIELD_NAME = 1;
   */
  NAME = 1,

  /**
   * @generated from enum value: TABLE_SORT_FIELD_CREATED_AT = 2;
   */
  CREATED_AT = 2,

  /**
   * @generated from enum value: TABLE_SORT_FIELD_UPDATED_AT = 3;
   */
  UPDATED_AT = 3,

  /**
   * @generated from enum value: TABLE_SORT_FIELD_USAGE_COUNT = 4;
   */
  USAGE_COUNT = 4,

  /**
   * @generated from enum value: TABLE_SORT_FIELD_CATEGORY = 5;
   */
  CATEGORY = 5,
}

/**
 * Describes the enum api.v1alpha1.TableSortField.
 */
export const TableSortFieldSchema: GenEnum<TableSortField> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 3);

/**
 * Result of a table validation check
 *
 * @generated from enum api.v1alpha1.TableValidationCheckResult
 */
export enum TableValidationCheckResult {
  /**
   * @generated from enum value: TABLE_VALIDATION_CHECK_RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TABLE_VALIDATION_CHECK_RESULT_PASS = 1;
   */
  PASS = 1,

  /**
   * @generated from enum value: TABLE_VALIDATION_CHECK_RESULT_FAIL = 2;
   */
  FAIL = 2,

  /**
   * @generated from enum value: TABLE_VALIDATION_CHECK_RESULT_WARNING = 3;
   */
  WARNING = 3,

  /**
   * @generated from enum value: TABLE_VALIDATION_CHECK_RESULT_SKIP = 4;
   */
  SKIP = 4,
}

/**
 * Describes the enum api.v1alpha1.TableValidationCheckResult.
 */
export const TableValidationCheckResultSchema: GenEnum<TableValidationCheckResult> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 4);

/**
 * Severity of table validation issues
 *
 * @generated from enum api.v1alpha1.TableValidationSeverity
 */
export enum TableValidationSeverity {
  /**
   * @generated from enum value: TABLE_VALIDATION_SEVERITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TABLE_VALIDATION_SEVERITY_INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: TABLE_VALIDATION_SEVERITY_WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: TABLE_VALIDATION_SEVERITY_ERROR = 3;
   */
  ERROR = 3,

  /**
   * @generated from enum value: TABLE_VALIDATION_SEVERITY_CRITICAL = 4;
   */
  CRITICAL = 4,
}

/**
 * Describes the enum api.v1alpha1.TableValidationSeverity.
 */
export const TableValidationSeveritySchema: GenEnum<TableValidationSeverity> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 5);

/**
 * Level of statistical detail
 *
 * @generated from enum api.v1alpha1.StatisticsDetail
 */
export enum StatisticsDetail {
  /**
   * @generated from enum value: STATISTICS_DETAIL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Basic usage stats only
   *
   * @generated from enum value: STATISTICS_DETAIL_BASIC = 1;
   */
  BASIC = 1,

  /**
   * Include distributions and frequency
   *
   * @generated from enum value: STATISTICS_DETAIL_DETAILED = 2;
   */
  DETAILED = 2,

  /**
   * Include all available metrics
   *
   * @generated from enum value: STATISTICS_DETAIL_COMPREHENSIVE = 3;
   */
  COMPREHENSIVE = 3,
}

/**
 * Describes the enum api.v1alpha1.StatisticsDetail.
 */
export const StatisticsDetailSchema: GenEnum<StatisticsDetail> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 6);

/**
 * Available export formats
 *
 * @generated from enum api.v1alpha1.ExportFormat
 */
export enum ExportFormat {
  /**
   * @generated from enum value: EXPORT_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EXPORT_FORMAT_JSON = 1;
   */
  JSON = 1,

  /**
   * @generated from enum value: EXPORT_FORMAT_CSV = 2;
   */
  CSV = 2,

  /**
   * @generated from enum value: EXPORT_FORMAT_XML = 3;
   */
  XML = 3,

  /**
   * @generated from enum value: EXPORT_FORMAT_YAML = 4;
   */
  YAML = 4,

  /**
   * @generated from enum value: EXPORT_FORMAT_PROTOBUF = 5;
   */
  PROTOBUF = 5,
}

/**
 * Describes the enum api.v1alpha1.ExportFormat.
 */
export const ExportFormatSchema: GenEnum<ExportFormat> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_selectables, 7);

/**
 * Selection table service for random generation and content selection
 * Handles loot tables, encounter tables, and other random selection systems
 *
 * @generated from service api.v1alpha1.SelectionTableService
 */
export const SelectionTableService: GenService<{
  /**
   * Selection table operations
   *
   * @generated from rpc api.v1alpha1.SelectionTableService.CreateSelectionTable
   */
  createSelectionTable: {
    methodKind: "unary";
    input: typeof CreateSelectionTableRequestSchema;
    output: typeof CreateSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.GetSelectionTable
   */
  getSelectionTable: {
    methodKind: "unary";
    input: typeof GetSelectionTableRequestSchema;
    output: typeof GetSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.UpdateSelectionTable
   */
  updateSelectionTable: {
    methodKind: "unary";
    input: typeof UpdateSelectionTableRequestSchema;
    output: typeof UpdateSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.DeleteSelectionTable
   */
  deleteSelectionTable: {
    methodKind: "unary";
    input: typeof DeleteSelectionTableRequestSchema;
    output: typeof DeleteSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.ListSelectionTables
   */
  listSelectionTables: {
    methodKind: "unary";
    input: typeof ListSelectionTablesRequestSchema;
    output: typeof ListSelectionTablesResponseSchema;
  },
  /**
   * Selection operations
   *
   * @generated from rpc api.v1alpha1.SelectionTableService.RollOnTable
   */
  rollOnTable: {
    methodKind: "unary";
    input: typeof RollOnTableRequestSchema;
    output: typeof RollOnTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.RollMultiple
   */
  rollMultiple: {
    methodKind: "unary";
    input: typeof RollMultipleRequestSchema;
    output: typeof RollMultipleResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.RollWithModifiers
   */
  rollWithModifiers: {
    methodKind: "unary";
    input: typeof RollWithModifiersRequestSchema;
    output: typeof RollWithModifiersResponseSchema;
  },
  /**
   * Batch operations
   *
   * @generated from rpc api.v1alpha1.SelectionTableService.BatchRollTables
   */
  batchRollTables: {
    methodKind: "unary";
    input: typeof BatchRollTablesRequestSchema;
    output: typeof BatchRollTablesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.GenerateEncounter
   */
  generateEncounter: {
    methodKind: "unary";
    input: typeof GenerateEncounterRequestSchema;
    output: typeof GenerateEncounterResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.GenerateLoot
   */
  generateLoot: {
    methodKind: "unary";
    input: typeof GenerateLootRequestSchema;
    output: typeof GenerateLootResponseSchema;
  },
  /**
   * Table management
   *
   * @generated from rpc api.v1alpha1.SelectionTableService.ValidateSelectionTable
   */
  validateSelectionTable: {
    methodKind: "unary";
    input: typeof ValidateSelectionTableRequestSchema;
    output: typeof ValidateSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.GetTableStatistics
   */
  getTableStatistics: {
    methodKind: "unary";
    input: typeof GetTableStatisticsRequestSchema;
    output: typeof GetTableStatisticsResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.ExportSelectionTable
   */
  exportSelectionTable: {
    methodKind: "unary";
    input: typeof ExportSelectionTableRequestSchema;
    output: typeof ExportSelectionTableResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SelectionTableService.ImportSelectionTable
   */
  importSelectionTable: {
    methodKind: "unary";
    input: typeof ImportSelectionTableRequestSchema;
    output: typeof ImportSelectionTableResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_api_v1alpha1_room_selectables, 0);

