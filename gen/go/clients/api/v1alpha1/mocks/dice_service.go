// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/clients/api/v1alpha1/dice_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/clients/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDiceServiceClient is a mock of DiceServiceClient interface.
type MockDiceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiceServiceClientMockRecorder
}

// MockDiceServiceClientMockRecorder is the mock recorder for MockDiceServiceClient.
type MockDiceServiceClientMockRecorder struct {
	mock *MockDiceServiceClient
}

// NewMockDiceServiceClient creates a new mock instance.
func NewMockDiceServiceClient(ctrl *gomock.Controller) *MockDiceServiceClient {
	mock := &MockDiceServiceClient{ctrl: ctrl}
	mock.recorder = &MockDiceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiceServiceClient) EXPECT() *MockDiceServiceClientMockRecorder {
	return m.recorder
}

// ClearRollSession mocks base method.
func (m *MockDiceServiceClient) ClearRollSession(ctx context.Context, in *v1alpha1.ClearRollSessionRequest, opts ...grpc.CallOption) (*v1alpha1.ClearRollSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearRollSession", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ClearRollSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRollSession indicates an expected call of ClearRollSession.
func (mr *MockDiceServiceClientMockRecorder) ClearRollSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRollSession", reflect.TypeOf((*MockDiceServiceClient)(nil).ClearRollSession), varargs...)
}

// GetRollSession mocks base method.
func (m *MockDiceServiceClient) GetRollSession(ctx context.Context, in *v1alpha1.GetRollSessionRequest, opts ...grpc.CallOption) (*v1alpha1.GetRollSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRollSession", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetRollSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollSession indicates an expected call of GetRollSession.
func (mr *MockDiceServiceClientMockRecorder) GetRollSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollSession", reflect.TypeOf((*MockDiceServiceClient)(nil).GetRollSession), varargs...)
}

// RollDice mocks base method.
func (m *MockDiceServiceClient) RollDice(ctx context.Context, in *v1alpha1.RollDiceRequest, opts ...grpc.CallOption) (*v1alpha1.RollDiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollDice", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RollDiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollDice indicates an expected call of RollDice.
func (mr *MockDiceServiceClientMockRecorder) RollDice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollDice", reflect.TypeOf((*MockDiceServiceClient)(nil).RollDice), varargs...)
}

// MockDiceServiceServer is a mock of DiceServiceServer interface.
type MockDiceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiceServiceServerMockRecorder
}

// MockDiceServiceServerMockRecorder is the mock recorder for MockDiceServiceServer.
type MockDiceServiceServerMockRecorder struct {
	mock *MockDiceServiceServer
}

// NewMockDiceServiceServer creates a new mock instance.
func NewMockDiceServiceServer(ctrl *gomock.Controller) *MockDiceServiceServer {
	mock := &MockDiceServiceServer{ctrl: ctrl}
	mock.recorder = &MockDiceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiceServiceServer) EXPECT() *MockDiceServiceServerMockRecorder {
	return m.recorder
}

// ClearRollSession mocks base method.
func (m *MockDiceServiceServer) ClearRollSession(arg0 context.Context, arg1 *v1alpha1.ClearRollSessionRequest) (*v1alpha1.ClearRollSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRollSession", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ClearRollSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRollSession indicates an expected call of ClearRollSession.
func (mr *MockDiceServiceServerMockRecorder) ClearRollSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRollSession", reflect.TypeOf((*MockDiceServiceServer)(nil).ClearRollSession), arg0, arg1)
}

// GetRollSession mocks base method.
func (m *MockDiceServiceServer) GetRollSession(arg0 context.Context, arg1 *v1alpha1.GetRollSessionRequest) (*v1alpha1.GetRollSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollSession", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetRollSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollSession indicates an expected call of GetRollSession.
func (mr *MockDiceServiceServerMockRecorder) GetRollSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollSession", reflect.TypeOf((*MockDiceServiceServer)(nil).GetRollSession), arg0, arg1)
}

// RollDice mocks base method.
func (m *MockDiceServiceServer) RollDice(arg0 context.Context, arg1 *v1alpha1.RollDiceRequest) (*v1alpha1.RollDiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollDice", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RollDiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollDice indicates an expected call of RollDice.
func (mr *MockDiceServiceServerMockRecorder) RollDice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollDice", reflect.TypeOf((*MockDiceServiceServer)(nil).RollDice), arg0, arg1)
}

// MockUnsafeDiceServiceServer is a mock of UnsafeDiceServiceServer interface.
type MockUnsafeDiceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDiceServiceServerMockRecorder
}

// MockUnsafeDiceServiceServerMockRecorder is the mock recorder for MockUnsafeDiceServiceServer.
type MockUnsafeDiceServiceServerMockRecorder struct {
	mock *MockUnsafeDiceServiceServer
}

// NewMockUnsafeDiceServiceServer creates a new mock instance.
func NewMockUnsafeDiceServiceServer(ctrl *gomock.Controller) *MockUnsafeDiceServiceServer {
	mock := &MockUnsafeDiceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDiceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDiceServiceServer) EXPECT() *MockUnsafeDiceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDiceServiceServer mocks base method.
func (m *MockUnsafeDiceServiceServer) mustEmbedUnimplementedDiceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDiceServiceServer")
}

// mustEmbedUnimplementedDiceServiceServer indicates an expected call of mustEmbedUnimplementedDiceServiceServer.
func (mr *MockUnsafeDiceServiceServerMockRecorder) mustEmbedUnimplementedDiceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDiceServiceServer", reflect.TypeOf((*MockUnsafeDiceServiceServer)(nil).mustEmbedUnimplementedDiceServiceServer))
}
