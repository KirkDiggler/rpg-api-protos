// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sandbox/api/v1alpha1/sandbox_room.proto

#include "sandbox/api/v1alpha1/sandbox_room.pb.h"
#include "sandbox/api/v1alpha1/sandbox_room.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace sandbox {
namespace api {
namespace v1alpha1 {

static const char* SandboxRoomService_method_names[] = {
  "/sandbox.api.v1alpha1.SandboxRoomService/GenerateRoom",
  "/sandbox.api.v1alpha1.SandboxRoomService/BuildStaticRoom",
  "/sandbox.api.v1alpha1.SandboxRoomService/GetRoom",
  "/sandbox.api.v1alpha1.SandboxRoomService/ListRooms",
  "/sandbox.api.v1alpha1.SandboxRoomService/DeleteRoom",
  "/sandbox.api.v1alpha1.SandboxRoomService/CheckLineOfSight",
  "/sandbox.api.v1alpha1.SandboxRoomService/FindPath",
  "/sandbox.api.v1alpha1.SandboxRoomService/CalculateDistance",
  "/sandbox.api.v1alpha1.SandboxRoomService/GetPositionsInRange",
  "/sandbox.api.v1alpha1.SandboxRoomService/PlaceEntity",
  "/sandbox.api.v1alpha1.SandboxRoomService/MoveEntity",
  "/sandbox.api.v1alpha1.SandboxRoomService/RemoveEntity",
  "/sandbox.api.v1alpha1.SandboxRoomService/GetEntitiesInRoom",
};

std::unique_ptr< SandboxRoomService::Stub> SandboxRoomService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SandboxRoomService::Stub> stub(new SandboxRoomService::Stub(channel, options));
  return stub;
}

SandboxRoomService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenerateRoom_(SandboxRoomService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuildStaticRoom_(SandboxRoomService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoom_(SandboxRoomService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRooms_(SandboxRoomService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoom_(SandboxRoomService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckLineOfSight_(SandboxRoomService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindPath_(SandboxRoomService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateDistance_(SandboxRoomService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPositionsInRange_(SandboxRoomService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlaceEntity_(SandboxRoomService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveEntity_(SandboxRoomService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEntity_(SandboxRoomService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntitiesInRoom_(SandboxRoomService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SandboxRoomService::Stub::GenerateRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest& request, ::sandbox::api::v1alpha1::GenerateRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::GenerateRoomRequest, ::sandbox::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateRoom_, context, request, response);
}

void SandboxRoomService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest* request, ::sandbox::api::v1alpha1::GenerateRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::GenerateRoomRequest, ::sandbox::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest* request, ::sandbox::api::v1alpha1::GenerateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GenerateRoomResponse>* SandboxRoomService::Stub::PrepareAsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::GenerateRoomResponse, ::sandbox::api::v1alpha1::GenerateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GenerateRoomResponse>* SandboxRoomService::Stub::AsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::BuildStaticRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest& request, ::sandbox::api::v1alpha1::BuildStaticRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::BuildStaticRoomRequest, ::sandbox::api::v1alpha1::BuildStaticRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuildStaticRoom_, context, request, response);
}

void SandboxRoomService::Stub::async::BuildStaticRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest* request, ::sandbox::api::v1alpha1::BuildStaticRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::BuildStaticRoomRequest, ::sandbox::api::v1alpha1::BuildStaticRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildStaticRoom_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::BuildStaticRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest* request, ::sandbox::api::v1alpha1::BuildStaticRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildStaticRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::BuildStaticRoomResponse>* SandboxRoomService::Stub::PrepareAsyncBuildStaticRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::BuildStaticRoomResponse, ::sandbox::api::v1alpha1::BuildStaticRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuildStaticRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::BuildStaticRoomResponse>* SandboxRoomService::Stub::AsyncBuildStaticRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuildStaticRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::GetRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest& request, ::sandbox::api::v1alpha1::GetRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::GetRoomRequest, ::sandbox::api::v1alpha1::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoom_, context, request, response);
}

void SandboxRoomService::Stub::async::GetRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest* request, ::sandbox::api::v1alpha1::GetRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::GetRoomRequest, ::sandbox::api::v1alpha1::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoom_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::GetRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest* request, ::sandbox::api::v1alpha1::GetRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetRoomResponse>* SandboxRoomService::Stub::PrepareAsyncGetRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::GetRoomResponse, ::sandbox::api::v1alpha1::GetRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetRoomResponse>* SandboxRoomService::Stub::AsyncGetRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::ListRooms(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest& request, ::sandbox::api::v1alpha1::ListRoomsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::ListRoomsRequest, ::sandbox::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRooms_, context, request, response);
}

void SandboxRoomService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest* request, ::sandbox::api::v1alpha1::ListRoomsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::ListRoomsRequest, ::sandbox::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest* request, ::sandbox::api::v1alpha1::ListRoomsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::ListRoomsResponse>* SandboxRoomService::Stub::PrepareAsyncListRoomsRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::ListRoomsResponse, ::sandbox::api::v1alpha1::ListRoomsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::ListRoomsResponse>* SandboxRoomService::Stub::AsyncListRoomsRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::DeleteRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest& request, ::sandbox::api::v1alpha1::DeleteRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::DeleteRoomRequest, ::sandbox::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRoom_, context, request, response);
}

void SandboxRoomService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest* request, ::sandbox::api::v1alpha1::DeleteRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::DeleteRoomRequest, ::sandbox::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest* request, ::sandbox::api::v1alpha1::DeleteRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::DeleteRoomResponse>* SandboxRoomService::Stub::PrepareAsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::DeleteRoomResponse, ::sandbox::api::v1alpha1::DeleteRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::DeleteRoomResponse>* SandboxRoomService::Stub::AsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::CheckLineOfSight(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest& request, ::sandbox::api::v1alpha1::CheckLineOfSightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::CheckLineOfSightRequest, ::sandbox::api::v1alpha1::CheckLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckLineOfSight_, context, request, response);
}

void SandboxRoomService::Stub::async::CheckLineOfSight(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest* request, ::sandbox::api::v1alpha1::CheckLineOfSightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::CheckLineOfSightRequest, ::sandbox::api::v1alpha1::CheckLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckLineOfSight_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::CheckLineOfSight(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest* request, ::sandbox::api::v1alpha1::CheckLineOfSightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckLineOfSight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::CheckLineOfSightResponse>* SandboxRoomService::Stub::PrepareAsyncCheckLineOfSightRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::CheckLineOfSightResponse, ::sandbox::api::v1alpha1::CheckLineOfSightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckLineOfSight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::CheckLineOfSightResponse>* SandboxRoomService::Stub::AsyncCheckLineOfSightRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckLineOfSightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::FindPath(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::FindPathRequest& request, ::sandbox::api::v1alpha1::FindPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::FindPathRequest, ::sandbox::api::v1alpha1::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindPath_, context, request, response);
}

void SandboxRoomService::Stub::async::FindPath(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::FindPathRequest* request, ::sandbox::api::v1alpha1::FindPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::FindPathRequest, ::sandbox::api::v1alpha1::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPath_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::FindPath(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::FindPathRequest* request, ::sandbox::api::v1alpha1::FindPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::FindPathResponse>* SandboxRoomService::Stub::PrepareAsyncFindPathRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::FindPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::FindPathResponse, ::sandbox::api::v1alpha1::FindPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::FindPathResponse>* SandboxRoomService::Stub::AsyncFindPathRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::FindPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::CalculateDistance(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest& request, ::sandbox::api::v1alpha1::CalculateDistanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::CalculateDistanceRequest, ::sandbox::api::v1alpha1::CalculateDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalculateDistance_, context, request, response);
}

void SandboxRoomService::Stub::async::CalculateDistance(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest* request, ::sandbox::api::v1alpha1::CalculateDistanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::CalculateDistanceRequest, ::sandbox::api::v1alpha1::CalculateDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateDistance_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::CalculateDistance(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest* request, ::sandbox::api::v1alpha1::CalculateDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::CalculateDistanceResponse>* SandboxRoomService::Stub::PrepareAsyncCalculateDistanceRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::CalculateDistanceResponse, ::sandbox::api::v1alpha1::CalculateDistanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalculateDistance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::CalculateDistanceResponse>* SandboxRoomService::Stub::AsyncCalculateDistanceRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalculateDistanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::GetPositionsInRange(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest& request, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::GetPositionsInRangeRequest, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPositionsInRange_, context, request, response);
}

void SandboxRoomService::Stub::async::GetPositionsInRange(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest* request, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::GetPositionsInRangeRequest, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositionsInRange_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::GetPositionsInRange(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest* request, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositionsInRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetPositionsInRangeResponse>* SandboxRoomService::Stub::PrepareAsyncGetPositionsInRangeRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::GetPositionsInRangeResponse, ::sandbox::api::v1alpha1::GetPositionsInRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPositionsInRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetPositionsInRangeResponse>* SandboxRoomService::Stub::AsyncGetPositionsInRangeRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionsInRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::PlaceEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest& request, ::sandbox::api::v1alpha1::PlaceEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::PlaceEntityRequest, ::sandbox::api::v1alpha1::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaceEntity_, context, request, response);
}

void SandboxRoomService::Stub::async::PlaceEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest* request, ::sandbox::api::v1alpha1::PlaceEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::PlaceEntityRequest, ::sandbox::api::v1alpha1::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceEntity_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::PlaceEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest* request, ::sandbox::api::v1alpha1::PlaceEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::PlaceEntityResponse>* SandboxRoomService::Stub::PrepareAsyncPlaceEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::PlaceEntityResponse, ::sandbox::api::v1alpha1::PlaceEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaceEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::PlaceEntityResponse>* SandboxRoomService::Stub::AsyncPlaceEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaceEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::MoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest& request, ::sandbox::api::v1alpha1::MoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::MoveEntityRequest, ::sandbox::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveEntity_, context, request, response);
}

void SandboxRoomService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest* request, ::sandbox::api::v1alpha1::MoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::MoveEntityRequest, ::sandbox::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest* request, ::sandbox::api::v1alpha1::MoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::MoveEntityResponse>* SandboxRoomService::Stub::PrepareAsyncMoveEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::MoveEntityResponse, ::sandbox::api::v1alpha1::MoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::MoveEntityResponse>* SandboxRoomService::Stub::AsyncMoveEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::RemoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest& request, ::sandbox::api::v1alpha1::RemoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::RemoveEntityRequest, ::sandbox::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveEntity_, context, request, response);
}

void SandboxRoomService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest* request, ::sandbox::api::v1alpha1::RemoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::RemoveEntityRequest, ::sandbox::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest* request, ::sandbox::api::v1alpha1::RemoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::RemoveEntityResponse>* SandboxRoomService::Stub::PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::RemoveEntityResponse, ::sandbox::api::v1alpha1::RemoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::RemoveEntityResponse>* SandboxRoomService::Stub::AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SandboxRoomService::Stub::GetEntitiesInRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest& request, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntitiesInRoom_, context, request, response);
}

void SandboxRoomService::Stub::async::GetEntitiesInRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest* request, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInRoom_, context, request, response, std::move(f));
}

void SandboxRoomService::Stub::async::GetEntitiesInRoom(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest* request, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse>* SandboxRoomService::Stub::PrepareAsyncGetEntitiesInRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse, ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntitiesInRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse>* SandboxRoomService::Stub::AsyncGetEntitiesInRoomRaw(::grpc::ClientContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntitiesInRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

SandboxRoomService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::GenerateRoomRequest, ::sandbox::api::v1alpha1::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::GenerateRoomRequest* req,
             ::sandbox::api::v1alpha1::GenerateRoomResponse* resp) {
               return service->GenerateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::BuildStaticRoomRequest, ::sandbox::api::v1alpha1::BuildStaticRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::BuildStaticRoomRequest* req,
             ::sandbox::api::v1alpha1::BuildStaticRoomResponse* resp) {
               return service->BuildStaticRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::GetRoomRequest, ::sandbox::api::v1alpha1::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::GetRoomRequest* req,
             ::sandbox::api::v1alpha1::GetRoomResponse* resp) {
               return service->GetRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::ListRoomsRequest, ::sandbox::api::v1alpha1::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::ListRoomsRequest* req,
             ::sandbox::api::v1alpha1::ListRoomsResponse* resp) {
               return service->ListRooms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::DeleteRoomRequest, ::sandbox::api::v1alpha1::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::DeleteRoomRequest* req,
             ::sandbox::api::v1alpha1::DeleteRoomResponse* resp) {
               return service->DeleteRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::CheckLineOfSightRequest, ::sandbox::api::v1alpha1::CheckLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::CheckLineOfSightRequest* req,
             ::sandbox::api::v1alpha1::CheckLineOfSightResponse* resp) {
               return service->CheckLineOfSight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::FindPathRequest, ::sandbox::api::v1alpha1::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::FindPathRequest* req,
             ::sandbox::api::v1alpha1::FindPathResponse* resp) {
               return service->FindPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::CalculateDistanceRequest, ::sandbox::api::v1alpha1::CalculateDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::CalculateDistanceRequest* req,
             ::sandbox::api::v1alpha1::CalculateDistanceResponse* resp) {
               return service->CalculateDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::GetPositionsInRangeRequest, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest* req,
             ::sandbox::api::v1alpha1::GetPositionsInRangeResponse* resp) {
               return service->GetPositionsInRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::PlaceEntityRequest, ::sandbox::api::v1alpha1::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::PlaceEntityRequest* req,
             ::sandbox::api::v1alpha1::PlaceEntityResponse* resp) {
               return service->PlaceEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::MoveEntityRequest, ::sandbox::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::MoveEntityRequest* req,
             ::sandbox::api::v1alpha1::MoveEntityResponse* resp) {
               return service->MoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::RemoveEntityRequest, ::sandbox::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::RemoveEntityRequest* req,
             ::sandbox::api::v1alpha1::RemoveEntityResponse* resp) {
               return service->RemoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SandboxRoomService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SandboxRoomService::Service, ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SandboxRoomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest* req,
             ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse* resp) {
               return service->GetEntitiesInRoom(ctx, req, resp);
             }, this)));
}

SandboxRoomService::Service::~Service() {
}

::grpc::Status SandboxRoomService::Service::GenerateRoom(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::GenerateRoomRequest* request, ::sandbox::api::v1alpha1::GenerateRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::BuildStaticRoom(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::BuildStaticRoomRequest* request, ::sandbox::api::v1alpha1::BuildStaticRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::GetRoom(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::GetRoomRequest* request, ::sandbox::api::v1alpha1::GetRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::ListRooms(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::ListRoomsRequest* request, ::sandbox::api::v1alpha1::ListRoomsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::DeleteRoom(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::DeleteRoomRequest* request, ::sandbox::api::v1alpha1::DeleteRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::CheckLineOfSight(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::CheckLineOfSightRequest* request, ::sandbox::api::v1alpha1::CheckLineOfSightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::FindPath(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::FindPathRequest* request, ::sandbox::api::v1alpha1::FindPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::CalculateDistance(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::CalculateDistanceRequest* request, ::sandbox::api::v1alpha1::CalculateDistanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::GetPositionsInRange(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::GetPositionsInRangeRequest* request, ::sandbox::api::v1alpha1::GetPositionsInRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::PlaceEntity(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::PlaceEntityRequest* request, ::sandbox::api::v1alpha1::PlaceEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::MoveEntity(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::MoveEntityRequest* request, ::sandbox::api::v1alpha1::MoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::RemoveEntity(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::RemoveEntityRequest* request, ::sandbox::api::v1alpha1::RemoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SandboxRoomService::Service::GetEntitiesInRoom(::grpc::ServerContext* context, const ::sandbox::api::v1alpha1::GetEntitiesInRoomRequest* request, ::sandbox::api::v1alpha1::GetEntitiesInRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sandbox
}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

