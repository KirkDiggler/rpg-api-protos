// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: dnd5e/api/v1alpha1/enums.proto

package apiv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// D&D 5e character races
type Race int32

const (
	Race_RACE_UNSPECIFIED Race = 0
	Race_RACE_HUMAN       Race = 1
	Race_RACE_ELF         Race = 2
	Race_RACE_DWARF       Race = 3
	Race_RACE_HALFLING    Race = 4
	Race_RACE_DRAGONBORN  Race = 5
	Race_RACE_GNOME       Race = 6
	Race_RACE_HALF_ELF    Race = 7
	Race_RACE_HALF_ORC    Race = 8
	Race_RACE_TIEFLING    Race = 9
)

// Enum value maps for Race.
var (
	Race_name = map[int32]string{
		0: "RACE_UNSPECIFIED",
		1: "RACE_HUMAN",
		2: "RACE_ELF",
		3: "RACE_DWARF",
		4: "RACE_HALFLING",
		5: "RACE_DRAGONBORN",
		6: "RACE_GNOME",
		7: "RACE_HALF_ELF",
		8: "RACE_HALF_ORC",
		9: "RACE_TIEFLING",
	}
	Race_value = map[string]int32{
		"RACE_UNSPECIFIED": 0,
		"RACE_HUMAN":       1,
		"RACE_ELF":         2,
		"RACE_DWARF":       3,
		"RACE_HALFLING":    4,
		"RACE_DRAGONBORN":  5,
		"RACE_GNOME":       6,
		"RACE_HALF_ELF":    7,
		"RACE_HALF_ORC":    8,
		"RACE_TIEFLING":    9,
	}
)

func (x Race) Enum() *Race {
	p := new(Race)
	*p = x
	return p
}

func (x Race) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Race) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[0].Descriptor()
}

func (Race) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[0]
}

func (x Race) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Race.Descriptor instead.
func (Race) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{0}
}

// D&D 5e subraces
type Subrace int32

const (
	Subrace_SUBRACE_UNSPECIFIED Subrace = 0
	// Elf subraces
	Subrace_SUBRACE_HIGH_ELF Subrace = 1
	Subrace_SUBRACE_WOOD_ELF Subrace = 2
	Subrace_SUBRACE_DARK_ELF Subrace = 3
	// Dwarf subraces
	Subrace_SUBRACE_HILL_DWARF     Subrace = 4
	Subrace_SUBRACE_MOUNTAIN_DWARF Subrace = 5
	// Halfling subraces
	Subrace_SUBRACE_LIGHTFOOT_HALFLING Subrace = 6
	Subrace_SUBRACE_STOUT_HALFLING     Subrace = 7
	// Gnome subraces
	Subrace_SUBRACE_FOREST_GNOME Subrace = 8
	Subrace_SUBRACE_ROCK_GNOME   Subrace = 9
)

// Enum value maps for Subrace.
var (
	Subrace_name = map[int32]string{
		0: "SUBRACE_UNSPECIFIED",
		1: "SUBRACE_HIGH_ELF",
		2: "SUBRACE_WOOD_ELF",
		3: "SUBRACE_DARK_ELF",
		4: "SUBRACE_HILL_DWARF",
		5: "SUBRACE_MOUNTAIN_DWARF",
		6: "SUBRACE_LIGHTFOOT_HALFLING",
		7: "SUBRACE_STOUT_HALFLING",
		8: "SUBRACE_FOREST_GNOME",
		9: "SUBRACE_ROCK_GNOME",
	}
	Subrace_value = map[string]int32{
		"SUBRACE_UNSPECIFIED":        0,
		"SUBRACE_HIGH_ELF":           1,
		"SUBRACE_WOOD_ELF":           2,
		"SUBRACE_DARK_ELF":           3,
		"SUBRACE_HILL_DWARF":         4,
		"SUBRACE_MOUNTAIN_DWARF":     5,
		"SUBRACE_LIGHTFOOT_HALFLING": 6,
		"SUBRACE_STOUT_HALFLING":     7,
		"SUBRACE_FOREST_GNOME":       8,
		"SUBRACE_ROCK_GNOME":         9,
	}
)

func (x Subrace) Enum() *Subrace {
	p := new(Subrace)
	*p = x
	return p
}

func (x Subrace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subrace) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[1].Descriptor()
}

func (Subrace) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[1]
}

func (x Subrace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subrace.Descriptor instead.
func (Subrace) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{1}
}

// D&D 5e character classes
type Class int32

const (
	Class_CLASS_UNSPECIFIED Class = 0
	Class_CLASS_BARBARIAN   Class = 1
	Class_CLASS_BARD        Class = 2
	Class_CLASS_CLERIC      Class = 3
	Class_CLASS_DRUID       Class = 4
	Class_CLASS_FIGHTER     Class = 5
	Class_CLASS_MONK        Class = 6
	Class_CLASS_PALADIN     Class = 7
	Class_CLASS_RANGER      Class = 8
	Class_CLASS_ROGUE       Class = 9
	Class_CLASS_SORCERER    Class = 10
	Class_CLASS_WARLOCK     Class = 11
	Class_CLASS_WIZARD      Class = 12
)

// Enum value maps for Class.
var (
	Class_name = map[int32]string{
		0:  "CLASS_UNSPECIFIED",
		1:  "CLASS_BARBARIAN",
		2:  "CLASS_BARD",
		3:  "CLASS_CLERIC",
		4:  "CLASS_DRUID",
		5:  "CLASS_FIGHTER",
		6:  "CLASS_MONK",
		7:  "CLASS_PALADIN",
		8:  "CLASS_RANGER",
		9:  "CLASS_ROGUE",
		10: "CLASS_SORCERER",
		11: "CLASS_WARLOCK",
		12: "CLASS_WIZARD",
	}
	Class_value = map[string]int32{
		"CLASS_UNSPECIFIED": 0,
		"CLASS_BARBARIAN":   1,
		"CLASS_BARD":        2,
		"CLASS_CLERIC":      3,
		"CLASS_DRUID":       4,
		"CLASS_FIGHTER":     5,
		"CLASS_MONK":        6,
		"CLASS_PALADIN":     7,
		"CLASS_RANGER":      8,
		"CLASS_ROGUE":       9,
		"CLASS_SORCERER":    10,
		"CLASS_WARLOCK":     11,
		"CLASS_WIZARD":      12,
	}
)

func (x Class) Enum() *Class {
	p := new(Class)
	*p = x
	return p
}

func (x Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Class) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[2].Descriptor()
}

func (Class) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[2]
}

func (x Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Class.Descriptor instead.
func (Class) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{2}
}

type Subclass int32

const (
	Subclass_SUBCLASS_UNSPECIFIED Subclass = 0
	// Fighter Subclasses
	Subclass_SUBCLASS_CHAMPION        Subclass = 1
	Subclass_SUBCLASS_BATTLE_MASTER   Subclass = 2
	Subclass_SUBCLASS_ELDRITCH_KNIGHT Subclass = 3
	// Barbarian Subclasses
	Subclass_SUBCLASS_BERSERKER Subclass = 4
	Subclass_SUBCLASS_TOTEM     Subclass = 5
	Subclass_SUBCLASS_ANCESTRAL Subclass = 6
	// Bard Subclasses
	Subclass_SUBCLASS_LORE    Subclass = 7
	Subclass_SUBCLASS_VALOR   Subclass = 8
	Subclass_SUBCLASS_GLAMOUR Subclass = 9
	// Cleric Subclasses
	Subclass_SUBCLASS_LIFE_DOMAIN      Subclass = 10
	Subclass_SUBCLASS_DEATH_DOMAIN     Subclass = 11
	Subclass_SUBCLASS_TRICKERY_DOMAIN  Subclass = 12
	Subclass_SUBCLASS_NATURE_DOMAIN    Subclass = 13
	Subclass_SUBCLASS_WAR_DOMAIN       Subclass = 14
	Subclass_SUBCLASS_LIGHT_DOMAIN     Subclass = 15
	Subclass_SUBCLASS_TEMPEST_DOMAIN   Subclass = 16
	Subclass_SUBCLASS_KNOWLEDGE_DOMAIN Subclass = 17
	// Druid Subclasses
	Subclass_SUBCLASS_CIRCLE_LAND   Subclass = 18
	Subclass_SUBCLASS_CIRCLE_MOON   Subclass = 19
	Subclass_SUBCLASS_CIRCLE_DREAMS Subclass = 20
	// Monk Subclasses
	Subclass_SUBCLASS_OPEN_HAND     Subclass = 21
	Subclass_SUBCLASS_SHADOW        Subclass = 22
	Subclass_SUBCLASS_FOUR_ELEMENTS Subclass = 23
	// Paladin Subclasses
	Subclass_SUBCLASS_DEVOTION    Subclass = 24
	Subclass_SUBCLASS_ANCIENTS    Subclass = 25
	Subclass_SUBCLASS_OATHBREAKER Subclass = 26
	Subclass_SUBCLASS_VENGEANCE   Subclass = 27
	// Ranger Subclasses
	Subclass_SUBCLASS_HUNTER        Subclass = 28
	Subclass_SUBCLASS_GLOOM_STALKER Subclass = 29
	Subclass_SUBCLASS_BEASTMASTER   Subclass = 30
	// Rogue Subclasses
	Subclass_SUBCLASS_THIEF            Subclass = 31
	Subclass_SUBCLASS_ASSASSIN         Subclass = 32
	Subclass_SUBCLASS_ARCANE_TRICKSTER Subclass = 33
	// Sorcerer Subclasses
	Subclass_SUBCLASS_DRACONIC_BLOODLINE Subclass = 34
	Subclass_SUBCLASS_WILD_MAGIC         Subclass = 35
	Subclass_SUBCLASS_DIVINE_SOUL        Subclass = 36
	// Warlock Subclasses
	Subclass_SUBCLASS_ARCHFEY       Subclass = 37
	Subclass_SUBCLASS_FIEND         Subclass = 38
	Subclass_SUBCLASS_GREAT_OLD_ONE Subclass = 39
	Subclass_SUBCLASS_HEXBLADE      Subclass = 40
	// Wizard Subclasses
	Subclass_SUBCLASS_ABJURATION    Subclass = 41
	Subclass_SUBCLASS_CONJURATION   Subclass = 42
	Subclass_SUBCLASS_DIVINATION    Subclass = 43
	Subclass_SUBCLASS_ENCHANTMENT   Subclass = 44
	Subclass_SUBCLASS_EVOCATION     Subclass = 45
	Subclass_SUBCLASS_NECROMANCY    Subclass = 46
	Subclass_SUBCLASS_TRANSMUTATION Subclass = 47
)

// Enum value maps for Subclass.
var (
	Subclass_name = map[int32]string{
		0:  "SUBCLASS_UNSPECIFIED",
		1:  "SUBCLASS_CHAMPION",
		2:  "SUBCLASS_BATTLE_MASTER",
		3:  "SUBCLASS_ELDRITCH_KNIGHT",
		4:  "SUBCLASS_BERSERKER",
		5:  "SUBCLASS_TOTEM",
		6:  "SUBCLASS_ANCESTRAL",
		7:  "SUBCLASS_LORE",
		8:  "SUBCLASS_VALOR",
		9:  "SUBCLASS_GLAMOUR",
		10: "SUBCLASS_LIFE_DOMAIN",
		11: "SUBCLASS_DEATH_DOMAIN",
		12: "SUBCLASS_TRICKERY_DOMAIN",
		13: "SUBCLASS_NATURE_DOMAIN",
		14: "SUBCLASS_WAR_DOMAIN",
		15: "SUBCLASS_LIGHT_DOMAIN",
		16: "SUBCLASS_TEMPEST_DOMAIN",
		17: "SUBCLASS_KNOWLEDGE_DOMAIN",
		18: "SUBCLASS_CIRCLE_LAND",
		19: "SUBCLASS_CIRCLE_MOON",
		20: "SUBCLASS_CIRCLE_DREAMS",
		21: "SUBCLASS_OPEN_HAND",
		22: "SUBCLASS_SHADOW",
		23: "SUBCLASS_FOUR_ELEMENTS",
		24: "SUBCLASS_DEVOTION",
		25: "SUBCLASS_ANCIENTS",
		26: "SUBCLASS_OATHBREAKER",
		27: "SUBCLASS_VENGEANCE",
		28: "SUBCLASS_HUNTER",
		29: "SUBCLASS_GLOOM_STALKER",
		30: "SUBCLASS_BEASTMASTER",
		31: "SUBCLASS_THIEF",
		32: "SUBCLASS_ASSASSIN",
		33: "SUBCLASS_ARCANE_TRICKSTER",
		34: "SUBCLASS_DRACONIC_BLOODLINE",
		35: "SUBCLASS_WILD_MAGIC",
		36: "SUBCLASS_DIVINE_SOUL",
		37: "SUBCLASS_ARCHFEY",
		38: "SUBCLASS_FIEND",
		39: "SUBCLASS_GREAT_OLD_ONE",
		40: "SUBCLASS_HEXBLADE",
		41: "SUBCLASS_ABJURATION",
		42: "SUBCLASS_CONJURATION",
		43: "SUBCLASS_DIVINATION",
		44: "SUBCLASS_ENCHANTMENT",
		45: "SUBCLASS_EVOCATION",
		46: "SUBCLASS_NECROMANCY",
		47: "SUBCLASS_TRANSMUTATION",
	}
	Subclass_value = map[string]int32{
		"SUBCLASS_UNSPECIFIED":        0,
		"SUBCLASS_CHAMPION":           1,
		"SUBCLASS_BATTLE_MASTER":      2,
		"SUBCLASS_ELDRITCH_KNIGHT":    3,
		"SUBCLASS_BERSERKER":          4,
		"SUBCLASS_TOTEM":              5,
		"SUBCLASS_ANCESTRAL":          6,
		"SUBCLASS_LORE":               7,
		"SUBCLASS_VALOR":              8,
		"SUBCLASS_GLAMOUR":            9,
		"SUBCLASS_LIFE_DOMAIN":        10,
		"SUBCLASS_DEATH_DOMAIN":       11,
		"SUBCLASS_TRICKERY_DOMAIN":    12,
		"SUBCLASS_NATURE_DOMAIN":      13,
		"SUBCLASS_WAR_DOMAIN":         14,
		"SUBCLASS_LIGHT_DOMAIN":       15,
		"SUBCLASS_TEMPEST_DOMAIN":     16,
		"SUBCLASS_KNOWLEDGE_DOMAIN":   17,
		"SUBCLASS_CIRCLE_LAND":        18,
		"SUBCLASS_CIRCLE_MOON":        19,
		"SUBCLASS_CIRCLE_DREAMS":      20,
		"SUBCLASS_OPEN_HAND":          21,
		"SUBCLASS_SHADOW":             22,
		"SUBCLASS_FOUR_ELEMENTS":      23,
		"SUBCLASS_DEVOTION":           24,
		"SUBCLASS_ANCIENTS":           25,
		"SUBCLASS_OATHBREAKER":        26,
		"SUBCLASS_VENGEANCE":          27,
		"SUBCLASS_HUNTER":             28,
		"SUBCLASS_GLOOM_STALKER":      29,
		"SUBCLASS_BEASTMASTER":        30,
		"SUBCLASS_THIEF":              31,
		"SUBCLASS_ASSASSIN":           32,
		"SUBCLASS_ARCANE_TRICKSTER":   33,
		"SUBCLASS_DRACONIC_BLOODLINE": 34,
		"SUBCLASS_WILD_MAGIC":         35,
		"SUBCLASS_DIVINE_SOUL":        36,
		"SUBCLASS_ARCHFEY":            37,
		"SUBCLASS_FIEND":              38,
		"SUBCLASS_GREAT_OLD_ONE":      39,
		"SUBCLASS_HEXBLADE":           40,
		"SUBCLASS_ABJURATION":         41,
		"SUBCLASS_CONJURATION":        42,
		"SUBCLASS_DIVINATION":         43,
		"SUBCLASS_ENCHANTMENT":        44,
		"SUBCLASS_EVOCATION":          45,
		"SUBCLASS_NECROMANCY":         46,
		"SUBCLASS_TRANSMUTATION":      47,
	}
)

func (x Subclass) Enum() *Subclass {
	p := new(Subclass)
	*p = x
	return p
}

func (x Subclass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subclass) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[3].Descriptor()
}

func (Subclass) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[3]
}

func (x Subclass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subclass.Descriptor instead.
func (Subclass) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{3}
}

// D&D 5e abilities
type Ability int32

const (
	Ability_ABILITY_UNSPECIFIED  Ability = 0
	Ability_ABILITY_STRENGTH     Ability = 1
	Ability_ABILITY_DEXTERITY    Ability = 2
	Ability_ABILITY_CONSTITUTION Ability = 3
	Ability_ABILITY_INTELLIGENCE Ability = 4
	Ability_ABILITY_WISDOM       Ability = 5
	Ability_ABILITY_CHARISMA     Ability = 6
)

// Enum value maps for Ability.
var (
	Ability_name = map[int32]string{
		0: "ABILITY_UNSPECIFIED",
		1: "ABILITY_STRENGTH",
		2: "ABILITY_DEXTERITY",
		3: "ABILITY_CONSTITUTION",
		4: "ABILITY_INTELLIGENCE",
		5: "ABILITY_WISDOM",
		6: "ABILITY_CHARISMA",
	}
	Ability_value = map[string]int32{
		"ABILITY_UNSPECIFIED":  0,
		"ABILITY_STRENGTH":     1,
		"ABILITY_DEXTERITY":    2,
		"ABILITY_CONSTITUTION": 3,
		"ABILITY_INTELLIGENCE": 4,
		"ABILITY_WISDOM":       5,
		"ABILITY_CHARISMA":     6,
	}
)

func (x Ability) Enum() *Ability {
	p := new(Ability)
	*p = x
	return p
}

func (x Ability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ability) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[4].Descriptor()
}

func (Ability) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[4]
}

func (x Ability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ability.Descriptor instead.
func (Ability) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{4}
}

// D&D 5e skills
type Skill int32

const (
	Skill_SKILL_UNSPECIFIED     Skill = 0
	Skill_SKILL_ACROBATICS      Skill = 1
	Skill_SKILL_ANIMAL_HANDLING Skill = 2
	Skill_SKILL_ARCANA          Skill = 3
	Skill_SKILL_ATHLETICS       Skill = 4
	Skill_SKILL_DECEPTION       Skill = 5
	Skill_SKILL_HISTORY         Skill = 6
	Skill_SKILL_INSIGHT         Skill = 7
	Skill_SKILL_INTIMIDATION    Skill = 8
	Skill_SKILL_INVESTIGATION   Skill = 9
	Skill_SKILL_MEDICINE        Skill = 10
	Skill_SKILL_NATURE          Skill = 11
	Skill_SKILL_PERCEPTION      Skill = 12
	Skill_SKILL_PERFORMANCE     Skill = 13
	Skill_SKILL_PERSUASION      Skill = 14
	Skill_SKILL_RELIGION        Skill = 15
	Skill_SKILL_SLEIGHT_OF_HAND Skill = 16
	Skill_SKILL_STEALTH         Skill = 17
	Skill_SKILL_SURVIVAL        Skill = 18
)

// Enum value maps for Skill.
var (
	Skill_name = map[int32]string{
		0:  "SKILL_UNSPECIFIED",
		1:  "SKILL_ACROBATICS",
		2:  "SKILL_ANIMAL_HANDLING",
		3:  "SKILL_ARCANA",
		4:  "SKILL_ATHLETICS",
		5:  "SKILL_DECEPTION",
		6:  "SKILL_HISTORY",
		7:  "SKILL_INSIGHT",
		8:  "SKILL_INTIMIDATION",
		9:  "SKILL_INVESTIGATION",
		10: "SKILL_MEDICINE",
		11: "SKILL_NATURE",
		12: "SKILL_PERCEPTION",
		13: "SKILL_PERFORMANCE",
		14: "SKILL_PERSUASION",
		15: "SKILL_RELIGION",
		16: "SKILL_SLEIGHT_OF_HAND",
		17: "SKILL_STEALTH",
		18: "SKILL_SURVIVAL",
	}
	Skill_value = map[string]int32{
		"SKILL_UNSPECIFIED":     0,
		"SKILL_ACROBATICS":      1,
		"SKILL_ANIMAL_HANDLING": 2,
		"SKILL_ARCANA":          3,
		"SKILL_ATHLETICS":       4,
		"SKILL_DECEPTION":       5,
		"SKILL_HISTORY":         6,
		"SKILL_INSIGHT":         7,
		"SKILL_INTIMIDATION":    8,
		"SKILL_INVESTIGATION":   9,
		"SKILL_MEDICINE":        10,
		"SKILL_NATURE":          11,
		"SKILL_PERCEPTION":      12,
		"SKILL_PERFORMANCE":     13,
		"SKILL_PERSUASION":      14,
		"SKILL_RELIGION":        15,
		"SKILL_SLEIGHT_OF_HAND": 16,
		"SKILL_STEALTH":         17,
		"SKILL_SURVIVAL":        18,
	}
)

func (x Skill) Enum() *Skill {
	p := new(Skill)
	*p = x
	return p
}

func (x Skill) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skill) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[5].Descriptor()
}

func (Skill) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[5]
}

func (x Skill) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skill.Descriptor instead.
func (Skill) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{5}
}

// D&D 5e alignments
type Alignment int32

const (
	Alignment_ALIGNMENT_UNSPECIFIED     Alignment = 0
	Alignment_ALIGNMENT_LAWFUL_GOOD     Alignment = 1
	Alignment_ALIGNMENT_NEUTRAL_GOOD    Alignment = 2
	Alignment_ALIGNMENT_CHAOTIC_GOOD    Alignment = 3
	Alignment_ALIGNMENT_LAWFUL_NEUTRAL  Alignment = 4
	Alignment_ALIGNMENT_TRUE_NEUTRAL    Alignment = 5
	Alignment_ALIGNMENT_CHAOTIC_NEUTRAL Alignment = 6
	Alignment_ALIGNMENT_LAWFUL_EVIL     Alignment = 7
	Alignment_ALIGNMENT_NEUTRAL_EVIL    Alignment = 8
	Alignment_ALIGNMENT_CHAOTIC_EVIL    Alignment = 9
)

// Enum value maps for Alignment.
var (
	Alignment_name = map[int32]string{
		0: "ALIGNMENT_UNSPECIFIED",
		1: "ALIGNMENT_LAWFUL_GOOD",
		2: "ALIGNMENT_NEUTRAL_GOOD",
		3: "ALIGNMENT_CHAOTIC_GOOD",
		4: "ALIGNMENT_LAWFUL_NEUTRAL",
		5: "ALIGNMENT_TRUE_NEUTRAL",
		6: "ALIGNMENT_CHAOTIC_NEUTRAL",
		7: "ALIGNMENT_LAWFUL_EVIL",
		8: "ALIGNMENT_NEUTRAL_EVIL",
		9: "ALIGNMENT_CHAOTIC_EVIL",
	}
	Alignment_value = map[string]int32{
		"ALIGNMENT_UNSPECIFIED":     0,
		"ALIGNMENT_LAWFUL_GOOD":     1,
		"ALIGNMENT_NEUTRAL_GOOD":    2,
		"ALIGNMENT_CHAOTIC_GOOD":    3,
		"ALIGNMENT_LAWFUL_NEUTRAL":  4,
		"ALIGNMENT_TRUE_NEUTRAL":    5,
		"ALIGNMENT_CHAOTIC_NEUTRAL": 6,
		"ALIGNMENT_LAWFUL_EVIL":     7,
		"ALIGNMENT_NEUTRAL_EVIL":    8,
		"ALIGNMENT_CHAOTIC_EVIL":    9,
	}
)

func (x Alignment) Enum() *Alignment {
	p := new(Alignment)
	*p = x
	return p
}

func (x Alignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alignment) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[6].Descriptor()
}

func (Alignment) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[6]
}

func (x Alignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alignment.Descriptor instead.
func (Alignment) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{6}
}

// D&D 5e backgrounds
type Background int32

const (
	Background_BACKGROUND_UNSPECIFIED   Background = 0
	Background_BACKGROUND_ACOLYTE       Background = 1
	Background_BACKGROUND_CHARLATAN     Background = 2
	Background_BACKGROUND_CRIMINAL      Background = 3
	Background_BACKGROUND_ENTERTAINER   Background = 4
	Background_BACKGROUND_FOLK_HERO     Background = 5
	Background_BACKGROUND_GUILD_ARTISAN Background = 6
	Background_BACKGROUND_HERMIT        Background = 7
	Background_BACKGROUND_NOBLE         Background = 8
	Background_BACKGROUND_OUTLANDER     Background = 9
	Background_BACKGROUND_SAGE          Background = 10
	Background_BACKGROUND_SAILOR        Background = 11
	Background_BACKGROUND_SOLDIER       Background = 12
	Background_BACKGROUND_URCHIN        Background = 13
)

// Enum value maps for Background.
var (
	Background_name = map[int32]string{
		0:  "BACKGROUND_UNSPECIFIED",
		1:  "BACKGROUND_ACOLYTE",
		2:  "BACKGROUND_CHARLATAN",
		3:  "BACKGROUND_CRIMINAL",
		4:  "BACKGROUND_ENTERTAINER",
		5:  "BACKGROUND_FOLK_HERO",
		6:  "BACKGROUND_GUILD_ARTISAN",
		7:  "BACKGROUND_HERMIT",
		8:  "BACKGROUND_NOBLE",
		9:  "BACKGROUND_OUTLANDER",
		10: "BACKGROUND_SAGE",
		11: "BACKGROUND_SAILOR",
		12: "BACKGROUND_SOLDIER",
		13: "BACKGROUND_URCHIN",
	}
	Background_value = map[string]int32{
		"BACKGROUND_UNSPECIFIED":   0,
		"BACKGROUND_ACOLYTE":       1,
		"BACKGROUND_CHARLATAN":     2,
		"BACKGROUND_CRIMINAL":      3,
		"BACKGROUND_ENTERTAINER":   4,
		"BACKGROUND_FOLK_HERO":     5,
		"BACKGROUND_GUILD_ARTISAN": 6,
		"BACKGROUND_HERMIT":        7,
		"BACKGROUND_NOBLE":         8,
		"BACKGROUND_OUTLANDER":     9,
		"BACKGROUND_SAGE":          10,
		"BACKGROUND_SAILOR":        11,
		"BACKGROUND_SOLDIER":       12,
		"BACKGROUND_URCHIN":        13,
	}
)

func (x Background) Enum() *Background {
	p := new(Background)
	*p = x
	return p
}

func (x Background) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Background) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[7].Descriptor()
}

func (Background) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[7]
}

func (x Background) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Background.Descriptor instead.
func (Background) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{7}
}

// D&D 5e languages
type Language int32

const (
	Language_LANGUAGE_UNSPECIFIED Language = 0
	Language_LANGUAGE_COMMON      Language = 1
	Language_LANGUAGE_DWARVISH    Language = 2
	Language_LANGUAGE_ELVISH      Language = 3
	Language_LANGUAGE_GIANT       Language = 4
	Language_LANGUAGE_GNOMISH     Language = 5
	Language_LANGUAGE_GOBLIN      Language = 6
	Language_LANGUAGE_HALFLING    Language = 7
	Language_LANGUAGE_ORC         Language = 8
	Language_LANGUAGE_ABYSSAL     Language = 9
	Language_LANGUAGE_CELESTIAL   Language = 10
	Language_LANGUAGE_DRACONIC    Language = 11
	Language_LANGUAGE_DEEP_SPEECH Language = 12
	Language_LANGUAGE_INFERNAL    Language = 13
	Language_LANGUAGE_PRIMORDIAL  Language = 14
	Language_LANGUAGE_SYLVAN      Language = 15
	Language_LANGUAGE_UNDERCOMMON Language = 16
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "LANGUAGE_UNSPECIFIED",
		1:  "LANGUAGE_COMMON",
		2:  "LANGUAGE_DWARVISH",
		3:  "LANGUAGE_ELVISH",
		4:  "LANGUAGE_GIANT",
		5:  "LANGUAGE_GNOMISH",
		6:  "LANGUAGE_GOBLIN",
		7:  "LANGUAGE_HALFLING",
		8:  "LANGUAGE_ORC",
		9:  "LANGUAGE_ABYSSAL",
		10: "LANGUAGE_CELESTIAL",
		11: "LANGUAGE_DRACONIC",
		12: "LANGUAGE_DEEP_SPEECH",
		13: "LANGUAGE_INFERNAL",
		14: "LANGUAGE_PRIMORDIAL",
		15: "LANGUAGE_SYLVAN",
		16: "LANGUAGE_UNDERCOMMON",
	}
	Language_value = map[string]int32{
		"LANGUAGE_UNSPECIFIED": 0,
		"LANGUAGE_COMMON":      1,
		"LANGUAGE_DWARVISH":    2,
		"LANGUAGE_ELVISH":      3,
		"LANGUAGE_GIANT":       4,
		"LANGUAGE_GNOMISH":     5,
		"LANGUAGE_GOBLIN":      6,
		"LANGUAGE_HALFLING":    7,
		"LANGUAGE_ORC":         8,
		"LANGUAGE_ABYSSAL":     9,
		"LANGUAGE_CELESTIAL":   10,
		"LANGUAGE_DRACONIC":    11,
		"LANGUAGE_DEEP_SPEECH": 12,
		"LANGUAGE_INFERNAL":    13,
		"LANGUAGE_PRIMORDIAL":  14,
		"LANGUAGE_SYLVAN":      15,
		"LANGUAGE_UNDERCOMMON": 16,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[8].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[8]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{8}
}

// D&D 5e equipment types
type EquipmentType int32

const (
	EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED           EquipmentType = 0
	EquipmentType_EQUIPMENT_TYPE_SIMPLE_MELEE_WEAPON   EquipmentType = 1
	EquipmentType_EQUIPMENT_TYPE_SIMPLE_RANGED_WEAPON  EquipmentType = 2
	EquipmentType_EQUIPMENT_TYPE_MARTIAL_MELEE_WEAPON  EquipmentType = 3
	EquipmentType_EQUIPMENT_TYPE_MARTIAL_RANGED_WEAPON EquipmentType = 4
	EquipmentType_EQUIPMENT_TYPE_LIGHT_ARMOR           EquipmentType = 5
	EquipmentType_EQUIPMENT_TYPE_MEDIUM_ARMOR          EquipmentType = 6
	EquipmentType_EQUIPMENT_TYPE_HEAVY_ARMOR           EquipmentType = 7
	EquipmentType_EQUIPMENT_TYPE_SHIELD                EquipmentType = 8
	EquipmentType_EQUIPMENT_TYPE_ADVENTURING_GEAR      EquipmentType = 9
	EquipmentType_EQUIPMENT_TYPE_TOOLS                 EquipmentType = 10
	EquipmentType_EQUIPMENT_TYPE_ARTISAN_TOOLS         EquipmentType = 11
	EquipmentType_EQUIPMENT_TYPE_GAMING_SET            EquipmentType = 12
	EquipmentType_EQUIPMENT_TYPE_MUSICAL_INSTRUMENT    EquipmentType = 13
	EquipmentType_EQUIPMENT_TYPE_VEHICLE               EquipmentType = 14
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0:  "EQUIPMENT_TYPE_UNSPECIFIED",
		1:  "EQUIPMENT_TYPE_SIMPLE_MELEE_WEAPON",
		2:  "EQUIPMENT_TYPE_SIMPLE_RANGED_WEAPON",
		3:  "EQUIPMENT_TYPE_MARTIAL_MELEE_WEAPON",
		4:  "EQUIPMENT_TYPE_MARTIAL_RANGED_WEAPON",
		5:  "EQUIPMENT_TYPE_LIGHT_ARMOR",
		6:  "EQUIPMENT_TYPE_MEDIUM_ARMOR",
		7:  "EQUIPMENT_TYPE_HEAVY_ARMOR",
		8:  "EQUIPMENT_TYPE_SHIELD",
		9:  "EQUIPMENT_TYPE_ADVENTURING_GEAR",
		10: "EQUIPMENT_TYPE_TOOLS",
		11: "EQUIPMENT_TYPE_ARTISAN_TOOLS",
		12: "EQUIPMENT_TYPE_GAMING_SET",
		13: "EQUIPMENT_TYPE_MUSICAL_INSTRUMENT",
		14: "EQUIPMENT_TYPE_VEHICLE",
	}
	EquipmentType_value = map[string]int32{
		"EQUIPMENT_TYPE_UNSPECIFIED":           0,
		"EQUIPMENT_TYPE_SIMPLE_MELEE_WEAPON":   1,
		"EQUIPMENT_TYPE_SIMPLE_RANGED_WEAPON":  2,
		"EQUIPMENT_TYPE_MARTIAL_MELEE_WEAPON":  3,
		"EQUIPMENT_TYPE_MARTIAL_RANGED_WEAPON": 4,
		"EQUIPMENT_TYPE_LIGHT_ARMOR":           5,
		"EQUIPMENT_TYPE_MEDIUM_ARMOR":          6,
		"EQUIPMENT_TYPE_HEAVY_ARMOR":           7,
		"EQUIPMENT_TYPE_SHIELD":                8,
		"EQUIPMENT_TYPE_ADVENTURING_GEAR":      9,
		"EQUIPMENT_TYPE_TOOLS":                 10,
		"EQUIPMENT_TYPE_ARTISAN_TOOLS":         11,
		"EQUIPMENT_TYPE_GAMING_SET":            12,
		"EQUIPMENT_TYPE_MUSICAL_INSTRUMENT":    13,
		"EQUIPMENT_TYPE_VEHICLE":               14,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[9].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[9]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{9}
}

// D&D 5e weapons - maps to toolkit WeaponID constants
type Weapon int32

const (
	Weapon_WEAPON_UNSPECIFIED Weapon = 0
	// Simple Melee Weapons
	Weapon_WEAPON_CLUB         Weapon = 1
	Weapon_WEAPON_DAGGER       Weapon = 2
	Weapon_WEAPON_GREATCLUB    Weapon = 3
	Weapon_WEAPON_HANDAXE      Weapon = 4
	Weapon_WEAPON_JAVELIN      Weapon = 5
	Weapon_WEAPON_LIGHT_HAMMER Weapon = 6
	Weapon_WEAPON_MACE         Weapon = 7
	Weapon_WEAPON_QUARTERSTAFF Weapon = 8
	Weapon_WEAPON_SICKLE       Weapon = 9
	Weapon_WEAPON_SPEAR        Weapon = 10
	// Simple Ranged Weapons
	Weapon_WEAPON_LIGHT_CROSSBOW Weapon = 11
	Weapon_WEAPON_DART           Weapon = 12
	Weapon_WEAPON_SHORTBOW       Weapon = 13
	Weapon_WEAPON_SLING          Weapon = 14
	// Martial Melee Weapons
	Weapon_WEAPON_BATTLEAXE   Weapon = 15
	Weapon_WEAPON_FLAIL       Weapon = 16
	Weapon_WEAPON_GLAIVE      Weapon = 17
	Weapon_WEAPON_GREATAXE    Weapon = 18
	Weapon_WEAPON_GREATSWORD  Weapon = 19
	Weapon_WEAPON_HALBERD     Weapon = 20
	Weapon_WEAPON_LANCE       Weapon = 21
	Weapon_WEAPON_LONGSWORD   Weapon = 22
	Weapon_WEAPON_MAUL        Weapon = 23
	Weapon_WEAPON_MORNINGSTAR Weapon = 24
	Weapon_WEAPON_PIKE        Weapon = 25
	Weapon_WEAPON_RAPIER      Weapon = 26
	Weapon_WEAPON_SCIMITAR    Weapon = 27
	Weapon_WEAPON_SHORTSWORD  Weapon = 28
	Weapon_WEAPON_TRIDENT     Weapon = 29
	Weapon_WEAPON_WAR_PICK    Weapon = 30
	Weapon_WEAPON_WARHAMMER   Weapon = 31
	Weapon_WEAPON_WHIP        Weapon = 32
	// Martial Ranged Weapons
	Weapon_WEAPON_BLOWGUN        Weapon = 33
	Weapon_WEAPON_HAND_CROSSBOW  Weapon = 34
	Weapon_WEAPON_HEAVY_CROSSBOW Weapon = 35
	Weapon_WEAPON_LONGBOW        Weapon = 36
	Weapon_WEAPON_NET            Weapon = 37
	// Ammunition
	Weapon_WEAPON_ARROWS_20 Weapon = 38
	Weapon_WEAPON_BOLTS_20  Weapon = 39
	// Category placeholders for choice requirements
	Weapon_WEAPON_ANY_SIMPLE  Weapon = 40
	Weapon_WEAPON_ANY_MARTIAL Weapon = 41
	Weapon_WEAPON_ANY         Weapon = 42
)

// Enum value maps for Weapon.
var (
	Weapon_name = map[int32]string{
		0:  "WEAPON_UNSPECIFIED",
		1:  "WEAPON_CLUB",
		2:  "WEAPON_DAGGER",
		3:  "WEAPON_GREATCLUB",
		4:  "WEAPON_HANDAXE",
		5:  "WEAPON_JAVELIN",
		6:  "WEAPON_LIGHT_HAMMER",
		7:  "WEAPON_MACE",
		8:  "WEAPON_QUARTERSTAFF",
		9:  "WEAPON_SICKLE",
		10: "WEAPON_SPEAR",
		11: "WEAPON_LIGHT_CROSSBOW",
		12: "WEAPON_DART",
		13: "WEAPON_SHORTBOW",
		14: "WEAPON_SLING",
		15: "WEAPON_BATTLEAXE",
		16: "WEAPON_FLAIL",
		17: "WEAPON_GLAIVE",
		18: "WEAPON_GREATAXE",
		19: "WEAPON_GREATSWORD",
		20: "WEAPON_HALBERD",
		21: "WEAPON_LANCE",
		22: "WEAPON_LONGSWORD",
		23: "WEAPON_MAUL",
		24: "WEAPON_MORNINGSTAR",
		25: "WEAPON_PIKE",
		26: "WEAPON_RAPIER",
		27: "WEAPON_SCIMITAR",
		28: "WEAPON_SHORTSWORD",
		29: "WEAPON_TRIDENT",
		30: "WEAPON_WAR_PICK",
		31: "WEAPON_WARHAMMER",
		32: "WEAPON_WHIP",
		33: "WEAPON_BLOWGUN",
		34: "WEAPON_HAND_CROSSBOW",
		35: "WEAPON_HEAVY_CROSSBOW",
		36: "WEAPON_LONGBOW",
		37: "WEAPON_NET",
		38: "WEAPON_ARROWS_20",
		39: "WEAPON_BOLTS_20",
		40: "WEAPON_ANY_SIMPLE",
		41: "WEAPON_ANY_MARTIAL",
		42: "WEAPON_ANY",
	}
	Weapon_value = map[string]int32{
		"WEAPON_UNSPECIFIED":    0,
		"WEAPON_CLUB":           1,
		"WEAPON_DAGGER":         2,
		"WEAPON_GREATCLUB":      3,
		"WEAPON_HANDAXE":        4,
		"WEAPON_JAVELIN":        5,
		"WEAPON_LIGHT_HAMMER":   6,
		"WEAPON_MACE":           7,
		"WEAPON_QUARTERSTAFF":   8,
		"WEAPON_SICKLE":         9,
		"WEAPON_SPEAR":          10,
		"WEAPON_LIGHT_CROSSBOW": 11,
		"WEAPON_DART":           12,
		"WEAPON_SHORTBOW":       13,
		"WEAPON_SLING":          14,
		"WEAPON_BATTLEAXE":      15,
		"WEAPON_FLAIL":          16,
		"WEAPON_GLAIVE":         17,
		"WEAPON_GREATAXE":       18,
		"WEAPON_GREATSWORD":     19,
		"WEAPON_HALBERD":        20,
		"WEAPON_LANCE":          21,
		"WEAPON_LONGSWORD":      22,
		"WEAPON_MAUL":           23,
		"WEAPON_MORNINGSTAR":    24,
		"WEAPON_PIKE":           25,
		"WEAPON_RAPIER":         26,
		"WEAPON_SCIMITAR":       27,
		"WEAPON_SHORTSWORD":     28,
		"WEAPON_TRIDENT":        29,
		"WEAPON_WAR_PICK":       30,
		"WEAPON_WARHAMMER":      31,
		"WEAPON_WHIP":           32,
		"WEAPON_BLOWGUN":        33,
		"WEAPON_HAND_CROSSBOW":  34,
		"WEAPON_HEAVY_CROSSBOW": 35,
		"WEAPON_LONGBOW":        36,
		"WEAPON_NET":            37,
		"WEAPON_ARROWS_20":      38,
		"WEAPON_BOLTS_20":       39,
		"WEAPON_ANY_SIMPLE":     40,
		"WEAPON_ANY_MARTIAL":    41,
		"WEAPON_ANY":            42,
	}
)

func (x Weapon) Enum() *Weapon {
	p := new(Weapon)
	*p = x
	return p
}

func (x Weapon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Weapon) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[10].Descriptor()
}

func (Weapon) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[10]
}

func (x Weapon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Weapon.Descriptor instead.
func (Weapon) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{10}
}

// D&D 5e armor - maps to toolkit ArmorID constants
type Armor int32

const (
	Armor_ARMOR_UNSPECIFIED Armor = 0
	// Light Armor
	Armor_ARMOR_PADDED          Armor = 1
	Armor_ARMOR_LEATHER         Armor = 2
	Armor_ARMOR_STUDDED_LEATHER Armor = 3
	// Medium Armor
	Armor_ARMOR_HIDE        Armor = 4
	Armor_ARMOR_CHAIN_SHIRT Armor = 5
	Armor_ARMOR_SCALE_MAIL  Armor = 6
	Armor_ARMOR_BREASTPLATE Armor = 7
	Armor_ARMOR_HALF_PLATE  Armor = 8
	// Heavy Armor
	Armor_ARMOR_RING_MAIL  Armor = 9
	Armor_ARMOR_CHAIN_MAIL Armor = 10
	Armor_ARMOR_SPLINT     Armor = 11
	Armor_ARMOR_PLATE      Armor = 12
	// Shield
	Armor_ARMOR_SHIELD Armor = 13
)

// Enum value maps for Armor.
var (
	Armor_name = map[int32]string{
		0:  "ARMOR_UNSPECIFIED",
		1:  "ARMOR_PADDED",
		2:  "ARMOR_LEATHER",
		3:  "ARMOR_STUDDED_LEATHER",
		4:  "ARMOR_HIDE",
		5:  "ARMOR_CHAIN_SHIRT",
		6:  "ARMOR_SCALE_MAIL",
		7:  "ARMOR_BREASTPLATE",
		8:  "ARMOR_HALF_PLATE",
		9:  "ARMOR_RING_MAIL",
		10: "ARMOR_CHAIN_MAIL",
		11: "ARMOR_SPLINT",
		12: "ARMOR_PLATE",
		13: "ARMOR_SHIELD",
	}
	Armor_value = map[string]int32{
		"ARMOR_UNSPECIFIED":     0,
		"ARMOR_PADDED":          1,
		"ARMOR_LEATHER":         2,
		"ARMOR_STUDDED_LEATHER": 3,
		"ARMOR_HIDE":            4,
		"ARMOR_CHAIN_SHIRT":     5,
		"ARMOR_SCALE_MAIL":      6,
		"ARMOR_BREASTPLATE":     7,
		"ARMOR_HALF_PLATE":      8,
		"ARMOR_RING_MAIL":       9,
		"ARMOR_CHAIN_MAIL":      10,
		"ARMOR_SPLINT":          11,
		"ARMOR_PLATE":           12,
		"ARMOR_SHIELD":          13,
	}
)

func (x Armor) Enum() *Armor {
	p := new(Armor)
	*p = x
	return p
}

func (x Armor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Armor) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[11].Descriptor()
}

func (Armor) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[11]
}

func (x Armor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Armor.Descriptor instead.
func (Armor) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{11}
}

// D&D 5e fighting styles - maps to toolkit FightingStyle constants
type FightingStyle int32

const (
	FightingStyle_FIGHTING_STYLE_UNSPECIFIED           FightingStyle = 0
	FightingStyle_FIGHTING_STYLE_ARCHERY               FightingStyle = 1 // +2 to attack rolls with ranged weapons
	FightingStyle_FIGHTING_STYLE_DEFENSE               FightingStyle = 2 // +1 to AC while wearing armor
	FightingStyle_FIGHTING_STYLE_DUELING               FightingStyle = 3 // +2 damage with one-handed weapons
	FightingStyle_FIGHTING_STYLE_GREAT_WEAPON_FIGHTING FightingStyle = 4 // Reroll 1s and 2s on damage with two-handed
	FightingStyle_FIGHTING_STYLE_PROTECTION            FightingStyle = 5 // Impose disadvantage on attacks against allies
	FightingStyle_FIGHTING_STYLE_TWO_WEAPON_FIGHTING   FightingStyle = 6 // Add ability modifier to off-hand damage
)

// Enum value maps for FightingStyle.
var (
	FightingStyle_name = map[int32]string{
		0: "FIGHTING_STYLE_UNSPECIFIED",
		1: "FIGHTING_STYLE_ARCHERY",
		2: "FIGHTING_STYLE_DEFENSE",
		3: "FIGHTING_STYLE_DUELING",
		4: "FIGHTING_STYLE_GREAT_WEAPON_FIGHTING",
		5: "FIGHTING_STYLE_PROTECTION",
		6: "FIGHTING_STYLE_TWO_WEAPON_FIGHTING",
	}
	FightingStyle_value = map[string]int32{
		"FIGHTING_STYLE_UNSPECIFIED":           0,
		"FIGHTING_STYLE_ARCHERY":               1,
		"FIGHTING_STYLE_DEFENSE":               2,
		"FIGHTING_STYLE_DUELING":               3,
		"FIGHTING_STYLE_GREAT_WEAPON_FIGHTING": 4,
		"FIGHTING_STYLE_PROTECTION":            5,
		"FIGHTING_STYLE_TWO_WEAPON_FIGHTING":   6,
	}
)

func (x FightingStyle) Enum() *FightingStyle {
	p := new(FightingStyle)
	*p = x
	return p
}

func (x FightingStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FightingStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[12].Descriptor()
}

func (FightingStyle) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[12]
}

func (x FightingStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FightingStyle.Descriptor instead.
func (FightingStyle) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{12}
}

// D&D 5e tools - maps to toolkit ToolID constants
type Tool int32

const (
	Tool_TOOL_UNSPECIFIED Tool = 0
	// Artisan's Tools
	Tool_TOOL_ALCHEMIST_SUPPLIES    Tool = 1
	Tool_TOOL_BREWER_SUPPLIES       Tool = 2
	Tool_TOOL_CALLIGRAPHER_SUPPLIES Tool = 3
	Tool_TOOL_CARPENTER_TOOLS       Tool = 4
	Tool_TOOL_CARTOGRAPHER_TOOLS    Tool = 5
	Tool_TOOL_COBBLER_TOOLS         Tool = 6
	Tool_TOOL_COOK_UTENSILS         Tool = 7
	Tool_TOOL_GLASSBLOWER_TOOLS     Tool = 8
	Tool_TOOL_JEWELER_TOOLS         Tool = 9
	Tool_TOOL_LEATHERWORKER_TOOLS   Tool = 10
	Tool_TOOL_MASON_TOOLS           Tool = 11
	Tool_TOOL_PAINTER_SUPPLIES      Tool = 12
	Tool_TOOL_POTTER_TOOLS          Tool = 13
	Tool_TOOL_SMITH_TOOLS           Tool = 14
	Tool_TOOL_TINKER_TOOLS          Tool = 15
	Tool_TOOL_WEAVER_TOOLS          Tool = 16
	Tool_TOOL_WOODCARVER_TOOLS      Tool = 17
	// Gaming Sets
	Tool_TOOL_DICE_SET          Tool = 18
	Tool_TOOL_DRAGONCHESS_SET   Tool = 19
	Tool_TOOL_PLAYING_CARD_SET  Tool = 20
	Tool_TOOL_THREE_DRAGON_ANTE Tool = 21
	// Musical Instruments
	Tool_TOOL_BAGPIPES  Tool = 22
	Tool_TOOL_DRUM      Tool = 23
	Tool_TOOL_DULCIMER  Tool = 24
	Tool_TOOL_FLUTE     Tool = 25
	Tool_TOOL_LUTE      Tool = 26
	Tool_TOOL_LYRE      Tool = 27
	Tool_TOOL_HORN      Tool = 28
	Tool_TOOL_PAN_FLUTE Tool = 29
	Tool_TOOL_SHAWM     Tool = 30
	Tool_TOOL_VIOL      Tool = 31
	// Other Tools
	Tool_TOOL_DISGUISE_KIT    Tool = 32
	Tool_TOOL_FORGERY_KIT     Tool = 33
	Tool_TOOL_HERBALISM_KIT   Tool = 34
	Tool_TOOL_NAVIGATOR_TOOLS Tool = 35
	Tool_TOOL_POISONER_KIT    Tool = 36
	Tool_TOOL_THIEVES_TOOLS   Tool = 37
	Tool_TOOL_VEHICLES_LAND   Tool = 38
	Tool_TOOL_VEHICLES_WATER  Tool = 39
)

// Enum value maps for Tool.
var (
	Tool_name = map[int32]string{
		0:  "TOOL_UNSPECIFIED",
		1:  "TOOL_ALCHEMIST_SUPPLIES",
		2:  "TOOL_BREWER_SUPPLIES",
		3:  "TOOL_CALLIGRAPHER_SUPPLIES",
		4:  "TOOL_CARPENTER_TOOLS",
		5:  "TOOL_CARTOGRAPHER_TOOLS",
		6:  "TOOL_COBBLER_TOOLS",
		7:  "TOOL_COOK_UTENSILS",
		8:  "TOOL_GLASSBLOWER_TOOLS",
		9:  "TOOL_JEWELER_TOOLS",
		10: "TOOL_LEATHERWORKER_TOOLS",
		11: "TOOL_MASON_TOOLS",
		12: "TOOL_PAINTER_SUPPLIES",
		13: "TOOL_POTTER_TOOLS",
		14: "TOOL_SMITH_TOOLS",
		15: "TOOL_TINKER_TOOLS",
		16: "TOOL_WEAVER_TOOLS",
		17: "TOOL_WOODCARVER_TOOLS",
		18: "TOOL_DICE_SET",
		19: "TOOL_DRAGONCHESS_SET",
		20: "TOOL_PLAYING_CARD_SET",
		21: "TOOL_THREE_DRAGON_ANTE",
		22: "TOOL_BAGPIPES",
		23: "TOOL_DRUM",
		24: "TOOL_DULCIMER",
		25: "TOOL_FLUTE",
		26: "TOOL_LUTE",
		27: "TOOL_LYRE",
		28: "TOOL_HORN",
		29: "TOOL_PAN_FLUTE",
		30: "TOOL_SHAWM",
		31: "TOOL_VIOL",
		32: "TOOL_DISGUISE_KIT",
		33: "TOOL_FORGERY_KIT",
		34: "TOOL_HERBALISM_KIT",
		35: "TOOL_NAVIGATOR_TOOLS",
		36: "TOOL_POISONER_KIT",
		37: "TOOL_THIEVES_TOOLS",
		38: "TOOL_VEHICLES_LAND",
		39: "TOOL_VEHICLES_WATER",
	}
	Tool_value = map[string]int32{
		"TOOL_UNSPECIFIED":           0,
		"TOOL_ALCHEMIST_SUPPLIES":    1,
		"TOOL_BREWER_SUPPLIES":       2,
		"TOOL_CALLIGRAPHER_SUPPLIES": 3,
		"TOOL_CARPENTER_TOOLS":       4,
		"TOOL_CARTOGRAPHER_TOOLS":    5,
		"TOOL_COBBLER_TOOLS":         6,
		"TOOL_COOK_UTENSILS":         7,
		"TOOL_GLASSBLOWER_TOOLS":     8,
		"TOOL_JEWELER_TOOLS":         9,
		"TOOL_LEATHERWORKER_TOOLS":   10,
		"TOOL_MASON_TOOLS":           11,
		"TOOL_PAINTER_SUPPLIES":      12,
		"TOOL_POTTER_TOOLS":          13,
		"TOOL_SMITH_TOOLS":           14,
		"TOOL_TINKER_TOOLS":          15,
		"TOOL_WEAVER_TOOLS":          16,
		"TOOL_WOODCARVER_TOOLS":      17,
		"TOOL_DICE_SET":              18,
		"TOOL_DRAGONCHESS_SET":       19,
		"TOOL_PLAYING_CARD_SET":      20,
		"TOOL_THREE_DRAGON_ANTE":     21,
		"TOOL_BAGPIPES":              22,
		"TOOL_DRUM":                  23,
		"TOOL_DULCIMER":              24,
		"TOOL_FLUTE":                 25,
		"TOOL_LUTE":                  26,
		"TOOL_LYRE":                  27,
		"TOOL_HORN":                  28,
		"TOOL_PAN_FLUTE":             29,
		"TOOL_SHAWM":                 30,
		"TOOL_VIOL":                  31,
		"TOOL_DISGUISE_KIT":          32,
		"TOOL_FORGERY_KIT":           33,
		"TOOL_HERBALISM_KIT":         34,
		"TOOL_NAVIGATOR_TOOLS":       35,
		"TOOL_POISONER_KIT":          36,
		"TOOL_THIEVES_TOOLS":         37,
		"TOOL_VEHICLES_LAND":         38,
		"TOOL_VEHICLES_WATER":        39,
	}
)

func (x Tool) Enum() *Tool {
	p := new(Tool)
	*p = x
	return p
}

func (x Tool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tool) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[13].Descriptor()
}

func (Tool) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[13]
}

func (x Tool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tool.Descriptor instead.
func (Tool) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{13}
}

// D&D 5e equipment packs - maps to toolkit PackID constants
type Pack int32

const (
	Pack_PACK_UNSPECIFIED  Pack = 0
	Pack_PACK_BURGLARS     Pack = 1
	Pack_PACK_DIPLOMATS    Pack = 2
	Pack_PACK_DUNGEONEERS  Pack = 3
	Pack_PACK_ENTERTAINERS Pack = 4
	Pack_PACK_EXPLORERS    Pack = 5
	Pack_PACK_PRIESTS      Pack = 6
	Pack_PACK_SCHOLARS     Pack = 7
)

// Enum value maps for Pack.
var (
	Pack_name = map[int32]string{
		0: "PACK_UNSPECIFIED",
		1: "PACK_BURGLARS",
		2: "PACK_DIPLOMATS",
		3: "PACK_DUNGEONEERS",
		4: "PACK_ENTERTAINERS",
		5: "PACK_EXPLORERS",
		6: "PACK_PRIESTS",
		7: "PACK_SCHOLARS",
	}
	Pack_value = map[string]int32{
		"PACK_UNSPECIFIED":  0,
		"PACK_BURGLARS":     1,
		"PACK_DIPLOMATS":    2,
		"PACK_DUNGEONEERS":  3,
		"PACK_ENTERTAINERS": 4,
		"PACK_EXPLORERS":    5,
		"PACK_PRIESTS":      6,
		"PACK_SCHOLARS":     7,
	}
)

func (x Pack) Enum() *Pack {
	p := new(Pack)
	*p = x
	return p
}

func (x Pack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pack) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[14].Descriptor()
}

func (Pack) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[14]
}

func (x Pack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pack.Descriptor instead.
func (Pack) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{14}
}

// D&D 5e ammunition types
type Ammunition int32

const (
	Ammunition_AMMUNITION_UNSPECIFIED        Ammunition = 0
	Ammunition_AMMUNITION_ARROWS_20          Ammunition = 1
	Ammunition_AMMUNITION_BOLTS_20           Ammunition = 2
	Ammunition_AMMUNITION_BLOWGUN_NEEDLES_50 Ammunition = 3
	Ammunition_AMMUNITION_SLING_BULLETS_20   Ammunition = 4
)

// Enum value maps for Ammunition.
var (
	Ammunition_name = map[int32]string{
		0: "AMMUNITION_UNSPECIFIED",
		1: "AMMUNITION_ARROWS_20",
		2: "AMMUNITION_BOLTS_20",
		3: "AMMUNITION_BLOWGUN_NEEDLES_50",
		4: "AMMUNITION_SLING_BULLETS_20",
	}
	Ammunition_value = map[string]int32{
		"AMMUNITION_UNSPECIFIED":        0,
		"AMMUNITION_ARROWS_20":          1,
		"AMMUNITION_BOLTS_20":           2,
		"AMMUNITION_BLOWGUN_NEEDLES_50": 3,
		"AMMUNITION_SLING_BULLETS_20":   4,
	}
)

func (x Ammunition) Enum() *Ammunition {
	p := new(Ammunition)
	*p = x
	return p
}

func (x Ammunition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ammunition) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_enums_proto_enumTypes[15].Descriptor()
}

func (Ammunition) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_enums_proto_enumTypes[15]
}

func (x Ammunition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ammunition.Descriptor instead.
func (Ammunition) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP(), []int{15}
}

var File_dnd5e_api_v1alpha1_enums_proto protoreflect.FileDescriptor

const file_dnd5e_api_v1alpha1_enums_proto_rawDesc = "" +
	"\n" +
	"\x1ednd5e/api/v1alpha1/enums.proto\x12\x12dnd5e.api.v1alpha1*\xbb\x01\n" +
	"\x04Race\x12\x14\n" +
	"\x10RACE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"RACE_HUMAN\x10\x01\x12\f\n" +
	"\bRACE_ELF\x10\x02\x12\x0e\n" +
	"\n" +
	"RACE_DWARF\x10\x03\x12\x11\n" +
	"\rRACE_HALFLING\x10\x04\x12\x13\n" +
	"\x0fRACE_DRAGONBORN\x10\x05\x12\x0e\n" +
	"\n" +
	"RACE_GNOME\x10\x06\x12\x11\n" +
	"\rRACE_HALF_ELF\x10\a\x12\x11\n" +
	"\rRACE_HALF_ORC\x10\b\x12\x11\n" +
	"\rRACE_TIEFLING\x10\t*\x86\x02\n" +
	"\aSubrace\x12\x17\n" +
	"\x13SUBRACE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10SUBRACE_HIGH_ELF\x10\x01\x12\x14\n" +
	"\x10SUBRACE_WOOD_ELF\x10\x02\x12\x14\n" +
	"\x10SUBRACE_DARK_ELF\x10\x03\x12\x16\n" +
	"\x12SUBRACE_HILL_DWARF\x10\x04\x12\x1a\n" +
	"\x16SUBRACE_MOUNTAIN_DWARF\x10\x05\x12\x1e\n" +
	"\x1aSUBRACE_LIGHTFOOT_HALFLING\x10\x06\x12\x1a\n" +
	"\x16SUBRACE_STOUT_HALFLING\x10\a\x12\x18\n" +
	"\x14SUBRACE_FOREST_GNOME\x10\b\x12\x16\n" +
	"\x12SUBRACE_ROCK_GNOME\x10\t*\xf8\x01\n" +
	"\x05Class\x12\x15\n" +
	"\x11CLASS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fCLASS_BARBARIAN\x10\x01\x12\x0e\n" +
	"\n" +
	"CLASS_BARD\x10\x02\x12\x10\n" +
	"\fCLASS_CLERIC\x10\x03\x12\x0f\n" +
	"\vCLASS_DRUID\x10\x04\x12\x11\n" +
	"\rCLASS_FIGHTER\x10\x05\x12\x0e\n" +
	"\n" +
	"CLASS_MONK\x10\x06\x12\x11\n" +
	"\rCLASS_PALADIN\x10\a\x12\x10\n" +
	"\fCLASS_RANGER\x10\b\x12\x0f\n" +
	"\vCLASS_ROGUE\x10\t\x12\x12\n" +
	"\x0eCLASS_SORCERER\x10\n" +
	"\x12\x11\n" +
	"\rCLASS_WARLOCK\x10\v\x12\x10\n" +
	"\fCLASS_WIZARD\x10\f*\xc7\t\n" +
	"\bSubclass\x12\x18\n" +
	"\x14SUBCLASS_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11SUBCLASS_CHAMPION\x10\x01\x12\x1a\n" +
	"\x16SUBCLASS_BATTLE_MASTER\x10\x02\x12\x1c\n" +
	"\x18SUBCLASS_ELDRITCH_KNIGHT\x10\x03\x12\x16\n" +
	"\x12SUBCLASS_BERSERKER\x10\x04\x12\x12\n" +
	"\x0eSUBCLASS_TOTEM\x10\x05\x12\x16\n" +
	"\x12SUBCLASS_ANCESTRAL\x10\x06\x12\x11\n" +
	"\rSUBCLASS_LORE\x10\a\x12\x12\n" +
	"\x0eSUBCLASS_VALOR\x10\b\x12\x14\n" +
	"\x10SUBCLASS_GLAMOUR\x10\t\x12\x18\n" +
	"\x14SUBCLASS_LIFE_DOMAIN\x10\n" +
	"\x12\x19\n" +
	"\x15SUBCLASS_DEATH_DOMAIN\x10\v\x12\x1c\n" +
	"\x18SUBCLASS_TRICKERY_DOMAIN\x10\f\x12\x1a\n" +
	"\x16SUBCLASS_NATURE_DOMAIN\x10\r\x12\x17\n" +
	"\x13SUBCLASS_WAR_DOMAIN\x10\x0e\x12\x19\n" +
	"\x15SUBCLASS_LIGHT_DOMAIN\x10\x0f\x12\x1b\n" +
	"\x17SUBCLASS_TEMPEST_DOMAIN\x10\x10\x12\x1d\n" +
	"\x19SUBCLASS_KNOWLEDGE_DOMAIN\x10\x11\x12\x18\n" +
	"\x14SUBCLASS_CIRCLE_LAND\x10\x12\x12\x18\n" +
	"\x14SUBCLASS_CIRCLE_MOON\x10\x13\x12\x1a\n" +
	"\x16SUBCLASS_CIRCLE_DREAMS\x10\x14\x12\x16\n" +
	"\x12SUBCLASS_OPEN_HAND\x10\x15\x12\x13\n" +
	"\x0fSUBCLASS_SHADOW\x10\x16\x12\x1a\n" +
	"\x16SUBCLASS_FOUR_ELEMENTS\x10\x17\x12\x15\n" +
	"\x11SUBCLASS_DEVOTION\x10\x18\x12\x15\n" +
	"\x11SUBCLASS_ANCIENTS\x10\x19\x12\x18\n" +
	"\x14SUBCLASS_OATHBREAKER\x10\x1a\x12\x16\n" +
	"\x12SUBCLASS_VENGEANCE\x10\x1b\x12\x13\n" +
	"\x0fSUBCLASS_HUNTER\x10\x1c\x12\x1a\n" +
	"\x16SUBCLASS_GLOOM_STALKER\x10\x1d\x12\x18\n" +
	"\x14SUBCLASS_BEASTMASTER\x10\x1e\x12\x12\n" +
	"\x0eSUBCLASS_THIEF\x10\x1f\x12\x15\n" +
	"\x11SUBCLASS_ASSASSIN\x10 \x12\x1d\n" +
	"\x19SUBCLASS_ARCANE_TRICKSTER\x10!\x12\x1f\n" +
	"\x1bSUBCLASS_DRACONIC_BLOODLINE\x10\"\x12\x17\n" +
	"\x13SUBCLASS_WILD_MAGIC\x10#\x12\x18\n" +
	"\x14SUBCLASS_DIVINE_SOUL\x10$\x12\x14\n" +
	"\x10SUBCLASS_ARCHFEY\x10%\x12\x12\n" +
	"\x0eSUBCLASS_FIEND\x10&\x12\x1a\n" +
	"\x16SUBCLASS_GREAT_OLD_ONE\x10'\x12\x15\n" +
	"\x11SUBCLASS_HEXBLADE\x10(\x12\x17\n" +
	"\x13SUBCLASS_ABJURATION\x10)\x12\x18\n" +
	"\x14SUBCLASS_CONJURATION\x10*\x12\x17\n" +
	"\x13SUBCLASS_DIVINATION\x10+\x12\x18\n" +
	"\x14SUBCLASS_ENCHANTMENT\x10,\x12\x16\n" +
	"\x12SUBCLASS_EVOCATION\x10-\x12\x17\n" +
	"\x13SUBCLASS_NECROMANCY\x10.\x12\x1a\n" +
	"\x16SUBCLASS_TRANSMUTATION\x10/*\xad\x01\n" +
	"\aAbility\x12\x17\n" +
	"\x13ABILITY_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10ABILITY_STRENGTH\x10\x01\x12\x15\n" +
	"\x11ABILITY_DEXTERITY\x10\x02\x12\x18\n" +
	"\x14ABILITY_CONSTITUTION\x10\x03\x12\x18\n" +
	"\x14ABILITY_INTELLIGENCE\x10\x04\x12\x12\n" +
	"\x0eABILITY_WISDOM\x10\x05\x12\x14\n" +
	"\x10ABILITY_CHARISMA\x10\x06*\xa1\x03\n" +
	"\x05Skill\x12\x15\n" +
	"\x11SKILL_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10SKILL_ACROBATICS\x10\x01\x12\x19\n" +
	"\x15SKILL_ANIMAL_HANDLING\x10\x02\x12\x10\n" +
	"\fSKILL_ARCANA\x10\x03\x12\x13\n" +
	"\x0fSKILL_ATHLETICS\x10\x04\x12\x13\n" +
	"\x0fSKILL_DECEPTION\x10\x05\x12\x11\n" +
	"\rSKILL_HISTORY\x10\x06\x12\x11\n" +
	"\rSKILL_INSIGHT\x10\a\x12\x16\n" +
	"\x12SKILL_INTIMIDATION\x10\b\x12\x17\n" +
	"\x13SKILL_INVESTIGATION\x10\t\x12\x12\n" +
	"\x0eSKILL_MEDICINE\x10\n" +
	"\x12\x10\n" +
	"\fSKILL_NATURE\x10\v\x12\x14\n" +
	"\x10SKILL_PERCEPTION\x10\f\x12\x15\n" +
	"\x11SKILL_PERFORMANCE\x10\r\x12\x14\n" +
	"\x10SKILL_PERSUASION\x10\x0e\x12\x12\n" +
	"\x0eSKILL_RELIGION\x10\x0f\x12\x19\n" +
	"\x15SKILL_SLEIGHT_OF_HAND\x10\x10\x12\x11\n" +
	"\rSKILL_STEALTH\x10\x11\x12\x12\n" +
	"\x0eSKILL_SURVIVAL\x10\x12*\xa5\x02\n" +
	"\tAlignment\x12\x19\n" +
	"\x15ALIGNMENT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ALIGNMENT_LAWFUL_GOOD\x10\x01\x12\x1a\n" +
	"\x16ALIGNMENT_NEUTRAL_GOOD\x10\x02\x12\x1a\n" +
	"\x16ALIGNMENT_CHAOTIC_GOOD\x10\x03\x12\x1c\n" +
	"\x18ALIGNMENT_LAWFUL_NEUTRAL\x10\x04\x12\x1a\n" +
	"\x16ALIGNMENT_TRUE_NEUTRAL\x10\x05\x12\x1d\n" +
	"\x19ALIGNMENT_CHAOTIC_NEUTRAL\x10\x06\x12\x19\n" +
	"\x15ALIGNMENT_LAWFUL_EVIL\x10\a\x12\x1a\n" +
	"\x16ALIGNMENT_NEUTRAL_EVIL\x10\b\x12\x1a\n" +
	"\x16ALIGNMENT_CHAOTIC_EVIL\x10\t*\xe9\x02\n" +
	"\n" +
	"Background\x12\x1a\n" +
	"\x16BACKGROUND_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12BACKGROUND_ACOLYTE\x10\x01\x12\x18\n" +
	"\x14BACKGROUND_CHARLATAN\x10\x02\x12\x17\n" +
	"\x13BACKGROUND_CRIMINAL\x10\x03\x12\x1a\n" +
	"\x16BACKGROUND_ENTERTAINER\x10\x04\x12\x18\n" +
	"\x14BACKGROUND_FOLK_HERO\x10\x05\x12\x1c\n" +
	"\x18BACKGROUND_GUILD_ARTISAN\x10\x06\x12\x15\n" +
	"\x11BACKGROUND_HERMIT\x10\a\x12\x14\n" +
	"\x10BACKGROUND_NOBLE\x10\b\x12\x18\n" +
	"\x14BACKGROUND_OUTLANDER\x10\t\x12\x13\n" +
	"\x0fBACKGROUND_SAGE\x10\n" +
	"\x12\x15\n" +
	"\x11BACKGROUND_SAILOR\x10\v\x12\x16\n" +
	"\x12BACKGROUND_SOLDIER\x10\f\x12\x15\n" +
	"\x11BACKGROUND_URCHIN\x10\r*\x8b\x03\n" +
	"\bLanguage\x12\x18\n" +
	"\x14LANGUAGE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fLANGUAGE_COMMON\x10\x01\x12\x15\n" +
	"\x11LANGUAGE_DWARVISH\x10\x02\x12\x13\n" +
	"\x0fLANGUAGE_ELVISH\x10\x03\x12\x12\n" +
	"\x0eLANGUAGE_GIANT\x10\x04\x12\x14\n" +
	"\x10LANGUAGE_GNOMISH\x10\x05\x12\x13\n" +
	"\x0fLANGUAGE_GOBLIN\x10\x06\x12\x15\n" +
	"\x11LANGUAGE_HALFLING\x10\a\x12\x10\n" +
	"\fLANGUAGE_ORC\x10\b\x12\x14\n" +
	"\x10LANGUAGE_ABYSSAL\x10\t\x12\x16\n" +
	"\x12LANGUAGE_CELESTIAL\x10\n" +
	"\x12\x15\n" +
	"\x11LANGUAGE_DRACONIC\x10\v\x12\x18\n" +
	"\x14LANGUAGE_DEEP_SPEECH\x10\f\x12\x15\n" +
	"\x11LANGUAGE_INFERNAL\x10\r\x12\x17\n" +
	"\x13LANGUAGE_PRIMORDIAL\x10\x0e\x12\x13\n" +
	"\x0fLANGUAGE_SYLVAN\x10\x0f\x12\x18\n" +
	"\x14LANGUAGE_UNDERCOMMON\x10\x10*\x92\x04\n" +
	"\rEquipmentType\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"EQUIPMENT_TYPE_SIMPLE_MELEE_WEAPON\x10\x01\x12'\n" +
	"#EQUIPMENT_TYPE_SIMPLE_RANGED_WEAPON\x10\x02\x12'\n" +
	"#EQUIPMENT_TYPE_MARTIAL_MELEE_WEAPON\x10\x03\x12(\n" +
	"$EQUIPMENT_TYPE_MARTIAL_RANGED_WEAPON\x10\x04\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_LIGHT_ARMOR\x10\x05\x12\x1f\n" +
	"\x1bEQUIPMENT_TYPE_MEDIUM_ARMOR\x10\x06\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_HEAVY_ARMOR\x10\a\x12\x19\n" +
	"\x15EQUIPMENT_TYPE_SHIELD\x10\b\x12#\n" +
	"\x1fEQUIPMENT_TYPE_ADVENTURING_GEAR\x10\t\x12\x18\n" +
	"\x14EQUIPMENT_TYPE_TOOLS\x10\n" +
	"\x12 \n" +
	"\x1cEQUIPMENT_TYPE_ARTISAN_TOOLS\x10\v\x12\x1d\n" +
	"\x19EQUIPMENT_TYPE_GAMING_SET\x10\f\x12%\n" +
	"!EQUIPMENT_TYPE_MUSICAL_INSTRUMENT\x10\r\x12\x1a\n" +
	"\x16EQUIPMENT_TYPE_VEHICLE\x10\x0e*\x80\a\n" +
	"\x06Weapon\x12\x16\n" +
	"\x12WEAPON_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vWEAPON_CLUB\x10\x01\x12\x11\n" +
	"\rWEAPON_DAGGER\x10\x02\x12\x14\n" +
	"\x10WEAPON_GREATCLUB\x10\x03\x12\x12\n" +
	"\x0eWEAPON_HANDAXE\x10\x04\x12\x12\n" +
	"\x0eWEAPON_JAVELIN\x10\x05\x12\x17\n" +
	"\x13WEAPON_LIGHT_HAMMER\x10\x06\x12\x0f\n" +
	"\vWEAPON_MACE\x10\a\x12\x17\n" +
	"\x13WEAPON_QUARTERSTAFF\x10\b\x12\x11\n" +
	"\rWEAPON_SICKLE\x10\t\x12\x10\n" +
	"\fWEAPON_SPEAR\x10\n" +
	"\x12\x19\n" +
	"\x15WEAPON_LIGHT_CROSSBOW\x10\v\x12\x0f\n" +
	"\vWEAPON_DART\x10\f\x12\x13\n" +
	"\x0fWEAPON_SHORTBOW\x10\r\x12\x10\n" +
	"\fWEAPON_SLING\x10\x0e\x12\x14\n" +
	"\x10WEAPON_BATTLEAXE\x10\x0f\x12\x10\n" +
	"\fWEAPON_FLAIL\x10\x10\x12\x11\n" +
	"\rWEAPON_GLAIVE\x10\x11\x12\x13\n" +
	"\x0fWEAPON_GREATAXE\x10\x12\x12\x15\n" +
	"\x11WEAPON_GREATSWORD\x10\x13\x12\x12\n" +
	"\x0eWEAPON_HALBERD\x10\x14\x12\x10\n" +
	"\fWEAPON_LANCE\x10\x15\x12\x14\n" +
	"\x10WEAPON_LONGSWORD\x10\x16\x12\x0f\n" +
	"\vWEAPON_MAUL\x10\x17\x12\x16\n" +
	"\x12WEAPON_MORNINGSTAR\x10\x18\x12\x0f\n" +
	"\vWEAPON_PIKE\x10\x19\x12\x11\n" +
	"\rWEAPON_RAPIER\x10\x1a\x12\x13\n" +
	"\x0fWEAPON_SCIMITAR\x10\x1b\x12\x15\n" +
	"\x11WEAPON_SHORTSWORD\x10\x1c\x12\x12\n" +
	"\x0eWEAPON_TRIDENT\x10\x1d\x12\x13\n" +
	"\x0fWEAPON_WAR_PICK\x10\x1e\x12\x14\n" +
	"\x10WEAPON_WARHAMMER\x10\x1f\x12\x0f\n" +
	"\vWEAPON_WHIP\x10 \x12\x12\n" +
	"\x0eWEAPON_BLOWGUN\x10!\x12\x18\n" +
	"\x14WEAPON_HAND_CROSSBOW\x10\"\x12\x19\n" +
	"\x15WEAPON_HEAVY_CROSSBOW\x10#\x12\x12\n" +
	"\x0eWEAPON_LONGBOW\x10$\x12\x0e\n" +
	"\n" +
	"WEAPON_NET\x10%\x12\x14\n" +
	"\x10WEAPON_ARROWS_20\x10&\x12\x13\n" +
	"\x0fWEAPON_BOLTS_20\x10'\x12\x15\n" +
	"\x11WEAPON_ANY_SIMPLE\x10(\x12\x16\n" +
	"\x12WEAPON_ANY_MARTIAL\x10)\x12\x0e\n" +
	"\n" +
	"WEAPON_ANY\x10**\xa8\x02\n" +
	"\x05Armor\x12\x15\n" +
	"\x11ARMOR_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fARMOR_PADDED\x10\x01\x12\x11\n" +
	"\rARMOR_LEATHER\x10\x02\x12\x19\n" +
	"\x15ARMOR_STUDDED_LEATHER\x10\x03\x12\x0e\n" +
	"\n" +
	"ARMOR_HIDE\x10\x04\x12\x15\n" +
	"\x11ARMOR_CHAIN_SHIRT\x10\x05\x12\x14\n" +
	"\x10ARMOR_SCALE_MAIL\x10\x06\x12\x15\n" +
	"\x11ARMOR_BREASTPLATE\x10\a\x12\x14\n" +
	"\x10ARMOR_HALF_PLATE\x10\b\x12\x13\n" +
	"\x0fARMOR_RING_MAIL\x10\t\x12\x14\n" +
	"\x10ARMOR_CHAIN_MAIL\x10\n" +
	"\x12\x10\n" +
	"\fARMOR_SPLINT\x10\v\x12\x0f\n" +
	"\vARMOR_PLATE\x10\f\x12\x10\n" +
	"\fARMOR_SHIELD\x10\r*\xf4\x01\n" +
	"\rFightingStyle\x12\x1e\n" +
	"\x1aFIGHTING_STYLE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16FIGHTING_STYLE_ARCHERY\x10\x01\x12\x1a\n" +
	"\x16FIGHTING_STYLE_DEFENSE\x10\x02\x12\x1a\n" +
	"\x16FIGHTING_STYLE_DUELING\x10\x03\x12(\n" +
	"$FIGHTING_STYLE_GREAT_WEAPON_FIGHTING\x10\x04\x12\x1d\n" +
	"\x19FIGHTING_STYLE_PROTECTION\x10\x05\x12&\n" +
	"\"FIGHTING_STYLE_TWO_WEAPON_FIGHTING\x10\x06*\x9b\a\n" +
	"\x04Tool\x12\x14\n" +
	"\x10TOOL_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17TOOL_ALCHEMIST_SUPPLIES\x10\x01\x12\x18\n" +
	"\x14TOOL_BREWER_SUPPLIES\x10\x02\x12\x1e\n" +
	"\x1aTOOL_CALLIGRAPHER_SUPPLIES\x10\x03\x12\x18\n" +
	"\x14TOOL_CARPENTER_TOOLS\x10\x04\x12\x1b\n" +
	"\x17TOOL_CARTOGRAPHER_TOOLS\x10\x05\x12\x16\n" +
	"\x12TOOL_COBBLER_TOOLS\x10\x06\x12\x16\n" +
	"\x12TOOL_COOK_UTENSILS\x10\a\x12\x1a\n" +
	"\x16TOOL_GLASSBLOWER_TOOLS\x10\b\x12\x16\n" +
	"\x12TOOL_JEWELER_TOOLS\x10\t\x12\x1c\n" +
	"\x18TOOL_LEATHERWORKER_TOOLS\x10\n" +
	"\x12\x14\n" +
	"\x10TOOL_MASON_TOOLS\x10\v\x12\x19\n" +
	"\x15TOOL_PAINTER_SUPPLIES\x10\f\x12\x15\n" +
	"\x11TOOL_POTTER_TOOLS\x10\r\x12\x14\n" +
	"\x10TOOL_SMITH_TOOLS\x10\x0e\x12\x15\n" +
	"\x11TOOL_TINKER_TOOLS\x10\x0f\x12\x15\n" +
	"\x11TOOL_WEAVER_TOOLS\x10\x10\x12\x19\n" +
	"\x15TOOL_WOODCARVER_TOOLS\x10\x11\x12\x11\n" +
	"\rTOOL_DICE_SET\x10\x12\x12\x18\n" +
	"\x14TOOL_DRAGONCHESS_SET\x10\x13\x12\x19\n" +
	"\x15TOOL_PLAYING_CARD_SET\x10\x14\x12\x1a\n" +
	"\x16TOOL_THREE_DRAGON_ANTE\x10\x15\x12\x11\n" +
	"\rTOOL_BAGPIPES\x10\x16\x12\r\n" +
	"\tTOOL_DRUM\x10\x17\x12\x11\n" +
	"\rTOOL_DULCIMER\x10\x18\x12\x0e\n" +
	"\n" +
	"TOOL_FLUTE\x10\x19\x12\r\n" +
	"\tTOOL_LUTE\x10\x1a\x12\r\n" +
	"\tTOOL_LYRE\x10\x1b\x12\r\n" +
	"\tTOOL_HORN\x10\x1c\x12\x12\n" +
	"\x0eTOOL_PAN_FLUTE\x10\x1d\x12\x0e\n" +
	"\n" +
	"TOOL_SHAWM\x10\x1e\x12\r\n" +
	"\tTOOL_VIOL\x10\x1f\x12\x15\n" +
	"\x11TOOL_DISGUISE_KIT\x10 \x12\x14\n" +
	"\x10TOOL_FORGERY_KIT\x10!\x12\x16\n" +
	"\x12TOOL_HERBALISM_KIT\x10\"\x12\x18\n" +
	"\x14TOOL_NAVIGATOR_TOOLS\x10#\x12\x15\n" +
	"\x11TOOL_POISONER_KIT\x10$\x12\x16\n" +
	"\x12TOOL_THIEVES_TOOLS\x10%\x12\x16\n" +
	"\x12TOOL_VEHICLES_LAND\x10&\x12\x17\n" +
	"\x13TOOL_VEHICLES_WATER\x10'*\xa9\x01\n" +
	"\x04Pack\x12\x14\n" +
	"\x10PACK_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rPACK_BURGLARS\x10\x01\x12\x12\n" +
	"\x0ePACK_DIPLOMATS\x10\x02\x12\x14\n" +
	"\x10PACK_DUNGEONEERS\x10\x03\x12\x15\n" +
	"\x11PACK_ENTERTAINERS\x10\x04\x12\x12\n" +
	"\x0ePACK_EXPLORERS\x10\x05\x12\x10\n" +
	"\fPACK_PRIESTS\x10\x06\x12\x11\n" +
	"\rPACK_SCHOLARS\x10\a*\x9f\x01\n" +
	"\n" +
	"Ammunition\x12\x1a\n" +
	"\x16AMMUNITION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AMMUNITION_ARROWS_20\x10\x01\x12\x17\n" +
	"\x13AMMUNITION_BOLTS_20\x10\x02\x12!\n" +
	"\x1dAMMUNITION_BLOWGUN_NEEDLES_50\x10\x03\x12\x1f\n" +
	"\x1bAMMUNITION_SLING_BULLETS_20\x10\x04B\xdb\x01\n" +
	"\x16com.dnd5e.api.v1alpha1B\n" +
	"EnumsProtoP\x01ZKgithub.com/KirkDiggler/rpg-api-protos/gen/go/dnd5e/api/v1alpha1;apiv1alpha1\xa2\x02\x03DAX\xaa\x02\x12Dnd5e.Api.V1alpha1\xca\x02\x12Dnd5e\\Api\\V1alpha1\xe2\x02\x1eDnd5e\\Api\\V1alpha1\\GPBMetadata\xea\x02\x14Dnd5e::Api::V1alpha1b\x06proto3"

var (
	file_dnd5e_api_v1alpha1_enums_proto_rawDescOnce sync.Once
	file_dnd5e_api_v1alpha1_enums_proto_rawDescData []byte
)

func file_dnd5e_api_v1alpha1_enums_proto_rawDescGZIP() []byte {
	file_dnd5e_api_v1alpha1_enums_proto_rawDescOnce.Do(func() {
		file_dnd5e_api_v1alpha1_enums_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dnd5e_api_v1alpha1_enums_proto_rawDesc), len(file_dnd5e_api_v1alpha1_enums_proto_rawDesc)))
	})
	return file_dnd5e_api_v1alpha1_enums_proto_rawDescData
}

var file_dnd5e_api_v1alpha1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_dnd5e_api_v1alpha1_enums_proto_goTypes = []any{
	(Race)(0),          // 0: dnd5e.api.v1alpha1.Race
	(Subrace)(0),       // 1: dnd5e.api.v1alpha1.Subrace
	(Class)(0),         // 2: dnd5e.api.v1alpha1.Class
	(Subclass)(0),      // 3: dnd5e.api.v1alpha1.Subclass
	(Ability)(0),       // 4: dnd5e.api.v1alpha1.Ability
	(Skill)(0),         // 5: dnd5e.api.v1alpha1.Skill
	(Alignment)(0),     // 6: dnd5e.api.v1alpha1.Alignment
	(Background)(0),    // 7: dnd5e.api.v1alpha1.Background
	(Language)(0),      // 8: dnd5e.api.v1alpha1.Language
	(EquipmentType)(0), // 9: dnd5e.api.v1alpha1.EquipmentType
	(Weapon)(0),        // 10: dnd5e.api.v1alpha1.Weapon
	(Armor)(0),         // 11: dnd5e.api.v1alpha1.Armor
	(FightingStyle)(0), // 12: dnd5e.api.v1alpha1.FightingStyle
	(Tool)(0),          // 13: dnd5e.api.v1alpha1.Tool
	(Pack)(0),          // 14: dnd5e.api.v1alpha1.Pack
	(Ammunition)(0),    // 15: dnd5e.api.v1alpha1.Ammunition
}
var file_dnd5e_api_v1alpha1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dnd5e_api_v1alpha1_enums_proto_init() }
func file_dnd5e_api_v1alpha1_enums_proto_init() {
	if File_dnd5e_api_v1alpha1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dnd5e_api_v1alpha1_enums_proto_rawDesc), len(file_dnd5e_api_v1alpha1_enums_proto_rawDesc)),
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dnd5e_api_v1alpha1_enums_proto_goTypes,
		DependencyIndexes: file_dnd5e_api_v1alpha1_enums_proto_depIdxs,
		EnumInfos:         file_dnd5e_api_v1alpha1_enums_proto_enumTypes,
	}.Build()
	File_dnd5e_api_v1alpha1_enums_proto = out.File
	file_dnd5e_api_v1alpha1_enums_proto_goTypes = nil
	file_dnd5e_api_v1alpha1_enums_proto_depIdxs = nil
}
