// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/room_spatial.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpatialService_QueryLineOfSight_FullMethodName          = "/api.v1alpha1.SpatialService/QueryLineOfSight"
	SpatialService_ValidateMovement_FullMethodName          = "/api.v1alpha1.SpatialService/ValidateMovement"
	SpatialService_ValidateEntityPlacement_FullMethodName   = "/api.v1alpha1.SpatialService/ValidateEntityPlacement"
	SpatialService_QueryEntitiesInRange_FullMethodName      = "/api.v1alpha1.SpatialService/QueryEntitiesInRange"
	SpatialService_CalculateMovementPath_FullMethodName     = "/api.v1alpha1.SpatialService/CalculateMovementPath"
	SpatialService_QueryAreaOfEffect_FullMethodName         = "/api.v1alpha1.SpatialService/QueryAreaOfEffect"
	SpatialService_QueryMultiRoomLineOfSight_FullMethodName = "/api.v1alpha1.SpatialService/QueryMultiRoomLineOfSight"
	SpatialService_CalculateMultiRoomPath_FullMethodName    = "/api.v1alpha1.SpatialService/CalculateMultiRoomPath"
	SpatialService_QuerySpatialIndex_FullMethodName         = "/api.v1alpha1.SpatialService/QuerySpatialIndex"
	SpatialService_GetSpatialStats_FullMethodName           = "/api.v1alpha1.SpatialService/GetSpatialStats"
	SpatialService_InvalidateSpatialCache_FullMethodName    = "/api.v1alpha1.SpatialService/InvalidateSpatialCache"
)

// SpatialServiceClient is the client API for SpatialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Spatial query service for tactical gameplay operations
// Handles line of sight, movement, pathfinding, and area effects
type SpatialServiceClient interface {
	// Basic spatial queries (Phase 2)
	QueryLineOfSight(ctx context.Context, in *QueryLineOfSightRequest, opts ...grpc.CallOption) (*QueryLineOfSightResponse, error)
	ValidateMovement(ctx context.Context, in *ValidateMovementRequest, opts ...grpc.CallOption) (*ValidateMovementResponse, error)
	ValidateEntityPlacement(ctx context.Context, in *ValidateEntityPlacementRequest, opts ...grpc.CallOption) (*ValidateEntityPlacementResponse, error)
	QueryEntitiesInRange(ctx context.Context, in *QueryEntitiesInRangeRequest, opts ...grpc.CallOption) (*QueryEntitiesInRangeResponse, error)
	// Advanced spatial queries (Phase 4)
	CalculateMovementPath(ctx context.Context, in *CalculateMovementPathRequest, opts ...grpc.CallOption) (*CalculateMovementPathResponse, error)
	QueryAreaOfEffect(ctx context.Context, in *QueryAreaOfEffectRequest, opts ...grpc.CallOption) (*QueryAreaOfEffectResponse, error)
	QueryMultiRoomLineOfSight(ctx context.Context, in *QueryMultiRoomLineOfSightRequest, opts ...grpc.CallOption) (*QueryMultiRoomLineOfSightResponse, error)
	CalculateMultiRoomPath(ctx context.Context, in *CalculateMultiRoomPathRequest, opts ...grpc.CallOption) (*CalculateMultiRoomPathResponse, error)
	QuerySpatialIndex(ctx context.Context, in *QuerySpatialIndexRequest, opts ...grpc.CallOption) (*QuerySpatialIndexResponse, error)
	// Spatial optimization and analytics
	GetSpatialStats(ctx context.Context, in *GetSpatialStatsRequest, opts ...grpc.CallOption) (*GetSpatialStatsResponse, error)
	InvalidateSpatialCache(ctx context.Context, in *InvalidateSpatialCacheRequest, opts ...grpc.CallOption) (*InvalidateSpatialCacheResponse, error)
}

type spatialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpatialServiceClient(cc grpc.ClientConnInterface) SpatialServiceClient {
	return &spatialServiceClient{cc}
}

func (c *spatialServiceClient) QueryLineOfSight(ctx context.Context, in *QueryLineOfSightRequest, opts ...grpc.CallOption) (*QueryLineOfSightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryLineOfSightResponse)
	err := c.cc.Invoke(ctx, SpatialService_QueryLineOfSight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) ValidateMovement(ctx context.Context, in *ValidateMovementRequest, opts ...grpc.CallOption) (*ValidateMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMovementResponse)
	err := c.cc.Invoke(ctx, SpatialService_ValidateMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) ValidateEntityPlacement(ctx context.Context, in *ValidateEntityPlacementRequest, opts ...grpc.CallOption) (*ValidateEntityPlacementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateEntityPlacementResponse)
	err := c.cc.Invoke(ctx, SpatialService_ValidateEntityPlacement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) QueryEntitiesInRange(ctx context.Context, in *QueryEntitiesInRangeRequest, opts ...grpc.CallOption) (*QueryEntitiesInRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEntitiesInRangeResponse)
	err := c.cc.Invoke(ctx, SpatialService_QueryEntitiesInRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) CalculateMovementPath(ctx context.Context, in *CalculateMovementPathRequest, opts ...grpc.CallOption) (*CalculateMovementPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateMovementPathResponse)
	err := c.cc.Invoke(ctx, SpatialService_CalculateMovementPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) QueryAreaOfEffect(ctx context.Context, in *QueryAreaOfEffectRequest, opts ...grpc.CallOption) (*QueryAreaOfEffectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAreaOfEffectResponse)
	err := c.cc.Invoke(ctx, SpatialService_QueryAreaOfEffect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) QueryMultiRoomLineOfSight(ctx context.Context, in *QueryMultiRoomLineOfSightRequest, opts ...grpc.CallOption) (*QueryMultiRoomLineOfSightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMultiRoomLineOfSightResponse)
	err := c.cc.Invoke(ctx, SpatialService_QueryMultiRoomLineOfSight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) CalculateMultiRoomPath(ctx context.Context, in *CalculateMultiRoomPathRequest, opts ...grpc.CallOption) (*CalculateMultiRoomPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateMultiRoomPathResponse)
	err := c.cc.Invoke(ctx, SpatialService_CalculateMultiRoomPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) QuerySpatialIndex(ctx context.Context, in *QuerySpatialIndexRequest, opts ...grpc.CallOption) (*QuerySpatialIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpatialIndexResponse)
	err := c.cc.Invoke(ctx, SpatialService_QuerySpatialIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetSpatialStats(ctx context.Context, in *GetSpatialStatsRequest, opts ...grpc.CallOption) (*GetSpatialStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpatialStatsResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetSpatialStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) InvalidateSpatialCache(ctx context.Context, in *InvalidateSpatialCacheRequest, opts ...grpc.CallOption) (*InvalidateSpatialCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateSpatialCacheResponse)
	err := c.cc.Invoke(ctx, SpatialService_InvalidateSpatialCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpatialServiceServer is the server API for SpatialService service.
// All implementations should embed UnimplementedSpatialServiceServer
// for forward compatibility.
//
// Spatial query service for tactical gameplay operations
// Handles line of sight, movement, pathfinding, and area effects
type SpatialServiceServer interface {
	// Basic spatial queries (Phase 2)
	QueryLineOfSight(context.Context, *QueryLineOfSightRequest) (*QueryLineOfSightResponse, error)
	ValidateMovement(context.Context, *ValidateMovementRequest) (*ValidateMovementResponse, error)
	ValidateEntityPlacement(context.Context, *ValidateEntityPlacementRequest) (*ValidateEntityPlacementResponse, error)
	QueryEntitiesInRange(context.Context, *QueryEntitiesInRangeRequest) (*QueryEntitiesInRangeResponse, error)
	// Advanced spatial queries (Phase 4)
	CalculateMovementPath(context.Context, *CalculateMovementPathRequest) (*CalculateMovementPathResponse, error)
	QueryAreaOfEffect(context.Context, *QueryAreaOfEffectRequest) (*QueryAreaOfEffectResponse, error)
	QueryMultiRoomLineOfSight(context.Context, *QueryMultiRoomLineOfSightRequest) (*QueryMultiRoomLineOfSightResponse, error)
	CalculateMultiRoomPath(context.Context, *CalculateMultiRoomPathRequest) (*CalculateMultiRoomPathResponse, error)
	QuerySpatialIndex(context.Context, *QuerySpatialIndexRequest) (*QuerySpatialIndexResponse, error)
	// Spatial optimization and analytics
	GetSpatialStats(context.Context, *GetSpatialStatsRequest) (*GetSpatialStatsResponse, error)
	InvalidateSpatialCache(context.Context, *InvalidateSpatialCacheRequest) (*InvalidateSpatialCacheResponse, error)
}

// UnimplementedSpatialServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpatialServiceServer struct{}

func (UnimplementedSpatialServiceServer) QueryLineOfSight(context.Context, *QueryLineOfSightRequest) (*QueryLineOfSightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLineOfSight not implemented")
}
func (UnimplementedSpatialServiceServer) ValidateMovement(context.Context, *ValidateMovementRequest) (*ValidateMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMovement not implemented")
}
func (UnimplementedSpatialServiceServer) ValidateEntityPlacement(context.Context, *ValidateEntityPlacementRequest) (*ValidateEntityPlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEntityPlacement not implemented")
}
func (UnimplementedSpatialServiceServer) QueryEntitiesInRange(context.Context, *QueryEntitiesInRangeRequest) (*QueryEntitiesInRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEntitiesInRange not implemented")
}
func (UnimplementedSpatialServiceServer) CalculateMovementPath(context.Context, *CalculateMovementPathRequest) (*CalculateMovementPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMovementPath not implemented")
}
func (UnimplementedSpatialServiceServer) QueryAreaOfEffect(context.Context, *QueryAreaOfEffectRequest) (*QueryAreaOfEffectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAreaOfEffect not implemented")
}
func (UnimplementedSpatialServiceServer) QueryMultiRoomLineOfSight(context.Context, *QueryMultiRoomLineOfSightRequest) (*QueryMultiRoomLineOfSightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiRoomLineOfSight not implemented")
}
func (UnimplementedSpatialServiceServer) CalculateMultiRoomPath(context.Context, *CalculateMultiRoomPathRequest) (*CalculateMultiRoomPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMultiRoomPath not implemented")
}
func (UnimplementedSpatialServiceServer) QuerySpatialIndex(context.Context, *QuerySpatialIndexRequest) (*QuerySpatialIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySpatialIndex not implemented")
}
func (UnimplementedSpatialServiceServer) GetSpatialStats(context.Context, *GetSpatialStatsRequest) (*GetSpatialStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpatialStats not implemented")
}
func (UnimplementedSpatialServiceServer) InvalidateSpatialCache(context.Context, *InvalidateSpatialCacheRequest) (*InvalidateSpatialCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSpatialCache not implemented")
}
func (UnimplementedSpatialServiceServer) testEmbeddedByValue() {}

// UnsafeSpatialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpatialServiceServer will
// result in compilation errors.
type UnsafeSpatialServiceServer interface {
	mustEmbedUnimplementedSpatialServiceServer()
}

func RegisterSpatialServiceServer(s grpc.ServiceRegistrar, srv SpatialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpatialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpatialService_ServiceDesc, srv)
}

func _SpatialService_QueryLineOfSight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLineOfSightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).QueryLineOfSight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_QueryLineOfSight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).QueryLineOfSight(ctx, req.(*QueryLineOfSightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_ValidateMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).ValidateMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_ValidateMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).ValidateMovement(ctx, req.(*ValidateMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_ValidateEntityPlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEntityPlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).ValidateEntityPlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_ValidateEntityPlacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).ValidateEntityPlacement(ctx, req.(*ValidateEntityPlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_QueryEntitiesInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEntitiesInRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).QueryEntitiesInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_QueryEntitiesInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).QueryEntitiesInRange(ctx, req.(*QueryEntitiesInRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_CalculateMovementPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateMovementPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).CalculateMovementPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_CalculateMovementPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).CalculateMovementPath(ctx, req.(*CalculateMovementPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_QueryAreaOfEffect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAreaOfEffectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).QueryAreaOfEffect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_QueryAreaOfEffect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).QueryAreaOfEffect(ctx, req.(*QueryAreaOfEffectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_QueryMultiRoomLineOfSight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiRoomLineOfSightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).QueryMultiRoomLineOfSight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_QueryMultiRoomLineOfSight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).QueryMultiRoomLineOfSight(ctx, req.(*QueryMultiRoomLineOfSightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_CalculateMultiRoomPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateMultiRoomPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).CalculateMultiRoomPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_CalculateMultiRoomPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).CalculateMultiRoomPath(ctx, req.(*CalculateMultiRoomPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_QuerySpatialIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpatialIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).QuerySpatialIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_QuerySpatialIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).QuerySpatialIndex(ctx, req.(*QuerySpatialIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetSpatialStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpatialStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetSpatialStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetSpatialStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetSpatialStats(ctx, req.(*GetSpatialStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_InvalidateSpatialCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateSpatialCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).InvalidateSpatialCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_InvalidateSpatialCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).InvalidateSpatialCache(ctx, req.(*InvalidateSpatialCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpatialService_ServiceDesc is the grpc.ServiceDesc for SpatialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpatialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.SpatialService",
	HandlerType: (*SpatialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLineOfSight",
			Handler:    _SpatialService_QueryLineOfSight_Handler,
		},
		{
			MethodName: "ValidateMovement",
			Handler:    _SpatialService_ValidateMovement_Handler,
		},
		{
			MethodName: "ValidateEntityPlacement",
			Handler:    _SpatialService_ValidateEntityPlacement_Handler,
		},
		{
			MethodName: "QueryEntitiesInRange",
			Handler:    _SpatialService_QueryEntitiesInRange_Handler,
		},
		{
			MethodName: "CalculateMovementPath",
			Handler:    _SpatialService_CalculateMovementPath_Handler,
		},
		{
			MethodName: "QueryAreaOfEffect",
			Handler:    _SpatialService_QueryAreaOfEffect_Handler,
		},
		{
			MethodName: "QueryMultiRoomLineOfSight",
			Handler:    _SpatialService_QueryMultiRoomLineOfSight_Handler,
		},
		{
			MethodName: "CalculateMultiRoomPath",
			Handler:    _SpatialService_CalculateMultiRoomPath_Handler,
		},
		{
			MethodName: "QuerySpatialIndex",
			Handler:    _SpatialService_QuerySpatialIndex_Handler,
		},
		{
			MethodName: "GetSpatialStats",
			Handler:    _SpatialService_GetSpatialStats_Handler,
		},
		{
			MethodName: "InvalidateSpatialCache",
			Handler:    _SpatialService_InvalidateSpatialCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/room_spatial.proto",
}
