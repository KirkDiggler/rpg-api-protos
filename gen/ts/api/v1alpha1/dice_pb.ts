// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file api/v1alpha1/dice.proto (package api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/dice.proto.
 */
export const file_api_v1alpha1_dice: GenFile = /*@__PURE__*/
  fileDesc("ChdhcGkvdjFhbHBoYTEvZGljZS5wcm90bxIMYXBpLnYxYWxwaGExIokBCg9Sb2xsRGljZVJlcXVlc3QSEQoJZW50aXR5X2lkGAEgASgJEg8KB2NvbnRleHQYAiABKAkSEAoIbm90YXRpb24YAyABKAkSDQoFY291bnQYBCABKAUSEwoLdHRsX3NlY29uZHMYBSABKAUSHAoUbW9kaWZpZXJfZGVzY3JpcHRpb24YBiABKAkiTQoQUm9sbERpY2VSZXNwb25zZRIlCgVyb2xscxgBIAMoCzIWLmFwaS52MWFscGhhMS5EaWNlUm9sbBISCgpleHBpcmVzX2F0GAIgASgDIpYBCghEaWNlUm9sbBIPCgdyb2xsX2lkGAEgASgJEhAKCG5vdGF0aW9uGAIgASgJEgwKBGRpY2UYAyADKAUSDQoFdG90YWwYBCABKAUSDwoHZHJvcHBlZBgFIAMoBRITCgtkZXNjcmlwdGlvbhgGIAEoCRISCgpkaWNlX3RvdGFsGAcgASgFEhAKCG1vZGlmaWVyGAggASgFIjsKFUdldFJvbGxTZXNzaW9uUmVxdWVzdBIRCgllbnRpdHlfaWQYASABKAkSDwoHY29udGV4dBgCIAEoCSJnChZHZXRSb2xsU2Vzc2lvblJlc3BvbnNlEiUKBXJvbGxzGAEgAygLMhYuYXBpLnYxYWxwaGExLkRpY2VSb2xsEhIKCmV4cGlyZXNfYXQYAiABKAMSEgoKY3JlYXRlZF9hdBgDIAEoAyI9ChdDbGVhclJvbGxTZXNzaW9uUmVxdWVzdBIRCgllbnRpdHlfaWQYASABKAkSDwoHY29udGV4dBgCIAEoCSJCChhDbGVhclJvbGxTZXNzaW9uUmVzcG9uc2USDwoHbWVzc2FnZRgBIAEoCRIVCg1yb2xsc19jbGVhcmVkGAIgASgFMpgCCgtEaWNlU2VydmljZRJJCghSb2xsRGljZRIdLmFwaS52MWFscGhhMS5Sb2xsRGljZVJlcXVlc3QaHi5hcGkudjFhbHBoYTEuUm9sbERpY2VSZXNwb25zZRJbCg5HZXRSb2xsU2Vzc2lvbhIjLmFwaS52MWFscGhhMS5HZXRSb2xsU2Vzc2lvblJlcXVlc3QaJC5hcGkudjFhbHBoYTEuR2V0Um9sbFNlc3Npb25SZXNwb25zZRJhChBDbGVhclJvbGxTZXNzaW9uEiUuYXBpLnYxYWxwaGExLkNsZWFyUm9sbFNlc3Npb25SZXF1ZXN0GiYuYXBpLnYxYWxwaGExLkNsZWFyUm9sbFNlc3Npb25SZXNwb25zZUK1AQoQY29tLmFwaS52MWFscGhhMUIJRGljZVByb3RvUAFaRWdpdGh1Yi5jb20vS2lya0RpZ2dsZXIvcnBnLWFwaS1wcm90b3MvZ2VuL2dvL2FwaS92MWFscGhhMTthcGl2MWFscGhhMaICA0FYWKoCDEFwaS5WMWFscGhhMcoCDEFwaVxWMWFscGhhMeICGEFwaVxWMWFscGhhMVxHUEJNZXRhZGF0YeoCDUFwaTo6VjFhbHBoYTFiBnByb3RvMw");

/**
 * Request to roll dice
 *
 * @generated from message api.v1alpha1.RollDiceRequest
 */
export type RollDiceRequest = Message<"api.v1alpha1.RollDiceRequest"> & {
  /**
   * Entity that owns these rolls (e.g., "char_draft_123", "char_789", "monster_456")
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * Context for grouping related rolls (e.g., "ability_scores", "combat_round_1", "damage_rolls")
   *
   * @generated from field: string context = 2;
   */
  context: string;

  /**
   * Dice notation to roll (e.g., "4d6", "1d20", "2d8+3")
   *
   * @generated from field: string notation = 3;
   */
  notation: string;

  /**
   * Number of separate rolls to make (default 1)
   *
   * @generated from field: int32 count = 4;
   */
  count: number;

  /**
   * TTL in seconds for this roll session (default 900 = 15 minutes)
   *
   * @generated from field: int32 ttl_seconds = 5;
   */
  ttlSeconds: number;

  /**
   * Optional modifier description for display
   *
   * @generated from field: string modifier_description = 6;
   */
  modifierDescription: string;
};

/**
 * Describes the message api.v1alpha1.RollDiceRequest.
 * Use `create(RollDiceRequestSchema)` to create a new message.
 */
export const RollDiceRequestSchema: GenMessage<RollDiceRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 0);

/**
 * Response with dice roll results
 *
 * @generated from message api.v1alpha1.RollDiceResponse
 */
export type RollDiceResponse = Message<"api.v1alpha1.RollDiceResponse"> & {
  /**
   * The rolls that were generated
   *
   * @generated from field: repeated api.v1alpha1.DiceRoll rolls = 1;
   */
  rolls: DiceRoll[];

  /**
   * When this roll session expires (Unix timestamp)
   *
   * @generated from field: int64 expires_at = 2;
   */
  expiresAt: bigint;
};

/**
 * Describes the message api.v1alpha1.RollDiceResponse.
 * Use `create(RollDiceResponseSchema)` to create a new message.
 */
export const RollDiceResponseSchema: GenMessage<RollDiceResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 1);

/**
 * A single dice roll result
 *
 * @generated from message api.v1alpha1.DiceRoll
 */
export type DiceRoll = Message<"api.v1alpha1.DiceRoll"> & {
  /**
   * Unique identifier for this roll within the session
   *
   * @generated from field: string roll_id = 1;
   */
  rollId: string;

  /**
   * Dice notation that was rolled
   *
   * @generated from field: string notation = 2;
   */
  notation: string;

  /**
   * Individual dice values that were rolled
   *
   * @generated from field: repeated int32 dice = 3;
   */
  dice: number[];

  /**
   * Final result after applying modifiers
   *
   * @generated from field: int32 total = 4;
   */
  total: number;

  /**
   * Any dice that were dropped (for "drop lowest" etc.)
   *
   * @generated from field: repeated int32 dropped = 5;
   */
  dropped: number[];

  /**
   * Human-readable description of the roll
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * Raw dice total before modifiers
   *
   * @generated from field: int32 dice_total = 7;
   */
  diceTotal: number;

  /**
   * Modifier applied to get final total
   *
   * @generated from field: int32 modifier = 8;
   */
  modifier: number;
};

/**
 * Describes the message api.v1alpha1.DiceRoll.
 * Use `create(DiceRollSchema)` to create a new message.
 */
export const DiceRollSchema: GenMessage<DiceRoll> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 2);

/**
 * Request to get an existing roll session
 *
 * @generated from message api.v1alpha1.GetRollSessionRequest
 */
export type GetRollSessionRequest = Message<"api.v1alpha1.GetRollSessionRequest"> & {
  /**
   * Entity that owns the rolls
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * Context to retrieve
   *
   * @generated from field: string context = 2;
   */
  context: string;
};

/**
 * Describes the message api.v1alpha1.GetRollSessionRequest.
 * Use `create(GetRollSessionRequestSchema)` to create a new message.
 */
export const GetRollSessionRequestSchema: GenMessage<GetRollSessionRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 3);

/**
 * Response with roll session data
 *
 * @generated from message api.v1alpha1.GetRollSessionResponse
 */
export type GetRollSessionResponse = Message<"api.v1alpha1.GetRollSessionResponse"> & {
  /**
   * The rolls in this session
   *
   * @generated from field: repeated api.v1alpha1.DiceRoll rolls = 1;
   */
  rolls: DiceRoll[];

  /**
   * When this session expires (Unix timestamp)
   *
   * @generated from field: int64 expires_at = 2;
   */
  expiresAt: bigint;

  /**
   * When this session was created (Unix timestamp)
   *
   * @generated from field: int64 created_at = 3;
   */
  createdAt: bigint;
};

/**
 * Describes the message api.v1alpha1.GetRollSessionResponse.
 * Use `create(GetRollSessionResponseSchema)` to create a new message.
 */
export const GetRollSessionResponseSchema: GenMessage<GetRollSessionResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 4);

/**
 * Request to clear a roll session
 *
 * @generated from message api.v1alpha1.ClearRollSessionRequest
 */
export type ClearRollSessionRequest = Message<"api.v1alpha1.ClearRollSessionRequest"> & {
  /**
   * Entity that owns the rolls
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * Context to clear
   *
   * @generated from field: string context = 2;
   */
  context: string;
};

/**
 * Describes the message api.v1alpha1.ClearRollSessionRequest.
 * Use `create(ClearRollSessionRequestSchema)` to create a new message.
 */
export const ClearRollSessionRequestSchema: GenMessage<ClearRollSessionRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 5);

/**
 * Response from clearing a roll session
 *
 * @generated from message api.v1alpha1.ClearRollSessionResponse
 */
export type ClearRollSessionResponse = Message<"api.v1alpha1.ClearRollSessionResponse"> & {
  /**
   * Confirmation message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Number of rolls that were cleared
   *
   * @generated from field: int32 rolls_cleared = 2;
   */
  rollsCleared: number;
};

/**
 * Describes the message api.v1alpha1.ClearRollSessionResponse.
 * Use `create(ClearRollSessionResponseSchema)` to create a new message.
 */
export const ClearRollSessionResponseSchema: GenMessage<ClearRollSessionResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_dice, 6);

/**
 * Generic dice service for all RPG systems
 * Provides universal dice mechanics with entity+context grouping
 *
 * @generated from service api.v1alpha1.DiceService
 */
export const DiceService: GenService<{
  /**
   * Roll dice and store in a session
   *
   * @generated from rpc api.v1alpha1.DiceService.RollDice
   */
  rollDice: {
    methodKind: "unary";
    input: typeof RollDiceRequestSchema;
    output: typeof RollDiceResponseSchema;
  },
  /**
   * Get existing roll session
   *
   * @generated from rpc api.v1alpha1.DiceService.GetRollSession
   */
  getRollSession: {
    methodKind: "unary";
    input: typeof GetRollSessionRequestSchema;
    output: typeof GetRollSessionResponseSchema;
  },
  /**
   * Clear a roll session
   *
   * @generated from rpc api.v1alpha1.DiceService.ClearRollSession
   */
  clearRollSession: {
    methodKind: "unary";
    input: typeof ClearRollSessionRequestSchema;
    output: typeof ClearRollSessionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_api_v1alpha1_dice, 0);

