// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: dnd5e/api/v1alpha1/encounter.proto

package apiv1alpha1

import (
	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/api/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MovementError_ErrorCode int32

const (
	MovementError_ERROR_CODE_UNSPECIFIED           MovementError_ErrorCode = 0
	MovementError_ERROR_CODE_INVALID_POSITION      MovementError_ErrorCode = 1
	MovementError_ERROR_CODE_INSUFFICIENT_MOVEMENT MovementError_ErrorCode = 2
	MovementError_ERROR_CODE_PATH_BLOCKED          MovementError_ErrorCode = 3
	MovementError_ERROR_CODE_POSITION_OCCUPIED     MovementError_ErrorCode = 4
	MovementError_ERROR_CODE_OUT_OF_BOUNDS         MovementError_ErrorCode = 5
	MovementError_ERROR_CODE_NOT_YOUR_TURN         MovementError_ErrorCode = 6
)

// Enum value maps for MovementError_ErrorCode.
var (
	MovementError_ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNSPECIFIED",
		1: "ERROR_CODE_INVALID_POSITION",
		2: "ERROR_CODE_INSUFFICIENT_MOVEMENT",
		3: "ERROR_CODE_PATH_BLOCKED",
		4: "ERROR_CODE_POSITION_OCCUPIED",
		5: "ERROR_CODE_OUT_OF_BOUNDS",
		6: "ERROR_CODE_NOT_YOUR_TURN",
	}
	MovementError_ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":           0,
		"ERROR_CODE_INVALID_POSITION":      1,
		"ERROR_CODE_INSUFFICIENT_MOVEMENT": 2,
		"ERROR_CODE_PATH_BLOCKED":          3,
		"ERROR_CODE_POSITION_OCCUPIED":     4,
		"ERROR_CODE_OUT_OF_BOUNDS":         5,
		"ERROR_CODE_NOT_YOUR_TURN":         6,
	}
)

func (x MovementError_ErrorCode) Enum() *MovementError_ErrorCode {
	p := new(MovementError_ErrorCode)
	*p = x
	return p
}

func (x MovementError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovementError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dnd5e_api_v1alpha1_encounter_proto_enumTypes[0].Descriptor()
}

func (MovementError_ErrorCode) Type() protoreflect.EnumType {
	return &file_dnd5e_api_v1alpha1_encounter_proto_enumTypes[0]
}

func (x MovementError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MovementError_ErrorCode.Descriptor instead.
func (MovementError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{10, 0}
}

// EntityPlacement represents where an entity is positioned
// Matches toolkit's EntityPlacement structure exactly
type EntityPlacement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the entity
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Type of entity (e.g., "character", "monster", "object")
	EntityType string `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// Position in the room
	Position *v1alpha1.Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// Size of the entity in grid units (default 1)
	Size int32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Whether this entity blocks movement through its space
	BlocksMovement bool `protobuf:"varint,5,opt,name=blocks_movement,json=blocksMovement,proto3" json:"blocks_movement,omitempty"`
	// Whether this entity blocks line of sight
	BlocksLineOfSight bool `protobuf:"varint,6,opt,name=blocks_line_of_sight,json=blocksLineOfSight,proto3" json:"blocks_line_of_sight,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EntityPlacement) Reset() {
	*x = EntityPlacement{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityPlacement) ProtoMessage() {}

func (x *EntityPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityPlacement.ProtoReflect.Descriptor instead.
func (*EntityPlacement) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{0}
}

func (x *EntityPlacement) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityPlacement) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *EntityPlacement) GetPosition() *v1alpha1.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *EntityPlacement) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EntityPlacement) GetBlocksMovement() bool {
	if x != nil {
		return x.BlocksMovement
	}
	return false
}

func (x *EntityPlacement) GetBlocksLineOfSight() bool {
	if x != nil {
		return x.BlocksLineOfSight
	}
	return false
}

// Room represents a spatial area where encounters take place
// Matches toolkit's RoomData structure exactly for direct field mapping
type Room struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the room
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of room (e.g., "dungeon", "tavern", "outdoor")
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Width of the room in grid units
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// Height of the room in grid units
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Grid system used in this room
	GridType v1alpha1.GridType `protobuf:"varint,5,opt,name=grid_type,json=gridType,proto3,enum=api.v1alpha1.GridType" json:"grid_type,omitempty"`
	// Hex orientation: true for pointy-top, false for flat-top
	// Only used when grid_type is HEX, defaults to true (pointy-top) for D&D 5e compatibility
	// Uses optional to distinguish between explicit false and unset (which defaults to true)
	HexOrientation *bool `protobuf:"varint,6,opt,name=hex_orientation,json=hexOrientation,proto3,oneof" json:"hex_orientation,omitempty"`
	// Entities placed in the room - map of entity ID to their placement data
	// Matches toolkit's map[string]EntityPlacement structure
	Entities      map[string]*EntityPlacement `protobuf:"bytes,7,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Room) Reset() {
	*x = Room{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{1}
}

func (x *Room) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Room) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Room) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Room) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Room) GetGridType() v1alpha1.GridType {
	if x != nil {
		return x.GridType
	}
	return v1alpha1.GridType(0)
}

func (x *Room) GetHexOrientation() bool {
	if x != nil && x.HexOrientation != nil {
		return *x.HexOrientation
	}
	return false
}

func (x *Room) GetEntities() map[string]*EntityPlacement {
	if x != nil {
		return x.Entities
	}
	return nil
}

// DungeonStartRequest initiates a simple dungeon encounter
type DungeonStartRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IDs of the characters entering the dungeon
	CharacterIds  []string `protobuf:"bytes,1,rep,name=character_ids,json=characterIds,proto3" json:"character_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonStartRequest) Reset() {
	*x = DungeonStartRequest{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonStartRequest) ProtoMessage() {}

func (x *DungeonStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonStartRequest.ProtoReflect.Descriptor instead.
func (*DungeonStartRequest) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{2}
}

func (x *DungeonStartRequest) GetCharacterIds() []string {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

// DungeonStartResponse contains the generated encounter with combat already started
type DungeonStartResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this encounter
	EncounterId string `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	// The generated room with all entities placed (including characters)
	Room *Room `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	// Combat state with initiative already rolled
	CombatState   *CombatState `protobuf:"bytes,3,opt,name=combat_state,json=combatState,proto3" json:"combat_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonStartResponse) Reset() {
	*x = DungeonStartResponse{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonStartResponse) ProtoMessage() {}

func (x *DungeonStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonStartResponse.ProtoReflect.Descriptor instead.
func (*DungeonStartResponse) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{3}
}

func (x *DungeonStartResponse) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

func (x *DungeonStartResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *DungeonStartResponse) GetCombatState() *CombatState {
	if x != nil {
		return x.CombatState
	}
	return nil
}

// InitiativeEntry represents one combatant in turn order
type InitiativeEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityType    string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"` // "character", "monster", "npc"
	Initiative    int32                  `protobuf:"varint,3,opt,name=initiative,proto3" json:"initiative,omitempty"`                  // Total initiative value (roll + modifier)
	Modifier      int32                  `protobuf:"varint,4,opt,name=modifier,proto3" json:"modifier,omitempty"`                      // DEX modifier used
	HasActed      bool                   `protobuf:"varint,5,opt,name=has_acted,json=hasActed,proto3" json:"has_acted,omitempty"`      // Has this entity acted this round?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiativeEntry) Reset() {
	*x = InitiativeEntry{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiativeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiativeEntry) ProtoMessage() {}

func (x *InitiativeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiativeEntry.ProtoReflect.Descriptor instead.
func (*InitiativeEntry) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{4}
}

func (x *InitiativeEntry) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *InitiativeEntry) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *InitiativeEntry) GetInitiative() int32 {
	if x != nil {
		return x.Initiative
	}
	return 0
}

func (x *InitiativeEntry) GetModifier() int32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *InitiativeEntry) GetHasActed() bool {
	if x != nil {
		return x.HasActed
	}
	return false
}

// TurnState tracks resources available during a turn
type TurnState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EntityId          string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	MovementUsed      int32                  `protobuf:"varint,2,opt,name=movement_used,json=movementUsed,proto3" json:"movement_used,omitempty"`
	MovementMax       int32                  `protobuf:"varint,3,opt,name=movement_max,json=movementMax,proto3" json:"movement_max,omitempty"`
	ActionUsed        bool                   `protobuf:"varint,4,opt,name=action_used,json=actionUsed,proto3" json:"action_used,omitempty"`
	BonusActionUsed   bool                   `protobuf:"varint,5,opt,name=bonus_action_used,json=bonusActionUsed,proto3" json:"bonus_action_used,omitempty"`
	ReactionAvailable bool                   `protobuf:"varint,6,opt,name=reaction_available,json=reactionAvailable,proto3" json:"reaction_available,omitempty"`
	Position          *v1alpha1.Position     `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TurnState) Reset() {
	*x = TurnState{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnState) ProtoMessage() {}

func (x *TurnState) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnState.ProtoReflect.Descriptor instead.
func (*TurnState) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{5}
}

func (x *TurnState) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *TurnState) GetMovementUsed() int32 {
	if x != nil {
		return x.MovementUsed
	}
	return 0
}

func (x *TurnState) GetMovementMax() int32 {
	if x != nil {
		return x.MovementMax
	}
	return 0
}

func (x *TurnState) GetActionUsed() bool {
	if x != nil {
		return x.ActionUsed
	}
	return false
}

func (x *TurnState) GetBonusActionUsed() bool {
	if x != nil {
		return x.BonusActionUsed
	}
	return false
}

func (x *TurnState) GetReactionAvailable() bool {
	if x != nil {
		return x.ReactionAvailable
	}
	return false
}

func (x *TurnState) GetPosition() *v1alpha1.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// CombatState represents the complete state of combat
type CombatState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncounterId   string                 `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	TurnOrder     []*InitiativeEntry     `protobuf:"bytes,3,rep,name=turn_order,json=turnOrder,proto3" json:"turn_order,omitempty"`
	ActiveIndex   int32                  `protobuf:"varint,4,opt,name=active_index,json=activeIndex,proto3" json:"active_index,omitempty"` // Index in turn_order of current actor
	CurrentTurn   *TurnState             `protobuf:"bytes,5,opt,name=current_turn,json=currentTurn,proto3" json:"current_turn,omitempty"`
	CombatStarted bool                   `protobuf:"varint,6,opt,name=combat_started,json=combatStarted,proto3" json:"combat_started,omitempty"`
	CombatEnded   bool                   `protobuf:"varint,7,opt,name=combat_ended,json=combatEnded,proto3" json:"combat_ended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombatState) Reset() {
	*x = CombatState{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombatState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombatState) ProtoMessage() {}

func (x *CombatState) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombatState.ProtoReflect.Descriptor instead.
func (*CombatState) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{6}
}

func (x *CombatState) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

func (x *CombatState) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CombatState) GetTurnOrder() []*InitiativeEntry {
	if x != nil {
		return x.TurnOrder
	}
	return nil
}

func (x *CombatState) GetActiveIndex() int32 {
	if x != nil {
		return x.ActiveIndex
	}
	return 0
}

func (x *CombatState) GetCurrentTurn() *TurnState {
	if x != nil {
		return x.CurrentTurn
	}
	return nil
}

func (x *CombatState) GetCombatStarted() bool {
	if x != nil {
		return x.CombatStarted
	}
	return false
}

func (x *CombatState) GetCombatEnded() bool {
	if x != nil {
		return x.CombatEnded
	}
	return false
}

// GetCombatStateRequest retrieves current state (for reconnection/refresh)
type GetCombatStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncounterId   string                 `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCombatStateRequest) Reset() {
	*x = GetCombatStateRequest{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCombatStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCombatStateRequest) ProtoMessage() {}

func (x *GetCombatStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCombatStateRequest.ProtoReflect.Descriptor instead.
func (*GetCombatStateRequest) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{7}
}

func (x *GetCombatStateRequest) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

// GetCombatStateResponse returns the current state
type GetCombatStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Room          *Room                  `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	CombatState   *CombatState           `protobuf:"bytes,2,opt,name=combat_state,json=combatState,proto3" json:"combat_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCombatStateResponse) Reset() {
	*x = GetCombatStateResponse{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCombatStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCombatStateResponse) ProtoMessage() {}

func (x *GetCombatStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCombatStateResponse.ProtoReflect.Descriptor instead.
func (*GetCombatStateResponse) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{8}
}

func (x *GetCombatStateResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetCombatStateResponse) GetCombatState() *CombatState {
	if x != nil {
		return x.CombatState
	}
	return nil
}

// MoveCharacterRequest requests movement to a new position
type MoveCharacterRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EncounterId    string                 `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	EntityId       string                 `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	TargetPosition *v1alpha1.Position     `protobuf:"bytes,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MoveCharacterRequest) Reset() {
	*x = MoveCharacterRequest{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveCharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveCharacterRequest) ProtoMessage() {}

func (x *MoveCharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveCharacterRequest.ProtoReflect.Descriptor instead.
func (*MoveCharacterRequest) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{9}
}

func (x *MoveCharacterRequest) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

func (x *MoveCharacterRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *MoveCharacterRequest) GetTargetPosition() *v1alpha1.Position {
	if x != nil {
		return x.TargetPosition
	}
	return nil
}

// MovementError provides detailed movement failure information
type MovementError struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          MovementError_ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=dnd5e.api.v1alpha1.MovementError_ErrorCode" json:"code,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       map[string]string       `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovementError) Reset() {
	*x = MovementError{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovementError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementError) ProtoMessage() {}

func (x *MovementError) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementError.ProtoReflect.Descriptor instead.
func (*MovementError) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{10}
}

func (x *MovementError) GetCode() MovementError_ErrorCode {
	if x != nil {
		return x.Code
	}
	return MovementError_ERROR_CODE_UNSPECIFIED
}

func (x *MovementError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MovementError) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// MoveCharacterResponse returns movement result
type MoveCharacterResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Success           bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error             *MovementError         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	MovementRemaining int32                  `protobuf:"varint,3,opt,name=movement_remaining,json=movementRemaining,proto3" json:"movement_remaining,omitempty"`
	UpdatedRoom       *Room                  `protobuf:"bytes,4,opt,name=updated_room,json=updatedRoom,proto3" json:"updated_room,omitempty"` // Updated room with new positions
	CombatState       *CombatState           `protobuf:"bytes,5,opt,name=combat_state,json=combatState,proto3" json:"combat_state,omitempty"` // Updated combat state
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MoveCharacterResponse) Reset() {
	*x = MoveCharacterResponse{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveCharacterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveCharacterResponse) ProtoMessage() {}

func (x *MoveCharacterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveCharacterResponse.ProtoReflect.Descriptor instead.
func (*MoveCharacterResponse) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{11}
}

func (x *MoveCharacterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MoveCharacterResponse) GetError() *MovementError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MoveCharacterResponse) GetMovementRemaining() int32 {
	if x != nil {
		return x.MovementRemaining
	}
	return 0
}

func (x *MoveCharacterResponse) GetUpdatedRoom() *Room {
	if x != nil {
		return x.UpdatedRoom
	}
	return nil
}

func (x *MoveCharacterResponse) GetCombatState() *CombatState {
	if x != nil {
		return x.CombatState
	}
	return nil
}

// EndTurnRequest ends the current entity's turn
type EndTurnRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncounterId   string                 `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	EntityId      string                 `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"` // Must match current turn
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndTurnRequest) Reset() {
	*x = EndTurnRequest{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTurnRequest) ProtoMessage() {}

func (x *EndTurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTurnRequest.ProtoReflect.Descriptor instead.
func (*EndTurnRequest) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{12}
}

func (x *EndTurnRequest) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

func (x *EndTurnRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

// TurnChangeEvent describes a turn transition
type TurnChangeEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PreviousEntityId string                 `protobuf:"bytes,1,opt,name=previous_entity_id,json=previousEntityId,proto3" json:"previous_entity_id,omitempty"`
	NextEntityId     string                 `protobuf:"bytes,2,opt,name=next_entity_id,json=nextEntityId,proto3" json:"next_entity_id,omitempty"`
	Round            int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	NewRound         bool                   `protobuf:"varint,4,opt,name=new_round,json=newRound,proto3" json:"new_round,omitempty"` // True if this starts a new round
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TurnChangeEvent) Reset() {
	*x = TurnChangeEvent{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnChangeEvent) ProtoMessage() {}

func (x *TurnChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnChangeEvent.ProtoReflect.Descriptor instead.
func (*TurnChangeEvent) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{13}
}

func (x *TurnChangeEvent) GetPreviousEntityId() string {
	if x != nil {
		return x.PreviousEntityId
	}
	return ""
}

func (x *TurnChangeEvent) GetNextEntityId() string {
	if x != nil {
		return x.NextEntityId
	}
	return ""
}

func (x *TurnChangeEvent) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TurnChangeEvent) GetNewRound() bool {
	if x != nil {
		return x.NewRound
	}
	return false
}

// EndTurnResponse returns the updated state after turn end
type EndTurnResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CombatState   *CombatState           `protobuf:"bytes,2,opt,name=combat_state,json=combatState,proto3" json:"combat_state,omitempty"`
	TurnChange    *TurnChangeEvent       `protobuf:"bytes,3,opt,name=turn_change,json=turnChange,proto3" json:"turn_change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndTurnResponse) Reset() {
	*x = EndTurnResponse{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTurnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTurnResponse) ProtoMessage() {}

func (x *EndTurnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTurnResponse.ProtoReflect.Descriptor instead.
func (*EndTurnResponse) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{14}
}

func (x *EndTurnResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EndTurnResponse) GetCombatState() *CombatState {
	if x != nil {
		return x.CombatState
	}
	return nil
}

func (x *EndTurnResponse) GetTurnChange() *TurnChangeEvent {
	if x != nil {
		return x.TurnChange
	}
	return nil
}

// AttackRequest represents a melee or ranged attack
type AttackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncounterId   string                 `protobuf:"bytes,1,opt,name=encounter_id,json=encounterId,proto3" json:"encounter_id,omitempty"`
	AttackerId    string                 `protobuf:"bytes,2,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	TargetId      string                 `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	WeaponId      string                 `protobuf:"bytes,4,opt,name=weapon_id,json=weaponId,proto3" json:"weapon_id,omitempty"` // Optional, uses default weapon if not specified
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackRequest) Reset() {
	*x = AttackRequest{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackRequest) ProtoMessage() {}

func (x *AttackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackRequest.ProtoReflect.Descriptor instead.
func (*AttackRequest) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{15}
}

func (x *AttackRequest) GetEncounterId() string {
	if x != nil {
		return x.EncounterId
	}
	return ""
}

func (x *AttackRequest) GetAttackerId() string {
	if x != nil {
		return x.AttackerId
	}
	return ""
}

func (x *AttackRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *AttackRequest) GetWeaponId() string {
	if x != nil {
		return x.WeaponId
	}
	return ""
}

// AttackResult contains the outcome of an attack
type AttackResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hit           bool                   `protobuf:"varint,1,opt,name=hit,proto3" json:"hit,omitempty"`
	AttackRoll    int32                  `protobuf:"varint,2,opt,name=attack_roll,json=attackRoll,proto3" json:"attack_roll,omitempty"`
	AttackTotal   int32                  `protobuf:"varint,3,opt,name=attack_total,json=attackTotal,proto3" json:"attack_total,omitempty"` // roll + modifiers
	TargetAc      int32                  `protobuf:"varint,4,opt,name=target_ac,json=targetAc,proto3" json:"target_ac,omitempty"`
	Damage        int32                  `protobuf:"varint,5,opt,name=damage,proto3" json:"damage,omitempty"`
	DamageType    string                 `protobuf:"bytes,6,opt,name=damage_type,json=damageType,proto3" json:"damage_type,omitempty"` // "slashing", "piercing", etc.
	Critical      bool                   `protobuf:"varint,7,opt,name=critical,proto3" json:"critical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackResult) Reset() {
	*x = AttackResult{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackResult) ProtoMessage() {}

func (x *AttackResult) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackResult.ProtoReflect.Descriptor instead.
func (*AttackResult) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{16}
}

func (x *AttackResult) GetHit() bool {
	if x != nil {
		return x.Hit
	}
	return false
}

func (x *AttackResult) GetAttackRoll() int32 {
	if x != nil {
		return x.AttackRoll
	}
	return 0
}

func (x *AttackResult) GetAttackTotal() int32 {
	if x != nil {
		return x.AttackTotal
	}
	return 0
}

func (x *AttackResult) GetTargetAc() int32 {
	if x != nil {
		return x.TargetAc
	}
	return 0
}

func (x *AttackResult) GetDamage() int32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *AttackResult) GetDamageType() string {
	if x != nil {
		return x.DamageType
	}
	return ""
}

func (x *AttackResult) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

// AttackResponse returns the attack outcome
type AttackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Result        *AttackResult          `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	CombatState   *CombatState           `protobuf:"bytes,4,opt,name=combat_state,json=combatState,proto3" json:"combat_state,omitempty"`
	UpdatedRoom   *Room                  `protobuf:"bytes,5,opt,name=updated_room,json=updatedRoom,proto3" json:"updated_room,omitempty"` // Updated if entities are defeated/removed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackResponse) Reset() {
	*x = AttackResponse{}
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackResponse) ProtoMessage() {}

func (x *AttackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackResponse.ProtoReflect.Descriptor instead.
func (*AttackResponse) Descriptor() ([]byte, []int) {
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP(), []int{17}
}

func (x *AttackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AttackResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AttackResponse) GetResult() *AttackResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AttackResponse) GetCombatState() *CombatState {
	if x != nil {
		return x.CombatState
	}
	return nil
}

func (x *AttackResponse) GetUpdatedRoom() *Room {
	if x != nil {
		return x.UpdatedRoom
	}
	return nil
}

var File_dnd5e_api_v1alpha1_encounter_proto protoreflect.FileDescriptor

const file_dnd5e_api_v1alpha1_encounter_proto_rawDesc = "" +
	"\n" +
	"\"dnd5e/api/v1alpha1/encounter.proto\x12\x12dnd5e.api.v1alpha1\x1a\x1eapi/v1alpha1/room_common.proto\"\xf1\x01\n" +
	"\x0fEntityPlacement\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x1f\n" +
	"\ventity_type\x18\x02 \x01(\tR\n" +
	"entityType\x122\n" +
	"\bposition\x18\x03 \x01(\v2\x16.api.v1alpha1.PositionR\bposition\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x05R\x04size\x12'\n" +
	"\x0fblocks_movement\x18\x05 \x01(\bR\x0eblocksMovement\x12/\n" +
	"\x14blocks_line_of_sight\x18\x06 \x01(\bR\x11blocksLineOfSight\"\xf5\x02\n" +
	"\x04Room\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x04 \x01(\x05R\x06height\x123\n" +
	"\tgrid_type\x18\x05 \x01(\x0e2\x16.api.v1alpha1.GridTypeR\bgridType\x12,\n" +
	"\x0fhex_orientation\x18\x06 \x01(\bH\x00R\x0ehexOrientation\x88\x01\x01\x12B\n" +
	"\bentities\x18\a \x03(\v2&.dnd5e.api.v1alpha1.Room.EntitiesEntryR\bentities\x1a`\n" +
	"\rEntitiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x129\n" +
	"\x05value\x18\x02 \x01(\v2#.dnd5e.api.v1alpha1.EntityPlacementR\x05value:\x028\x01B\x12\n" +
	"\x10_hex_orientation\":\n" +
	"\x13DungeonStartRequest\x12#\n" +
	"\rcharacter_ids\x18\x01 \x03(\tR\fcharacterIds\"\xab\x01\n" +
	"\x14DungeonStartResponse\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\x12,\n" +
	"\x04room\x18\x02 \x01(\v2\x18.dnd5e.api.v1alpha1.RoomR\x04room\x12B\n" +
	"\fcombat_state\x18\x03 \x01(\v2\x1f.dnd5e.api.v1alpha1.CombatStateR\vcombatState\"\xa8\x01\n" +
	"\x0fInitiativeEntry\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x1f\n" +
	"\ventity_type\x18\x02 \x01(\tR\n" +
	"entityType\x12\x1e\n" +
	"\n" +
	"initiative\x18\x03 \x01(\x05R\n" +
	"initiative\x12\x1a\n" +
	"\bmodifier\x18\x04 \x01(\x05R\bmodifier\x12\x1b\n" +
	"\thas_acted\x18\x05 \x01(\bR\bhasActed\"\xa0\x02\n" +
	"\tTurnState\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12#\n" +
	"\rmovement_used\x18\x02 \x01(\x05R\fmovementUsed\x12!\n" +
	"\fmovement_max\x18\x03 \x01(\x05R\vmovementMax\x12\x1f\n" +
	"\vaction_used\x18\x04 \x01(\bR\n" +
	"actionUsed\x12*\n" +
	"\x11bonus_action_used\x18\x05 \x01(\bR\x0fbonusActionUsed\x12-\n" +
	"\x12reaction_available\x18\x06 \x01(\bR\x11reactionAvailable\x122\n" +
	"\bposition\x18\a \x01(\v2\x16.api.v1alpha1.PositionR\bposition\"\xb9\x02\n" +
	"\vCombatState\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x12B\n" +
	"\n" +
	"turn_order\x18\x03 \x03(\v2#.dnd5e.api.v1alpha1.InitiativeEntryR\tturnOrder\x12!\n" +
	"\factive_index\x18\x04 \x01(\x05R\vactiveIndex\x12@\n" +
	"\fcurrent_turn\x18\x05 \x01(\v2\x1d.dnd5e.api.v1alpha1.TurnStateR\vcurrentTurn\x12%\n" +
	"\x0ecombat_started\x18\x06 \x01(\bR\rcombatStarted\x12!\n" +
	"\fcombat_ended\x18\a \x01(\bR\vcombatEnded\":\n" +
	"\x15GetCombatStateRequest\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\"\x8a\x01\n" +
	"\x16GetCombatStateResponse\x12,\n" +
	"\x04room\x18\x01 \x01(\v2\x18.dnd5e.api.v1alpha1.RoomR\x04room\x12B\n" +
	"\fcombat_state\x18\x02 \x01(\v2\x1f.dnd5e.api.v1alpha1.CombatStateR\vcombatState\"\x97\x01\n" +
	"\x14MoveCharacterRequest\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\x12\x1b\n" +
	"\tentity_id\x18\x02 \x01(\tR\bentityId\x12?\n" +
	"\x0ftarget_position\x18\x03 \x01(\v2\x16.api.v1alpha1.PositionR\x0etargetPosition\"\xdc\x03\n" +
	"\rMovementError\x12?\n" +
	"\x04code\x18\x01 \x01(\x0e2+.dnd5e.api.v1alpha1.MovementError.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12H\n" +
	"\adetails\x18\x03 \x03(\v2..dnd5e.api.v1alpha1.MovementError.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe9\x01\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bERROR_CODE_INVALID_POSITION\x10\x01\x12$\n" +
	" ERROR_CODE_INSUFFICIENT_MOVEMENT\x10\x02\x12\x1b\n" +
	"\x17ERROR_CODE_PATH_BLOCKED\x10\x03\x12 \n" +
	"\x1cERROR_CODE_POSITION_OCCUPIED\x10\x04\x12\x1c\n" +
	"\x18ERROR_CODE_OUT_OF_BOUNDS\x10\x05\x12\x1c\n" +
	"\x18ERROR_CODE_NOT_YOUR_TURN\x10\x06\"\x9a\x02\n" +
	"\x15MoveCharacterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x127\n" +
	"\x05error\x18\x02 \x01(\v2!.dnd5e.api.v1alpha1.MovementErrorR\x05error\x12-\n" +
	"\x12movement_remaining\x18\x03 \x01(\x05R\x11movementRemaining\x12;\n" +
	"\fupdated_room\x18\x04 \x01(\v2\x18.dnd5e.api.v1alpha1.RoomR\vupdatedRoom\x12B\n" +
	"\fcombat_state\x18\x05 \x01(\v2\x1f.dnd5e.api.v1alpha1.CombatStateR\vcombatState\"P\n" +
	"\x0eEndTurnRequest\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\x12\x1b\n" +
	"\tentity_id\x18\x02 \x01(\tR\bentityId\"\x98\x01\n" +
	"\x0fTurnChangeEvent\x12,\n" +
	"\x12previous_entity_id\x18\x01 \x01(\tR\x10previousEntityId\x12$\n" +
	"\x0enext_entity_id\x18\x02 \x01(\tR\fnextEntityId\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12\x1b\n" +
	"\tnew_round\x18\x04 \x01(\bR\bnewRound\"\xb5\x01\n" +
	"\x0fEndTurnResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12B\n" +
	"\fcombat_state\x18\x02 \x01(\v2\x1f.dnd5e.api.v1alpha1.CombatStateR\vcombatState\x12D\n" +
	"\vturn_change\x18\x03 \x01(\v2#.dnd5e.api.v1alpha1.TurnChangeEventR\n" +
	"turnChange\"\x8d\x01\n" +
	"\rAttackRequest\x12!\n" +
	"\fencounter_id\x18\x01 \x01(\tR\vencounterId\x12\x1f\n" +
	"\vattacker_id\x18\x02 \x01(\tR\n" +
	"attackerId\x12\x1b\n" +
	"\ttarget_id\x18\x03 \x01(\tR\btargetId\x12\x1b\n" +
	"\tweapon_id\x18\x04 \x01(\tR\bweaponId\"\xd6\x01\n" +
	"\fAttackResult\x12\x10\n" +
	"\x03hit\x18\x01 \x01(\bR\x03hit\x12\x1f\n" +
	"\vattack_roll\x18\x02 \x01(\x05R\n" +
	"attackRoll\x12!\n" +
	"\fattack_total\x18\x03 \x01(\x05R\vattackTotal\x12\x1b\n" +
	"\ttarget_ac\x18\x04 \x01(\x05R\btargetAc\x12\x16\n" +
	"\x06damage\x18\x05 \x01(\x05R\x06damage\x12\x1f\n" +
	"\vdamage_type\x18\x06 \x01(\tR\n" +
	"damageType\x12\x1a\n" +
	"\bcritical\x18\a \x01(\bR\bcritical\"\xfb\x01\n" +
	"\x0eAttackResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x128\n" +
	"\x06result\x18\x03 \x01(\v2 .dnd5e.api.v1alpha1.AttackResultR\x06result\x12B\n" +
	"\fcombat_state\x18\x04 \x01(\v2\x1f.dnd5e.api.v1alpha1.CombatStateR\vcombatState\x12;\n" +
	"\fupdated_room\x18\x05 \x01(\v2\x18.dnd5e.api.v1alpha1.RoomR\vupdatedRoom2\xe9\x03\n" +
	"\x10EncounterService\x12a\n" +
	"\fDungeonStart\x12'.dnd5e.api.v1alpha1.DungeonStartRequest\x1a(.dnd5e.api.v1alpha1.DungeonStartResponse\x12g\n" +
	"\x0eGetCombatState\x12).dnd5e.api.v1alpha1.GetCombatStateRequest\x1a*.dnd5e.api.v1alpha1.GetCombatStateResponse\x12d\n" +
	"\rMoveCharacter\x12(.dnd5e.api.v1alpha1.MoveCharacterRequest\x1a).dnd5e.api.v1alpha1.MoveCharacterResponse\x12R\n" +
	"\aEndTurn\x12\".dnd5e.api.v1alpha1.EndTurnRequest\x1a#.dnd5e.api.v1alpha1.EndTurnResponse\x12O\n" +
	"\x06Attack\x12!.dnd5e.api.v1alpha1.AttackRequest\x1a\".dnd5e.api.v1alpha1.AttackResponseB\xdf\x01\n" +
	"\x16com.dnd5e.api.v1alpha1B\x0eEncounterProtoP\x01ZKgithub.com/KirkDiggler/rpg-api-protos/gen/go/dnd5e/api/v1alpha1;apiv1alpha1\xa2\x02\x03DAX\xaa\x02\x12Dnd5e.Api.V1alpha1\xca\x02\x12Dnd5e\\Api\\V1alpha1\xe2\x02\x1eDnd5e\\Api\\V1alpha1\\GPBMetadata\xea\x02\x14Dnd5e::Api::V1alpha1b\x06proto3"

var (
	file_dnd5e_api_v1alpha1_encounter_proto_rawDescOnce sync.Once
	file_dnd5e_api_v1alpha1_encounter_proto_rawDescData []byte
)

func file_dnd5e_api_v1alpha1_encounter_proto_rawDescGZIP() []byte {
	file_dnd5e_api_v1alpha1_encounter_proto_rawDescOnce.Do(func() {
		file_dnd5e_api_v1alpha1_encounter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dnd5e_api_v1alpha1_encounter_proto_rawDesc), len(file_dnd5e_api_v1alpha1_encounter_proto_rawDesc)))
	})
	return file_dnd5e_api_v1alpha1_encounter_proto_rawDescData
}

var file_dnd5e_api_v1alpha1_encounter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dnd5e_api_v1alpha1_encounter_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dnd5e_api_v1alpha1_encounter_proto_goTypes = []any{
	(MovementError_ErrorCode)(0),   // 0: dnd5e.api.v1alpha1.MovementError.ErrorCode
	(*EntityPlacement)(nil),        // 1: dnd5e.api.v1alpha1.EntityPlacement
	(*Room)(nil),                   // 2: dnd5e.api.v1alpha1.Room
	(*DungeonStartRequest)(nil),    // 3: dnd5e.api.v1alpha1.DungeonStartRequest
	(*DungeonStartResponse)(nil),   // 4: dnd5e.api.v1alpha1.DungeonStartResponse
	(*InitiativeEntry)(nil),        // 5: dnd5e.api.v1alpha1.InitiativeEntry
	(*TurnState)(nil),              // 6: dnd5e.api.v1alpha1.TurnState
	(*CombatState)(nil),            // 7: dnd5e.api.v1alpha1.CombatState
	(*GetCombatStateRequest)(nil),  // 8: dnd5e.api.v1alpha1.GetCombatStateRequest
	(*GetCombatStateResponse)(nil), // 9: dnd5e.api.v1alpha1.GetCombatStateResponse
	(*MoveCharacterRequest)(nil),   // 10: dnd5e.api.v1alpha1.MoveCharacterRequest
	(*MovementError)(nil),          // 11: dnd5e.api.v1alpha1.MovementError
	(*MoveCharacterResponse)(nil),  // 12: dnd5e.api.v1alpha1.MoveCharacterResponse
	(*EndTurnRequest)(nil),         // 13: dnd5e.api.v1alpha1.EndTurnRequest
	(*TurnChangeEvent)(nil),        // 14: dnd5e.api.v1alpha1.TurnChangeEvent
	(*EndTurnResponse)(nil),        // 15: dnd5e.api.v1alpha1.EndTurnResponse
	(*AttackRequest)(nil),          // 16: dnd5e.api.v1alpha1.AttackRequest
	(*AttackResult)(nil),           // 17: dnd5e.api.v1alpha1.AttackResult
	(*AttackResponse)(nil),         // 18: dnd5e.api.v1alpha1.AttackResponse
	nil,                            // 19: dnd5e.api.v1alpha1.Room.EntitiesEntry
	nil,                            // 20: dnd5e.api.v1alpha1.MovementError.DetailsEntry
	(*v1alpha1.Position)(nil),      // 21: api.v1alpha1.Position
	(v1alpha1.GridType)(0),         // 22: api.v1alpha1.GridType
}
var file_dnd5e_api_v1alpha1_encounter_proto_depIdxs = []int32{
	21, // 0: dnd5e.api.v1alpha1.EntityPlacement.position:type_name -> api.v1alpha1.Position
	22, // 1: dnd5e.api.v1alpha1.Room.grid_type:type_name -> api.v1alpha1.GridType
	19, // 2: dnd5e.api.v1alpha1.Room.entities:type_name -> dnd5e.api.v1alpha1.Room.EntitiesEntry
	2,  // 3: dnd5e.api.v1alpha1.DungeonStartResponse.room:type_name -> dnd5e.api.v1alpha1.Room
	7,  // 4: dnd5e.api.v1alpha1.DungeonStartResponse.combat_state:type_name -> dnd5e.api.v1alpha1.CombatState
	21, // 5: dnd5e.api.v1alpha1.TurnState.position:type_name -> api.v1alpha1.Position
	5,  // 6: dnd5e.api.v1alpha1.CombatState.turn_order:type_name -> dnd5e.api.v1alpha1.InitiativeEntry
	6,  // 7: dnd5e.api.v1alpha1.CombatState.current_turn:type_name -> dnd5e.api.v1alpha1.TurnState
	2,  // 8: dnd5e.api.v1alpha1.GetCombatStateResponse.room:type_name -> dnd5e.api.v1alpha1.Room
	7,  // 9: dnd5e.api.v1alpha1.GetCombatStateResponse.combat_state:type_name -> dnd5e.api.v1alpha1.CombatState
	21, // 10: dnd5e.api.v1alpha1.MoveCharacterRequest.target_position:type_name -> api.v1alpha1.Position
	0,  // 11: dnd5e.api.v1alpha1.MovementError.code:type_name -> dnd5e.api.v1alpha1.MovementError.ErrorCode
	20, // 12: dnd5e.api.v1alpha1.MovementError.details:type_name -> dnd5e.api.v1alpha1.MovementError.DetailsEntry
	11, // 13: dnd5e.api.v1alpha1.MoveCharacterResponse.error:type_name -> dnd5e.api.v1alpha1.MovementError
	2,  // 14: dnd5e.api.v1alpha1.MoveCharacterResponse.updated_room:type_name -> dnd5e.api.v1alpha1.Room
	7,  // 15: dnd5e.api.v1alpha1.MoveCharacterResponse.combat_state:type_name -> dnd5e.api.v1alpha1.CombatState
	7,  // 16: dnd5e.api.v1alpha1.EndTurnResponse.combat_state:type_name -> dnd5e.api.v1alpha1.CombatState
	14, // 17: dnd5e.api.v1alpha1.EndTurnResponse.turn_change:type_name -> dnd5e.api.v1alpha1.TurnChangeEvent
	17, // 18: dnd5e.api.v1alpha1.AttackResponse.result:type_name -> dnd5e.api.v1alpha1.AttackResult
	7,  // 19: dnd5e.api.v1alpha1.AttackResponse.combat_state:type_name -> dnd5e.api.v1alpha1.CombatState
	2,  // 20: dnd5e.api.v1alpha1.AttackResponse.updated_room:type_name -> dnd5e.api.v1alpha1.Room
	1,  // 21: dnd5e.api.v1alpha1.Room.EntitiesEntry.value:type_name -> dnd5e.api.v1alpha1.EntityPlacement
	3,  // 22: dnd5e.api.v1alpha1.EncounterService.DungeonStart:input_type -> dnd5e.api.v1alpha1.DungeonStartRequest
	8,  // 23: dnd5e.api.v1alpha1.EncounterService.GetCombatState:input_type -> dnd5e.api.v1alpha1.GetCombatStateRequest
	10, // 24: dnd5e.api.v1alpha1.EncounterService.MoveCharacter:input_type -> dnd5e.api.v1alpha1.MoveCharacterRequest
	13, // 25: dnd5e.api.v1alpha1.EncounterService.EndTurn:input_type -> dnd5e.api.v1alpha1.EndTurnRequest
	16, // 26: dnd5e.api.v1alpha1.EncounterService.Attack:input_type -> dnd5e.api.v1alpha1.AttackRequest
	4,  // 27: dnd5e.api.v1alpha1.EncounterService.DungeonStart:output_type -> dnd5e.api.v1alpha1.DungeonStartResponse
	9,  // 28: dnd5e.api.v1alpha1.EncounterService.GetCombatState:output_type -> dnd5e.api.v1alpha1.GetCombatStateResponse
	12, // 29: dnd5e.api.v1alpha1.EncounterService.MoveCharacter:output_type -> dnd5e.api.v1alpha1.MoveCharacterResponse
	15, // 30: dnd5e.api.v1alpha1.EncounterService.EndTurn:output_type -> dnd5e.api.v1alpha1.EndTurnResponse
	18, // 31: dnd5e.api.v1alpha1.EncounterService.Attack:output_type -> dnd5e.api.v1alpha1.AttackResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_dnd5e_api_v1alpha1_encounter_proto_init() }
func file_dnd5e_api_v1alpha1_encounter_proto_init() {
	if File_dnd5e_api_v1alpha1_encounter_proto != nil {
		return
	}
	file_dnd5e_api_v1alpha1_encounter_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dnd5e_api_v1alpha1_encounter_proto_rawDesc), len(file_dnd5e_api_v1alpha1_encounter_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dnd5e_api_v1alpha1_encounter_proto_goTypes,
		DependencyIndexes: file_dnd5e_api_v1alpha1_encounter_proto_depIdxs,
		EnumInfos:         file_dnd5e_api_v1alpha1_encounter_proto_enumTypes,
		MessageInfos:      file_dnd5e_api_v1alpha1_encounter_proto_msgTypes,
	}.Build()
	File_dnd5e_api_v1alpha1_encounter_proto = out.File
	file_dnd5e_api_v1alpha1_encounter_proto_goTypes = nil
	file_dnd5e_api_v1alpha1_encounter_proto_depIdxs = nil
}
