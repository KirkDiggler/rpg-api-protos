// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/room_spatial.proto

#include "api/v1alpha1/room_spatial.pb.h"
#include "api/v1alpha1/room_spatial.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace api {
namespace v1alpha1 {

static const char* SpatialService_method_names[] = {
  "/api.v1alpha1.SpatialService/QueryLineOfSight",
  "/api.v1alpha1.SpatialService/ValidateMovement",
  "/api.v1alpha1.SpatialService/ValidateEntityPlacement",
  "/api.v1alpha1.SpatialService/QueryEntitiesInRange",
  "/api.v1alpha1.SpatialService/CalculateMovementPath",
  "/api.v1alpha1.SpatialService/QueryAreaOfEffect",
  "/api.v1alpha1.SpatialService/QueryMultiRoomLineOfSight",
  "/api.v1alpha1.SpatialService/CalculateMultiRoomPath",
  "/api.v1alpha1.SpatialService/QuerySpatialIndex",
  "/api.v1alpha1.SpatialService/GetSpatialStats",
  "/api.v1alpha1.SpatialService/InvalidateSpatialCache",
};

std::unique_ptr< SpatialService::Stub> SpatialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpatialService::Stub> stub(new SpatialService::Stub(channel, options));
  return stub;
}

SpatialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryLineOfSight_(SpatialService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateMovement_(SpatialService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateEntityPlacement_(SpatialService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryEntitiesInRange_(SpatialService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateMovementPath_(SpatialService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryAreaOfEffect_(SpatialService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMultiRoomLineOfSight_(SpatialService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateMultiRoomPath_(SpatialService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySpatialIndex_(SpatialService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpatialStats_(SpatialService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvalidateSpatialCache_(SpatialService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpatialService::Stub::QueryLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryLineOfSightRequest& request, ::api::v1alpha1::QueryLineOfSightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::QueryLineOfSightRequest, ::api::v1alpha1::QueryLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryLineOfSight_, context, request, response);
}

void SpatialService::Stub::async::QueryLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryLineOfSightRequest* request, ::api::v1alpha1::QueryLineOfSightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::QueryLineOfSightRequest, ::api::v1alpha1::QueryLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryLineOfSight_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::QueryLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryLineOfSightRequest* request, ::api::v1alpha1::QueryLineOfSightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryLineOfSight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryLineOfSightResponse>* SpatialService::Stub::PrepareAsyncQueryLineOfSightRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::QueryLineOfSightResponse, ::api::v1alpha1::QueryLineOfSightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryLineOfSight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryLineOfSightResponse>* SpatialService::Stub::AsyncQueryLineOfSightRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryLineOfSightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::ValidateMovement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateMovementRequest& request, ::api::v1alpha1::ValidateMovementResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ValidateMovementRequest, ::api::v1alpha1::ValidateMovementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateMovement_, context, request, response);
}

void SpatialService::Stub::async::ValidateMovement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateMovementRequest* request, ::api::v1alpha1::ValidateMovementResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ValidateMovementRequest, ::api::v1alpha1::ValidateMovementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateMovement_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::ValidateMovement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateMovementRequest* request, ::api::v1alpha1::ValidateMovementResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateMovement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateMovementResponse>* SpatialService::Stub::PrepareAsyncValidateMovementRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateMovementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ValidateMovementResponse, ::api::v1alpha1::ValidateMovementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateMovement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateMovementResponse>* SpatialService::Stub::AsyncValidateMovementRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateMovementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateMovementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::ValidateEntityPlacement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest& request, ::api::v1alpha1::ValidateEntityPlacementResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ValidateEntityPlacementRequest, ::api::v1alpha1::ValidateEntityPlacementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateEntityPlacement_, context, request, response);
}

void SpatialService::Stub::async::ValidateEntityPlacement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest* request, ::api::v1alpha1::ValidateEntityPlacementResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ValidateEntityPlacementRequest, ::api::v1alpha1::ValidateEntityPlacementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateEntityPlacement_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::ValidateEntityPlacement(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest* request, ::api::v1alpha1::ValidateEntityPlacementResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateEntityPlacement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateEntityPlacementResponse>* SpatialService::Stub::PrepareAsyncValidateEntityPlacementRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ValidateEntityPlacementResponse, ::api::v1alpha1::ValidateEntityPlacementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateEntityPlacement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateEntityPlacementResponse>* SpatialService::Stub::AsyncValidateEntityPlacementRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateEntityPlacementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::QueryEntitiesInRange(::grpc::ClientContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest& request, ::api::v1alpha1::QueryEntitiesInRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::QueryEntitiesInRangeRequest, ::api::v1alpha1::QueryEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryEntitiesInRange_, context, request, response);
}

void SpatialService::Stub::async::QueryEntitiesInRange(::grpc::ClientContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest* request, ::api::v1alpha1::QueryEntitiesInRangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::QueryEntitiesInRangeRequest, ::api::v1alpha1::QueryEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryEntitiesInRange_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::QueryEntitiesInRange(::grpc::ClientContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest* request, ::api::v1alpha1::QueryEntitiesInRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryEntitiesInRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryEntitiesInRangeResponse>* SpatialService::Stub::PrepareAsyncQueryEntitiesInRangeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::QueryEntitiesInRangeResponse, ::api::v1alpha1::QueryEntitiesInRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryEntitiesInRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryEntitiesInRangeResponse>* SpatialService::Stub::AsyncQueryEntitiesInRangeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryEntitiesInRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::CalculateMovementPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMovementPathRequest& request, ::api::v1alpha1::CalculateMovementPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::CalculateMovementPathRequest, ::api::v1alpha1::CalculateMovementPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalculateMovementPath_, context, request, response);
}

void SpatialService::Stub::async::CalculateMovementPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMovementPathRequest* request, ::api::v1alpha1::CalculateMovementPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::CalculateMovementPathRequest, ::api::v1alpha1::CalculateMovementPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateMovementPath_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::CalculateMovementPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMovementPathRequest* request, ::api::v1alpha1::CalculateMovementPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateMovementPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CalculateMovementPathResponse>* SpatialService::Stub::PrepareAsyncCalculateMovementPathRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMovementPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::CalculateMovementPathResponse, ::api::v1alpha1::CalculateMovementPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalculateMovementPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CalculateMovementPathResponse>* SpatialService::Stub::AsyncCalculateMovementPathRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMovementPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalculateMovementPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::QueryAreaOfEffect(::grpc::ClientContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest& request, ::api::v1alpha1::QueryAreaOfEffectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::QueryAreaOfEffectRequest, ::api::v1alpha1::QueryAreaOfEffectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryAreaOfEffect_, context, request, response);
}

void SpatialService::Stub::async::QueryAreaOfEffect(::grpc::ClientContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest* request, ::api::v1alpha1::QueryAreaOfEffectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::QueryAreaOfEffectRequest, ::api::v1alpha1::QueryAreaOfEffectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAreaOfEffect_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::QueryAreaOfEffect(::grpc::ClientContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest* request, ::api::v1alpha1::QueryAreaOfEffectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAreaOfEffect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryAreaOfEffectResponse>* SpatialService::Stub::PrepareAsyncQueryAreaOfEffectRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::QueryAreaOfEffectResponse, ::api::v1alpha1::QueryAreaOfEffectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryAreaOfEffect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryAreaOfEffectResponse>* SpatialService::Stub::AsyncQueryAreaOfEffectRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryAreaOfEffectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::QueryMultiRoomLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest& request, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::QueryMultiRoomLineOfSightRequest, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryMultiRoomLineOfSight_, context, request, response);
}

void SpatialService::Stub::async::QueryMultiRoomLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest* request, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::QueryMultiRoomLineOfSightRequest, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMultiRoomLineOfSight_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::QueryMultiRoomLineOfSight(::grpc::ClientContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest* request, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMultiRoomLineOfSight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryMultiRoomLineOfSightResponse>* SpatialService::Stub::PrepareAsyncQueryMultiRoomLineOfSightRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::QueryMultiRoomLineOfSightResponse, ::api::v1alpha1::QueryMultiRoomLineOfSightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryMultiRoomLineOfSight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QueryMultiRoomLineOfSightResponse>* SpatialService::Stub::AsyncQueryMultiRoomLineOfSightRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryMultiRoomLineOfSightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::CalculateMultiRoomPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest& request, ::api::v1alpha1::CalculateMultiRoomPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::CalculateMultiRoomPathRequest, ::api::v1alpha1::CalculateMultiRoomPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalculateMultiRoomPath_, context, request, response);
}

void SpatialService::Stub::async::CalculateMultiRoomPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest* request, ::api::v1alpha1::CalculateMultiRoomPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::CalculateMultiRoomPathRequest, ::api::v1alpha1::CalculateMultiRoomPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateMultiRoomPath_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::CalculateMultiRoomPath(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest* request, ::api::v1alpha1::CalculateMultiRoomPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateMultiRoomPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CalculateMultiRoomPathResponse>* SpatialService::Stub::PrepareAsyncCalculateMultiRoomPathRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::CalculateMultiRoomPathResponse, ::api::v1alpha1::CalculateMultiRoomPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalculateMultiRoomPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CalculateMultiRoomPathResponse>* SpatialService::Stub::AsyncCalculateMultiRoomPathRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalculateMultiRoomPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::QuerySpatialIndex(::grpc::ClientContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest& request, ::api::v1alpha1::QuerySpatialIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::QuerySpatialIndexRequest, ::api::v1alpha1::QuerySpatialIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuerySpatialIndex_, context, request, response);
}

void SpatialService::Stub::async::QuerySpatialIndex(::grpc::ClientContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest* request, ::api::v1alpha1::QuerySpatialIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::QuerySpatialIndexRequest, ::api::v1alpha1::QuerySpatialIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySpatialIndex_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::QuerySpatialIndex(::grpc::ClientContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest* request, ::api::v1alpha1::QuerySpatialIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySpatialIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QuerySpatialIndexResponse>* SpatialService::Stub::PrepareAsyncQuerySpatialIndexRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::QuerySpatialIndexResponse, ::api::v1alpha1::QuerySpatialIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuerySpatialIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::QuerySpatialIndexResponse>* SpatialService::Stub::AsyncQuerySpatialIndexRaw(::grpc::ClientContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuerySpatialIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetSpatialStats(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpatialStatsRequest& request, ::api::v1alpha1::GetSpatialStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetSpatialStatsRequest, ::api::v1alpha1::GetSpatialStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpatialStats_, context, request, response);
}

void SpatialService::Stub::async::GetSpatialStats(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpatialStatsRequest* request, ::api::v1alpha1::GetSpatialStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetSpatialStatsRequest, ::api::v1alpha1::GetSpatialStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpatialStats_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetSpatialStats(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpatialStatsRequest* request, ::api::v1alpha1::GetSpatialStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpatialStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpatialStatsResponse>* SpatialService::Stub::PrepareAsyncGetSpatialStatsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpatialStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetSpatialStatsResponse, ::api::v1alpha1::GetSpatialStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpatialStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpatialStatsResponse>* SpatialService::Stub::AsyncGetSpatialStatsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpatialStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpatialStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::InvalidateSpatialCache(::grpc::ClientContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest& request, ::api::v1alpha1::InvalidateSpatialCacheResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::InvalidateSpatialCacheRequest, ::api::v1alpha1::InvalidateSpatialCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InvalidateSpatialCache_, context, request, response);
}

void SpatialService::Stub::async::InvalidateSpatialCache(::grpc::ClientContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest* request, ::api::v1alpha1::InvalidateSpatialCacheResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::InvalidateSpatialCacheRequest, ::api::v1alpha1::InvalidateSpatialCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InvalidateSpatialCache_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::InvalidateSpatialCache(::grpc::ClientContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest* request, ::api::v1alpha1::InvalidateSpatialCacheResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InvalidateSpatialCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::InvalidateSpatialCacheResponse>* SpatialService::Stub::PrepareAsyncInvalidateSpatialCacheRaw(::grpc::ClientContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::InvalidateSpatialCacheResponse, ::api::v1alpha1::InvalidateSpatialCacheRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InvalidateSpatialCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::InvalidateSpatialCacheResponse>* SpatialService::Stub::AsyncInvalidateSpatialCacheRaw(::grpc::ClientContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInvalidateSpatialCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

SpatialService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::QueryLineOfSightRequest, ::api::v1alpha1::QueryLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::QueryLineOfSightRequest* req,
             ::api::v1alpha1::QueryLineOfSightResponse* resp) {
               return service->QueryLineOfSight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::ValidateMovementRequest, ::api::v1alpha1::ValidateMovementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ValidateMovementRequest* req,
             ::api::v1alpha1::ValidateMovementResponse* resp) {
               return service->ValidateMovement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::ValidateEntityPlacementRequest, ::api::v1alpha1::ValidateEntityPlacementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ValidateEntityPlacementRequest* req,
             ::api::v1alpha1::ValidateEntityPlacementResponse* resp) {
               return service->ValidateEntityPlacement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::QueryEntitiesInRangeRequest, ::api::v1alpha1::QueryEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::QueryEntitiesInRangeRequest* req,
             ::api::v1alpha1::QueryEntitiesInRangeResponse* resp) {
               return service->QueryEntitiesInRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::CalculateMovementPathRequest, ::api::v1alpha1::CalculateMovementPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::CalculateMovementPathRequest* req,
             ::api::v1alpha1::CalculateMovementPathResponse* resp) {
               return service->CalculateMovementPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::QueryAreaOfEffectRequest, ::api::v1alpha1::QueryAreaOfEffectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::QueryAreaOfEffectRequest* req,
             ::api::v1alpha1::QueryAreaOfEffectResponse* resp) {
               return service->QueryAreaOfEffect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::QueryMultiRoomLineOfSightRequest, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest* req,
             ::api::v1alpha1::QueryMultiRoomLineOfSightResponse* resp) {
               return service->QueryMultiRoomLineOfSight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::CalculateMultiRoomPathRequest, ::api::v1alpha1::CalculateMultiRoomPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::CalculateMultiRoomPathRequest* req,
             ::api::v1alpha1::CalculateMultiRoomPathResponse* resp) {
               return service->CalculateMultiRoomPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::QuerySpatialIndexRequest, ::api::v1alpha1::QuerySpatialIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::QuerySpatialIndexRequest* req,
             ::api::v1alpha1::QuerySpatialIndexResponse* resp) {
               return service->QuerySpatialIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::GetSpatialStatsRequest, ::api::v1alpha1::GetSpatialStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetSpatialStatsRequest* req,
             ::api::v1alpha1::GetSpatialStatsResponse* resp) {
               return service->GetSpatialStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::api::v1alpha1::InvalidateSpatialCacheRequest, ::api::v1alpha1::InvalidateSpatialCacheResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::InvalidateSpatialCacheRequest* req,
             ::api::v1alpha1::InvalidateSpatialCacheResponse* resp) {
               return service->InvalidateSpatialCache(ctx, req, resp);
             }, this)));
}

SpatialService::Service::~Service() {
}

::grpc::Status SpatialService::Service::QueryLineOfSight(::grpc::ServerContext* context, const ::api::v1alpha1::QueryLineOfSightRequest* request, ::api::v1alpha1::QueryLineOfSightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::ValidateMovement(::grpc::ServerContext* context, const ::api::v1alpha1::ValidateMovementRequest* request, ::api::v1alpha1::ValidateMovementResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::ValidateEntityPlacement(::grpc::ServerContext* context, const ::api::v1alpha1::ValidateEntityPlacementRequest* request, ::api::v1alpha1::ValidateEntityPlacementResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::QueryEntitiesInRange(::grpc::ServerContext* context, const ::api::v1alpha1::QueryEntitiesInRangeRequest* request, ::api::v1alpha1::QueryEntitiesInRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::CalculateMovementPath(::grpc::ServerContext* context, const ::api::v1alpha1::CalculateMovementPathRequest* request, ::api::v1alpha1::CalculateMovementPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::QueryAreaOfEffect(::grpc::ServerContext* context, const ::api::v1alpha1::QueryAreaOfEffectRequest* request, ::api::v1alpha1::QueryAreaOfEffectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::QueryMultiRoomLineOfSight(::grpc::ServerContext* context, const ::api::v1alpha1::QueryMultiRoomLineOfSightRequest* request, ::api::v1alpha1::QueryMultiRoomLineOfSightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::CalculateMultiRoomPath(::grpc::ServerContext* context, const ::api::v1alpha1::CalculateMultiRoomPathRequest* request, ::api::v1alpha1::CalculateMultiRoomPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::QuerySpatialIndex(::grpc::ServerContext* context, const ::api::v1alpha1::QuerySpatialIndexRequest* request, ::api::v1alpha1::QuerySpatialIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetSpatialStats(::grpc::ServerContext* context, const ::api::v1alpha1::GetSpatialStatsRequest* request, ::api::v1alpha1::GetSpatialStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::InvalidateSpatialCache(::grpc::ServerContext* context, const ::api::v1alpha1::InvalidateSpatialCacheRequest* request, ::api::v1alpha1::InvalidateSpatialCacheResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

