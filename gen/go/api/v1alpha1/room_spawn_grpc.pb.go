// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/room_spawn.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpawnService_SpawnEntity_FullMethodName           = "/api.v1alpha1.SpawnService/SpawnEntity"
	SpawnService_SpawnMultipleEntities_FullMethodName = "/api.v1alpha1.SpawnService/SpawnMultipleEntities"
	SpawnService_SpawnFromTemplate_FullMethodName     = "/api.v1alpha1.SpawnService/SpawnFromTemplate"
	SpawnService_MoveEntity_FullMethodName            = "/api.v1alpha1.SpawnService/MoveEntity"
	SpawnService_UpdateEntity_FullMethodName          = "/api.v1alpha1.SpawnService/UpdateEntity"
	SpawnService_RemoveEntity_FullMethodName          = "/api.v1alpha1.SpawnService/RemoveEntity"
	SpawnService_GetEntity_FullMethodName             = "/api.v1alpha1.SpawnService/GetEntity"
	SpawnService_ListEntities_FullMethodName          = "/api.v1alpha1.SpawnService/ListEntities"
	SpawnService_FindEntitiesByType_FullMethodName    = "/api.v1alpha1.SpawnService/FindEntitiesByType"
	SpawnService_ListSpawnTemplates_FullMethodName    = "/api.v1alpha1.SpawnService/ListSpawnTemplates"
	SpawnService_CreateSpawnTemplate_FullMethodName   = "/api.v1alpha1.SpawnService/CreateSpawnTemplate"
	SpawnService_GetSpawnTemplate_FullMethodName      = "/api.v1alpha1.SpawnService/GetSpawnTemplate"
	SpawnService_BatchSpawnEntities_FullMethodName    = "/api.v1alpha1.SpawnService/BatchSpawnEntities"
	SpawnService_BatchMoveEntities_FullMethodName     = "/api.v1alpha1.SpawnService/BatchMoveEntities"
	SpawnService_BatchRemoveEntities_FullMethodName   = "/api.v1alpha1.SpawnService/BatchRemoveEntities"
)

// SpawnServiceClient is the client API for SpawnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Entity spawning and management service for rooms
// Handles entity creation, placement, movement, and lifecycle management
type SpawnServiceClient interface {
	// Entity spawning operations
	SpawnEntity(ctx context.Context, in *SpawnEntityRequest, opts ...grpc.CallOption) (*SpawnEntityResponse, error)
	SpawnMultipleEntities(ctx context.Context, in *SpawnMultipleEntitiesRequest, opts ...grpc.CallOption) (*SpawnMultipleEntitiesResponse, error)
	SpawnFromTemplate(ctx context.Context, in *SpawnFromTemplateRequest, opts ...grpc.CallOption) (*SpawnFromTemplateResponse, error)
	// Entity management operations
	MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error)
	RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error)
	// Entity query operations
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	FindEntitiesByType(ctx context.Context, in *FindEntitiesByTypeRequest, opts ...grpc.CallOption) (*FindEntitiesByTypeResponse, error)
	// Spawn template operations
	ListSpawnTemplates(ctx context.Context, in *ListSpawnTemplatesRequest, opts ...grpc.CallOption) (*ListSpawnTemplatesResponse, error)
	CreateSpawnTemplate(ctx context.Context, in *CreateSpawnTemplateRequest, opts ...grpc.CallOption) (*CreateSpawnTemplateResponse, error)
	GetSpawnTemplate(ctx context.Context, in *GetSpawnTemplateRequest, opts ...grpc.CallOption) (*GetSpawnTemplateResponse, error)
	// Batch operations
	BatchSpawnEntities(ctx context.Context, in *BatchSpawnEntitiesRequest, opts ...grpc.CallOption) (*BatchSpawnEntitiesResponse, error)
	BatchMoveEntities(ctx context.Context, in *BatchMoveEntitiesRequest, opts ...grpc.CallOption) (*BatchMoveEntitiesResponse, error)
	BatchRemoveEntities(ctx context.Context, in *BatchRemoveEntitiesRequest, opts ...grpc.CallOption) (*BatchRemoveEntitiesResponse, error)
}

type spawnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpawnServiceClient(cc grpc.ClientConnInterface) SpawnServiceClient {
	return &spawnServiceClient{cc}
}

func (c *spawnServiceClient) SpawnEntity(ctx context.Context, in *SpawnEntityRequest, opts ...grpc.CallOption) (*SpawnEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) SpawnMultipleEntities(ctx context.Context, in *SpawnMultipleEntitiesRequest, opts ...grpc.CallOption) (*SpawnMultipleEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnMultipleEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnMultipleEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) SpawnFromTemplate(ctx context.Context, in *SpawnFromTemplateRequest, opts ...grpc.CallOption) (*SpawnFromTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnFromTemplateResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnFromTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_MoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_RemoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) FindEntitiesByType(ctx context.Context, in *FindEntitiesByTypeRequest, opts ...grpc.CallOption) (*FindEntitiesByTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindEntitiesByTypeResponse)
	err := c.cc.Invoke(ctx, SpawnService_FindEntitiesByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) ListSpawnTemplates(ctx context.Context, in *ListSpawnTemplatesRequest, opts ...grpc.CallOption) (*ListSpawnTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpawnTemplatesResponse)
	err := c.cc.Invoke(ctx, SpawnService_ListSpawnTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) CreateSpawnTemplate(ctx context.Context, in *CreateSpawnTemplateRequest, opts ...grpc.CallOption) (*CreateSpawnTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSpawnTemplateResponse)
	err := c.cc.Invoke(ctx, SpawnService_CreateSpawnTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetSpawnTemplate(ctx context.Context, in *GetSpawnTemplateRequest, opts ...grpc.CallOption) (*GetSpawnTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpawnTemplateResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetSpawnTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) BatchSpawnEntities(ctx context.Context, in *BatchSpawnEntitiesRequest, opts ...grpc.CallOption) (*BatchSpawnEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSpawnEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_BatchSpawnEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) BatchMoveEntities(ctx context.Context, in *BatchMoveEntitiesRequest, opts ...grpc.CallOption) (*BatchMoveEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchMoveEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_BatchMoveEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) BatchRemoveEntities(ctx context.Context, in *BatchRemoveEntitiesRequest, opts ...grpc.CallOption) (*BatchRemoveEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchRemoveEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_BatchRemoveEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpawnServiceServer is the server API for SpawnService service.
// All implementations should embed UnimplementedSpawnServiceServer
// for forward compatibility.
//
// Entity spawning and management service for rooms
// Handles entity creation, placement, movement, and lifecycle management
type SpawnServiceServer interface {
	// Entity spawning operations
	SpawnEntity(context.Context, *SpawnEntityRequest) (*SpawnEntityResponse, error)
	SpawnMultipleEntities(context.Context, *SpawnMultipleEntitiesRequest) (*SpawnMultipleEntitiesResponse, error)
	SpawnFromTemplate(context.Context, *SpawnFromTemplateRequest) (*SpawnFromTemplateResponse, error)
	// Entity management operations
	MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error)
	RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error)
	// Entity query operations
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	FindEntitiesByType(context.Context, *FindEntitiesByTypeRequest) (*FindEntitiesByTypeResponse, error)
	// Spawn template operations
	ListSpawnTemplates(context.Context, *ListSpawnTemplatesRequest) (*ListSpawnTemplatesResponse, error)
	CreateSpawnTemplate(context.Context, *CreateSpawnTemplateRequest) (*CreateSpawnTemplateResponse, error)
	GetSpawnTemplate(context.Context, *GetSpawnTemplateRequest) (*GetSpawnTemplateResponse, error)
	// Batch operations
	BatchSpawnEntities(context.Context, *BatchSpawnEntitiesRequest) (*BatchSpawnEntitiesResponse, error)
	BatchMoveEntities(context.Context, *BatchMoveEntitiesRequest) (*BatchMoveEntitiesResponse, error)
	BatchRemoveEntities(context.Context, *BatchRemoveEntitiesRequest) (*BatchRemoveEntitiesResponse, error)
}

// UnimplementedSpawnServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpawnServiceServer struct{}

func (UnimplementedSpawnServiceServer) SpawnEntity(context.Context, *SpawnEntityRequest) (*SpawnEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnEntity not implemented")
}
func (UnimplementedSpawnServiceServer) SpawnMultipleEntities(context.Context, *SpawnMultipleEntitiesRequest) (*SpawnMultipleEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnMultipleEntities not implemented")
}
func (UnimplementedSpawnServiceServer) SpawnFromTemplate(context.Context, *SpawnFromTemplateRequest) (*SpawnFromTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnFromTemplate not implemented")
}
func (UnimplementedSpawnServiceServer) MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEntity not implemented")
}
func (UnimplementedSpawnServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedSpawnServiceServer) RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}
func (UnimplementedSpawnServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedSpawnServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedSpawnServiceServer) FindEntitiesByType(context.Context, *FindEntitiesByTypeRequest) (*FindEntitiesByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEntitiesByType not implemented")
}
func (UnimplementedSpawnServiceServer) ListSpawnTemplates(context.Context, *ListSpawnTemplatesRequest) (*ListSpawnTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpawnTemplates not implemented")
}
func (UnimplementedSpawnServiceServer) CreateSpawnTemplate(context.Context, *CreateSpawnTemplateRequest) (*CreateSpawnTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpawnTemplate not implemented")
}
func (UnimplementedSpawnServiceServer) GetSpawnTemplate(context.Context, *GetSpawnTemplateRequest) (*GetSpawnTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpawnTemplate not implemented")
}
func (UnimplementedSpawnServiceServer) BatchSpawnEntities(context.Context, *BatchSpawnEntitiesRequest) (*BatchSpawnEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSpawnEntities not implemented")
}
func (UnimplementedSpawnServiceServer) BatchMoveEntities(context.Context, *BatchMoveEntitiesRequest) (*BatchMoveEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMoveEntities not implemented")
}
func (UnimplementedSpawnServiceServer) BatchRemoveEntities(context.Context, *BatchRemoveEntitiesRequest) (*BatchRemoveEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemoveEntities not implemented")
}
func (UnimplementedSpawnServiceServer) testEmbeddedByValue() {}

// UnsafeSpawnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpawnServiceServer will
// result in compilation errors.
type UnsafeSpawnServiceServer interface {
	mustEmbedUnimplementedSpawnServiceServer()
}

func RegisterSpawnServiceServer(s grpc.ServiceRegistrar, srv SpawnServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpawnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpawnService_ServiceDesc, srv)
}

func _SpawnService_SpawnEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnEntity(ctx, req.(*SpawnEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_SpawnMultipleEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnMultipleEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnMultipleEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnMultipleEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnMultipleEntities(ctx, req.(*SpawnMultipleEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_SpawnFromTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnFromTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnFromTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnFromTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnFromTemplate(ctx, req.(*SpawnFromTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_MoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).MoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_MoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).MoveEntity(ctx, req.(*MoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_RemoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).RemoveEntity(ctx, req.(*RemoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_FindEntitiesByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEntitiesByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).FindEntitiesByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_FindEntitiesByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).FindEntitiesByType(ctx, req.(*FindEntitiesByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_ListSpawnTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpawnTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).ListSpawnTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_ListSpawnTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).ListSpawnTemplates(ctx, req.(*ListSpawnTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_CreateSpawnTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpawnTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).CreateSpawnTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_CreateSpawnTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).CreateSpawnTemplate(ctx, req.(*CreateSpawnTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetSpawnTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpawnTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetSpawnTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetSpawnTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetSpawnTemplate(ctx, req.(*GetSpawnTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_BatchSpawnEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSpawnEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).BatchSpawnEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_BatchSpawnEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).BatchSpawnEntities(ctx, req.(*BatchSpawnEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_BatchMoveEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMoveEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).BatchMoveEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_BatchMoveEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).BatchMoveEntities(ctx, req.(*BatchMoveEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_BatchRemoveEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRemoveEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).BatchRemoveEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_BatchRemoveEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).BatchRemoveEntities(ctx, req.(*BatchRemoveEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpawnService_ServiceDesc is the grpc.ServiceDesc for SpawnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpawnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.SpawnService",
	HandlerType: (*SpawnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpawnEntity",
			Handler:    _SpawnService_SpawnEntity_Handler,
		},
		{
			MethodName: "SpawnMultipleEntities",
			Handler:    _SpawnService_SpawnMultipleEntities_Handler,
		},
		{
			MethodName: "SpawnFromTemplate",
			Handler:    _SpawnService_SpawnFromTemplate_Handler,
		},
		{
			MethodName: "MoveEntity",
			Handler:    _SpawnService_MoveEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _SpawnService_UpdateEntity_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _SpawnService_RemoveEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _SpawnService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _SpawnService_ListEntities_Handler,
		},
		{
			MethodName: "FindEntitiesByType",
			Handler:    _SpawnService_FindEntitiesByType_Handler,
		},
		{
			MethodName: "ListSpawnTemplates",
			Handler:    _SpawnService_ListSpawnTemplates_Handler,
		},
		{
			MethodName: "CreateSpawnTemplate",
			Handler:    _SpawnService_CreateSpawnTemplate_Handler,
		},
		{
			MethodName: "GetSpawnTemplate",
			Handler:    _SpawnService_GetSpawnTemplate_Handler,
		},
		{
			MethodName: "BatchSpawnEntities",
			Handler:    _SpawnService_BatchSpawnEntities_Handler,
		},
		{
			MethodName: "BatchMoveEntities",
			Handler:    _SpawnService_BatchMoveEntities_Handler,
		},
		{
			MethodName: "BatchRemoveEntities",
			Handler:    _SpawnService_BatchRemoveEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/room_spawn.proto",
}
