// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/api/v1alpha1/room_selectables_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSelectionTableServiceClient is a mock of SelectionTableServiceClient interface.
type MockSelectionTableServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionTableServiceClientMockRecorder
}

// MockSelectionTableServiceClientMockRecorder is the mock recorder for MockSelectionTableServiceClient.
type MockSelectionTableServiceClientMockRecorder struct {
	mock *MockSelectionTableServiceClient
}

// NewMockSelectionTableServiceClient creates a new mock instance.
func NewMockSelectionTableServiceClient(ctrl *gomock.Controller) *MockSelectionTableServiceClient {
	mock := &MockSelectionTableServiceClient{ctrl: ctrl}
	mock.recorder = &MockSelectionTableServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionTableServiceClient) EXPECT() *MockSelectionTableServiceClientMockRecorder {
	return m.recorder
}

// BatchRollTables mocks base method.
func (m *MockSelectionTableServiceClient) BatchRollTables(ctx context.Context, in *v1alpha1.BatchRollTablesRequest, opts ...grpc.CallOption) (*v1alpha1.BatchRollTablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRollTables", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BatchRollTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRollTables indicates an expected call of BatchRollTables.
func (mr *MockSelectionTableServiceClientMockRecorder) BatchRollTables(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRollTables", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).BatchRollTables), varargs...)
}

// CreateSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) CreateSelectionTable(ctx context.Context, in *v1alpha1.CreateSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.CreateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSelectionTable indicates an expected call of CreateSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) CreateSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).CreateSelectionTable), varargs...)
}

// DeleteSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) DeleteSelectionTable(ctx context.Context, in *v1alpha1.DeleteSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.DeleteSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSelectionTable indicates an expected call of DeleteSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) DeleteSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).DeleteSelectionTable), varargs...)
}

// ExportSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) ExportSelectionTable(ctx context.Context, in *v1alpha1.ExportSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.ExportSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ExportSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSelectionTable indicates an expected call of ExportSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) ExportSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).ExportSelectionTable), varargs...)
}

// GenerateEncounter mocks base method.
func (m *MockSelectionTableServiceClient) GenerateEncounter(ctx context.Context, in *v1alpha1.GenerateEncounterRequest, opts ...grpc.CallOption) (*v1alpha1.GenerateEncounterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateEncounter", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GenerateEncounterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEncounter indicates an expected call of GenerateEncounter.
func (mr *MockSelectionTableServiceClientMockRecorder) GenerateEncounter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEncounter", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).GenerateEncounter), varargs...)
}

// GenerateLoot mocks base method.
func (m *MockSelectionTableServiceClient) GenerateLoot(ctx context.Context, in *v1alpha1.GenerateLootRequest, opts ...grpc.CallOption) (*v1alpha1.GenerateLootResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateLoot", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GenerateLootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateLoot indicates an expected call of GenerateLoot.
func (mr *MockSelectionTableServiceClientMockRecorder) GenerateLoot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLoot", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).GenerateLoot), varargs...)
}

// GetSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) GetSelectionTable(ctx context.Context, in *v1alpha1.GetSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.GetSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectionTable indicates an expected call of GetSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) GetSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).GetSelectionTable), varargs...)
}

// GetTableStatistics mocks base method.
func (m *MockSelectionTableServiceClient) GetTableStatistics(ctx context.Context, in *v1alpha1.GetTableStatisticsRequest, opts ...grpc.CallOption) (*v1alpha1.GetTableStatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableStatistics", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetTableStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableStatistics indicates an expected call of GetTableStatistics.
func (mr *MockSelectionTableServiceClientMockRecorder) GetTableStatistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableStatistics", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).GetTableStatistics), varargs...)
}

// ImportSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) ImportSelectionTable(ctx context.Context, in *v1alpha1.ImportSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.ImportSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ImportSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSelectionTable indicates an expected call of ImportSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) ImportSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).ImportSelectionTable), varargs...)
}

// ListSelectionTables mocks base method.
func (m *MockSelectionTableServiceClient) ListSelectionTables(ctx context.Context, in *v1alpha1.ListSelectionTablesRequest, opts ...grpc.CallOption) (*v1alpha1.ListSelectionTablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSelectionTables", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListSelectionTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectionTables indicates an expected call of ListSelectionTables.
func (mr *MockSelectionTableServiceClientMockRecorder) ListSelectionTables(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectionTables", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).ListSelectionTables), varargs...)
}

// RollMultiple mocks base method.
func (m *MockSelectionTableServiceClient) RollMultiple(ctx context.Context, in *v1alpha1.RollMultipleRequest, opts ...grpc.CallOption) (*v1alpha1.RollMultipleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollMultiple", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RollMultipleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollMultiple indicates an expected call of RollMultiple.
func (mr *MockSelectionTableServiceClientMockRecorder) RollMultiple(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollMultiple", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).RollMultiple), varargs...)
}

// RollOnTable mocks base method.
func (m *MockSelectionTableServiceClient) RollOnTable(ctx context.Context, in *v1alpha1.RollOnTableRequest, opts ...grpc.CallOption) (*v1alpha1.RollOnTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollOnTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RollOnTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollOnTable indicates an expected call of RollOnTable.
func (mr *MockSelectionTableServiceClientMockRecorder) RollOnTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollOnTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).RollOnTable), varargs...)
}

// RollWithModifiers mocks base method.
func (m *MockSelectionTableServiceClient) RollWithModifiers(ctx context.Context, in *v1alpha1.RollWithModifiersRequest, opts ...grpc.CallOption) (*v1alpha1.RollWithModifiersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollWithModifiers", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RollWithModifiersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollWithModifiers indicates an expected call of RollWithModifiers.
func (mr *MockSelectionTableServiceClientMockRecorder) RollWithModifiers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollWithModifiers", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).RollWithModifiers), varargs...)
}

// UpdateSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) UpdateSelectionTable(ctx context.Context, in *v1alpha1.UpdateSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelectionTable indicates an expected call of UpdateSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) UpdateSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).UpdateSelectionTable), varargs...)
}

// ValidateSelectionTable mocks base method.
func (m *MockSelectionTableServiceClient) ValidateSelectionTable(ctx context.Context, in *v1alpha1.ValidateSelectionTableRequest, opts ...grpc.CallOption) (*v1alpha1.ValidateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateSelectionTable", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSelectionTable indicates an expected call of ValidateSelectionTable.
func (mr *MockSelectionTableServiceClientMockRecorder) ValidateSelectionTable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceClient)(nil).ValidateSelectionTable), varargs...)
}

// MockSelectionTableServiceServer is a mock of SelectionTableServiceServer interface.
type MockSelectionTableServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionTableServiceServerMockRecorder
}

// MockSelectionTableServiceServerMockRecorder is the mock recorder for MockSelectionTableServiceServer.
type MockSelectionTableServiceServerMockRecorder struct {
	mock *MockSelectionTableServiceServer
}

// NewMockSelectionTableServiceServer creates a new mock instance.
func NewMockSelectionTableServiceServer(ctrl *gomock.Controller) *MockSelectionTableServiceServer {
	mock := &MockSelectionTableServiceServer{ctrl: ctrl}
	mock.recorder = &MockSelectionTableServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionTableServiceServer) EXPECT() *MockSelectionTableServiceServerMockRecorder {
	return m.recorder
}

// BatchRollTables mocks base method.
func (m *MockSelectionTableServiceServer) BatchRollTables(arg0 context.Context, arg1 *v1alpha1.BatchRollTablesRequest) (*v1alpha1.BatchRollTablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRollTables", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BatchRollTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRollTables indicates an expected call of BatchRollTables.
func (mr *MockSelectionTableServiceServerMockRecorder) BatchRollTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRollTables", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).BatchRollTables), arg0, arg1)
}

// CreateSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) CreateSelectionTable(arg0 context.Context, arg1 *v1alpha1.CreateSelectionTableRequest) (*v1alpha1.CreateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CreateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSelectionTable indicates an expected call of CreateSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) CreateSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).CreateSelectionTable), arg0, arg1)
}

// DeleteSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) DeleteSelectionTable(arg0 context.Context, arg1 *v1alpha1.DeleteSelectionTableRequest) (*v1alpha1.DeleteSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.DeleteSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSelectionTable indicates an expected call of DeleteSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) DeleteSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).DeleteSelectionTable), arg0, arg1)
}

// ExportSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) ExportSelectionTable(arg0 context.Context, arg1 *v1alpha1.ExportSelectionTableRequest) (*v1alpha1.ExportSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ExportSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSelectionTable indicates an expected call of ExportSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) ExportSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).ExportSelectionTable), arg0, arg1)
}

// GenerateEncounter mocks base method.
func (m *MockSelectionTableServiceServer) GenerateEncounter(arg0 context.Context, arg1 *v1alpha1.GenerateEncounterRequest) (*v1alpha1.GenerateEncounterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEncounter", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GenerateEncounterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEncounter indicates an expected call of GenerateEncounter.
func (mr *MockSelectionTableServiceServerMockRecorder) GenerateEncounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEncounter", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).GenerateEncounter), arg0, arg1)
}

// GenerateLoot mocks base method.
func (m *MockSelectionTableServiceServer) GenerateLoot(arg0 context.Context, arg1 *v1alpha1.GenerateLootRequest) (*v1alpha1.GenerateLootResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLoot", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GenerateLootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateLoot indicates an expected call of GenerateLoot.
func (mr *MockSelectionTableServiceServerMockRecorder) GenerateLoot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLoot", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).GenerateLoot), arg0, arg1)
}

// GetSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) GetSelectionTable(arg0 context.Context, arg1 *v1alpha1.GetSelectionTableRequest) (*v1alpha1.GetSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectionTable indicates an expected call of GetSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) GetSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).GetSelectionTable), arg0, arg1)
}

// GetTableStatistics mocks base method.
func (m *MockSelectionTableServiceServer) GetTableStatistics(arg0 context.Context, arg1 *v1alpha1.GetTableStatisticsRequest) (*v1alpha1.GetTableStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableStatistics", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetTableStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableStatistics indicates an expected call of GetTableStatistics.
func (mr *MockSelectionTableServiceServerMockRecorder) GetTableStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableStatistics", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).GetTableStatistics), arg0, arg1)
}

// ImportSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) ImportSelectionTable(arg0 context.Context, arg1 *v1alpha1.ImportSelectionTableRequest) (*v1alpha1.ImportSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ImportSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSelectionTable indicates an expected call of ImportSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) ImportSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).ImportSelectionTable), arg0, arg1)
}

// ListSelectionTables mocks base method.
func (m *MockSelectionTableServiceServer) ListSelectionTables(arg0 context.Context, arg1 *v1alpha1.ListSelectionTablesRequest) (*v1alpha1.ListSelectionTablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectionTables", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListSelectionTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectionTables indicates an expected call of ListSelectionTables.
func (mr *MockSelectionTableServiceServerMockRecorder) ListSelectionTables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectionTables", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).ListSelectionTables), arg0, arg1)
}

// RollMultiple mocks base method.
func (m *MockSelectionTableServiceServer) RollMultiple(arg0 context.Context, arg1 *v1alpha1.RollMultipleRequest) (*v1alpha1.RollMultipleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollMultiple", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RollMultipleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollMultiple indicates an expected call of RollMultiple.
func (mr *MockSelectionTableServiceServerMockRecorder) RollMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollMultiple", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).RollMultiple), arg0, arg1)
}

// RollOnTable mocks base method.
func (m *MockSelectionTableServiceServer) RollOnTable(arg0 context.Context, arg1 *v1alpha1.RollOnTableRequest) (*v1alpha1.RollOnTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollOnTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RollOnTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollOnTable indicates an expected call of RollOnTable.
func (mr *MockSelectionTableServiceServerMockRecorder) RollOnTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollOnTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).RollOnTable), arg0, arg1)
}

// RollWithModifiers mocks base method.
func (m *MockSelectionTableServiceServer) RollWithModifiers(arg0 context.Context, arg1 *v1alpha1.RollWithModifiersRequest) (*v1alpha1.RollWithModifiersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollWithModifiers", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RollWithModifiersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollWithModifiers indicates an expected call of RollWithModifiers.
func (mr *MockSelectionTableServiceServerMockRecorder) RollWithModifiers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollWithModifiers", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).RollWithModifiers), arg0, arg1)
}

// UpdateSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) UpdateSelectionTable(arg0 context.Context, arg1 *v1alpha1.UpdateSelectionTableRequest) (*v1alpha1.UpdateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelectionTable indicates an expected call of UpdateSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) UpdateSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).UpdateSelectionTable), arg0, arg1)
}

// ValidateSelectionTable mocks base method.
func (m *MockSelectionTableServiceServer) ValidateSelectionTable(arg0 context.Context, arg1 *v1alpha1.ValidateSelectionTableRequest) (*v1alpha1.ValidateSelectionTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSelectionTable", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidateSelectionTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSelectionTable indicates an expected call of ValidateSelectionTable.
func (mr *MockSelectionTableServiceServerMockRecorder) ValidateSelectionTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSelectionTable", reflect.TypeOf((*MockSelectionTableServiceServer)(nil).ValidateSelectionTable), arg0, arg1)
}

// MockUnsafeSelectionTableServiceServer is a mock of UnsafeSelectionTableServiceServer interface.
type MockUnsafeSelectionTableServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSelectionTableServiceServerMockRecorder
}

// MockUnsafeSelectionTableServiceServerMockRecorder is the mock recorder for MockUnsafeSelectionTableServiceServer.
type MockUnsafeSelectionTableServiceServerMockRecorder struct {
	mock *MockUnsafeSelectionTableServiceServer
}

// NewMockUnsafeSelectionTableServiceServer creates a new mock instance.
func NewMockUnsafeSelectionTableServiceServer(ctrl *gomock.Controller) *MockUnsafeSelectionTableServiceServer {
	mock := &MockUnsafeSelectionTableServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSelectionTableServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSelectionTableServiceServer) EXPECT() *MockUnsafeSelectionTableServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSelectionTableServiceServer mocks base method.
func (m *MockUnsafeSelectionTableServiceServer) mustEmbedUnimplementedSelectionTableServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSelectionTableServiceServer")
}

// mustEmbedUnimplementedSelectionTableServiceServer indicates an expected call of mustEmbedUnimplementedSelectionTableServiceServer.
func (mr *MockUnsafeSelectionTableServiceServerMockRecorder) mustEmbedUnimplementedSelectionTableServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSelectionTableServiceServer", reflect.TypeOf((*MockUnsafeSelectionTableServiceServer)(nil).mustEmbedUnimplementedSelectionTableServiceServer))
}
