// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/sandbox/api/v1alpha1/sandbox_room_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/sandbox/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSandboxRoomServiceClient is a mock of SandboxRoomServiceClient interface.
type MockSandboxRoomServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxRoomServiceClientMockRecorder
}

// MockSandboxRoomServiceClientMockRecorder is the mock recorder for MockSandboxRoomServiceClient.
type MockSandboxRoomServiceClientMockRecorder struct {
	mock *MockSandboxRoomServiceClient
}

// NewMockSandboxRoomServiceClient creates a new mock instance.
func NewMockSandboxRoomServiceClient(ctrl *gomock.Controller) *MockSandboxRoomServiceClient {
	mock := &MockSandboxRoomServiceClient{ctrl: ctrl}
	mock.recorder = &MockSandboxRoomServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSandboxRoomServiceClient) EXPECT() *MockSandboxRoomServiceClientMockRecorder {
	return m.recorder
}

// BuildStaticRoom mocks base method.
func (m *MockSandboxRoomServiceClient) BuildStaticRoom(ctx context.Context, in *v1alpha1.BuildStaticRoomRequest, opts ...grpc.CallOption) (*v1alpha1.BuildStaticRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildStaticRoom", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BuildStaticRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStaticRoom indicates an expected call of BuildStaticRoom.
func (mr *MockSandboxRoomServiceClientMockRecorder) BuildStaticRoom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStaticRoom", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).BuildStaticRoom), varargs...)
}

// CalculateDistance mocks base method.
func (m *MockSandboxRoomServiceClient) CalculateDistance(ctx context.Context, in *v1alpha1.CalculateDistanceRequest, opts ...grpc.CallOption) (*v1alpha1.CalculateDistanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateDistance", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CalculateDistanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDistance indicates an expected call of CalculateDistance.
func (mr *MockSandboxRoomServiceClientMockRecorder) CalculateDistance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDistance", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).CalculateDistance), varargs...)
}

// CheckLineOfSight mocks base method.
func (m *MockSandboxRoomServiceClient) CheckLineOfSight(ctx context.Context, in *v1alpha1.CheckLineOfSightRequest, opts ...grpc.CallOption) (*v1alpha1.CheckLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckLineOfSight", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CheckLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLineOfSight indicates an expected call of CheckLineOfSight.
func (mr *MockSandboxRoomServiceClientMockRecorder) CheckLineOfSight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLineOfSight", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).CheckLineOfSight), varargs...)
}

// CreateSandbox mocks base method.
func (m *MockSandboxRoomServiceClient) CreateSandbox(ctx context.Context, in *v1alpha1.CreateSandboxRequest, opts ...grpc.CallOption) (*v1alpha1.CreateSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSandbox", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSandbox indicates an expected call of CreateSandbox.
func (mr *MockSandboxRoomServiceClientMockRecorder) CreateSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSandbox", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).CreateSandbox), varargs...)
}

// DeleteRoom mocks base method.
func (m *MockSandboxRoomServiceClient) DeleteRoom(ctx context.Context, in *v1alpha1.DeleteRoomRequest, opts ...grpc.CallOption) (*v1alpha1.DeleteRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoom", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockSandboxRoomServiceClientMockRecorder) DeleteRoom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).DeleteRoom), varargs...)
}

// DeleteSandbox mocks base method.
func (m *MockSandboxRoomServiceClient) DeleteSandbox(ctx context.Context, in *v1alpha1.DeleteSandboxRequest, opts ...grpc.CallOption) (*v1alpha1.DeleteSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSandbox", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSandbox indicates an expected call of DeleteSandbox.
func (mr *MockSandboxRoomServiceClientMockRecorder) DeleteSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSandbox", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).DeleteSandbox), varargs...)
}

// FindPath mocks base method.
func (m *MockSandboxRoomServiceClient) FindPath(ctx context.Context, in *v1alpha1.FindPathRequest, opts ...grpc.CallOption) (*v1alpha1.FindPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPath", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FindPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPath indicates an expected call of FindPath.
func (mr *MockSandboxRoomServiceClientMockRecorder) FindPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPath", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).FindPath), varargs...)
}

// GenerateRoom mocks base method.
func (m *MockSandboxRoomServiceClient) GenerateRoom(ctx context.Context, in *v1alpha1.GenerateRoomRequest, opts ...grpc.CallOption) (*v1alpha1.GenerateRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateRoom", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GenerateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRoom indicates an expected call of GenerateRoom.
func (mr *MockSandboxRoomServiceClientMockRecorder) GenerateRoom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRoom", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).GenerateRoom), varargs...)
}

// GetEntitiesInRoom mocks base method.
func (m *MockSandboxRoomServiceClient) GetEntitiesInRoom(ctx context.Context, in *v1alpha1.GetEntitiesInRoomRequest, opts ...grpc.CallOption) (*v1alpha1.GetEntitiesInRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntitiesInRoom", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetEntitiesInRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesInRoom indicates an expected call of GetEntitiesInRoom.
func (mr *MockSandboxRoomServiceClientMockRecorder) GetEntitiesInRoom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesInRoom", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).GetEntitiesInRoom), varargs...)
}

// GetPositionsInRange mocks base method.
func (m *MockSandboxRoomServiceClient) GetPositionsInRange(ctx context.Context, in *v1alpha1.GetPositionsInRangeRequest, opts ...grpc.CallOption) (*v1alpha1.GetPositionsInRangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPositionsInRange", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetPositionsInRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionsInRange indicates an expected call of GetPositionsInRange.
func (mr *MockSandboxRoomServiceClientMockRecorder) GetPositionsInRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionsInRange", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).GetPositionsInRange), varargs...)
}

// GetRoom mocks base method.
func (m *MockSandboxRoomServiceClient) GetRoom(ctx context.Context, in *v1alpha1.GetRoomRequest, opts ...grpc.CallOption) (*v1alpha1.GetRoomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoom", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockSandboxRoomServiceClientMockRecorder) GetRoom(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).GetRoom), varargs...)
}

// GetSandbox mocks base method.
func (m *MockSandboxRoomServiceClient) GetSandbox(ctx context.Context, in *v1alpha1.GetSandboxRequest, opts ...grpc.CallOption) (*v1alpha1.GetSandboxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSandbox", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSandbox indicates an expected call of GetSandbox.
func (mr *MockSandboxRoomServiceClientMockRecorder) GetSandbox(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSandbox", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).GetSandbox), varargs...)
}

// ListRooms mocks base method.
func (m *MockSandboxRoomServiceClient) ListRooms(ctx context.Context, in *v1alpha1.ListRoomsRequest, opts ...grpc.CallOption) (*v1alpha1.ListRoomsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRooms", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListRoomsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms.
func (mr *MockSandboxRoomServiceClientMockRecorder) ListRooms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).ListRooms), varargs...)
}

// MoveEntity mocks base method.
func (m *MockSandboxRoomServiceClient) MoveEntity(ctx context.Context, in *v1alpha1.MoveEntityRequest, opts ...grpc.CallOption) (*v1alpha1.MoveEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveEntity indicates an expected call of MoveEntity.
func (mr *MockSandboxRoomServiceClientMockRecorder) MoveEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveEntity", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).MoveEntity), varargs...)
}

// PlaceEntity mocks base method.
func (m *MockSandboxRoomServiceClient) PlaceEntity(ctx context.Context, in *v1alpha1.PlaceEntityRequest, opts ...grpc.CallOption) (*v1alpha1.PlaceEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlaceEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.PlaceEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceEntity indicates an expected call of PlaceEntity.
func (mr *MockSandboxRoomServiceClientMockRecorder) PlaceEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceEntity", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).PlaceEntity), varargs...)
}

// RemoveEntity mocks base method.
func (m *MockSandboxRoomServiceClient) RemoveEntity(ctx context.Context, in *v1alpha1.RemoveEntityRequest, opts ...grpc.CallOption) (*v1alpha1.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockSandboxRoomServiceClientMockRecorder) RemoveEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockSandboxRoomServiceClient)(nil).RemoveEntity), varargs...)
}

// MockSandboxRoomServiceServer is a mock of SandboxRoomServiceServer interface.
type MockSandboxRoomServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxRoomServiceServerMockRecorder
}

// MockSandboxRoomServiceServerMockRecorder is the mock recorder for MockSandboxRoomServiceServer.
type MockSandboxRoomServiceServerMockRecorder struct {
	mock *MockSandboxRoomServiceServer
}

// NewMockSandboxRoomServiceServer creates a new mock instance.
func NewMockSandboxRoomServiceServer(ctrl *gomock.Controller) *MockSandboxRoomServiceServer {
	mock := &MockSandboxRoomServiceServer{ctrl: ctrl}
	mock.recorder = &MockSandboxRoomServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSandboxRoomServiceServer) EXPECT() *MockSandboxRoomServiceServerMockRecorder {
	return m.recorder
}

// BuildStaticRoom mocks base method.
func (m *MockSandboxRoomServiceServer) BuildStaticRoom(arg0 context.Context, arg1 *v1alpha1.BuildStaticRoomRequest) (*v1alpha1.BuildStaticRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStaticRoom", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BuildStaticRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStaticRoom indicates an expected call of BuildStaticRoom.
func (mr *MockSandboxRoomServiceServerMockRecorder) BuildStaticRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStaticRoom", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).BuildStaticRoom), arg0, arg1)
}

// CalculateDistance mocks base method.
func (m *MockSandboxRoomServiceServer) CalculateDistance(arg0 context.Context, arg1 *v1alpha1.CalculateDistanceRequest) (*v1alpha1.CalculateDistanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDistance", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CalculateDistanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDistance indicates an expected call of CalculateDistance.
func (mr *MockSandboxRoomServiceServerMockRecorder) CalculateDistance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDistance", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).CalculateDistance), arg0, arg1)
}

// CheckLineOfSight mocks base method.
func (m *MockSandboxRoomServiceServer) CheckLineOfSight(arg0 context.Context, arg1 *v1alpha1.CheckLineOfSightRequest) (*v1alpha1.CheckLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLineOfSight", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CheckLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLineOfSight indicates an expected call of CheckLineOfSight.
func (mr *MockSandboxRoomServiceServerMockRecorder) CheckLineOfSight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLineOfSight", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).CheckLineOfSight), arg0, arg1)
}

// CreateSandbox mocks base method.
func (m *MockSandboxRoomServiceServer) CreateSandbox(arg0 context.Context, arg1 *v1alpha1.CreateSandboxRequest) (*v1alpha1.CreateSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CreateSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSandbox indicates an expected call of CreateSandbox.
func (mr *MockSandboxRoomServiceServerMockRecorder) CreateSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSandbox", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).CreateSandbox), arg0, arg1)
}

// DeleteRoom mocks base method.
func (m *MockSandboxRoomServiceServer) DeleteRoom(arg0 context.Context, arg1 *v1alpha1.DeleteRoomRequest) (*v1alpha1.DeleteRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.DeleteRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockSandboxRoomServiceServerMockRecorder) DeleteRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).DeleteRoom), arg0, arg1)
}

// DeleteSandbox mocks base method.
func (m *MockSandboxRoomServiceServer) DeleteSandbox(arg0 context.Context, arg1 *v1alpha1.DeleteSandboxRequest) (*v1alpha1.DeleteSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.DeleteSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSandbox indicates an expected call of DeleteSandbox.
func (mr *MockSandboxRoomServiceServerMockRecorder) DeleteSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSandbox", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).DeleteSandbox), arg0, arg1)
}

// FindPath mocks base method.
func (m *MockSandboxRoomServiceServer) FindPath(arg0 context.Context, arg1 *v1alpha1.FindPathRequest) (*v1alpha1.FindPathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPath", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.FindPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPath indicates an expected call of FindPath.
func (mr *MockSandboxRoomServiceServerMockRecorder) FindPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPath", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).FindPath), arg0, arg1)
}

// GenerateRoom mocks base method.
func (m *MockSandboxRoomServiceServer) GenerateRoom(arg0 context.Context, arg1 *v1alpha1.GenerateRoomRequest) (*v1alpha1.GenerateRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRoom", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GenerateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRoom indicates an expected call of GenerateRoom.
func (mr *MockSandboxRoomServiceServerMockRecorder) GenerateRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRoom", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).GenerateRoom), arg0, arg1)
}

// GetEntitiesInRoom mocks base method.
func (m *MockSandboxRoomServiceServer) GetEntitiesInRoom(arg0 context.Context, arg1 *v1alpha1.GetEntitiesInRoomRequest) (*v1alpha1.GetEntitiesInRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesInRoom", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetEntitiesInRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesInRoom indicates an expected call of GetEntitiesInRoom.
func (mr *MockSandboxRoomServiceServerMockRecorder) GetEntitiesInRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesInRoom", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).GetEntitiesInRoom), arg0, arg1)
}

// GetPositionsInRange mocks base method.
func (m *MockSandboxRoomServiceServer) GetPositionsInRange(arg0 context.Context, arg1 *v1alpha1.GetPositionsInRangeRequest) (*v1alpha1.GetPositionsInRangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionsInRange", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetPositionsInRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionsInRange indicates an expected call of GetPositionsInRange.
func (mr *MockSandboxRoomServiceServerMockRecorder) GetPositionsInRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionsInRange", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).GetPositionsInRange), arg0, arg1)
}

// GetRoom mocks base method.
func (m *MockSandboxRoomServiceServer) GetRoom(arg0 context.Context, arg1 *v1alpha1.GetRoomRequest) (*v1alpha1.GetRoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockSandboxRoomServiceServerMockRecorder) GetRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).GetRoom), arg0, arg1)
}

// GetSandbox mocks base method.
func (m *MockSandboxRoomServiceServer) GetSandbox(arg0 context.Context, arg1 *v1alpha1.GetSandboxRequest) (*v1alpha1.GetSandboxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSandbox", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetSandboxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSandbox indicates an expected call of GetSandbox.
func (mr *MockSandboxRoomServiceServerMockRecorder) GetSandbox(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSandbox", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).GetSandbox), arg0, arg1)
}

// ListRooms mocks base method.
func (m *MockSandboxRoomServiceServer) ListRooms(arg0 context.Context, arg1 *v1alpha1.ListRoomsRequest) (*v1alpha1.ListRoomsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRooms", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListRoomsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms.
func (mr *MockSandboxRoomServiceServerMockRecorder) ListRooms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).ListRooms), arg0, arg1)
}

// MoveEntity mocks base method.
func (m *MockSandboxRoomServiceServer) MoveEntity(arg0 context.Context, arg1 *v1alpha1.MoveEntityRequest) (*v1alpha1.MoveEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveEntity indicates an expected call of MoveEntity.
func (mr *MockSandboxRoomServiceServerMockRecorder) MoveEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveEntity", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).MoveEntity), arg0, arg1)
}

// PlaceEntity mocks base method.
func (m *MockSandboxRoomServiceServer) PlaceEntity(arg0 context.Context, arg1 *v1alpha1.PlaceEntityRequest) (*v1alpha1.PlaceEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.PlaceEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceEntity indicates an expected call of PlaceEntity.
func (mr *MockSandboxRoomServiceServerMockRecorder) PlaceEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceEntity", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).PlaceEntity), arg0, arg1)
}

// RemoveEntity mocks base method.
func (m *MockSandboxRoomServiceServer) RemoveEntity(arg0 context.Context, arg1 *v1alpha1.RemoveEntityRequest) (*v1alpha1.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockSandboxRoomServiceServerMockRecorder) RemoveEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockSandboxRoomServiceServer)(nil).RemoveEntity), arg0, arg1)
}

// MockUnsafeSandboxRoomServiceServer is a mock of UnsafeSandboxRoomServiceServer interface.
type MockUnsafeSandboxRoomServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSandboxRoomServiceServerMockRecorder
}

// MockUnsafeSandboxRoomServiceServerMockRecorder is the mock recorder for MockUnsafeSandboxRoomServiceServer.
type MockUnsafeSandboxRoomServiceServerMockRecorder struct {
	mock *MockUnsafeSandboxRoomServiceServer
}

// NewMockUnsafeSandboxRoomServiceServer creates a new mock instance.
func NewMockUnsafeSandboxRoomServiceServer(ctrl *gomock.Controller) *MockUnsafeSandboxRoomServiceServer {
	mock := &MockUnsafeSandboxRoomServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSandboxRoomServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSandboxRoomServiceServer) EXPECT() *MockUnsafeSandboxRoomServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSandboxRoomServiceServer mocks base method.
func (m *MockUnsafeSandboxRoomServiceServer) mustEmbedUnimplementedSandboxRoomServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSandboxRoomServiceServer")
}

// mustEmbedUnimplementedSandboxRoomServiceServer indicates an expected call of mustEmbedUnimplementedSandboxRoomServiceServer.
func (mr *MockUnsafeSandboxRoomServiceServerMockRecorder) mustEmbedUnimplementedSandboxRoomServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSandboxRoomServiceServer", reflect.TypeOf((*MockUnsafeSandboxRoomServiceServer)(nil).mustEmbedUnimplementedSandboxRoomServiceServer))
}
