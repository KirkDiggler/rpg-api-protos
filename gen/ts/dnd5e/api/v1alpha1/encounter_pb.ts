// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file dnd5e/api/v1alpha1/encounter.proto (package dnd5e.api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { GridType, Position } from "../../../api/v1alpha1/room_common_pb";
import { file_api_v1alpha1_room_common } from "../../../api/v1alpha1/room_common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dnd5e/api/v1alpha1/encounter.proto.
 */
export const file_dnd5e_api_v1alpha1_encounter: GenFile = /*@__PURE__*/
  fileDesc("CiJkbmQ1ZS9hcGkvdjFhbHBoYTEvZW5jb3VudGVyLnByb3RvEhJkbmQ1ZS5hcGkudjFhbHBoYTEiqAEKD0VudGl0eVBsYWNlbWVudBIRCgllbnRpdHlfaWQYASABKAkSEwoLZW50aXR5X3R5cGUYAiABKAkSKAoIcG9zaXRpb24YAyABKAsyFi5hcGkudjFhbHBoYTEuUG9zaXRpb24SDAoEc2l6ZRgEIAEoBRIXCg9ibG9ja3NfbW92ZW1lbnQYBSABKAgSHAoUYmxvY2tzX2xpbmVfb2Zfc2lnaHQYBiABKAgirAIKBFJvb20SCgoCaWQYASABKAkSDAoEdHlwZRgCIAEoCRINCgV3aWR0aBgDIAEoBRIOCgZoZWlnaHQYBCABKAUSKQoJZ3JpZF90eXBlGAUgASgOMhYuYXBpLnYxYWxwaGExLkdyaWRUeXBlEhwKD2hleF9vcmllbnRhdGlvbhgGIAEoCEgAiAEBEjgKCGVudGl0aWVzGAcgAygLMiYuZG5kNWUuYXBpLnYxYWxwaGExLlJvb20uRW50aXRpZXNFbnRyeRpUCg1FbnRpdGllc0VudHJ5EgsKA2tleRgBIAEoCRIyCgV2YWx1ZRgCIAEoCzIjLmRuZDVlLmFwaS52MWFscGhhMS5FbnRpdHlQbGFjZW1lbnQ6AjgBQhIKEF9oZXhfb3JpZW50YXRpb24iLAoTRHVuZ2VvblN0YXJ0UmVxdWVzdBIVCg1jaGFyYWN0ZXJfaWRzGAEgAygJIosBChREdW5nZW9uU3RhcnRSZXNwb25zZRIUCgxlbmNvdW50ZXJfaWQYASABKAkSJgoEcm9vbRgCIAEoCzIYLmRuZDVlLmFwaS52MWFscGhhMS5Sb29tEjUKDGNvbWJhdF9zdGF0ZRgDIAEoCzIfLmRuZDVlLmFwaS52MWFscGhhMS5Db21iYXRTdGF0ZSJyCg9Jbml0aWF0aXZlRW50cnkSEQoJZW50aXR5X2lkGAEgASgJEhMKC2VudGl0eV90eXBlGAIgASgJEhIKCmluaXRpYXRpdmUYAyABKAUSEAoIbW9kaWZpZXIYBCABKAUSEQoJaGFzX2FjdGVkGAUgASgIIsEBCglUdXJuU3RhdGUSEQoJZW50aXR5X2lkGAEgASgJEhUKDW1vdmVtZW50X3VzZWQYAiABKAUSFAoMbW92ZW1lbnRfbWF4GAMgASgFEhMKC2FjdGlvbl91c2VkGAQgASgIEhkKEWJvbnVzX2FjdGlvbl91c2VkGAUgASgIEhoKEnJlYWN0aW9uX2F2YWlsYWJsZRgGIAEoCBIoCghwb3NpdGlvbhgHIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbiLkAQoLQ29tYmF0U3RhdGUSFAoMZW5jb3VudGVyX2lkGAEgASgJEg0KBXJvdW5kGAIgASgFEjcKCnR1cm5fb3JkZXIYAyADKAsyIy5kbmQ1ZS5hcGkudjFhbHBoYTEuSW5pdGlhdGl2ZUVudHJ5EhQKDGFjdGl2ZV9pbmRleBgEIAEoBRIzCgxjdXJyZW50X3R1cm4YBSABKAsyHS5kbmQ1ZS5hcGkudjFhbHBoYTEuVHVyblN0YXRlEhYKDmNvbWJhdF9zdGFydGVkGAYgASgIEhQKDGNvbWJhdF9lbmRlZBgHIAEoCCItChVHZXRDb21iYXRTdGF0ZVJlcXVlc3QSFAoMZW5jb3VudGVyX2lkGAEgASgJIncKFkdldENvbWJhdFN0YXRlUmVzcG9uc2USJgoEcm9vbRgBIAEoCzIYLmRuZDVlLmFwaS52MWFscGhhMS5Sb29tEjUKDGNvbWJhdF9zdGF0ZRgCIAEoCzIfLmRuZDVlLmFwaS52MWFscGhhMS5Db21iYXRTdGF0ZSJwChRNb3ZlQ2hhcmFjdGVyUmVxdWVzdBIUCgxlbmNvdW50ZXJfaWQYASABKAkSEQoJZW50aXR5X2lkGAIgASgJEi8KD3RhcmdldF9wb3NpdGlvbhgDIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbiK4AwoNTW92ZW1lbnRFcnJvchI5CgRjb2RlGAEgASgOMisuZG5kNWUuYXBpLnYxYWxwaGExLk1vdmVtZW50RXJyb3IuRXJyb3JDb2RlEg8KB21lc3NhZ2UYAiABKAkSPwoHZGV0YWlscxgDIAMoCzIuLmRuZDVlLmFwaS52MWFscGhhMS5Nb3ZlbWVudEVycm9yLkRldGFpbHNFbnRyeRouCgxEZXRhaWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLpAQoJRXJyb3JDb2RlEhoKFkVSUk9SX0NPREVfVU5TUEVDSUZJRUQQABIfChtFUlJPUl9DT0RFX0lOVkFMSURfUE9TSVRJT04QARIkCiBFUlJPUl9DT0RFX0lOU1VGRklDSUVOVF9NT1ZFTUVOVBACEhsKF0VSUk9SX0NPREVfUEFUSF9CTE9DS0VEEAMSIAocRVJST1JfQ09ERV9QT1NJVElPTl9PQ0NVUElFRBAEEhwKGEVSUk9SX0NPREVfT1VUX09GX0JPVU5EUxAFEhwKGEVSUk9SX0NPREVfTk9UX1lPVVJfVFVSThAGIt0BChVNb3ZlQ2hhcmFjdGVyUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIwCgVlcnJvchgCIAEoCzIhLmRuZDVlLmFwaS52MWFscGhhMS5Nb3ZlbWVudEVycm9yEhoKEm1vdmVtZW50X3JlbWFpbmluZxgDIAEoBRIuCgx1cGRhdGVkX3Jvb20YBCABKAsyGC5kbmQ1ZS5hcGkudjFhbHBoYTEuUm9vbRI1Cgxjb21iYXRfc3RhdGUYBSABKAsyHy5kbmQ1ZS5hcGkudjFhbHBoYTEuQ29tYmF0U3RhdGUiOQoORW5kVHVyblJlcXVlc3QSFAoMZW5jb3VudGVyX2lkGAEgASgJEhEKCWVudGl0eV9pZBgCIAEoCSJnCg9UdXJuQ2hhbmdlRXZlbnQSGgoScHJldmlvdXNfZW50aXR5X2lkGAEgASgJEhYKDm5leHRfZW50aXR5X2lkGAIgASgJEg0KBXJvdW5kGAMgASgFEhEKCW5ld19yb3VuZBgEIAEoCCKTAQoPRW5kVHVyblJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSNQoMY29tYmF0X3N0YXRlGAIgASgLMh8uZG5kNWUuYXBpLnYxYWxwaGExLkNvbWJhdFN0YXRlEjgKC3R1cm5fY2hhbmdlGAMgASgLMiMuZG5kNWUuYXBpLnYxYWxwaGExLlR1cm5DaGFuZ2VFdmVudCJgCg1BdHRhY2tSZXF1ZXN0EhQKDGVuY291bnRlcl9pZBgBIAEoCRITCgthdHRhY2tlcl9pZBgCIAEoCRIRCgl0YXJnZXRfaWQYAyABKAkSEQoJd2VhcG9uX2lkGAQgASgJIpABCgxBdHRhY2tSZXN1bHQSCwoDaGl0GAEgASgIEhMKC2F0dGFja19yb2xsGAIgASgFEhQKDGF0dGFja190b3RhbBgDIAEoBRIRCgl0YXJnZXRfYWMYBCABKAUSDgoGZGFtYWdlGAUgASgFEhMKC2RhbWFnZV90eXBlGAYgASgJEhAKCGNyaXRpY2FsGAcgASgIIskBCg5BdHRhY2tSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEg0KBWVycm9yGAIgASgJEjAKBnJlc3VsdBgDIAEoCzIgLmRuZDVlLmFwaS52MWFscGhhMS5BdHRhY2tSZXN1bHQSNQoMY29tYmF0X3N0YXRlGAQgASgLMh8uZG5kNWUuYXBpLnYxYWxwaGExLkNvbWJhdFN0YXRlEi4KDHVwZGF0ZWRfcm9vbRgFIAEoCzIYLmRuZDVlLmFwaS52MWFscGhhMS5Sb29tMukDChBFbmNvdW50ZXJTZXJ2aWNlEmEKDER1bmdlb25TdGFydBInLmRuZDVlLmFwaS52MWFscGhhMS5EdW5nZW9uU3RhcnRSZXF1ZXN0GiguZG5kNWUuYXBpLnYxYWxwaGExLkR1bmdlb25TdGFydFJlc3BvbnNlEmcKDkdldENvbWJhdFN0YXRlEikuZG5kNWUuYXBpLnYxYWxwaGExLkdldENvbWJhdFN0YXRlUmVxdWVzdBoqLmRuZDVlLmFwaS52MWFscGhhMS5HZXRDb21iYXRTdGF0ZVJlc3BvbnNlEmQKDU1vdmVDaGFyYWN0ZXISKC5kbmQ1ZS5hcGkudjFhbHBoYTEuTW92ZUNoYXJhY3RlclJlcXVlc3QaKS5kbmQ1ZS5hcGkudjFhbHBoYTEuTW92ZUNoYXJhY3RlclJlc3BvbnNlElIKB0VuZFR1cm4SIi5kbmQ1ZS5hcGkudjFhbHBoYTEuRW5kVHVyblJlcXVlc3QaIy5kbmQ1ZS5hcGkudjFhbHBoYTEuRW5kVHVyblJlc3BvbnNlEk8KBkF0dGFjaxIhLmRuZDVlLmFwaS52MWFscGhhMS5BdHRhY2tSZXF1ZXN0GiIuZG5kNWUuYXBpLnYxYWxwaGExLkF0dGFja1Jlc3BvbnNlQt8BChZjb20uZG5kNWUuYXBpLnYxYWxwaGExQg5FbmNvdW50ZXJQcm90b1ABWktnaXRodWIuY29tL0tpcmtEaWdnbGVyL3JwZy1hcGktcHJvdG9zL2dlbi9nby9kbmQ1ZS9hcGkvdjFhbHBoYTE7YXBpdjFhbHBoYTGiAgNEQViqAhJEbmQ1ZS5BcGkuVjFhbHBoYTHKAhJEbmQ1ZVxBcGlcVjFhbHBoYTHiAh5EbmQ1ZVxBcGlcVjFhbHBoYTFcR1BCTWV0YWRhdGHqAhREbmQ1ZTo6QXBpOjpWMWFscGhhMWIGcHJvdG8z", [file_api_v1alpha1_room_common]);

/**
 * EntityPlacement represents where an entity is positioned
 * Matches toolkit's EntityPlacement structure exactly
 *
 * @generated from message dnd5e.api.v1alpha1.EntityPlacement
 */
export type EntityPlacement = Message<"dnd5e.api.v1alpha1.EntityPlacement"> & {
  /**
   * Unique identifier for the entity
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * Type of entity (e.g., "character", "monster", "object")
   *
   * @generated from field: string entity_type = 2;
   */
  entityType: string;

  /**
   * Position in the room
   *
   * @generated from field: api.v1alpha1.Position position = 3;
   */
  position?: Position;

  /**
   * Size of the entity in grid units (default 1)
   *
   * @generated from field: int32 size = 4;
   */
  size: number;

  /**
   * Whether this entity blocks movement through its space
   *
   * @generated from field: bool blocks_movement = 5;
   */
  blocksMovement: boolean;

  /**
   * Whether this entity blocks line of sight
   *
   * @generated from field: bool blocks_line_of_sight = 6;
   */
  blocksLineOfSight: boolean;
};

/**
 * Describes the message dnd5e.api.v1alpha1.EntityPlacement.
 * Use `create(EntityPlacementSchema)` to create a new message.
 */
export const EntityPlacementSchema: GenMessage<EntityPlacement> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 0);

/**
 * Room represents a spatial area where encounters take place
 * Matches toolkit's RoomData structure exactly for direct field mapping
 *
 * @generated from message dnd5e.api.v1alpha1.Room
 */
export type Room = Message<"dnd5e.api.v1alpha1.Room"> & {
  /**
   * Unique identifier for the room
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Type of room (e.g., "dungeon", "tavern", "outdoor")
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Width of the room in grid units
   *
   * @generated from field: int32 width = 3;
   */
  width: number;

  /**
   * Height of the room in grid units
   *
   * @generated from field: int32 height = 4;
   */
  height: number;

  /**
   * Grid system used in this room
   *
   * @generated from field: api.v1alpha1.GridType grid_type = 5;
   */
  gridType: GridType;

  /**
   * Hex orientation: true for pointy-top, false for flat-top
   * Only used when grid_type is HEX, defaults to true (pointy-top) for D&D 5e compatibility
   * Uses optional to distinguish between explicit false and unset (which defaults to true)
   *
   * @generated from field: optional bool hex_orientation = 6;
   */
  hexOrientation?: boolean;

  /**
   * Entities placed in the room - map of entity ID to their placement data
   * Matches toolkit's map[string]EntityPlacement structure
   *
   * @generated from field: map<string, dnd5e.api.v1alpha1.EntityPlacement> entities = 7;
   */
  entities: { [key: string]: EntityPlacement };
};

/**
 * Describes the message dnd5e.api.v1alpha1.Room.
 * Use `create(RoomSchema)` to create a new message.
 */
export const RoomSchema: GenMessage<Room> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 1);

/**
 * DungeonStartRequest initiates a simple dungeon encounter
 *
 * @generated from message dnd5e.api.v1alpha1.DungeonStartRequest
 */
export type DungeonStartRequest = Message<"dnd5e.api.v1alpha1.DungeonStartRequest"> & {
  /**
   * IDs of the characters entering the dungeon
   *
   * @generated from field: repeated string character_ids = 1;
   */
  characterIds: string[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.DungeonStartRequest.
 * Use `create(DungeonStartRequestSchema)` to create a new message.
 */
export const DungeonStartRequestSchema: GenMessage<DungeonStartRequest> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 2);

/**
 * DungeonStartResponse contains the generated encounter with combat already started
 *
 * @generated from message dnd5e.api.v1alpha1.DungeonStartResponse
 */
export type DungeonStartResponse = Message<"dnd5e.api.v1alpha1.DungeonStartResponse"> & {
  /**
   * Unique identifier for this encounter
   *
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * The generated room with all entities placed (including characters)
   *
   * @generated from field: dnd5e.api.v1alpha1.Room room = 2;
   */
  room?: Room;

  /**
   * Combat state with initiative already rolled
   *
   * @generated from field: dnd5e.api.v1alpha1.CombatState combat_state = 3;
   */
  combatState?: CombatState;
};

/**
 * Describes the message dnd5e.api.v1alpha1.DungeonStartResponse.
 * Use `create(DungeonStartResponseSchema)` to create a new message.
 */
export const DungeonStartResponseSchema: GenMessage<DungeonStartResponse> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 3);

/**
 * InitiativeEntry represents one combatant in turn order
 *
 * @generated from message dnd5e.api.v1alpha1.InitiativeEntry
 */
export type InitiativeEntry = Message<"dnd5e.api.v1alpha1.InitiativeEntry"> & {
  /**
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * "character", "monster", "npc"
   *
   * @generated from field: string entity_type = 2;
   */
  entityType: string;

  /**
   * Total initiative value (roll + modifier)
   *
   * @generated from field: int32 initiative = 3;
   */
  initiative: number;

  /**
   * DEX modifier used
   *
   * @generated from field: int32 modifier = 4;
   */
  modifier: number;

  /**
   * Has this entity acted this round?
   *
   * @generated from field: bool has_acted = 5;
   */
  hasActed: boolean;
};

/**
 * Describes the message dnd5e.api.v1alpha1.InitiativeEntry.
 * Use `create(InitiativeEntrySchema)` to create a new message.
 */
export const InitiativeEntrySchema: GenMessage<InitiativeEntry> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 4);

/**
 * TurnState tracks resources available during a turn
 *
 * @generated from message dnd5e.api.v1alpha1.TurnState
 */
export type TurnState = Message<"dnd5e.api.v1alpha1.TurnState"> & {
  /**
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * @generated from field: int32 movement_used = 2;
   */
  movementUsed: number;

  /**
   * @generated from field: int32 movement_max = 3;
   */
  movementMax: number;

  /**
   * @generated from field: bool action_used = 4;
   */
  actionUsed: boolean;

  /**
   * @generated from field: bool bonus_action_used = 5;
   */
  bonusActionUsed: boolean;

  /**
   * @generated from field: bool reaction_available = 6;
   */
  reactionAvailable: boolean;

  /**
   * @generated from field: api.v1alpha1.Position position = 7;
   */
  position?: Position;
};

/**
 * Describes the message dnd5e.api.v1alpha1.TurnState.
 * Use `create(TurnStateSchema)` to create a new message.
 */
export const TurnStateSchema: GenMessage<TurnState> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 5);

/**
 * CombatState represents the complete state of combat
 *
 * @generated from message dnd5e.api.v1alpha1.CombatState
 */
export type CombatState = Message<"dnd5e.api.v1alpha1.CombatState"> & {
  /**
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.InitiativeEntry turn_order = 3;
   */
  turnOrder: InitiativeEntry[];

  /**
   * Index in turn_order of current actor
   *
   * @generated from field: int32 active_index = 4;
   */
  activeIndex: number;

  /**
   * @generated from field: dnd5e.api.v1alpha1.TurnState current_turn = 5;
   */
  currentTurn?: TurnState;

  /**
   * @generated from field: bool combat_started = 6;
   */
  combatStarted: boolean;

  /**
   * @generated from field: bool combat_ended = 7;
   */
  combatEnded: boolean;
};

/**
 * Describes the message dnd5e.api.v1alpha1.CombatState.
 * Use `create(CombatStateSchema)` to create a new message.
 */
export const CombatStateSchema: GenMessage<CombatState> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 6);

/**
 * GetCombatStateRequest retrieves current state (for reconnection/refresh)
 *
 * @generated from message dnd5e.api.v1alpha1.GetCombatStateRequest
 */
export type GetCombatStateRequest = Message<"dnd5e.api.v1alpha1.GetCombatStateRequest"> & {
  /**
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;
};

/**
 * Describes the message dnd5e.api.v1alpha1.GetCombatStateRequest.
 * Use `create(GetCombatStateRequestSchema)` to create a new message.
 */
export const GetCombatStateRequestSchema: GenMessage<GetCombatStateRequest> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 7);

/**
 * GetCombatStateResponse returns the current state
 *
 * @generated from message dnd5e.api.v1alpha1.GetCombatStateResponse
 */
export type GetCombatStateResponse = Message<"dnd5e.api.v1alpha1.GetCombatStateResponse"> & {
  /**
   * @generated from field: dnd5e.api.v1alpha1.Room room = 1;
   */
  room?: Room;

  /**
   * @generated from field: dnd5e.api.v1alpha1.CombatState combat_state = 2;
   */
  combatState?: CombatState;
};

/**
 * Describes the message dnd5e.api.v1alpha1.GetCombatStateResponse.
 * Use `create(GetCombatStateResponseSchema)` to create a new message.
 */
export const GetCombatStateResponseSchema: GenMessage<GetCombatStateResponse> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 8);

/**
 * MoveCharacterRequest requests movement to a new position
 *
 * @generated from message dnd5e.api.v1alpha1.MoveCharacterRequest
 */
export type MoveCharacterRequest = Message<"dnd5e.api.v1alpha1.MoveCharacterRequest"> & {
  /**
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * @generated from field: api.v1alpha1.Position target_position = 3;
   */
  targetPosition?: Position;
};

/**
 * Describes the message dnd5e.api.v1alpha1.MoveCharacterRequest.
 * Use `create(MoveCharacterRequestSchema)` to create a new message.
 */
export const MoveCharacterRequestSchema: GenMessage<MoveCharacterRequest> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 9);

/**
 * MovementError provides detailed movement failure information
 *
 * @generated from message dnd5e.api.v1alpha1.MovementError
 */
export type MovementError = Message<"dnd5e.api.v1alpha1.MovementError"> & {
  /**
   * @generated from field: dnd5e.api.v1alpha1.MovementError.ErrorCode code = 1;
   */
  code: MovementError_ErrorCode;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: map<string, string> details = 3;
   */
  details: { [key: string]: string };
};

/**
 * Describes the message dnd5e.api.v1alpha1.MovementError.
 * Use `create(MovementErrorSchema)` to create a new message.
 */
export const MovementErrorSchema: GenMessage<MovementError> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 10);

/**
 * @generated from enum dnd5e.api.v1alpha1.MovementError.ErrorCode
 */
export enum MovementError_ErrorCode {
  /**
   * @generated from enum value: ERROR_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ERROR_CODE_INVALID_POSITION = 1;
   */
  INVALID_POSITION = 1,

  /**
   * @generated from enum value: ERROR_CODE_INSUFFICIENT_MOVEMENT = 2;
   */
  INSUFFICIENT_MOVEMENT = 2,

  /**
   * @generated from enum value: ERROR_CODE_PATH_BLOCKED = 3;
   */
  PATH_BLOCKED = 3,

  /**
   * @generated from enum value: ERROR_CODE_POSITION_OCCUPIED = 4;
   */
  POSITION_OCCUPIED = 4,

  /**
   * @generated from enum value: ERROR_CODE_OUT_OF_BOUNDS = 5;
   */
  OUT_OF_BOUNDS = 5,

  /**
   * @generated from enum value: ERROR_CODE_NOT_YOUR_TURN = 6;
   */
  NOT_YOUR_TURN = 6,
}

/**
 * Describes the enum dnd5e.api.v1alpha1.MovementError.ErrorCode.
 */
export const MovementError_ErrorCodeSchema: GenEnum<MovementError_ErrorCode> = /*@__PURE__*/
  enumDesc(file_dnd5e_api_v1alpha1_encounter, 10, 0);

/**
 * MoveCharacterResponse returns movement result
 *
 * @generated from message dnd5e.api.v1alpha1.MoveCharacterResponse
 */
export type MoveCharacterResponse = Message<"dnd5e.api.v1alpha1.MoveCharacterResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: dnd5e.api.v1alpha1.MovementError error = 2;
   */
  error?: MovementError;

  /**
   * @generated from field: int32 movement_remaining = 3;
   */
  movementRemaining: number;

  /**
   * Updated room with new positions
   *
   * @generated from field: dnd5e.api.v1alpha1.Room updated_room = 4;
   */
  updatedRoom?: Room;

  /**
   * Updated combat state
   *
   * @generated from field: dnd5e.api.v1alpha1.CombatState combat_state = 5;
   */
  combatState?: CombatState;
};

/**
 * Describes the message dnd5e.api.v1alpha1.MoveCharacterResponse.
 * Use `create(MoveCharacterResponseSchema)` to create a new message.
 */
export const MoveCharacterResponseSchema: GenMessage<MoveCharacterResponse> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 11);

/**
 * EndTurnRequest ends the current entity's turn
 *
 * @generated from message dnd5e.api.v1alpha1.EndTurnRequest
 */
export type EndTurnRequest = Message<"dnd5e.api.v1alpha1.EndTurnRequest"> & {
  /**
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * Must match current turn
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;
};

/**
 * Describes the message dnd5e.api.v1alpha1.EndTurnRequest.
 * Use `create(EndTurnRequestSchema)` to create a new message.
 */
export const EndTurnRequestSchema: GenMessage<EndTurnRequest> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 12);

/**
 * TurnChangeEvent describes a turn transition
 *
 * @generated from message dnd5e.api.v1alpha1.TurnChangeEvent
 */
export type TurnChangeEvent = Message<"dnd5e.api.v1alpha1.TurnChangeEvent"> & {
  /**
   * @generated from field: string previous_entity_id = 1;
   */
  previousEntityId: string;

  /**
   * @generated from field: string next_entity_id = 2;
   */
  nextEntityId: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * True if this starts a new round
   *
   * @generated from field: bool new_round = 4;
   */
  newRound: boolean;
};

/**
 * Describes the message dnd5e.api.v1alpha1.TurnChangeEvent.
 * Use `create(TurnChangeEventSchema)` to create a new message.
 */
export const TurnChangeEventSchema: GenMessage<TurnChangeEvent> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 13);

/**
 * EndTurnResponse returns the updated state after turn end
 *
 * @generated from message dnd5e.api.v1alpha1.EndTurnResponse
 */
export type EndTurnResponse = Message<"dnd5e.api.v1alpha1.EndTurnResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: dnd5e.api.v1alpha1.CombatState combat_state = 2;
   */
  combatState?: CombatState;

  /**
   * @generated from field: dnd5e.api.v1alpha1.TurnChangeEvent turn_change = 3;
   */
  turnChange?: TurnChangeEvent;
};

/**
 * Describes the message dnd5e.api.v1alpha1.EndTurnResponse.
 * Use `create(EndTurnResponseSchema)` to create a new message.
 */
export const EndTurnResponseSchema: GenMessage<EndTurnResponse> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 14);

/**
 * AttackRequest represents a melee or ranged attack
 *
 * @generated from message dnd5e.api.v1alpha1.AttackRequest
 */
export type AttackRequest = Message<"dnd5e.api.v1alpha1.AttackRequest"> & {
  /**
   * @generated from field: string encounter_id = 1;
   */
  encounterId: string;

  /**
   * @generated from field: string attacker_id = 2;
   */
  attackerId: string;

  /**
   * @generated from field: string target_id = 3;
   */
  targetId: string;

  /**
   * Optional, uses default weapon if not specified
   *
   * @generated from field: string weapon_id = 4;
   */
  weaponId: string;
};

/**
 * Describes the message dnd5e.api.v1alpha1.AttackRequest.
 * Use `create(AttackRequestSchema)` to create a new message.
 */
export const AttackRequestSchema: GenMessage<AttackRequest> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 15);

/**
 * AttackResult contains the outcome of an attack
 *
 * @generated from message dnd5e.api.v1alpha1.AttackResult
 */
export type AttackResult = Message<"dnd5e.api.v1alpha1.AttackResult"> & {
  /**
   * @generated from field: bool hit = 1;
   */
  hit: boolean;

  /**
   * @generated from field: int32 attack_roll = 2;
   */
  attackRoll: number;

  /**
   * roll + modifiers
   *
   * @generated from field: int32 attack_total = 3;
   */
  attackTotal: number;

  /**
   * @generated from field: int32 target_ac = 4;
   */
  targetAc: number;

  /**
   * @generated from field: int32 damage = 5;
   */
  damage: number;

  /**
   * "slashing", "piercing", etc.
   *
   * @generated from field: string damage_type = 6;
   */
  damageType: string;

  /**
   * @generated from field: bool critical = 7;
   */
  critical: boolean;
};

/**
 * Describes the message dnd5e.api.v1alpha1.AttackResult.
 * Use `create(AttackResultSchema)` to create a new message.
 */
export const AttackResultSchema: GenMessage<AttackResult> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 16);

/**
 * AttackResponse returns the attack outcome
 *
 * @generated from message dnd5e.api.v1alpha1.AttackResponse
 */
export type AttackResponse = Message<"dnd5e.api.v1alpha1.AttackResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * @generated from field: dnd5e.api.v1alpha1.AttackResult result = 3;
   */
  result?: AttackResult;

  /**
   * @generated from field: dnd5e.api.v1alpha1.CombatState combat_state = 4;
   */
  combatState?: CombatState;

  /**
   * Updated if entities are defeated/removed
   *
   * @generated from field: dnd5e.api.v1alpha1.Room updated_room = 5;
   */
  updatedRoom?: Room;
};

/**
 * Describes the message dnd5e.api.v1alpha1.AttackResponse.
 * Use `create(AttackResponseSchema)` to create a new message.
 */
export const AttackResponseSchema: GenMessage<AttackResponse> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_encounter, 17);

/**
 * EncounterService manages D&D 5e encounters
 *
 * @generated from service dnd5e.api.v1alpha1.EncounterService
 */
export const EncounterService: GenService<{
  /**
   * DungeonStart generates room, places entities, and rolls initiative
   *
   * @generated from rpc dnd5e.api.v1alpha1.EncounterService.DungeonStart
   */
  dungeonStart: {
    methodKind: "unary";
    input: typeof DungeonStartRequestSchema;
    output: typeof DungeonStartResponseSchema;
  },
  /**
   * GetCombatState retrieves current state (mainly for reconnection)
   *
   * @generated from rpc dnd5e.api.v1alpha1.EncounterService.GetCombatState
   */
  getCombatState: {
    methodKind: "unary";
    input: typeof GetCombatStateRequestSchema;
    output: typeof GetCombatStateResponseSchema;
  },
  /**
   * Movement - client calculates valid moves, server validates
   *
   * @generated from rpc dnd5e.api.v1alpha1.EncounterService.MoveCharacter
   */
  moveCharacter: {
    methodKind: "unary";
    input: typeof MoveCharacterRequestSchema;
    output: typeof MoveCharacterResponseSchema;
  },
  /**
   * Turn Management
   *
   * @generated from rpc dnd5e.api.v1alpha1.EncounterService.EndTurn
   */
  endTurn: {
    methodKind: "unary";
    input: typeof EndTurnRequestSchema;
    output: typeof EndTurnResponseSchema;
  },
  /**
   * Combat Actions
   *
   * @generated from rpc dnd5e.api.v1alpha1.EncounterService.Attack
   */
  attack: {
    methodKind: "unary";
    input: typeof AttackRequestSchema;
    output: typeof AttackResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_dnd5e_api_v1alpha1_encounter, 0);

