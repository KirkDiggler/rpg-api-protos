syntax = "proto3";

package dnd5e.api.v1alpha1;

import "dnd5e/api/v1alpha1/common.proto";
import "dnd5e/api/v1alpha1/enums.proto";

// Service for D&D 5e character creation and management
// Supports both wizard-style step-by-step creation and free-form editing
service CharacterService {
  // Draft lifecycle
  rpc CreateDraft(CreateDraftRequest) returns (CreateDraftResponse);
  rpc GetDraft(GetDraftRequest) returns (GetDraftResponse);
  rpc ListDrafts(ListDraftsRequest) returns (ListDraftsResponse);
  rpc DeleteDraft(DeleteDraftRequest) returns (DeleteDraftResponse);

  // Section-based updates (supports skip-around editing)
  rpc UpdateName(UpdateNameRequest) returns (UpdateNameResponse);
  rpc UpdateRace(UpdateRaceRequest) returns (UpdateRaceResponse);
  rpc UpdateClass(UpdateClassRequest) returns (UpdateClassResponse);
  rpc UpdateBackground(UpdateBackgroundRequest) returns (UpdateBackgroundResponse);
  rpc UpdateAbilityScores(UpdateAbilityScoresRequest) returns (UpdateAbilityScoresResponse);
  rpc UpdateSkills(UpdateSkillsRequest) returns (UpdateSkillsResponse);

  // Validation
  rpc ValidateDraft(ValidateDraftRequest) returns (ValidateDraftResponse);

  // Character finalization
  rpc FinalizeDraft(FinalizeDraftRequest) returns (FinalizeDraftResponse);

  // Completed character operations
  rpc GetCharacter(GetCharacterRequest) returns (GetCharacterResponse);
  rpc ListCharacters(ListCharactersRequest) returns (ListCharactersResponse);
  rpc DeleteCharacter(DeleteCharacterRequest) returns (DeleteCharacterResponse);

  // Data loading for character creation UI
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse);
  rpc ListClasses(ListClassesRequest) returns (ListClassesResponse);
  rpc ListBackgrounds(ListBackgroundsRequest) returns (ListBackgroundsResponse);
  rpc GetRaceDetails(GetRaceDetailsRequest) returns (GetRaceDetailsResponse);
  rpc GetClassDetails(GetClassDetailsRequest) returns (GetClassDetailsResponse);
  rpc GetBackgroundDetails(GetBackgroundDetailsRequest) returns (GetBackgroundDetailsResponse);
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse);

  // Dice rolling for character creation
  rpc RollAbilityScores(RollAbilityScoresRequest) returns (RollAbilityScoresResponse);

  // Equipment listing by type
  rpc ListEquipmentByType(ListEquipmentByTypeRequest) returns (ListEquipmentByTypeResponse);

  // Spell listing by level
  rpc ListSpellsByLevel(ListSpellsByLevelRequest) returns (ListSpellsByLevelResponse);
}

// Ability scores for a character
message AbilityScores {
  // Strength score (3-18 before racial modifiers)
  int32 strength = 1;

  // Dexterity score (3-18 before racial modifiers)
  int32 dexterity = 2;

  // Constitution score (3-18 before racial modifiers)
  int32 constitution = 3;

  // Intelligence score (3-18 before racial modifiers)
  int32 intelligence = 4;

  // Wisdom score (3-18 before racial modifiers)
  int32 wisdom = 5;

  // Charisma score (3-18 before racial modifiers)
  int32 charisma = 6;
}

// A complete D&D 5e character
message Character {
  // Unique identifier
  string id = 1;

  // Character name
  string name = 2;

  // Character level (starts at 1)
  int32 level = 3;

  // Experience points
  int32 experience_points = 4;

  // Character race
  Race race = 5;

  // Character subrace if applicable
  Subrace subrace = 6;

  // Character class
  Class class = 7;

  // Character background
  Background background = 8;

  // Character alignment
  Alignment alignment = 9;

  // Final ability scores (with racial modifiers applied)
  AbilityScores ability_scores = 10;

  // Ability modifiers (calculated from scores)
  AbilityModifiers ability_modifiers = 11;

  // Calculated combat values
  CombatStats combat_stats = 12;

  // Proficiencies
  Proficiencies proficiencies = 13;

  // Known languages
  repeated Language languages = 14;

  // Current hit points
  int32 current_hit_points = 15;

  // Temporary hit points
  int32 temporary_hit_points = 16;

  // Session association if any
  string session_id = 17;

  // Metadata
  CharacterMetadata metadata = 18;
}

// Ability modifiers calculated from scores
message AbilityModifiers {
  int32 strength = 1;
  int32 dexterity = 2;
  int32 constitution = 3;
  int32 intelligence = 4;
  int32 wisdom = 5;
  int32 charisma = 6;
}

// Combat-related statistics
message CombatStats {
  // Maximum hit points
  int32 hit_point_maximum = 1;

  // Armor class
  int32 armor_class = 2;

  // Initiative modifier
  int32 initiative = 3;

  // Base movement speed in feet
  int32 speed = 4;

  // Proficiency bonus
  int32 proficiency_bonus = 5;

  // Hit dice (e.g., 1d10 for fighter)
  string hit_dice = 6;
}

// Character proficiencies
message Proficiencies {
  // Skill proficiencies
  repeated Skill skills = 1;

  // Saving throw proficiencies
  repeated Ability saving_throws = 2;

  // Armor proficiencies (as strings for now)
  repeated string armor = 3;

  // Weapon proficiencies (as strings for now)
  repeated string weapons = 4;

  // Tool proficiencies (as strings for now)
  repeated string tools = 5;
}

// Character metadata
message CharacterMetadata {
  // When the character was created
  int64 created_at = 1;

  // When the character was last updated
  int64 updated_at = 2;

  // Player/user who owns this character
  string player_id = 3;
}

// Request to get a character
message GetCharacterRequest {
  // The character ID to retrieve
  string character_id = 1;
}

// Response containing a character
message GetCharacterResponse {
  // The requested character
  Character character = 1;
}

// Request to list characters
message ListCharactersRequest {
  // Maximum number of characters to return (1-100, default 20)
  int32 page_size = 1;

  // Page token from previous response
  string page_token = 2;

  // Filter by session ID
  string session_id = 3;

  // Filter by player ID
  string player_id = 4;
}

// Response containing a list of characters
message ListCharactersResponse {
  // The list of characters
  repeated Character characters = 1;

  // Token for next page if available
  string next_page_token = 2;

  // Total number of characters matching filters
  int32 total_size = 3;
}

// Request to update a character
message UpdateCharacterRequest {
  // The character to update (ID required)
  Character character = 1;

  // Field mask to specify which fields to update
  // For now, we'll allow updating specific fields
  repeated string update_mask = 2;
}

// Response from character update
message UpdateCharacterResponse {
  // The updated character
  Character character = 1;
}

// Request to delete a character
message DeleteCharacterRequest {
  // The character ID to delete
  string character_id = 1;
}

// Response from character deletion
message DeleteCharacterResponse {
  // Confirmation message
  string message = 1;
}

// Character draft with optional fields
message CharacterDraft {
  // Unique identifier
  string id = 1;

  // Player creating this character
  string player_id = 2;

  // Session if part of one
  string session_id = 3;

  // All fields are optional during draft
  string name = 4;
  Race race = 5;
  Subrace subrace = 6;
  Class class = 7;
  Background background = 8;
  AbilityScores ability_scores = 9;
  Alignment alignment = 10;
  repeated Skill starting_skills = 11;
  repeated Language additional_languages = 12;

  // Track what steps are complete
  CreationProgress progress = 13;

  // When this draft expires (e.g., 30 days)
  int64 expires_at = 14;

  // Metadata
  DraftMetadata metadata = 15;
}

// Tracks which parts of character creation are complete
message CreationProgress {
  bool has_name = 1;
  bool has_race = 2;
  bool has_class = 3;
  bool has_background = 4;
  bool has_ability_scores = 5;
  bool has_skills = 6;
  bool has_languages = 7;

  // Overall completion percentage
  int32 completion_percentage = 8;

  // What step they're currently on
  CreationStep current_step = 9;
}

// Steps in character creation
enum CreationStep {
  CREATION_STEP_UNSPECIFIED = 0;
  CREATION_STEP_NAME = 1;
  CREATION_STEP_RACE = 2;
  CREATION_STEP_CLASS = 3;
  CREATION_STEP_BACKGROUND = 4;
  CREATION_STEP_ABILITY_SCORES = 5;
  CREATION_STEP_SKILLS = 6;
  CREATION_STEP_LANGUAGES = 7;
  CREATION_STEP_REVIEW = 8;
}

// Draft metadata
message DraftMetadata {
  int64 created_at = 1;
  int64 updated_at = 2;
  string discord_channel_id = 3;
  string discord_message_id = 4;
}

// Request to create a draft
message CreateDraftRequest {
  string player_id = 1;
  string session_id = 2; // Optional

  // Can optionally provide initial data
  CharacterDraft initial_data = 3;
}

message CreateDraftResponse {
  CharacterDraft draft = 1;
}

// Request to get a draft
message GetDraftRequest {
  string draft_id = 1;
}

message GetDraftResponse {
  CharacterDraft draft = 1;
}

// Request to update a draft
message UpdateDraftRequest {
  string draft_id = 1;

  // Only provided fields will be updated
  CharacterDraft updates = 2;

  // Which fields to update (field mask pattern)
  repeated string update_mask = 3;
}

message UpdateDraftResponse {
  CharacterDraft draft = 1;

  // Any validation warnings (not errors)
  repeated ValidationWarning warnings = 2;
}

// Section-based update requests
message UpdateNameRequest {
  string draft_id = 1;
  string name = 2;
}

message UpdateRaceRequest {
  string draft_id = 1;
  Race race = 2;
  Subrace subrace = 3; // Optional, required for some races
}

message UpdateClassRequest {
  string draft_id = 1;
  Class class = 2;
}

message UpdateBackgroundRequest {
  string draft_id = 1;
  Background background = 2;
}

message UpdateAbilityScoresRequest {
  string draft_id = 1;

  // Choose how to set ability scores
  oneof scores_input {
    // Manually set ability scores
    AbilityScores ability_scores = 2;

    // Assign rolled dice to abilities
    RollAssignments roll_assignments = 3;
  }
}

message UpdateSkillsRequest {
  string draft_id = 1;
  repeated Skill skills = 2;
}

// Section-based update responses
message UpdateNameResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

message UpdateRaceResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

message UpdateClassResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

message UpdateBackgroundResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

message UpdateAbilityScoresResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

message UpdateSkillsResponse {
  CharacterDraft draft = 1;
  repeated ValidationWarning warnings = 2;
}

enum WarningType {
  WARNING_TYPE_UNSPECIFIED = 0;
  WARNING_TYPE_MISSING_REQUIRED = 1;
  WARNING_TYPE_INVALID_COMBINATION = 2;
  WARNING_TYPE_SUBOPTIMAL_CHOICE = 3;
}

// Request to list drafts
message ListDraftsRequest {
  string player_id = 1;
  string session_id = 2; // Optional filter
  int32 page_size = 3;
  string page_token = 4;
}

message ListDraftsResponse {
  repeated CharacterDraft drafts = 1;
  string next_page_token = 2;
}

// Request to validate draft
message ValidateDraftRequest {
  string draft_id = 1;
}

message ValidateDraftResponse {
  bool is_complete = 1;
  bool is_valid = 2;

  repeated ValidationError errors = 3;
  repeated ValidationWarning warnings = 4;

  // What's still needed
  repeated CreationStep missing_steps = 5;
}

// Request to finalize draft
message FinalizeDraftRequest {
  string draft_id = 1;
}

message FinalizeDraftResponse {
  Character character = 1;

  // Draft is automatically deleted after finalization
  bool draft_deleted = 2;
}

// Request to delete draft
message DeleteDraftRequest {
  string draft_id = 1;
}

message DeleteDraftResponse {
  string message = 1;
}

// Data loading messages for character creation UI

// Detailed race information for selection UI
message RaceInfo {
  // Basic identification
  string id = 1;
  string name = 2;
  string description = 3;

  // Mechanical information
  int32 speed = 4;
  Size size = 5;

  // Ability score increases
  map<string, int32> ability_bonuses = 6;

  // Racial traits
  repeated RacialTrait traits = 7;

  // Available subraces
  repeated SubraceInfo subraces = 8;

  // Starting proficiencies
  repeated string proficiencies = 9;

  // Starting languages
  repeated Language languages = 10;

  // Additional flavor text
  string age_description = 11;
  string alignment_description = 12;

  // Size description
  string size_description = 13;

  // Language choices (e.g., "choose 1 from any language")
  Choice language_options = 14;

  // Proficiency choices (e.g., "choose 2 skills from...")
  repeated Choice proficiency_options = 15;
}

// Subrace information
message SubraceInfo {
  string id = 1;
  string name = 2;
  string description = 3;

  // Additional ability bonuses from subrace
  map<string, int32> ability_bonuses = 4;

  // Additional traits from subrace
  repeated RacialTrait traits = 5;

  // Additional languages from subrace
  repeated Language languages = 6;

  // Additional proficiencies from subrace
  repeated string proficiencies = 7;
}

// Racial trait description
message RacialTrait {
  string name = 1;
  string description = 2;

  // Whether this is a choice or automatic
  bool is_choice = 3;

  // Options if this is a choice
  repeated string options = 4;
}

// Generic choice structure for proficiencies, languages, etc
message Choice {
  // Type of choice (e.g., "language", "skill", "tool_proficiency")
  string type = 1;

  // How many to choose
  int32 choose = 2;

  // Available options
  repeated string options = 3;

  // Optional filter/category (e.g., "from_list", "any")
  string from = 4;
}

// Character size category
enum Size {
  SIZE_UNSPECIFIED = 0;
  SIZE_TINY = 1;
  SIZE_SMALL = 2;
  SIZE_MEDIUM = 3;
  SIZE_LARGE = 4;
  SIZE_HUGE = 5;
  SIZE_GARGANTUAN = 6;
}

// Detailed class information for selection UI
message ClassInfo {
  // Basic identification
  string id = 1;
  string name = 2;
  string description = 3;

  // Mechanical information
  string hit_die = 4;
  repeated string primary_abilities = 5;

  // Proficiencies
  repeated string armor_proficiencies = 6;
  repeated string weapon_proficiencies = 7;
  repeated string tool_proficiencies = 8;
  repeated string saving_throw_proficiencies = 9;

  // Skill choices
  int32 skill_choices_count = 10;
  repeated string available_skills = 11;

  // Starting equipment
  repeated string starting_equipment = 12;
  repeated EquipmentChoice equipment_choices = 13;

  // Class features at level 1
  repeated ClassFeature level_1_features = 14;

  // Spellcasting information (if applicable)
  SpellcastingInfo spellcasting = 15;

  // Proficiency choices (e.g., "choose 2 skills from class list")
  repeated Choice proficiency_choices = 16;
}

// Equipment choice for starting gear
message EquipmentChoice {
  string description = 1;
  repeated string options = 2;
  int32 choose_count = 3;
}

// Class feature description
message ClassFeature {
  string name = 1;
  string description = 2;
  int32 level = 3;

  // Whether this feature has choices
  bool has_choices = 4;
  repeated string choices = 5;
}

// Spellcasting information
message SpellcastingInfo {
  string spellcasting_ability = 1;
  bool ritual_casting = 2;
  string spellcasting_focus = 3;
  int32 cantrips_known = 4;
  int32 spells_known = 5;
  int32 spell_slots_level_1 = 6;
}

// Detailed background information for selection UI
message BackgroundInfo {
  // Basic identification
  string id = 1;
  string name = 2;
  string description = 3;

  // Mechanical benefits
  repeated string skill_proficiencies = 4;
  repeated string tool_proficiencies = 5;
  repeated Language languages = 6;
  int32 additional_languages = 7;

  // Starting equipment
  repeated string starting_equipment = 8;
  int32 starting_gold = 9;

  // Background feature
  string feature_name = 10;
  string feature_description = 11;

  // Suggested characteristics
  repeated string personality_traits = 12;
  repeated string ideals = 13;
  repeated string bonds = 14;
  repeated string flaws = 15;
}

// Detailed feature information for class features, racial traits, etc.
message FeatureInfo {
  string id = 1;
  string name = 2;
  string description = 3;
  int32 level = 4;
  string class_name = 5;
  repeated Choice choices = 6;
  bool has_choices = 7;
  SpellSelectionInfo spell_selection = 8;
}

// Programmatic spell selection requirements
message SpellSelectionInfo {
  int32 spells_to_select = 1;     // Number of spells to select
  int32 spell_level = 2;          // Required spell level (0 for cantrips)
  repeated int32 spell_levels = 3; // Multiple allowed spell levels
  repeated string spell_lists = 4; // Allowed spell lists (e.g., "wizard", "cleric")
  string selection_type = 5;      // "spellbook", "known", "prepared"
  bool requires_replace = 6;      // Whether spells can be replaced on level up
}

// Request to list races
message ListRacesRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;

  // Optional filters
  bool include_subraces = 3;
}

// Response with race list
message ListRacesResponse {
  repeated RaceInfo races = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to list classes
message ListClassesRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;

  // Optional filters
  bool include_spellcasters_only = 3;
  bool include_features = 4;
}

// Response with class list
message ListClassesResponse {
  repeated ClassInfo classes = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to list backgrounds
message ListBackgroundsRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;
}

// Response with background list
message ListBackgroundsResponse {
  repeated BackgroundInfo backgrounds = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to get detailed race information
message GetRaceDetailsRequest {
  string race_id = 1;
}

// Response with detailed race information
message GetRaceDetailsResponse {
  RaceInfo race = 1;
}

// Request to get detailed class information
message GetClassDetailsRequest {
  string class_id = 1;
}

// Response with detailed class information
message GetClassDetailsResponse {
  ClassInfo class = 1;
}

// Request to get detailed background information
message GetBackgroundDetailsRequest {
  string background_id = 1;
}

// Response with detailed background information
message GetBackgroundDetailsResponse {
  BackgroundInfo background = 1;
}

// Request for a specific feature by its ID
message GetFeatureRequest {
  string feature_id = 1;
}

// Response with detailed feature information
message GetFeatureResponse {
  FeatureInfo feature = 1;
}

// Dice rolling messages for ability scores

// Request to roll ability scores for a character draft
message RollAbilityScoresRequest {
  string draft_id = 1;
}

// A single ability score roll (4d6 drop lowest)
message AbilityScoreRoll {
  // Unique identifier for this roll (roll_1, roll_2, etc.)
  string roll_id = 1;

  // The individual dice that were rolled (4 dice)
  repeated int32 dice = 2;

  // The sum of the highest 3 dice (final ability score value)
  int32 total = 3;

  // The dice value that was dropped (lowest)
  int32 dropped = 4;

  // Human readable notation (e.g., "4d6 drop lowest: [6,5,4,1] = 15")
  string notation = 5;
}

// Response containing 6 ability score rolls
message RollAbilityScoresResponse {
  // Array of 6 rolls that can be assigned to abilities
  repeated AbilityScoreRoll rolls = 1;

  // Unix timestamp when these rolls expire (15 minutes from creation)
  int64 expires_at = 2;
}

// Roll assignment mapping for ability scores
message RollAssignments {
  string strength_roll_id = 1;
  string dexterity_roll_id = 2;
  string constitution_roll_id = 3;
  string intelligence_roll_id = 4;
  string wisdom_roll_id = 5;
  string charisma_roll_id = 6;
}

// Equipment messages

// Cost information for equipment
message Cost {
  int32 quantity = 1;
  string unit = 2; // "gp", "sp", "cp", etc.
}

// Weight information for equipment
message Weight {
  int32 quantity = 1; // Weight value in fixed-point representation (e.g., grams or ounces)
  string unit = 2; // Unit of measurement (e.g., "g", "oz", "lbs")
}

// Equipment item
message Equipment {
  string id = 1;
  string name = 2;
  string category = 3; // "simple-weapon", "martial-weapon", etc.
  Cost cost = 4;
  Weight weight = 5;
  string description = 6;

  // Equipment type-specific data
  oneof equipment_data {
    WeaponData weapon_data = 7;
    ArmorData armor_data = 8;
    GearData gear_data = 9;
  }
}

// Weapon-specific data
message WeaponData {
  string weapon_category = 1; // "simple", "martial"
  string damage_dice = 2; // "1d6", "1d8", etc.
  string damage_type = 3; // "slashing", "piercing", etc.
  repeated string properties = 4; // "light", "finesse", etc.
  string range = 5; // "melee", "ranged"
  int32 normal_range = 6; // range in feet for ranged weapons
  int32 long_range = 7; // long range in feet for ranged weapons
}

// Armor-specific data
message ArmorData {
  string armor_category = 1; // "light", "medium", "heavy", "shield"
  int32 base_ac = 2;
  bool dex_bonus = 3;
  bool has_dex_limit = 4; // Indicates if max_dex_bonus is applicable
  int32 max_dex_bonus = 5; // Maximum Dexterity bonus to AC, valid only if has_dex_limit is true
  int32 str_minimum = 6;
  bool stealth_disadvantage = 7;
}

// General gear data
message GearData {
  string gear_category = 1; // "adventuring-gear", "tools", etc.
  repeated string properties = 2;
}

// Spell messages

// Spell item
message Spell {
  string id = 1;
  string name = 2;
  int32 level = 3; // 0-9 (0 = cantrips)
  string school = 4; // "evocation", "abjuration", etc.
  repeated string classes = 5; // Classes that can cast this spell
  string casting_time = 6; // "1 action", "1 bonus action", etc.
  string range = 7; // "Touch", "30 feet", etc.
  string duration = 8; // "Instantaneous", "1 minute", etc.
  bool ritual = 9;
  bool concentration = 10;
  string components = 11; // "V, S, M", etc.
  string description = 12;

  // Spell damage information
  SpellDamage damage = 13;

  // Area of effect
  AreaOfEffect area_of_effect = 14;
}

// Spell damage information
message SpellDamage {
  string damage_type = 1;
  repeated DamageAtSlotLevel damage_at_slot_level = 2; // List of damage dice by slot level
}

// Damage at a specific slot level
message DamageAtSlotLevel {
  int32 slot_level = 1; // Spell slot level (0-9)
  string damage_dice = 2; // Damage dice (e.g., "2d6", "3d8")
}

// Area of effect information
message AreaOfEffect {
  string type = 1; // "sphere", "cone", "line", etc.
  int32 size = 2; // radius, length, etc.
}

// List equipment by type

// Request to list equipment by type
message ListEquipmentByTypeRequest {
  EquipmentType equipment_type = 1; // Type of equipment to filter by
  int32 page_size = 2;
  string page_token = 3;
}

// Response with equipment list
message ListEquipmentByTypeResponse {
  repeated Equipment equipment = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// List spells by level

// Request to list spells by level
message ListSpellsByLevelRequest {
  int32 level = 1; // 0-9 (0 = cantrips)
  Class class = 2; // Optional: filter by class
  int32 page_size = 3;
  string page_token = 4;
}

// Response with spell list
message ListSpellsByLevelResponse {
  repeated Spell spells = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}
