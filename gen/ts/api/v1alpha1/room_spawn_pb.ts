// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file api/v1alpha1/room_spawn.proto (package api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Entity, PageInfo, Position, RoomError } from "./room_common_pb";
import { file_api_v1alpha1_room_common } from "./room_common_pb";
import type { BoundingBox } from "./room_spatial_pb";
import { file_api_v1alpha1_room_spatial } from "./room_spatial_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/room_spawn.proto.
 */
export const file_api_v1alpha1_room_spawn: GenFile = /*@__PURE__*/
  fileDesc("Ch1hcGkvdjFhbHBoYTEvcm9vbV9zcGF3bi5wcm90bxIMYXBpLnYxYWxwaGExItkBChJTcGF3bkVudGl0eVJlcXVlc3QSDwoHcm9vbV9pZBgBIAEoCRI5ChFlbnRpdHlfZGVmaW5pdGlvbhgCIAEoCzIeLmFwaS52MWFscGhhMS5FbnRpdHlEZWZpbml0aW9uEjEKDXNwYXduX29wdGlvbnMYAyABKAsyGi5hcGkudjFhbHBoYTEuU3Bhd25PcHRpb25zEkQKFGxvY2F0aW9uX3ByZWZlcmVuY2VzGAQgASgLMiYuYXBpLnYxYWxwaGExLlNwYXduTG9jYXRpb25QcmVmZXJlbmNlcyKIBAoQRW50aXR5RGVmaW5pdGlvbhITCgtlbnRpdHlfdHlwZRgBIAEoCRIMCgRuYW1lGAIgASgJEgwKBHNpemUYAyABKAESQgoKcHJvcGVydGllcxgEIAMoCzIuLmFwaS52MWFscGhhMS5FbnRpdHlEZWZpbml0aW9uLlByb3BlcnRpZXNFbnRyeRIRCglzcHJpdGVfaWQYBSABKAkSDQoFY29sb3IYBiABKAkSFwoPYmxvY2tzX21vdmVtZW50GAcgASgIEhwKFGJsb2Nrc19saW5lX29mX3NpZ2h0GAggASgIEhYKDmlzX2ludGVyYWN0aXZlGAkgASgIEjUKDmNoYXJhY3Rlcl9kYXRhGAogASgLMhsuYXBpLnYxYWxwaGExLkNoYXJhY3RlckRhdGFIABIxCgxtb25zdGVyX2RhdGEYCyABKAsyGS5hcGkudjFhbHBoYTEuTW9uc3RlckRhdGFIABIvCgtvYmplY3RfZGF0YRgMIAEoCzIYLmFwaS52MWFscGhhMS5PYmplY3REYXRhSAASMQoMdGVycmFpbl9kYXRhGA0gASgLMhkuYXBpLnYxYWxwaGExLlRlcnJhaW5EYXRhSAAaMQoPUHJvcGVydGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCDQoLZW50aXR5X2RhdGEiqAEKDUNoYXJhY3RlckRhdGESFAoMY2hhcmFjdGVyX2lkGAEgASgJEhEKCXBsYXllcl9pZBgCIAEoCRINCgVsZXZlbBgDIAEoBRIaChJjdXJyZW50X2hpdF9wb2ludHMYBCABKAUSFgoObWF4X2hpdF9wb2ludHMYBSABKAUSEwoLYXJtb3JfY2xhc3MYBiABKAUSFgoObW92ZW1lbnRfc3BlZWQYByABKAUixwEKC01vbnN0ZXJEYXRhEhQKDG1vbnN0ZXJfdHlwZRgBIAEoCRIYChBjaGFsbGVuZ2VfcmF0aW5nGAIgASgBEhoKEmN1cnJlbnRfaGl0X3BvaW50cxgDIAEoBRIWCg5tYXhfaGl0X3BvaW50cxgEIAEoBRITCgthcm1vcl9jbGFzcxgFIAEoBRIWCg5tb3ZlbWVudF9zcGVlZBgGIAEoBRISCgppc19ob3N0aWxlGAcgASgIEhMKC2FpX2JlaGF2aW9yGAggASgJIosBCgpPYmplY3REYXRhEhcKD29iamVjdF9jYXRlZ29yeRgBIAEoCRISCgppc19tb3ZhYmxlGAIgASgIEhcKD2lzX2ludGVyYWN0YWJsZRgDIAEoCBINCgVzdGF0ZRgEIAEoCRIoCghjb250ZW50cxgFIAMoCzIWLmFwaS52MWFscGhhMS5Mb290SXRlbSKCAQoLVGVycmFpbkRhdGESFAoMdGVycmFpbl90eXBlGAEgASgJEhsKE21vdmVtZW50X211bHRpcGxpZXIYAiABKAESFAoMaXNfaGF6YXJkb3VzGAMgASgIEhMKC2RhbWFnZV90eXBlGAQgASgJEhUKDWRhbWFnZV9hbW91bnQYBSABKAUiXQoITG9vdEl0ZW0SDwoHaXRlbV9pZBgBIAEoCRIMCgRuYW1lGAIgASgJEhAKCHF1YW50aXR5GAMgASgFEg4KBnJhcml0eRgEIAEoCRIQCgh2YWx1ZV9ncBgFIAEoBSKqAQoMU3Bhd25PcHRpb25zEhoKEnZhbGlkYXRlX3BsYWNlbWVudBgBIAEoCBIVCg1hdXRvX3Bvc2l0aW9uGAIgASgIEh0KFW1heF9wb3NpdGlvbl9hdHRlbXB0cxgDIAEoBRIVCg1hbGxvd19vdmVybGFwGAQgASgIEhwKFHJhbmRvbWl6ZV9wcm9wZXJ0aWVzGAUgASgIEhMKC3JhbmRvbV9zZWVkGAYgASgJIvQBChhTcGF3bkxvY2F0aW9uUHJlZmVyZW5jZXMSMgoScHJlZmVycmVkX3Bvc2l0aW9uGAEgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEi8KDnByZWZlcnJlZF9hcmVhGAIgASgLMhcuYXBpLnYxYWxwaGExLlNwYXduQXJlYRIzCgtjb25zdHJhaW50cxgDIAEoCzIeLmFwaS52MWFscGhhMS5TcGF3bkNvbnN0cmFpbnRzEj4KFGRpc3RhbmNlX3ByZWZlcmVuY2VzGAQgAygLMiAuYXBpLnYxYWxwaGExLkRpc3RhbmNlUHJlZmVyZW5jZSLUAQoJU3Bhd25BcmVhEi4KCWFyZWFfdHlwZRgBIAEoDjIbLmFwaS52MWFscGhhMS5TcGF3bkFyZWFUeXBlEioKBmNpcmNsZRgCIAEoCzIYLmFwaS52MWFscGhhMS5DaXJjbGVBcmVhSAASMAoJcmVjdGFuZ2xlGAMgASgLMhsuYXBpLnYxYWxwaGExLlJlY3RhbmdsZUFyZWFIABIqCgZjdXN0b20YBCABKAsyGC5hcGkudjFhbHBoYTEuQ3VzdG9tQXJlYUgAQg0KC2FyZWFfcGFyYW1zIkQKCkNpcmNsZUFyZWESJgoGY2VudGVyGAEgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEg4KBnJhZGl1cxgCIAEoASJnCg1SZWN0YW5nbGVBcmVhEigKCHRvcF9sZWZ0GAEgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEiwKDGJvdHRvbV9yaWdodBgCIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbiI2CgpDdXN0b21BcmVhEigKCHZlcnRpY2VzGAEgAygLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uItUBChBTcGF3bkNvbnN0cmFpbnRzEhsKE2F2b2lkX3RlcnJhaW5fdHlwZXMYASADKAkSGgoSYXZvaWRfZW50aXR5X3R5cGVzGAIgAygJEhkKEW1pbl93YWxsX2Rpc3RhbmNlGAMgASgBEhsKE21pbl9lbnRpdHlfZGlzdGFuY2UYBCABKAESIAoYbWF4X2Rpc3RhbmNlX2Zyb21fY2VudGVyGAUgASgBEi4KDnJlcXVpcmVfbG9zX3RvGAYgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uImMKEkRpc3RhbmNlUHJlZmVyZW5jZRIOCgZ0YXJnZXQYASABKAkSGgoScHJlZmVycmVkX2Rpc3RhbmNlGAIgASgBEhEKCXRvbGVyYW5jZRgDIAEoARIOCgZ3ZWlnaHQYBCABKAEixgEKE1NwYXduRW50aXR5UmVzcG9uc2USJAoGZW50aXR5GAEgASgLMhQuYXBpLnYxYWxwaGExLkVudGl0eRIvCg9hY3R1YWxfcG9zaXRpb24YAiABKAsyFi5hcGkudjFhbHBoYTEuUG9zaXRpb24SLQoLc3Bhd25fc3RhdHMYAyABKAsyGC5hcGkudjFhbHBoYTEuU3Bhd25TdGF0cxIpCgh3YXJuaW5ncxgEIAMoCzIXLmFwaS52MWFscGhhMS5Sb29tRXJyb3IikQEKClNwYXduU3RhdHMSFQoNc3Bhd25fdGltZV9tcxgBIAEoAxIZChFwb3NpdGlvbl9hdHRlbXB0cxgCIAEoBRIaChJ1c2VkX2F1dG9fcG9zaXRpb24YAyABKAgSHwoXZGlzdGFuY2VfZnJvbV9wcmVmZXJyZWQYBCABKAESFAoMc3Bhd25fbWV0aG9kGAUgASgJItkBChxTcGF3bk11bHRpcGxlRW50aXRpZXNSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSNQoIZW50aXRpZXMYAiADKAsyIy5hcGkudjFhbHBoYTEuRW50aXR5U3Bhd25EZWZpbml0aW9uEjIKDmdsb2JhbF9vcHRpb25zGAMgASgLMhouYXBpLnYxYWxwaGExLlNwYXduT3B0aW9ucxI9ChRjb29yZGluYXRpb25fb3B0aW9ucxgEIAEoCzIfLmFwaS52MWFscGhhMS5NdWx0aVNwYXduT3B0aW9ucyLdAQoVRW50aXR5U3Bhd25EZWZpbml0aW9uEjkKEWVudGl0eV9kZWZpbml0aW9uGAEgASgLMh4uYXBpLnYxYWxwaGExLkVudGl0eURlZmluaXRpb24SMQoNc3Bhd25fb3B0aW9ucxgCIAEoCzIaLmFwaS52MWFscGhhMS5TcGF3bk9wdGlvbnMSRAoUbG9jYXRpb25fcHJlZmVyZW5jZXMYAyABKAsyJi5hcGkudjFhbHBoYTEuU3Bhd25Mb2NhdGlvblByZWZlcmVuY2VzEhAKCHByaW9yaXR5GAQgASgFIrMBChFNdWx0aVNwYXduT3B0aW9ucxIYChBtYWludGFpbl9zcGFjaW5nGAEgASgIEiEKGW1pbl9pbnRlcl9lbnRpdHlfZGlzdGFuY2UYAiABKAESFgoOYWxsX29yX25vdGhpbmcYAyABKAgSEgoKdGltZW91dF9tcxgEIAEoBRI1CgtzcGF3bl9vcmRlchgFIAEoDjIgLmFwaS52MWFscGhhMS5TcGF3bk9yZGVyU3RyYXRlZ3kitgEKHVNwYXduTXVsdGlwbGVFbnRpdGllc1Jlc3BvbnNlEi4KEHNwYXduZWRfZW50aXRpZXMYASADKAsyFC5hcGkudjFhbHBoYTEuRW50aXR5EjEKDWZhaWxlZF9zcGF3bnMYAiADKAsyGi5hcGkudjFhbHBoYTEuU3Bhd25GYWlsdXJlEjIKC3NwYXduX3N0YXRzGAMgASgLMh0uYXBpLnYxYWxwaGExLk11bHRpU3Bhd25TdGF0cyKhAQoMU3Bhd25GYWlsdXJlEjkKEWVudGl0eV9kZWZpbml0aW9uGAEgASgLMh4uYXBpLnYxYWxwaGExLkVudGl0eURlZmluaXRpb24SFgoOZmFpbHVyZV9yZWFzb24YAiABKAkSJwoGZXJyb3JzGAMgAygLMhcuYXBpLnYxYWxwaGExLlJvb21FcnJvchIVCg1hdHRlbXB0c19tYWRlGAQgASgFIqABCg9NdWx0aVNwYXduU3RhdHMSGwoTdG90YWxfc3Bhd25fdGltZV9tcxgBIAEoAxIZChFzdWNjZXNzZnVsX3NwYXducxgCIAEoBRIVCg1mYWlsZWRfc3Bhd25zGAMgASgFEh0KFWF2ZXJhZ2Vfc3Bhd25fdGltZV9tcxgEIAEoARIfChd0b3RhbF9wb3NpdGlvbl9hdHRlbXB0cxgFIAEoBSLDAgoYU3Bhd25Gcm9tVGVtcGxhdGVSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSEwoLdGVtcGxhdGVfaWQYAiABKAkSWwoTdGVtcGxhdGVfcGFyYW1ldGVycxgDIAMoCzI+LmFwaS52MWFscGhhMS5TcGF3bkZyb21UZW1wbGF0ZVJlcXVlc3QuVGVtcGxhdGVQYXJhbWV0ZXJzRW50cnkSKwoKc3Bhd25fYXJlYRgEIAEoCzIXLmFwaS52MWFscGhhMS5TcGF3bkFyZWESPAoQdGVtcGxhdGVfb3B0aW9ucxgFIAEoCzIiLmFwaS52MWFscGhhMS5UZW1wbGF0ZVNwYXduT3B0aW9ucxo5ChdUZW1wbGF0ZVBhcmFtZXRlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpEBChRUZW1wbGF0ZVNwYXduT3B0aW9ucxITCgtyYW5kb21fc2VlZBgBIAEoCRIbChNkaWZmaWN1bHR5X21vZGlmaWVyGAIgASgBEhwKFHNjYWxlX3RvX3BhcnR5X2xldmVsGAMgASgIEhMKC3BhcnR5X2xldmVsGAQgASgFEhQKDG1heF9lbnRpdGllcxgFIAEoBSLhAQoZU3Bhd25Gcm9tVGVtcGxhdGVSZXNwb25zZRIuChBzcGF3bmVkX2VudGl0aWVzGAEgAygLMhQuYXBpLnYxYWxwaGExLkVudGl0eRIyCg10ZW1wbGF0ZV91c2VkGAIgASgLMhsuYXBpLnYxYWxwaGExLlNwYXduVGVtcGxhdGUSNQoLc3Bhd25fc3RhdHMYAyABKAsyIC5hcGkudjFhbHBoYTEuVGVtcGxhdGVTcGF3blN0YXRzEikKCHdhcm5pbmdzGAQgAygLMhcuYXBpLnYxYWxwaGExLlJvb21FcnJvciKWAQoSVGVtcGxhdGVTcGF3blN0YXRzEh4KFnRlbXBsYXRlX3NwYXduX3RpbWVfbXMYASABKAMSGAoQZW50aXRpZXNfc3Bhd25lZBgCIAEoBRIYChBzcGF3bl9yb2xsc19tYWRlGAMgASgFEhkKEWFjdHVhbF9kaWZmaWN1bHR5GAQgASgBEhEKCXNlZWRfdXNlZBgFIAEoCSKkAQoRTW92ZUVudGl0eVJlcXVlc3QSDwoHcm9vbV9pZBgBIAEoCRIRCgllbnRpdHlfaWQYAiABKAkSLAoMbmV3X3Bvc2l0aW9uGAMgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEj0KEG1vdmVtZW50X29wdGlvbnMYBCABKAsyIy5hcGkudjFhbHBoYTEuRW50aXR5TW92ZW1lbnRPcHRpb25zIqIBChVFbnRpdHlNb3ZlbWVudE9wdGlvbnMSGQoRdmFsaWRhdGVfbW92ZW1lbnQYASABKAgSFwoPdXNlX3BhdGhmaW5kaW5nGAIgASgIEhoKEmFuaW1hdGlvbl9kdXJhdGlvbhgDIAEoARIWCg50cmlnZ2VyX2V2ZW50cxgEIAEoCBIhChljaGVja19vcHBvcnR1bml0eV9hdHRhY2tzGAUgASgIIukBChJNb3ZlRW50aXR5UmVzcG9uc2USJAoGZW50aXR5GAEgASgLMhQuYXBpLnYxYWxwaGExLkVudGl0eRIqCgpwYXRoX3Rha2VuGAIgAygLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhUKDW1vdmVtZW50X2Nvc3QYAyABKAESNQoQZXZlbnRzX3RyaWdnZXJlZBgEIAMoCzIbLmFwaS52MWFscGhhMS5Nb3ZlbWVudEV2ZW50EjMKDm1vdmVtZW50X3N0YXRzGAUgASgLMhsuYXBpLnYxYWxwaGExLk1vdmVtZW50U3RhdHMihgIKDU1vdmVtZW50RXZlbnQSEgoKZXZlbnRfdHlwZRgBIAEoCRIZChF0cmlnZ2VyaW5nX2VudGl0eRgCIAEoCRIVCg10YXJnZXRfZW50aXR5GAMgASgJEigKCHBvc2l0aW9uGAQgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhMKC2Rlc2NyaXB0aW9uGAUgASgJEj4KCmV2ZW50X2RhdGEYBiADKAsyKi5hcGkudjFhbHBoYTEuTW92ZW1lbnRFdmVudC5FdmVudERhdGFFbnRyeRowCg5FdmVudERhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpABCg1Nb3ZlbWVudFN0YXRzEhgKEG1vdmVtZW50X3RpbWVfbXMYASABKAMSGAoQdXNlZF9wYXRoZmluZGluZxgCIAEoCBIZChFwYXRoZmluZGluZ19ub2RlcxgDIAEoBRIWCg5kaXN0YW5jZV9tb3ZlZBgEIAEoARIYChBldmVudHNfdHJpZ2dlcmVkGAUgASgFIqcBChNVcGRhdGVFbnRpdHlSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSEQoJZW50aXR5X2lkGAIgASgJEjEKDWVudGl0eV91cGRhdGUYAyABKAsyGi5hcGkudjFhbHBoYTEuRW50aXR5VXBkYXRlEjkKDnVwZGF0ZV9vcHRpb25zGAQgASgLMiEuYXBpLnYxYWxwaGExLlVwZGF0ZUVudGl0eU9wdGlvbnMilQIKDEVudGl0eVVwZGF0ZRIMCgRuYW1lGAEgASgJEj4KCnByb3BlcnRpZXMYAiADKAsyKi5hcGkudjFhbHBoYTEuRW50aXR5VXBkYXRlLlByb3BlcnRpZXNFbnRyeRIRCglzcHJpdGVfaWQYAyABKAkSDQoFY29sb3IYBCABKAkSFwoPYmxvY2tzX21vdmVtZW50GAUgASgIEhwKFGJsb2Nrc19saW5lX29mX3NpZ2h0GAYgASgIEhYKDmlzX2ludGVyYWN0aXZlGAcgASgIEhMKC3VwZGF0ZV9tYXNrGAggAygJGjEKD1Byb3BlcnRpZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImEKE1VwZGF0ZUVudGl0eU9wdGlvbnMSFwoPdmFsaWRhdGVfdXBkYXRlGAEgASgIEhYKDnRyaWdnZXJfZXZlbnRzGAIgASgIEhkKEWJyb2FkY2FzdF9jaGFuZ2VzGAMgASgIIqgBChRVcGRhdGVFbnRpdHlSZXNwb25zZRIkCgZlbnRpdHkYASABKAsyFC5hcGkudjFhbHBoYTEuRW50aXR5EjMKEGV2ZW50c190cmlnZ2VyZWQYAiADKAsyGS5hcGkudjFhbHBoYTEuVXBkYXRlRXZlbnQSNQoMdXBkYXRlX3N0YXRzGAMgASgLMh8uYXBpLnYxYWxwaGExLkVudGl0eVVwZGF0ZVN0YXRzIrsCCgtVcGRhdGVFdmVudBISCgpldmVudF90eXBlGAEgASgJEhEKCWVudGl0eV9pZBgCIAEoCRIWCg5jaGFuZ2VkX2ZpZWxkcxgDIAMoCRJGCg9wcmV2aW91c192YWx1ZXMYBCADKAsyLS5hcGkudjFhbHBoYTEuVXBkYXRlRXZlbnQuUHJldmlvdXNWYWx1ZXNFbnRyeRI8CgpuZXdfdmFsdWVzGAUgAygLMiguYXBpLnYxYWxwaGExLlVwZGF0ZUV2ZW50Lk5ld1ZhbHVlc0VudHJ5GjUKE1ByZXZpb3VzVmFsdWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARowCg5OZXdWYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIl0KEUVudGl0eVVwZGF0ZVN0YXRzEhYKDnVwZGF0ZV90aW1lX21zGAEgASgDEhYKDmZpZWxkc191cGRhdGVkGAIgASgFEhgKEGV2ZW50c190cmlnZ2VyZWQYAyABKAUicAoTUmVtb3ZlRW50aXR5UmVxdWVzdBIPCgdyb29tX2lkGAEgASgJEhEKCWVudGl0eV9pZBgCIAEoCRI1Cg9yZW1vdmFsX29wdGlvbnMYAyABKAsyHC5hcGkudjFhbHBoYTEuUmVtb3ZhbE9wdGlvbnMiiAEKDlJlbW92YWxPcHRpb25zEhYKDnJlbW92YWxfcmVhc29uGAEgASgJEhEKCWRyb3BfbG9vdBgCIAEoCBIWCg50cmlnZ2VyX2V2ZW50cxgDIAEoCBIXCg9hbmltYXRlX3JlbW92YWwYBCABKAgSGgoSYW5pbWF0aW9uX2R1cmF0aW9uGAUgASgBIr4BChRSZW1vdmVFbnRpdHlSZXNwb25zZRIPCgdtZXNzYWdlGAEgASgJEiwKDGxvb3RfZHJvcHBlZBgCIAMoCzIWLmFwaS52MWFscGhhMS5Mb290SXRlbRI0ChBldmVudHNfdHJpZ2dlcmVkGAMgAygLMhouYXBpLnYxYWxwaGExLlJlbW92YWxFdmVudBIxCg1yZW1vdmFsX3N0YXRzGAQgASgLMhouYXBpLnYxYWxwaGExLlJlbW92YWxTdGF0cyLlAQoMUmVtb3ZhbEV2ZW50EhIKCmV2ZW50X3R5cGUYASABKAkSEQoJZW50aXR5X2lkGAIgASgJEigKCHBvc2l0aW9uGAMgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhMKC2Rlc2NyaXB0aW9uGAQgASgJEj0KCmV2ZW50X2RhdGEYBSADKAsyKS5hcGkudjFhbHBoYTEuUmVtb3ZhbEV2ZW50LkV2ZW50RGF0YUVudHJ5GjAKDkV2ZW50RGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiXQoMUmVtb3ZhbFN0YXRzEhcKD3JlbW92YWxfdGltZV9tcxgBIAEoAxIYChBldmVudHNfdHJpZ2dlcmVkGAIgASgFEhoKEmxvb3RfaXRlbXNfZHJvcHBlZBgDIAEoBSJPChBHZXRFbnRpdHlSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSEQoJZW50aXR5X2lkGAIgASgJEhcKD2luY2x1ZGVfZGV0YWlscxgDIAEoCCJnChFHZXRFbnRpdHlSZXNwb25zZRIkCgZlbnRpdHkYASABKAsyFC5hcGkudjFhbHBoYTEuRW50aXR5EiwKB2RldGFpbHMYAiABKAsyGy5hcGkudjFhbHBoYTEuRW50aXR5RGV0YWlscyLqAQoNRW50aXR5RGV0YWlscxISCgpjcmVhdGVkX2F0GAEgASgDEhIKCnVwZGF0ZWRfYXQYAiABKAMSNwoQbW92ZW1lbnRfaGlzdG9yeRgDIAMoCzIdLmFwaS52MWFscGhhMS5Nb3ZlbWVudEhpc3RvcnkSPQoTaW50ZXJhY3Rpb25faGlzdG9yeRgEIAMoCzIgLmFwaS52MWFscGhhMS5JbnRlcmFjdGlvbkhpc3RvcnkSOQoObGlmZXRpbWVfc3RhdHMYBSABKAsyIS5hcGkudjFhbHBoYTEuRW50aXR5TGlmZXRpbWVTdGF0cyKwAQoPTW92ZW1lbnRIaXN0b3J5EhEKCXRpbWVzdGFtcBgBIAEoAxItCg1mcm9tX3Bvc2l0aW9uGAIgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEisKC3RvX3Bvc2l0aW9uGAMgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhUKDW1vdmVtZW50X2Nvc3QYBCABKAESFwoPbW92ZW1lbnRfcmVhc29uGAUgASgJIvsBChJJbnRlcmFjdGlvbkhpc3RvcnkSEQoJdGltZXN0YW1wGAEgASgDEhgKEGludGVyYWN0aW9uX3R5cGUYAiABKAkSGgoSaW50ZXJhY3RpbmdfZW50aXR5GAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJEk8KEGludGVyYWN0aW9uX2RhdGEYBSADKAsyNS5hcGkudjFhbHBoYTEuSW50ZXJhY3Rpb25IaXN0b3J5LkludGVyYWN0aW9uRGF0YUVudHJ5GjYKFEludGVyYWN0aW9uRGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEikQEKE0VudGl0eUxpZmV0aW1lU3RhdHMSHAoUdG90YWxfZGlzdGFuY2VfbW92ZWQYASABKAESEgoKbW92ZV9jb3VudBgCIAEoBRIZChFpbnRlcmFjdGlvbl9jb3VudBgDIAEoBRIXCg90aW1lX2luX3Jvb21fbXMYBCABKAMSFAoMdXBkYXRlX2NvdW50GAUgASgFIs0BChNMaXN0RW50aXRpZXNSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSKgoGZmlsdGVyGAIgASgLMhouYXBpLnYxYWxwaGExLkVudGl0eUZpbHRlchIpCglwYWdlX2luZm8YAyABKAsyFi5hcGkudjFhbHBoYTEuUGFnZUluZm8SNQoMc29ydF9vcHRpb25zGAQgASgLMh8uYXBpLnYxYWxwaGExLkVudGl0eVNvcnRPcHRpb25zEhcKD2luY2x1ZGVfZGV0YWlscxgFIAEoCCKEAgoMRW50aXR5RmlsdGVyEhQKDGVudGl0eV90eXBlcxgBIAMoCRIUCgxuYW1lX3BhdHRlcm4YAiABKAkSNQoPcG9zaXRpb25fZmlsdGVyGAMgASgLMhwuYXBpLnYxYWxwaGExLlBvc2l0aW9uRmlsdGVyEkkKEHByb3BlcnR5X2ZpbHRlcnMYBCADKAsyLy5hcGkudjFhbHBoYTEuRW50aXR5RmlsdGVyLlByb3BlcnR5RmlsdGVyc0VudHJ5Eg4KBnN0YXRlcxgFIAMoCRo2ChRQcm9wZXJ0eUZpbHRlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIngKDlBvc2l0aW9uRmlsdGVyEiYKBmNlbnRlchgBIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhINCgVyYW5nZRgCIAEoARIvCgxib3VuZGluZ19ib3gYAyABKAsyGS5hcGkudjFhbHBoYTEuQm91bmRpbmdCb3gieQoRRW50aXR5U29ydE9wdGlvbnMSLgoHc29ydF9ieRgBIAEoDjIdLmFwaS52MWFscGhhMS5FbnRpdHlTb3J0RmllbGQSNAoJZGlyZWN0aW9uGAIgASgOMiEuYXBpLnYxYWxwaGExLkVudGl0eVNvcnREaXJlY3Rpb24ilwEKFExpc3RFbnRpdGllc1Jlc3BvbnNlEiYKCGVudGl0aWVzGAEgAygLMhQuYXBpLnYxYWxwaGExLkVudGl0eRIpCglwYWdlX2luZm8YAiABKAsyFi5hcGkudjFhbHBoYTEuUGFnZUluZm8SLAoFc3RhdHMYAyABKAsyHS5hcGkudjFhbHBoYTEuRW50aXR5TGlzdFN0YXRzItgBCg9FbnRpdHlMaXN0U3RhdHMSEwoLdG90YWxfY291bnQYASABKAUSFgoOcmV0dXJuZWRfY291bnQYAiABKAUSSwoQZW50aXRpZXNfYnlfdHlwZRgDIAMoCzIxLmFwaS52MWFscGhhMS5FbnRpdHlMaXN0U3RhdHMuRW50aXRpZXNCeVR5cGVFbnRyeRIUCgxhdmVyYWdlX3NpemUYBCABKAEaNQoTRW50aXRpZXNCeVR5cGVFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBIpEBChlGaW5kRW50aXRpZXNCeVR5cGVSZXF1ZXN0Eg8KB3Jvb21faWQYASABKAkSEwoLZW50aXR5X3R5cGUYAiABKAkSOQoPc2VhcmNoX2NyaXRlcmlhGAMgASgLMiAuYXBpLnYxYWxwaGExLlR5cGVTZWFyY2hDcml0ZXJpYRITCgttYXhfcmVzdWx0cxgEIAEoBSKuAgoSVHlwZVNlYXJjaENyaXRlcmlhElUKE3JlcXVpcmVkX3Byb3BlcnRpZXMYASADKAsyOC5hcGkudjFhbHBoYTEuVHlwZVNlYXJjaENyaXRlcmlhLlJlcXVpcmVkUHJvcGVydGllc0VudHJ5EjoKFHBvc2l0aW9uX2NvbnN0cmFpbnRzGAIgASgLMhwuYXBpLnYxYWxwaGExLlBvc2l0aW9uRmlsdGVyEjIKEHNpemVfY29uc3RyYWludHMYAyABKAsyGC5hcGkudjFhbHBoYTEuU2l6ZUZpbHRlchIWCg5hbGxvd2VkX3N0YXRlcxgEIAMoCRo5ChdSZXF1aXJlZFByb3BlcnRpZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjAKClNpemVGaWx0ZXISEAoIbWluX3NpemUYASABKAESEAoIbWF4X3NpemUYAiABKAEieQoaRmluZEVudGl0aWVzQnlUeXBlUmVzcG9uc2USJgoIZW50aXRpZXMYASADKAsyFC5hcGkudjFhbHBoYTEuRW50aXR5EjMKDHNlYXJjaF9zdGF0cxgCIAEoCzIdLmFwaS52MWFscGhhMS5UeXBlU2VhcmNoU3RhdHMieQoPVHlwZVNlYXJjaFN0YXRzEhYKDnNlYXJjaF90aW1lX21zGAEgASgDEhkKEWVudGl0aWVzX2V4YW1pbmVkGAIgASgFEhgKEGVudGl0aWVzX21hdGNoZWQYAyABKAUSGQoRcmVzdWx0c190cnVuY2F0ZWQYBCABKAgikgEKGUxpc3RTcGF3blRlbXBsYXRlc1JlcXVlc3QSMQoGZmlsdGVyGAEgASgLMiEuYXBpLnYxYWxwaGExLlNwYXduVGVtcGxhdGVGaWx0ZXISKQoJcGFnZV9pbmZvGAIgASgLMhYuYXBpLnYxYWxwaGExLlBhZ2VJbmZvEhcKD2luY2x1ZGVfZGV0YWlscxgDIAEoCCKdAQoTU3Bhd25UZW1wbGF0ZUZpbHRlchISCgpjYXRlZ29yaWVzGAEgAygJEg4KBnRoZW1lcxgCIAMoCRI3ChBkaWZmaWN1bHR5X3JhbmdlGAMgASgLMh0uYXBpLnYxYWxwaGExLkRpZmZpY3VsdHlSYW5nZRIUCgxlbnRpdHlfdHlwZXMYBCADKAkSEwoLc2VhcmNoX3Rlcm0YBSABKAkiQQoPRGlmZmljdWx0eVJhbmdlEhYKDm1pbl9kaWZmaWN1bHR5GAEgASgBEhYKDm1heF9kaWZmaWN1bHR5GAIgASgBIncKGkxpc3RTcGF3blRlbXBsYXRlc1Jlc3BvbnNlEi4KCXRlbXBsYXRlcxgBIAMoCzIbLmFwaS52MWFscGhhMS5TcGF3blRlbXBsYXRlEikKCXBhZ2VfaW5mbxgCIAEoCzIWLmFwaS52MWFscGhhMS5QYWdlSW5mbyLrAQoNU3Bhd25UZW1wbGF0ZRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEhAKCGNhdGVnb3J5GAQgASgJEg0KBXRoZW1lGAUgASgJEhkKEWRpZmZpY3VsdHlfcmF0aW5nGAYgASgBEjgKDWVudGl0eV9zcGF3bnMYByADKAsyIS5hcGkudjFhbHBoYTEuVGVtcGxhdGVFbnRpdHlTcGF3bhI1CghtZXRhZGF0YRgIIAEoCzIjLmFwaS52MWFscGhhMS5TcGF3blRlbXBsYXRlTWV0YWRhdGEi5QEKE1RlbXBsYXRlRW50aXR5U3Bhd24SOQoRZW50aXR5X2RlZmluaXRpb24YASABKAsyHi5hcGkudjFhbHBoYTEuRW50aXR5RGVmaW5pdGlvbhIZChFzcGF3bl9wcm9iYWJpbGl0eRgCIAEoARIRCgltaW5fY291bnQYAyABKAUSEQoJbWF4X2NvdW50GAQgASgFEhQKDHNwYXduX3dlaWdodBgFIAEoARI8ChRsb2NhdGlvbl9jb25zdHJhaW50cxgGIAEoCzIeLmFwaS52MWFscGhhMS5TcGF3bkNvbnN0cmFpbnRzIqoBChVTcGF3blRlbXBsYXRlTWV0YWRhdGESDgoGYXV0aG9yGAEgASgJEg8KB3ZlcnNpb24YAiABKAkSEgoKY3JlYXRlZF9hdBgDIAEoAxISCgp1cGRhdGVkX2F0GAQgASgDEjoKC3VzYWdlX3N0YXRzGAUgASgLMiUuYXBpLnYxYWxwaGExLlNwYXduVGVtcGxhdGVVc2FnZVN0YXRzEgwKBHRhZ3MYBiADKAkiyQEKF1NwYXduVGVtcGxhdGVVc2FnZVN0YXRzEhMKC3VzYWdlX2NvdW50GAEgASgDEhgKEGVudGl0aWVzX3NwYXduZWQYAiABKAMSIgoaYXZlcmFnZV9lbnRpdGllc19wZXJfc3Bhd24YAyABKAESGgoSc3Bhd25fc3VjY2Vzc19yYXRlGAQgASgBEhEKCWxhc3RfdXNlZBgFIAEoAxIWCg5hdmVyYWdlX3JhdGluZxgGIAEoARIUCgxyYXRpbmdfY291bnQYByABKAUiXgoaQ3JlYXRlU3Bhd25UZW1wbGF0ZVJlcXVlc3QSLQoIdGVtcGxhdGUYASABKAsyGy5hcGkudjFhbHBoYTEuU3Bhd25UZW1wbGF0ZRIRCglpc19wdWJsaWMYAiABKAgiXQobQ3JlYXRlU3Bhd25UZW1wbGF0ZVJlc3BvbnNlEi0KCHRlbXBsYXRlGAEgASgLMhsuYXBpLnYxYWxwaGExLlNwYXduVGVtcGxhdGUSDwoHbWVzc2FnZRgCIAEoCSJFChdHZXRTcGF3blRlbXBsYXRlUmVxdWVzdBITCgt0ZW1wbGF0ZV9pZBgBIAEoCRIVCg1pbmNsdWRlX3N0YXRzGAIgASgIIoUBChhHZXRTcGF3blRlbXBsYXRlUmVzcG9uc2USLQoIdGVtcGxhdGUYASABKAsyGy5hcGkudjFhbHBoYTEuU3Bhd25UZW1wbGF0ZRI6Cgt1c2FnZV9zdGF0cxgCIAEoCzIlLmFwaS52MWFscGhhMS5TcGF3blRlbXBsYXRlVXNhZ2VTdGF0cyKXAQoZQmF0Y2hTcGF3bkVudGl0aWVzUmVxdWVzdBIPCgdyb29tX2lkGAEgASgJEjYKEHNwYXduX29wZXJhdGlvbnMYAiADKAsyHC5hcGkudjFhbHBoYTEuU3Bhd25PcGVyYXRpb24SMQoNYmF0Y2hfb3B0aW9ucxgDIAEoCzIaLmFwaS52MWFscGhhMS5CYXRjaE9wdGlvbnMi2gEKDlNwYXduT3BlcmF0aW9uEhQKDG9wZXJhdGlvbl9pZBgBIAEoCRI5ChFlbnRpdHlfZGVmaW5pdGlvbhgCIAEoCzIeLmFwaS52MWFscGhhMS5FbnRpdHlEZWZpbml0aW9uEjEKDXNwYXduX29wdGlvbnMYAyABKAsyGi5hcGkudjFhbHBoYTEuU3Bhd25PcHRpb25zEkQKFGxvY2F0aW9uX3ByZWZlcmVuY2VzGAQgASgLMiYuYXBpLnYxYWxwaGExLlNwYXduTG9jYXRpb25QcmVmZXJlbmNlcyJnCgxCYXRjaE9wdGlvbnMSFgoOYWxsX29yX25vdGhpbmcYASABKAgSEgoKdGltZW91dF9tcxgCIAEoBRITCgtwYXJhbGxlbGlzbRgDIAEoBRIWCg5tYWludGFpbl9vcmRlchgEIAEoCCLDAQoaQmF0Y2hTcGF3bkVudGl0aWVzUmVzcG9uc2USOQoRc3VjY2Vzc2Z1bF9zcGF3bnMYASADKAsyHi5hcGkudjFhbHBoYTEuQmF0Y2hTcGF3blJlc3VsdBI2Cg1mYWlsZWRfc3Bhd25zGAIgAygLMh8uYXBpLnYxYWxwaGExLkJhdGNoU3Bhd25GYWlsdXJlEjIKC2JhdGNoX3N0YXRzGAMgASgLMh0uYXBpLnYxYWxwaGExLkJhdGNoU3Bhd25TdGF0cyJ9ChBCYXRjaFNwYXduUmVzdWx0EhQKDG9wZXJhdGlvbl9pZBgBIAEoCRIkCgZlbnRpdHkYAiABKAsyFC5hcGkudjFhbHBoYTEuRW50aXR5Ei0KC3NwYXduX3N0YXRzGAMgASgLMhguYXBpLnYxYWxwaGExLlNwYXduU3RhdHMipQEKEUJhdGNoU3Bhd25GYWlsdXJlEhQKDG9wZXJhdGlvbl9pZBgBIAEoCRI5ChFlbnRpdHlfZGVmaW5pdGlvbhgCIAEoCzIeLmFwaS52MWFscGhhMS5FbnRpdHlEZWZpbml0aW9uEhYKDmZhaWx1cmVfcmVhc29uGAMgASgJEicKBmVycm9ycxgEIAMoCzIXLmFwaS52MWFscGhhMS5Sb29tRXJyb3IiqAEKD0JhdGNoU3Bhd25TdGF0cxIbChN0b3RhbF9iYXRjaF90aW1lX21zGAEgASgDEh0KFXN1Y2Nlc3NmdWxfb3BlcmF0aW9ucxgCIAEoBRIZChFmYWlsZWRfb3BlcmF0aW9ucxgDIAEoBRIhChlhdmVyYWdlX29wZXJhdGlvbl90aW1lX21zGAQgASgBEhsKE3BhcmFsbGVsX29wZXJhdGlvbnMYBSABKAUilAEKGEJhdGNoTW92ZUVudGl0aWVzUmVxdWVzdBIPCgdyb29tX2lkGAEgASgJEjQKD21vdmVfb3BlcmF0aW9ucxgCIAMoCzIbLmFwaS52MWFscGhhMS5Nb3ZlT3BlcmF0aW9uEjEKDWJhdGNoX29wdGlvbnMYAyABKAsyGi5hcGkudjFhbHBoYTEuQmF0Y2hPcHRpb25zIqUBCg1Nb3ZlT3BlcmF0aW9uEhQKDG9wZXJhdGlvbl9pZBgBIAEoCRIRCgllbnRpdHlfaWQYAiABKAkSLAoMbmV3X3Bvc2l0aW9uGAMgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEj0KEG1vdmVtZW50X29wdGlvbnMYBCABKAsyIy5hcGkudjFhbHBoYTEuRW50aXR5TW92ZW1lbnRPcHRpb25zIr0BChlCYXRjaE1vdmVFbnRpdGllc1Jlc3BvbnNlEjcKEHN1Y2Nlc3NmdWxfbW92ZXMYASADKAsyHS5hcGkudjFhbHBoYTEuQmF0Y2hNb3ZlUmVzdWx0EjQKDGZhaWxlZF9tb3ZlcxgCIAMoCzIeLmFwaS52MWFscGhhMS5CYXRjaE1vdmVGYWlsdXJlEjEKC2JhdGNoX3N0YXRzGAMgASgLMhwuYXBpLnYxYWxwaGExLkJhdGNoTW92ZVN0YXRzIoIBCg9CYXRjaE1vdmVSZXN1bHQSFAoMb3BlcmF0aW9uX2lkGAEgASgJEiQKBmVudGl0eRgCIAEoCzIULmFwaS52MWFscGhhMS5FbnRpdHkSMwoObW92ZW1lbnRfc3RhdHMYAyABKAsyGy5hcGkudjFhbHBoYTEuTW92ZW1lbnRTdGF0cyJ8ChBCYXRjaE1vdmVGYWlsdXJlEhQKDG9wZXJhdGlvbl9pZBgBIAEoCRIRCgllbnRpdHlfaWQYAiABKAkSFgoOZmFpbHVyZV9yZWFzb24YAyABKAkSJwoGZXJyb3JzGAQgAygLMhcuYXBpLnYxYWxwaGExLlJvb21FcnJvciKoAQoOQmF0Y2hNb3ZlU3RhdHMSGwoTdG90YWxfYmF0Y2hfdGltZV9tcxgBIAEoAxIdChVzdWNjZXNzZnVsX29wZXJhdGlvbnMYAiABKAUSGQoRZmFpbGVkX29wZXJhdGlvbnMYAyABKAUSIQoZYXZlcmFnZV9vcGVyYXRpb25fdGltZV9tcxgEIAEoARIcChR0b3RhbF9kaXN0YW5jZV9tb3ZlZBgFIAEoASKaAQoaQmF0Y2hSZW1vdmVFbnRpdGllc1JlcXVlc3QSDwoHcm9vbV9pZBgBIAEoCRI4ChFyZW1vdmVfb3BlcmF0aW9ucxgCIAMoCzIdLmFwaS52MWFscGhhMS5SZW1vdmVPcGVyYXRpb24SMQoNYmF0Y2hfb3B0aW9ucxgDIAEoCzIaLmFwaS52MWFscGhhMS5CYXRjaE9wdGlvbnMicQoPUmVtb3ZlT3BlcmF0aW9uEhQKDG9wZXJhdGlvbl9pZBgBIAEoCRIRCgllbnRpdHlfaWQYAiABKAkSNQoPcmVtb3ZhbF9vcHRpb25zGAMgASgLMhwuYXBpLnYxYWxwaGExLlJlbW92YWxPcHRpb25zIskBChtCYXRjaFJlbW92ZUVudGl0aWVzUmVzcG9uc2USOwoSc3VjY2Vzc2Z1bF9yZW1vdmVzGAEgAygLMh8uYXBpLnYxYWxwaGExLkJhdGNoUmVtb3ZlUmVzdWx0EjgKDmZhaWxlZF9yZW1vdmVzGAIgAygLMiAuYXBpLnYxYWxwaGExLkJhdGNoUmVtb3ZlRmFpbHVyZRIzCgtiYXRjaF9zdGF0cxgDIAEoCzIeLmFwaS52MWFscGhhMS5CYXRjaFJlbW92ZVN0YXRzIm0KEUJhdGNoUmVtb3ZlUmVzdWx0EhQKDG9wZXJhdGlvbl9pZBgBIAEoCRIPCgdtZXNzYWdlGAIgASgJEjEKDXJlbW92YWxfc3RhdHMYAyABKAsyGi5hcGkudjFhbHBoYTEuUmVtb3ZhbFN0YXRzIn4KEkJhdGNoUmVtb3ZlRmFpbHVyZRIUCgxvcGVyYXRpb25faWQYASABKAkSEQoJZW50aXR5X2lkGAIgASgJEhYKDmZhaWx1cmVfcmVhc29uGAMgASgJEicKBmVycm9ycxgEIAMoCzIXLmFwaS52MWFscGhhMS5Sb29tRXJyb3IiqAEKEEJhdGNoUmVtb3ZlU3RhdHMSGwoTdG90YWxfYmF0Y2hfdGltZV9tcxgBIAEoAxIdChVzdWNjZXNzZnVsX29wZXJhdGlvbnMYAiABKAUSGQoRZmFpbGVkX29wZXJhdGlvbnMYAyABKAUSIQoZYXZlcmFnZV9vcGVyYXRpb25fdGltZV9tcxgEIAEoARIaChJ0b3RhbF9sb290X2Ryb3BwZWQYBSABKAUqhwEKDVNwYXduQXJlYVR5cGUSHwobU1BBV05fQVJFQV9UWVBFX1VOU1BFQ0lGSUVEEAASGgoWU1BBV05fQVJFQV9UWVBFX0NJUkNMRRABEh0KGVNQQVdOX0FSRUFfVFlQRV9SRUNUQU5HTEUQAhIaChZTUEFXTl9BUkVBX1RZUEVfQ1VTVE9NEAMqxQEKElNwYXduT3JkZXJTdHJhdGVneRIkCiBTUEFXTl9PUkRFUl9TVFJBVEVHWV9VTlNQRUNJRklFRBAAEiEKHVNQQVdOX09SREVSX1NUUkFURUdZX1BSSU9SSVRZEAESIgoeU1BBV05fT1JERVJfU1RSQVRFR1lfU0laRV9ERVNDEAISIQodU1BBV05fT1JERVJfU1RSQVRFR1lfU0laRV9BU0MQAxIfChtTUEFXTl9PUkRFUl9TVFJBVEVHWV9SQU5ET00QBCp7ChNFbnRpdHlTb3J0RGlyZWN0aW9uEiUKIUVOVElUWV9TT1JUX0RJUkVDVElPTl9VTlNQRUNJRklFRBAAEh0KGUVOVElUWV9TT1JUX0RJUkVDVElPTl9BU0MQARIeChpFTlRJVFlfU09SVF9ESVJFQ1RJT05fREVTQxACKtYBCg9FbnRpdHlTb3J0RmllbGQSIQodRU5USVRZX1NPUlRfRklFTERfVU5TUEVDSUZJRUQQABIaChZFTlRJVFlfU09SVF9GSUVMRF9OQU1FEAESGgoWRU5USVRZX1NPUlRfRklFTERfVFlQRRACEiAKHEVOVElUWV9TT1JUX0ZJRUxEX0NSRUFURURfQVQQAxIqCiZFTlRJVFlfU09SVF9GSUVMRF9ESVNUQU5DRV9GUk9NX0NFTlRFUhAEEhoKFkVOVElUWV9TT1JUX0ZJRUxEX1NJWkUQBTK6CwoMU3Bhd25TZXJ2aWNlElIKC1NwYXduRW50aXR5EiAuYXBpLnYxYWxwaGExLlNwYXduRW50aXR5UmVxdWVzdBohLmFwaS52MWFscGhhMS5TcGF3bkVudGl0eVJlc3BvbnNlEnAKFVNwYXduTXVsdGlwbGVFbnRpdGllcxIqLmFwaS52MWFscGhhMS5TcGF3bk11bHRpcGxlRW50aXRpZXNSZXF1ZXN0GisuYXBpLnYxYWxwaGExLlNwYXduTXVsdGlwbGVFbnRpdGllc1Jlc3BvbnNlEmQKEVNwYXduRnJvbVRlbXBsYXRlEiYuYXBpLnYxYWxwaGExLlNwYXduRnJvbVRlbXBsYXRlUmVxdWVzdBonLmFwaS52MWFscGhhMS5TcGF3bkZyb21UZW1wbGF0ZVJlc3BvbnNlEk8KCk1vdmVFbnRpdHkSHy5hcGkudjFhbHBoYTEuTW92ZUVudGl0eVJlcXVlc3QaIC5hcGkudjFhbHBoYTEuTW92ZUVudGl0eVJlc3BvbnNlElUKDFVwZGF0ZUVudGl0eRIhLmFwaS52MWFscGhhMS5VcGRhdGVFbnRpdHlSZXF1ZXN0GiIuYXBpLnYxYWxwaGExLlVwZGF0ZUVudGl0eVJlc3BvbnNlElUKDFJlbW92ZUVudGl0eRIhLmFwaS52MWFscGhhMS5SZW1vdmVFbnRpdHlSZXF1ZXN0GiIuYXBpLnYxYWxwaGExLlJlbW92ZUVudGl0eVJlc3BvbnNlEkwKCUdldEVudGl0eRIeLmFwaS52MWFscGhhMS5HZXRFbnRpdHlSZXF1ZXN0Gh8uYXBpLnYxYWxwaGExLkdldEVudGl0eVJlc3BvbnNlElUKDExpc3RFbnRpdGllcxIhLmFwaS52MWFscGhhMS5MaXN0RW50aXRpZXNSZXF1ZXN0GiIuYXBpLnYxYWxwaGExLkxpc3RFbnRpdGllc1Jlc3BvbnNlEmcKEkZpbmRFbnRpdGllc0J5VHlwZRInLmFwaS52MWFscGhhMS5GaW5kRW50aXRpZXNCeVR5cGVSZXF1ZXN0GiguYXBpLnYxYWxwaGExLkZpbmRFbnRpdGllc0J5VHlwZVJlc3BvbnNlEmcKEkxpc3RTcGF3blRlbXBsYXRlcxInLmFwaS52MWFscGhhMS5MaXN0U3Bhd25UZW1wbGF0ZXNSZXF1ZXN0GiguYXBpLnYxYWxwaGExLkxpc3RTcGF3blRlbXBsYXRlc1Jlc3BvbnNlEmoKE0NyZWF0ZVNwYXduVGVtcGxhdGUSKC5hcGkudjFhbHBoYTEuQ3JlYXRlU3Bhd25UZW1wbGF0ZVJlcXVlc3QaKS5hcGkudjFhbHBoYTEuQ3JlYXRlU3Bhd25UZW1wbGF0ZVJlc3BvbnNlEmEKEEdldFNwYXduVGVtcGxhdGUSJS5hcGkudjFhbHBoYTEuR2V0U3Bhd25UZW1wbGF0ZVJlcXVlc3QaJi5hcGkudjFhbHBoYTEuR2V0U3Bhd25UZW1wbGF0ZVJlc3BvbnNlEmcKEkJhdGNoU3Bhd25FbnRpdGllcxInLmFwaS52MWFscGhhMS5CYXRjaFNwYXduRW50aXRpZXNSZXF1ZXN0GiguYXBpLnYxYWxwaGExLkJhdGNoU3Bhd25FbnRpdGllc1Jlc3BvbnNlEmQKEUJhdGNoTW92ZUVudGl0aWVzEiYuYXBpLnYxYWxwaGExLkJhdGNoTW92ZUVudGl0aWVzUmVxdWVzdBonLmFwaS52MWFscGhhMS5CYXRjaE1vdmVFbnRpdGllc1Jlc3BvbnNlEmoKE0JhdGNoUmVtb3ZlRW50aXRpZXMSKC5hcGkudjFhbHBoYTEuQmF0Y2hSZW1vdmVFbnRpdGllc1JlcXVlc3QaKS5hcGkudjFhbHBoYTEuQmF0Y2hSZW1vdmVFbnRpdGllc1Jlc3BvbnNlQroBChBjb20uYXBpLnYxYWxwaGExQg5Sb29tU3Bhd25Qcm90b1ABWkVnaXRodWIuY29tL0tpcmtEaWdnbGVyL3JwZy1hcGktcHJvdG9zL2dlbi9nby9hcGkvdjFhbHBoYTE7YXBpdjFhbHBoYTGiAgNBWFiqAgxBcGkuVjFhbHBoYTHKAgxBcGlcVjFhbHBoYTHiAhhBcGlcVjFhbHBoYTFcR1BCTWV0YWRhdGHqAg1BcGk6OlYxYWxwaGExYgZwcm90bzM", [file_api_v1alpha1_room_common, file_api_v1alpha1_room_spatial]);

/**
 * Single entity spawn request
 *
 * @generated from message api.v1alpha1.SpawnEntityRequest
 */
export type SpawnEntityRequest = Message<"api.v1alpha1.SpawnEntityRequest"> & {
  /**
   * Room to spawn entity in
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity definition
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 2;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Spawn options
   *
   * @generated from field: api.v1alpha1.SpawnOptions spawn_options = 3;
   */
  spawnOptions?: SpawnOptions;

  /**
   * Spawn location preferences
   *
   * @generated from field: api.v1alpha1.SpawnLocationPreferences location_preferences = 4;
   */
  locationPreferences?: SpawnLocationPreferences;
};

/**
 * Describes the message api.v1alpha1.SpawnEntityRequest.
 * Use `create(SpawnEntityRequestSchema)` to create a new message.
 */
export const SpawnEntityRequestSchema: GenMessage<SpawnEntityRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 0);

/**
 * Entity definition for spawning
 *
 * @generated from message api.v1alpha1.EntityDefinition
 */
export type EntityDefinition = Message<"api.v1alpha1.EntityDefinition"> & {
  /**
   * Entity type
   *
   * "character", "monster", "object", "terrain"
   *
   * @generated from field: string entity_type = 1;
   */
  entityType: string;

  /**
   * Entity name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Entity size
   *
   * @generated from field: double size = 3;
   */
  size: number;

  /**
   * Entity properties
   *
   * @generated from field: map<string, string> properties = 4;
   */
  properties: { [key: string]: string };

  /**
   * Visual representation
   *
   * @generated from field: string sprite_id = 5;
   */
  spriteId: string;

  /**
   * @generated from field: string color = 6;
   */
  color: string;

  /**
   * Gameplay properties
   *
   * @generated from field: bool blocks_movement = 7;
   */
  blocksMovement: boolean;

  /**
   * @generated from field: bool blocks_line_of_sight = 8;
   */
  blocksLineOfSight: boolean;

  /**
   * @generated from field: bool is_interactive = 9;
   */
  isInteractive: boolean;

  /**
   * Entity-specific data
   *
   * @generated from oneof api.v1alpha1.EntityDefinition.entity_data
   */
  entityData: {
    /**
     * @generated from field: api.v1alpha1.CharacterData character_data = 10;
     */
    value: CharacterData;
    case: "characterData";
  } | {
    /**
     * @generated from field: api.v1alpha1.MonsterData monster_data = 11;
     */
    value: MonsterData;
    case: "monsterData";
  } | {
    /**
     * @generated from field: api.v1alpha1.ObjectData object_data = 12;
     */
    value: ObjectData;
    case: "objectData";
  } | {
    /**
     * @generated from field: api.v1alpha1.TerrainData terrain_data = 13;
     */
    value: TerrainData;
    case: "terrainData";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message api.v1alpha1.EntityDefinition.
 * Use `create(EntityDefinitionSchema)` to create a new message.
 */
export const EntityDefinitionSchema: GenMessage<EntityDefinition> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 1);

/**
 * Character-specific spawn data
 *
 * @generated from message api.v1alpha1.CharacterData
 */
export type CharacterData = Message<"api.v1alpha1.CharacterData"> & {
  /**
   * Character ID if spawning existing character
   *
   * @generated from field: string character_id = 1;
   */
  characterId: string;

  /**
   * Player ID who controls this character
   *
   * @generated from field: string player_id = 2;
   */
  playerId: string;

  /**
   * Character level
   *
   * @generated from field: int32 level = 3;
   */
  level: number;

  /**
   * Hit points
   *
   * @generated from field: int32 current_hit_points = 4;
   */
  currentHitPoints: number;

  /**
   * @generated from field: int32 max_hit_points = 5;
   */
  maxHitPoints: number;

  /**
   * Armor class
   *
   * @generated from field: int32 armor_class = 6;
   */
  armorClass: number;

  /**
   * Movement speed
   *
   * @generated from field: int32 movement_speed = 7;
   */
  movementSpeed: number;
};

/**
 * Describes the message api.v1alpha1.CharacterData.
 * Use `create(CharacterDataSchema)` to create a new message.
 */
export const CharacterDataSchema: GenMessage<CharacterData> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 2);

/**
 * Monster-specific spawn data
 *
 * @generated from message api.v1alpha1.MonsterData
 */
export type MonsterData = Message<"api.v1alpha1.MonsterData"> & {
  /**
   * Monster type/species
   *
   * @generated from field: string monster_type = 1;
   */
  monsterType: string;

  /**
   * Challenge rating
   *
   * @generated from field: double challenge_rating = 2;
   */
  challengeRating: number;

  /**
   * Hit points
   *
   * @generated from field: int32 current_hit_points = 3;
   */
  currentHitPoints: number;

  /**
   * @generated from field: int32 max_hit_points = 4;
   */
  maxHitPoints: number;

  /**
   * Armor class
   *
   * @generated from field: int32 armor_class = 5;
   */
  armorClass: number;

  /**
   * Movement speed
   *
   * @generated from field: int32 movement_speed = 6;
   */
  movementSpeed: number;

  /**
   * Aggressive behavior
   *
   * @generated from field: bool is_hostile = 7;
   */
  isHostile: boolean;

  /**
   * AI behavior type
   *
   * @generated from field: string ai_behavior = 8;
   */
  aiBehavior: string;
};

/**
 * Describes the message api.v1alpha1.MonsterData.
 * Use `create(MonsterDataSchema)` to create a new message.
 */
export const MonsterDataSchema: GenMessage<MonsterData> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 3);

/**
 * Object-specific spawn data
 *
 * @generated from message api.v1alpha1.ObjectData
 */
export type ObjectData = Message<"api.v1alpha1.ObjectData"> & {
  /**
   * Object category
   *
   * "furniture", "treasure", "trap", "door"
   *
   * @generated from field: string object_category = 1;
   */
  objectCategory: string;

  /**
   * Whether object can be moved
   *
   * @generated from field: bool is_movable = 2;
   */
  isMovable: boolean;

  /**
   * Whether object can be interacted with
   *
   * @generated from field: bool is_interactable = 3;
   */
  isInteractable: boolean;

  /**
   * Object state
   *
   * "open", "closed", "locked", "broken"
   *
   * @generated from field: string state = 4;
   */
  state: string;

  /**
   * Loot or contents
   *
   * @generated from field: repeated api.v1alpha1.LootItem contents = 5;
   */
  contents: LootItem[];
};

/**
 * Describes the message api.v1alpha1.ObjectData.
 * Use `create(ObjectDataSchema)` to create a new message.
 */
export const ObjectDataSchema: GenMessage<ObjectData> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 4);

/**
 * Terrain-specific spawn data
 *
 * @generated from message api.v1alpha1.TerrainData
 */
export type TerrainData = Message<"api.v1alpha1.TerrainData"> & {
  /**
   * Terrain type
   *
   * "wall", "door", "pit", "water", "difficult"
   *
   * @generated from field: string terrain_type = 1;
   */
  terrainType: string;

  /**
   * Movement cost multiplier
   *
   * @generated from field: double movement_multiplier = 2;
   */
  movementMultiplier: number;

  /**
   * Whether terrain is hazardous
   *
   * @generated from field: bool is_hazardous = 3;
   */
  isHazardous: boolean;

  /**
   * Damage dealt by terrain
   *
   * @generated from field: string damage_type = 4;
   */
  damageType: string;

  /**
   * @generated from field: int32 damage_amount = 5;
   */
  damageAmount: number;
};

/**
 * Describes the message api.v1alpha1.TerrainData.
 * Use `create(TerrainDataSchema)` to create a new message.
 */
export const TerrainDataSchema: GenMessage<TerrainData> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 5);

/**
 * Loot item definition
 *
 * @generated from message api.v1alpha1.LootItem
 */
export type LootItem = Message<"api.v1alpha1.LootItem"> & {
  /**
   * Item identifier
   *
   * @generated from field: string item_id = 1;
   */
  itemId: string;

  /**
   * Item name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Item quantity
   *
   * @generated from field: int32 quantity = 3;
   */
  quantity: number;

  /**
   * Item rarity
   *
   * @generated from field: string rarity = 4;
   */
  rarity: string;

  /**
   * Item value
   *
   * @generated from field: int32 value_gp = 5;
   */
  valueGp: number;
};

/**
 * Describes the message api.v1alpha1.LootItem.
 * Use `create(LootItemSchema)` to create a new message.
 */
export const LootItemSchema: GenMessage<LootItem> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 6);

/**
 * Options for entity spawning
 *
 * @generated from message api.v1alpha1.SpawnOptions
 */
export type SpawnOptions = Message<"api.v1alpha1.SpawnOptions"> & {
  /**
   * Whether to validate placement before spawning
   *
   * @generated from field: bool validate_placement = 1;
   */
  validatePlacement: boolean;

  /**
   * Whether to auto-find valid position if specified position invalid
   *
   * @generated from field: bool auto_position = 2;
   */
  autoPosition: boolean;

  /**
   * Maximum attempts to find valid position
   *
   * @generated from field: int32 max_position_attempts = 3;
   */
  maxPositionAttempts: number;

  /**
   * Whether to allow spawning on top of other entities
   *
   * @generated from field: bool allow_overlap = 4;
   */
  allowOverlap: boolean;

  /**
   * Whether to generate random properties
   *
   * @generated from field: bool randomize_properties = 5;
   */
  randomizeProperties: boolean;

  /**
   * Random seed for property generation
   *
   * @generated from field: string random_seed = 6;
   */
  randomSeed: string;
};

/**
 * Describes the message api.v1alpha1.SpawnOptions.
 * Use `create(SpawnOptionsSchema)` to create a new message.
 */
export const SpawnOptionsSchema: GenMessage<SpawnOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 7);

/**
 * Location preferences for spawning
 *
 * @generated from message api.v1alpha1.SpawnLocationPreferences
 */
export type SpawnLocationPreferences = Message<"api.v1alpha1.SpawnLocationPreferences"> & {
  /**
   * Preferred position (exact)
   *
   * @generated from field: api.v1alpha1.Position preferred_position = 1;
   */
  preferredPosition?: Position;

  /**
   * Preferred area (spawn anywhere in this area)
   *
   * @generated from field: api.v1alpha1.SpawnArea preferred_area = 2;
   */
  preferredArea?: SpawnArea;

  /**
   * Spawn constraints
   *
   * @generated from field: api.v1alpha1.SpawnConstraints constraints = 3;
   */
  constraints?: SpawnConstraints;

  /**
   * Distance preferences from other entities
   *
   * @generated from field: repeated api.v1alpha1.DistancePreference distance_preferences = 4;
   */
  distancePreferences: DistancePreference[];
};

/**
 * Describes the message api.v1alpha1.SpawnLocationPreferences.
 * Use `create(SpawnLocationPreferencesSchema)` to create a new message.
 */
export const SpawnLocationPreferencesSchema: GenMessage<SpawnLocationPreferences> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 8);

/**
 * Area definition for spawning
 *
 * @generated from message api.v1alpha1.SpawnArea
 */
export type SpawnArea = Message<"api.v1alpha1.SpawnArea"> & {
  /**
   * Area type
   *
   * @generated from field: api.v1alpha1.SpawnAreaType area_type = 1;
   */
  areaType: SpawnAreaType;

  /**
   * Area parameters
   *
   * @generated from oneof api.v1alpha1.SpawnArea.area_params
   */
  areaParams: {
    /**
     * @generated from field: api.v1alpha1.CircleArea circle = 2;
     */
    value: CircleArea;
    case: "circle";
  } | {
    /**
     * @generated from field: api.v1alpha1.RectangleArea rectangle = 3;
     */
    value: RectangleArea;
    case: "rectangle";
  } | {
    /**
     * @generated from field: api.v1alpha1.CustomArea custom = 4;
     */
    value: CustomArea;
    case: "custom";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message api.v1alpha1.SpawnArea.
 * Use `create(SpawnAreaSchema)` to create a new message.
 */
export const SpawnAreaSchema: GenMessage<SpawnArea> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 9);

/**
 * Circle spawn area
 *
 * @generated from message api.v1alpha1.CircleArea
 */
export type CircleArea = Message<"api.v1alpha1.CircleArea"> & {
  /**
   * @generated from field: api.v1alpha1.Position center = 1;
   */
  center?: Position;

  /**
   * @generated from field: double radius = 2;
   */
  radius: number;
};

/**
 * Describes the message api.v1alpha1.CircleArea.
 * Use `create(CircleAreaSchema)` to create a new message.
 */
export const CircleAreaSchema: GenMessage<CircleArea> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 10);

/**
 * Rectangle spawn area
 *
 * @generated from message api.v1alpha1.RectangleArea
 */
export type RectangleArea = Message<"api.v1alpha1.RectangleArea"> & {
  /**
   * @generated from field: api.v1alpha1.Position top_left = 1;
   */
  topLeft?: Position;

  /**
   * @generated from field: api.v1alpha1.Position bottom_right = 2;
   */
  bottomRight?: Position;
};

/**
 * Describes the message api.v1alpha1.RectangleArea.
 * Use `create(RectangleAreaSchema)` to create a new message.
 */
export const RectangleAreaSchema: GenMessage<RectangleArea> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 11);

/**
 * Custom polygon spawn area
 *
 * @generated from message api.v1alpha1.CustomArea
 */
export type CustomArea = Message<"api.v1alpha1.CustomArea"> & {
  /**
   * @generated from field: repeated api.v1alpha1.Position vertices = 1;
   */
  vertices: Position[];
};

/**
 * Describes the message api.v1alpha1.CustomArea.
 * Use `create(CustomAreaSchema)` to create a new message.
 */
export const CustomAreaSchema: GenMessage<CustomArea> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 12);

/**
 * Constraints for entity spawning
 *
 * @generated from message api.v1alpha1.SpawnConstraints
 */
export type SpawnConstraints = Message<"api.v1alpha1.SpawnConstraints"> & {
  /**
   * Terrain types to avoid
   *
   * @generated from field: repeated string avoid_terrain_types = 1;
   */
  avoidTerrainTypes: string[];

  /**
   * Entity types to avoid overlapping with
   *
   * @generated from field: repeated string avoid_entity_types = 2;
   */
  avoidEntityTypes: string[];

  /**
   * Minimum distance from walls
   *
   * @generated from field: double min_wall_distance = 3;
   */
  minWallDistance: number;

  /**
   * Minimum distance from other entities
   *
   * @generated from field: double min_entity_distance = 4;
   */
  minEntityDistance: number;

  /**
   * Maximum distance from spawn center
   *
   * @generated from field: double max_distance_from_center = 5;
   */
  maxDistanceFromCenter: number;

  /**
   * Required line of sight to specific position
   *
   * @generated from field: api.v1alpha1.Position require_los_to = 6;
   */
  requireLosTo?: Position;
};

/**
 * Describes the message api.v1alpha1.SpawnConstraints.
 * Use `create(SpawnConstraintsSchema)` to create a new message.
 */
export const SpawnConstraintsSchema: GenMessage<SpawnConstraints> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 13);

/**
 * Distance preference from other entities
 *
 * @generated from message api.v1alpha1.DistancePreference
 */
export type DistancePreference = Message<"api.v1alpha1.DistancePreference"> & {
  /**
   * Entity type or specific entity ID
   *
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * Preferred distance
   *
   * @generated from field: double preferred_distance = 2;
   */
  preferredDistance: number;

  /**
   * Distance tolerance
   *
   * @generated from field: double tolerance = 3;
   */
  tolerance: number;

  /**
   * Preference weight (higher = more important)
   *
   * @generated from field: double weight = 4;
   */
  weight: number;
};

/**
 * Describes the message api.v1alpha1.DistancePreference.
 * Use `create(DistancePreferenceSchema)` to create a new message.
 */
export const DistancePreferenceSchema: GenMessage<DistancePreference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 14);

/**
 * Response from single entity spawn
 *
 * @generated from message api.v1alpha1.SpawnEntityResponse
 */
export type SpawnEntityResponse = Message<"api.v1alpha1.SpawnEntityResponse"> & {
  /**
   * Spawned entity
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Actual spawn position used
   *
   * @generated from field: api.v1alpha1.Position actual_position = 2;
   */
  actualPosition?: Position;

  /**
   * Spawn statistics
   *
   * @generated from field: api.v1alpha1.SpawnStats spawn_stats = 3;
   */
  spawnStats?: SpawnStats;

  /**
   * Any warnings during spawn
   *
   * @generated from field: repeated api.v1alpha1.RoomError warnings = 4;
   */
  warnings: RoomError[];
};

/**
 * Describes the message api.v1alpha1.SpawnEntityResponse.
 * Use `create(SpawnEntityResponseSchema)` to create a new message.
 */
export const SpawnEntityResponseSchema: GenMessage<SpawnEntityResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 15);

/**
 * Statistics about entity spawning
 *
 * @generated from message api.v1alpha1.SpawnStats
 */
export type SpawnStats = Message<"api.v1alpha1.SpawnStats"> & {
  /**
   * Time taken to spawn
   *
   * @generated from field: int64 spawn_time_ms = 1;
   */
  spawnTimeMs: bigint;

  /**
   * Number of position attempts
   *
   * @generated from field: int32 position_attempts = 2;
   */
  positionAttempts: number;

  /**
   * Whether auto-positioning was used
   *
   * @generated from field: bool used_auto_position = 3;
   */
  usedAutoPosition: boolean;

  /**
   * Distance from preferred position
   *
   * @generated from field: double distance_from_preferred = 4;
   */
  distanceFromPreferred: number;

  /**
   * Spawn method used
   *
   * @generated from field: string spawn_method = 5;
   */
  spawnMethod: string;
};

/**
 * Describes the message api.v1alpha1.SpawnStats.
 * Use `create(SpawnStatsSchema)` to create a new message.
 */
export const SpawnStatsSchema: GenMessage<SpawnStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 16);

/**
 * Multiple entity spawn request
 *
 * @generated from message api.v1alpha1.SpawnMultipleEntitiesRequest
 */
export type SpawnMultipleEntitiesRequest = Message<"api.v1alpha1.SpawnMultipleEntitiesRequest"> & {
  /**
   * Room to spawn entities in
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * List of entities to spawn
   *
   * @generated from field: repeated api.v1alpha1.EntitySpawnDefinition entities = 2;
   */
  entities: EntitySpawnDefinition[];

  /**
   * Global spawn options
   *
   * @generated from field: api.v1alpha1.SpawnOptions global_options = 3;
   */
  globalOptions?: SpawnOptions;

  /**
   * Coordination options for multiple spawns
   *
   * @generated from field: api.v1alpha1.MultiSpawnOptions coordination_options = 4;
   */
  coordinationOptions?: MultiSpawnOptions;
};

/**
 * Describes the message api.v1alpha1.SpawnMultipleEntitiesRequest.
 * Use `create(SpawnMultipleEntitiesRequestSchema)` to create a new message.
 */
export const SpawnMultipleEntitiesRequestSchema: GenMessage<SpawnMultipleEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 17);

/**
 * Individual entity spawn definition with options
 *
 * @generated from message api.v1alpha1.EntitySpawnDefinition
 */
export type EntitySpawnDefinition = Message<"api.v1alpha1.EntitySpawnDefinition"> & {
  /**
   * Entity definition
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 1;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Spawn options (overrides global if specified)
   *
   * @generated from field: api.v1alpha1.SpawnOptions spawn_options = 2;
   */
  spawnOptions?: SpawnOptions;

  /**
   * Location preferences
   *
   * @generated from field: api.v1alpha1.SpawnLocationPreferences location_preferences = 3;
   */
  locationPreferences?: SpawnLocationPreferences;

  /**
   * Spawn priority (higher spawns first)
   *
   * @generated from field: int32 priority = 4;
   */
  priority: number;
};

/**
 * Describes the message api.v1alpha1.EntitySpawnDefinition.
 * Use `create(EntitySpawnDefinitionSchema)` to create a new message.
 */
export const EntitySpawnDefinitionSchema: GenMessage<EntitySpawnDefinition> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 18);

/**
 * Options for coordinating multiple entity spawns
 *
 * @generated from message api.v1alpha1.MultiSpawnOptions
 */
export type MultiSpawnOptions = Message<"api.v1alpha1.MultiSpawnOptions"> & {
  /**
   * Whether to maintain minimum distances between spawned entities
   *
   * @generated from field: bool maintain_spacing = 1;
   */
  maintainSpacing: boolean;

  /**
   * Minimum distance between spawned entities
   *
   * @generated from field: double min_inter_entity_distance = 2;
   */
  minInterEntityDistance: number;

  /**
   * Whether to abort all spawns if any fail
   *
   * @generated from field: bool all_or_nothing = 3;
   */
  allOrNothing: boolean;

  /**
   * Maximum time to spend on all spawns
   *
   * @generated from field: int32 timeout_ms = 4;
   */
  timeoutMs: number;

  /**
   * Spawn order strategy
   *
   * @generated from field: api.v1alpha1.SpawnOrderStrategy spawn_order = 5;
   */
  spawnOrder: SpawnOrderStrategy;
};

/**
 * Describes the message api.v1alpha1.MultiSpawnOptions.
 * Use `create(MultiSpawnOptionsSchema)` to create a new message.
 */
export const MultiSpawnOptionsSchema: GenMessage<MultiSpawnOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 19);

/**
 * Response from multiple entity spawn
 *
 * @generated from message api.v1alpha1.SpawnMultipleEntitiesResponse
 */
export type SpawnMultipleEntitiesResponse = Message<"api.v1alpha1.SpawnMultipleEntitiesResponse"> & {
  /**
   * Successfully spawned entities
   *
   * @generated from field: repeated api.v1alpha1.Entity spawned_entities = 1;
   */
  spawnedEntities: Entity[];

  /**
   * Failed spawn attempts
   *
   * @generated from field: repeated api.v1alpha1.SpawnFailure failed_spawns = 2;
   */
  failedSpawns: SpawnFailure[];

  /**
   * Overall spawn statistics
   *
   * @generated from field: api.v1alpha1.MultiSpawnStats spawn_stats = 3;
   */
  spawnStats?: MultiSpawnStats;
};

/**
 * Describes the message api.v1alpha1.SpawnMultipleEntitiesResponse.
 * Use `create(SpawnMultipleEntitiesResponseSchema)` to create a new message.
 */
export const SpawnMultipleEntitiesResponseSchema: GenMessage<SpawnMultipleEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 20);

/**
 * Information about failed spawn attempt
 *
 * @generated from message api.v1alpha1.SpawnFailure
 */
export type SpawnFailure = Message<"api.v1alpha1.SpawnFailure"> & {
  /**
   * Entity definition that failed to spawn
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 1;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Reason for failure
   *
   * @generated from field: string failure_reason = 2;
   */
  failureReason: string;

  /**
   * Error details
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 3;
   */
  errors: RoomError[];

  /**
   * Number of attempts made
   *
   * @generated from field: int32 attempts_made = 4;
   */
  attemptsMade: number;
};

/**
 * Describes the message api.v1alpha1.SpawnFailure.
 * Use `create(SpawnFailureSchema)` to create a new message.
 */
export const SpawnFailureSchema: GenMessage<SpawnFailure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 21);

/**
 * Statistics for multiple entity spawning
 *
 * @generated from message api.v1alpha1.MultiSpawnStats
 */
export type MultiSpawnStats = Message<"api.v1alpha1.MultiSpawnStats"> & {
  /**
   * Total spawn time
   *
   * @generated from field: int64 total_spawn_time_ms = 1;
   */
  totalSpawnTimeMs: bigint;

  /**
   * Number of successful spawns
   *
   * @generated from field: int32 successful_spawns = 2;
   */
  successfulSpawns: number;

  /**
   * Number of failed spawns
   *
   * @generated from field: int32 failed_spawns = 3;
   */
  failedSpawns: number;

  /**
   * Average time per spawn
   *
   * @generated from field: double average_spawn_time_ms = 4;
   */
  averageSpawnTimeMs: number;

  /**
   * Total position attempts across all entities
   *
   * @generated from field: int32 total_position_attempts = 5;
   */
  totalPositionAttempts: number;
};

/**
 * Describes the message api.v1alpha1.MultiSpawnStats.
 * Use `create(MultiSpawnStatsSchema)` to create a new message.
 */
export const MultiSpawnStatsSchema: GenMessage<MultiSpawnStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 22);

/**
 * Template-based spawn request
 *
 * @generated from message api.v1alpha1.SpawnFromTemplateRequest
 */
export type SpawnFromTemplateRequest = Message<"api.v1alpha1.SpawnFromTemplateRequest"> & {
  /**
   * Room to spawn entities in
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Spawn template to use
   *
   * @generated from field: string template_id = 2;
   */
  templateId: string;

  /**
   * Template parameters
   *
   * @generated from field: map<string, string> template_parameters = 3;
   */
  templateParameters: { [key: string]: string };

  /**
   * Spawn area for template
   *
   * @generated from field: api.v1alpha1.SpawnArea spawn_area = 4;
   */
  spawnArea?: SpawnArea;

  /**
   * Template spawn options
   *
   * @generated from field: api.v1alpha1.TemplateSpawnOptions template_options = 5;
   */
  templateOptions?: TemplateSpawnOptions;
};

/**
 * Describes the message api.v1alpha1.SpawnFromTemplateRequest.
 * Use `create(SpawnFromTemplateRequestSchema)` to create a new message.
 */
export const SpawnFromTemplateRequestSchema: GenMessage<SpawnFromTemplateRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 23);

/**
 * Options for template-based spawning
 *
 * @generated from message api.v1alpha1.TemplateSpawnOptions
 */
export type TemplateSpawnOptions = Message<"api.v1alpha1.TemplateSpawnOptions"> & {
  /**
   * Random seed for template spawning
   *
   * @generated from field: string random_seed = 1;
   */
  randomSeed: string;

  /**
   * Difficulty modifier
   *
   * @generated from field: double difficulty_modifier = 2;
   */
  difficultyModifier: number;

  /**
   * Whether to scale entities based on party level
   *
   * @generated from field: bool scale_to_party_level = 3;
   */
  scaleToPartyLevel: boolean;

  /**
   * Party level for scaling
   *
   * @generated from field: int32 party_level = 4;
   */
  partyLevel: number;

  /**
   * Maximum entities to spawn from template
   *
   * @generated from field: int32 max_entities = 5;
   */
  maxEntities: number;
};

/**
 * Describes the message api.v1alpha1.TemplateSpawnOptions.
 * Use `create(TemplateSpawnOptionsSchema)` to create a new message.
 */
export const TemplateSpawnOptionsSchema: GenMessage<TemplateSpawnOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 24);

/**
 * Response from template spawn
 *
 * @generated from message api.v1alpha1.SpawnFromTemplateResponse
 */
export type SpawnFromTemplateResponse = Message<"api.v1alpha1.SpawnFromTemplateResponse"> & {
  /**
   * Spawned entities from template
   *
   * @generated from field: repeated api.v1alpha1.Entity spawned_entities = 1;
   */
  spawnedEntities: Entity[];

  /**
   * Template that was used
   *
   * @generated from field: api.v1alpha1.SpawnTemplate template_used = 2;
   */
  templateUsed?: SpawnTemplate;

  /**
   * Template spawn statistics
   *
   * @generated from field: api.v1alpha1.TemplateSpawnStats spawn_stats = 3;
   */
  spawnStats?: TemplateSpawnStats;

  /**
   * Any warnings during template spawn
   *
   * @generated from field: repeated api.v1alpha1.RoomError warnings = 4;
   */
  warnings: RoomError[];
};

/**
 * Describes the message api.v1alpha1.SpawnFromTemplateResponse.
 * Use `create(SpawnFromTemplateResponseSchema)` to create a new message.
 */
export const SpawnFromTemplateResponseSchema: GenMessage<SpawnFromTemplateResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 25);

/**
 * Statistics for template spawning
 *
 * @generated from message api.v1alpha1.TemplateSpawnStats
 */
export type TemplateSpawnStats = Message<"api.v1alpha1.TemplateSpawnStats"> & {
  /**
   * Template spawn time
   *
   * @generated from field: int64 template_spawn_time_ms = 1;
   */
  templateSpawnTimeMs: bigint;

  /**
   * Number of entities spawned
   *
   * @generated from field: int32 entities_spawned = 2;
   */
  entitiesSpawned: number;

  /**
   * Number of spawn rolls made
   *
   * @generated from field: int32 spawn_rolls_made = 3;
   */
  spawnRollsMade: number;

  /**
   * Actual difficulty rating
   *
   * @generated from field: double actual_difficulty = 4;
   */
  actualDifficulty: number;

  /**
   * Random seed used
   *
   * @generated from field: string seed_used = 5;
   */
  seedUsed: string;
};

/**
 * Describes the message api.v1alpha1.TemplateSpawnStats.
 * Use `create(TemplateSpawnStatsSchema)` to create a new message.
 */
export const TemplateSpawnStatsSchema: GenMessage<TemplateSpawnStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 26);

/**
 * Entity movement request
 *
 * @generated from message api.v1alpha1.MoveEntityRequest
 */
export type MoveEntityRequest = Message<"api.v1alpha1.MoveEntityRequest"> & {
  /**
   * Room containing entity
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity to move
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * New position
   *
   * @generated from field: api.v1alpha1.Position new_position = 3;
   */
  newPosition?: Position;

  /**
   * Movement options
   *
   * @generated from field: api.v1alpha1.EntityMovementOptions movement_options = 4;
   */
  movementOptions?: EntityMovementOptions;
};

/**
 * Describes the message api.v1alpha1.MoveEntityRequest.
 * Use `create(MoveEntityRequestSchema)` to create a new message.
 */
export const MoveEntityRequestSchema: GenMessage<MoveEntityRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 27);

/**
 * Options for entity movement
 *
 * @generated from message api.v1alpha1.EntityMovementOptions
 */
export type EntityMovementOptions = Message<"api.v1alpha1.EntityMovementOptions"> & {
  /**
   * Whether to validate movement before executing
   *
   * @generated from field: bool validate_movement = 1;
   */
  validateMovement: boolean;

  /**
   * Whether to use pathfinding for movement
   *
   * @generated from field: bool use_pathfinding = 2;
   */
  usePathfinding: boolean;

  /**
   * Movement animation duration (seconds)
   *
   * @generated from field: double animation_duration = 3;
   */
  animationDuration: number;

  /**
   * Whether to trigger movement events
   *
   * @generated from field: bool trigger_events = 4;
   */
  triggerEvents: boolean;

  /**
   * Whether to check for opportunity attacks
   *
   * @generated from field: bool check_opportunity_attacks = 5;
   */
  checkOpportunityAttacks: boolean;
};

/**
 * Describes the message api.v1alpha1.EntityMovementOptions.
 * Use `create(EntityMovementOptionsSchema)` to create a new message.
 */
export const EntityMovementOptionsSchema: GenMessage<EntityMovementOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 28);

/**
 * Entity movement response
 *
 * @generated from message api.v1alpha1.MoveEntityResponse
 */
export type MoveEntityResponse = Message<"api.v1alpha1.MoveEntityResponse"> & {
  /**
   * Updated entity with new position
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Actual path taken (if pathfinding used)
   *
   * @generated from field: repeated api.v1alpha1.Position path_taken = 2;
   */
  pathTaken: Position[];

  /**
   * Movement cost
   *
   * @generated from field: double movement_cost = 3;
   */
  movementCost: number;

  /**
   * Movement events triggered
   *
   * @generated from field: repeated api.v1alpha1.MovementEvent events_triggered = 4;
   */
  eventsTriggered: MovementEvent[];

  /**
   * Movement statistics
   *
   * @generated from field: api.v1alpha1.MovementStats movement_stats = 5;
   */
  movementStats?: MovementStats;
};

/**
 * Describes the message api.v1alpha1.MoveEntityResponse.
 * Use `create(MoveEntityResponseSchema)` to create a new message.
 */
export const MoveEntityResponseSchema: GenMessage<MoveEntityResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 29);

/**
 * Event triggered by entity movement
 *
 * @generated from message api.v1alpha1.MovementEvent
 */
export type MovementEvent = Message<"api.v1alpha1.MovementEvent"> & {
  /**
   * Event type
   *
   * "opportunity_attack", "terrain_effect", "trap_triggered"
   *
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * Entity that triggered event
   *
   * @generated from field: string triggering_entity = 2;
   */
  triggeringEntity: string;

  /**
   * Target entity (if applicable)
   *
   * @generated from field: string target_entity = 3;
   */
  targetEntity: string;

  /**
   * Event position
   *
   * @generated from field: api.v1alpha1.Position position = 4;
   */
  position?: Position;

  /**
   * Event description
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Event data
   *
   * @generated from field: map<string, string> event_data = 6;
   */
  eventData: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.MovementEvent.
 * Use `create(MovementEventSchema)` to create a new message.
 */
export const MovementEventSchema: GenMessage<MovementEvent> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 30);

/**
 * Statistics for entity movement
 *
 * @generated from message api.v1alpha1.MovementStats
 */
export type MovementStats = Message<"api.v1alpha1.MovementStats"> & {
  /**
   * Movement execution time
   *
   * @generated from field: int64 movement_time_ms = 1;
   */
  movementTimeMs: bigint;

  /**
   * Whether pathfinding was used
   *
   * @generated from field: bool used_pathfinding = 2;
   */
  usedPathfinding: boolean;

  /**
   * Number of pathfinding nodes explored
   *
   * @generated from field: int32 pathfinding_nodes = 3;
   */
  pathfindingNodes: number;

  /**
   * Distance moved
   *
   * @generated from field: double distance_moved = 4;
   */
  distanceMoved: number;

  /**
   * Number of events triggered
   *
   * @generated from field: int32 events_triggered = 5;
   */
  eventsTriggered: number;
};

/**
 * Describes the message api.v1alpha1.MovementStats.
 * Use `create(MovementStatsSchema)` to create a new message.
 */
export const MovementStatsSchema: GenMessage<MovementStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 31);

/**
 * Entity update request
 *
 * @generated from message api.v1alpha1.UpdateEntityRequest
 */
export type UpdateEntityRequest = Message<"api.v1alpha1.UpdateEntityRequest"> & {
  /**
   * Room containing entity
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity to update
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Updated entity data
   *
   * @generated from field: api.v1alpha1.EntityUpdate entity_update = 3;
   */
  entityUpdate?: EntityUpdate;

  /**
   * Update options
   *
   * @generated from field: api.v1alpha1.UpdateEntityOptions update_options = 4;
   */
  updateOptions?: UpdateEntityOptions;
};

/**
 * Describes the message api.v1alpha1.UpdateEntityRequest.
 * Use `create(UpdateEntityRequestSchema)` to create a new message.
 */
export const UpdateEntityRequestSchema: GenMessage<UpdateEntityRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 32);

/**
 * Entity update data
 *
 * @generated from message api.v1alpha1.EntityUpdate
 */
export type EntityUpdate = Message<"api.v1alpha1.EntityUpdate"> & {
  /**
   * Updated name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Updated properties
   *
   * @generated from field: map<string, string> properties = 2;
   */
  properties: { [key: string]: string };

  /**
   * Updated visual representation
   *
   * @generated from field: string sprite_id = 3;
   */
  spriteId: string;

  /**
   * @generated from field: string color = 4;
   */
  color: string;

  /**
   * Updated gameplay properties
   *
   * @generated from field: bool blocks_movement = 5;
   */
  blocksMovement: boolean;

  /**
   * @generated from field: bool blocks_line_of_sight = 6;
   */
  blocksLineOfSight: boolean;

  /**
   * @generated from field: bool is_interactive = 7;
   */
  isInteractive: boolean;

  /**
   * Field mask for partial updates
   *
   * @generated from field: repeated string update_mask = 8;
   */
  updateMask: string[];
};

/**
 * Describes the message api.v1alpha1.EntityUpdate.
 * Use `create(EntityUpdateSchema)` to create a new message.
 */
export const EntityUpdateSchema: GenMessage<EntityUpdate> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 33);

/**
 * Options for entity updates
 *
 * @generated from message api.v1alpha1.UpdateEntityOptions
 */
export type UpdateEntityOptions = Message<"api.v1alpha1.UpdateEntityOptions"> & {
  /**
   * Whether to validate update before applying
   *
   * @generated from field: bool validate_update = 1;
   */
  validateUpdate: boolean;

  /**
   * Whether to trigger update events
   *
   * @generated from field: bool trigger_events = 2;
   */
  triggerEvents: boolean;

  /**
   * Whether to broadcast changes to other players
   *
   * @generated from field: bool broadcast_changes = 3;
   */
  broadcastChanges: boolean;
};

/**
 * Describes the message api.v1alpha1.UpdateEntityOptions.
 * Use `create(UpdateEntityOptionsSchema)` to create a new message.
 */
export const UpdateEntityOptionsSchema: GenMessage<UpdateEntityOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 34);

/**
 * Entity update response
 *
 * @generated from message api.v1alpha1.UpdateEntityResponse
 */
export type UpdateEntityResponse = Message<"api.v1alpha1.UpdateEntityResponse"> & {
  /**
   * Updated entity
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Update events triggered
   *
   * @generated from field: repeated api.v1alpha1.UpdateEvent events_triggered = 2;
   */
  eventsTriggered: UpdateEvent[];

  /**
   * Update statistics
   *
   * @generated from field: api.v1alpha1.EntityUpdateStats update_stats = 3;
   */
  updateStats?: EntityUpdateStats;
};

/**
 * Describes the message api.v1alpha1.UpdateEntityResponse.
 * Use `create(UpdateEntityResponseSchema)` to create a new message.
 */
export const UpdateEntityResponseSchema: GenMessage<UpdateEntityResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 35);

/**
 * Event triggered by entity update
 *
 * @generated from message api.v1alpha1.UpdateEvent
 */
export type UpdateEvent = Message<"api.v1alpha1.UpdateEvent"> & {
  /**
   * Event type
   *
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * Updated entity
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Fields that were changed
   *
   * @generated from field: repeated string changed_fields = 3;
   */
  changedFields: string[];

  /**
   * Previous values
   *
   * @generated from field: map<string, string> previous_values = 4;
   */
  previousValues: { [key: string]: string };

  /**
   * New values
   *
   * @generated from field: map<string, string> new_values = 5;
   */
  newValues: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.UpdateEvent.
 * Use `create(UpdateEventSchema)` to create a new message.
 */
export const UpdateEventSchema: GenMessage<UpdateEvent> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 36);

/**
 * Statistics for entity updates
 *
 * @generated from message api.v1alpha1.EntityUpdateStats
 */
export type EntityUpdateStats = Message<"api.v1alpha1.EntityUpdateStats"> & {
  /**
   * Update execution time
   *
   * @generated from field: int64 update_time_ms = 1;
   */
  updateTimeMs: bigint;

  /**
   * Number of fields updated
   *
   * @generated from field: int32 fields_updated = 2;
   */
  fieldsUpdated: number;

  /**
   * Number of events triggered
   *
   * @generated from field: int32 events_triggered = 3;
   */
  eventsTriggered: number;
};

/**
 * Describes the message api.v1alpha1.EntityUpdateStats.
 * Use `create(EntityUpdateStatsSchema)` to create a new message.
 */
export const EntityUpdateStatsSchema: GenMessage<EntityUpdateStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 37);

/**
 * Entity removal request
 *
 * @generated from message api.v1alpha1.RemoveEntityRequest
 */
export type RemoveEntityRequest = Message<"api.v1alpha1.RemoveEntityRequest"> & {
  /**
   * Room containing entity
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity to remove
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Removal options
   *
   * @generated from field: api.v1alpha1.RemovalOptions removal_options = 3;
   */
  removalOptions?: RemovalOptions;
};

/**
 * Describes the message api.v1alpha1.RemoveEntityRequest.
 * Use `create(RemoveEntityRequestSchema)` to create a new message.
 */
export const RemoveEntityRequestSchema: GenMessage<RemoveEntityRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 38);

/**
 * Options for entity removal
 *
 * @generated from message api.v1alpha1.RemovalOptions
 */
export type RemovalOptions = Message<"api.v1alpha1.RemovalOptions"> & {
  /**
   * Reason for removal
   *
   * @generated from field: string removal_reason = 1;
   */
  removalReason: string;

  /**
   * Whether to drop loot when removing
   *
   * @generated from field: bool drop_loot = 2;
   */
  dropLoot: boolean;

  /**
   * Whether to trigger removal events
   *
   * @generated from field: bool trigger_events = 3;
   */
  triggerEvents: boolean;

  /**
   * Whether to animate removal
   *
   * @generated from field: bool animate_removal = 4;
   */
  animateRemoval: boolean;

  /**
   * Animation duration (seconds)
   *
   * @generated from field: double animation_duration = 5;
   */
  animationDuration: number;
};

/**
 * Describes the message api.v1alpha1.RemovalOptions.
 * Use `create(RemovalOptionsSchema)` to create a new message.
 */
export const RemovalOptionsSchema: GenMessage<RemovalOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 39);

/**
 * Entity removal response
 *
 * @generated from message api.v1alpha1.RemoveEntityResponse
 */
export type RemoveEntityResponse = Message<"api.v1alpha1.RemoveEntityResponse"> & {
  /**
   * Confirmation message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Loot dropped by entity (if any)
   *
   * @generated from field: repeated api.v1alpha1.LootItem loot_dropped = 2;
   */
  lootDropped: LootItem[];

  /**
   * Removal events triggered
   *
   * @generated from field: repeated api.v1alpha1.RemovalEvent events_triggered = 3;
   */
  eventsTriggered: RemovalEvent[];

  /**
   * Removal statistics
   *
   * @generated from field: api.v1alpha1.RemovalStats removal_stats = 4;
   */
  removalStats?: RemovalStats;
};

/**
 * Describes the message api.v1alpha1.RemoveEntityResponse.
 * Use `create(RemoveEntityResponseSchema)` to create a new message.
 */
export const RemoveEntityResponseSchema: GenMessage<RemoveEntityResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 40);

/**
 * Event triggered by entity removal
 *
 * @generated from message api.v1alpha1.RemovalEvent
 */
export type RemovalEvent = Message<"api.v1alpha1.RemovalEvent"> & {
  /**
   * Event type
   *
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * Removed entity ID
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Removal position
   *
   * @generated from field: api.v1alpha1.Position position = 3;
   */
  position?: Position;

  /**
   * Event description
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * Event data
   *
   * @generated from field: map<string, string> event_data = 5;
   */
  eventData: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.RemovalEvent.
 * Use `create(RemovalEventSchema)` to create a new message.
 */
export const RemovalEventSchema: GenMessage<RemovalEvent> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 41);

/**
 * Statistics for entity removal
 *
 * @generated from message api.v1alpha1.RemovalStats
 */
export type RemovalStats = Message<"api.v1alpha1.RemovalStats"> & {
  /**
   * Removal execution time
   *
   * @generated from field: int64 removal_time_ms = 1;
   */
  removalTimeMs: bigint;

  /**
   * Number of events triggered
   *
   * @generated from field: int32 events_triggered = 2;
   */
  eventsTriggered: number;

  /**
   * Amount of loot dropped
   *
   * @generated from field: int32 loot_items_dropped = 3;
   */
  lootItemsDropped: number;
};

/**
 * Describes the message api.v1alpha1.RemovalStats.
 * Use `create(RemovalStatsSchema)` to create a new message.
 */
export const RemovalStatsSchema: GenMessage<RemovalStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 42);

/**
 * Get entity request
 *
 * @generated from message api.v1alpha1.GetEntityRequest
 */
export type GetEntityRequest = Message<"api.v1alpha1.GetEntityRequest"> & {
  /**
   * Room containing entity
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity identifier
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Whether to include detailed information
   *
   * @generated from field: bool include_details = 3;
   */
  includeDetails: boolean;
};

/**
 * Describes the message api.v1alpha1.GetEntityRequest.
 * Use `create(GetEntityRequestSchema)` to create a new message.
 */
export const GetEntityRequestSchema: GenMessage<GetEntityRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 43);

/**
 * Get entity response
 *
 * @generated from message api.v1alpha1.GetEntityResponse
 */
export type GetEntityResponse = Message<"api.v1alpha1.GetEntityResponse"> & {
  /**
   * Requested entity
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Entity details (if requested)
   *
   * @generated from field: api.v1alpha1.EntityDetails details = 2;
   */
  details?: EntityDetails;
};

/**
 * Describes the message api.v1alpha1.GetEntityResponse.
 * Use `create(GetEntityResponseSchema)` to create a new message.
 */
export const GetEntityResponseSchema: GenMessage<GetEntityResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 44);

/**
 * Detailed entity information
 *
 * @generated from message api.v1alpha1.EntityDetails
 */
export type EntityDetails = Message<"api.v1alpha1.EntityDetails"> & {
  /**
   * Entity creation time
   *
   * @generated from field: int64 created_at = 1;
   */
  createdAt: bigint;

  /**
   * Entity last update time
   *
   * @generated from field: int64 updated_at = 2;
   */
  updatedAt: bigint;

  /**
   * Entity movement history
   *
   * @generated from field: repeated api.v1alpha1.MovementHistory movement_history = 3;
   */
  movementHistory: MovementHistory[];

  /**
   * Entity interaction history
   *
   * @generated from field: repeated api.v1alpha1.InteractionHistory interaction_history = 4;
   */
  interactionHistory: InteractionHistory[];

  /**
   * Entity statistics
   *
   * @generated from field: api.v1alpha1.EntityLifetimeStats lifetime_stats = 5;
   */
  lifetimeStats?: EntityLifetimeStats;
};

/**
 * Describes the message api.v1alpha1.EntityDetails.
 * Use `create(EntityDetailsSchema)` to create a new message.
 */
export const EntityDetailsSchema: GenMessage<EntityDetails> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 45);

/**
 * Entity movement history entry
 *
 * @generated from message api.v1alpha1.MovementHistory
 */
export type MovementHistory = Message<"api.v1alpha1.MovementHistory"> & {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * @generated from field: api.v1alpha1.Position from_position = 2;
   */
  fromPosition?: Position;

  /**
   * @generated from field: api.v1alpha1.Position to_position = 3;
   */
  toPosition?: Position;

  /**
   * @generated from field: double movement_cost = 4;
   */
  movementCost: number;

  /**
   * @generated from field: string movement_reason = 5;
   */
  movementReason: string;
};

/**
 * Describes the message api.v1alpha1.MovementHistory.
 * Use `create(MovementHistorySchema)` to create a new message.
 */
export const MovementHistorySchema: GenMessage<MovementHistory> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 46);

/**
 * Entity interaction history entry
 *
 * @generated from message api.v1alpha1.InteractionHistory
 */
export type InteractionHistory = Message<"api.v1alpha1.InteractionHistory"> & {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * @generated from field: string interaction_type = 2;
   */
  interactionType: string;

  /**
   * @generated from field: string interacting_entity = 3;
   */
  interactingEntity: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: map<string, string> interaction_data = 5;
   */
  interactionData: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.InteractionHistory.
 * Use `create(InteractionHistorySchema)` to create a new message.
 */
export const InteractionHistorySchema: GenMessage<InteractionHistory> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 47);

/**
 * Lifetime statistics for entity
 *
 * @generated from message api.v1alpha1.EntityLifetimeStats
 */
export type EntityLifetimeStats = Message<"api.v1alpha1.EntityLifetimeStats"> & {
  /**
   * Total distance moved
   *
   * @generated from field: double total_distance_moved = 1;
   */
  totalDistanceMoved: number;

  /**
   * Number of times moved
   *
   * @generated from field: int32 move_count = 2;
   */
  moveCount: number;

  /**
   * Number of interactions
   *
   * @generated from field: int32 interaction_count = 3;
   */
  interactionCount: number;

  /**
   * Time spent in room
   *
   * @generated from field: int64 time_in_room_ms = 4;
   */
  timeInRoomMs: bigint;

  /**
   * Number of updates
   *
   * @generated from field: int32 update_count = 5;
   */
  updateCount: number;
};

/**
 * Describes the message api.v1alpha1.EntityLifetimeStats.
 * Use `create(EntityLifetimeStatsSchema)` to create a new message.
 */
export const EntityLifetimeStatsSchema: GenMessage<EntityLifetimeStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 48);

/**
 * List entities request
 *
 * @generated from message api.v1alpha1.ListEntitiesRequest
 */
export type ListEntitiesRequest = Message<"api.v1alpha1.ListEntitiesRequest"> & {
  /**
   * Room to list entities from
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity filter
   *
   * @generated from field: api.v1alpha1.EntityFilter filter = 2;
   */
  filter?: EntityFilter;

  /**
   * Pagination
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 3;
   */
  pageInfo?: PageInfo;

  /**
   * Sort options
   *
   * @generated from field: api.v1alpha1.EntitySortOptions sort_options = 4;
   */
  sortOptions?: EntitySortOptions;

  /**
   * Whether to include entity details
   *
   * @generated from field: bool include_details = 5;
   */
  includeDetails: boolean;
};

/**
 * Describes the message api.v1alpha1.ListEntitiesRequest.
 * Use `create(ListEntitiesRequestSchema)` to create a new message.
 */
export const ListEntitiesRequestSchema: GenMessage<ListEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 49);

/**
 * Filter for entity queries
 *
 * @generated from message api.v1alpha1.EntityFilter
 */
export type EntityFilter = Message<"api.v1alpha1.EntityFilter"> & {
  /**
   * Entity types to include
   *
   * @generated from field: repeated string entity_types = 1;
   */
  entityTypes: string[];

  /**
   * Entity names to match (partial match)
   *
   * @generated from field: string name_pattern = 2;
   */
  namePattern: string;

  /**
   * Position-based filters
   *
   * @generated from field: api.v1alpha1.PositionFilter position_filter = 3;
   */
  positionFilter?: PositionFilter;

  /**
   * Property-based filters
   *
   * @generated from field: map<string, string> property_filters = 4;
   */
  propertyFilters: { [key: string]: string };

  /**
   * Entity states to include
   *
   * @generated from field: repeated string states = 5;
   */
  states: string[];
};

/**
 * Describes the message api.v1alpha1.EntityFilter.
 * Use `create(EntityFilterSchema)` to create a new message.
 */
export const EntityFilterSchema: GenMessage<EntityFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 50);

/**
 * Position-based entity filter
 *
 * @generated from message api.v1alpha1.PositionFilter
 */
export type PositionFilter = Message<"api.v1alpha1.PositionFilter"> & {
  /**
   * Center position for range filter
   *
   * @generated from field: api.v1alpha1.Position center = 1;
   */
  center?: Position;

  /**
   * Range from center
   *
   * @generated from field: double range = 2;
   */
  range: number;

  /**
   * Bounding box filter
   *
   * @generated from field: api.v1alpha1.BoundingBox bounding_box = 3;
   */
  boundingBox?: BoundingBox;
};

/**
 * Describes the message api.v1alpha1.PositionFilter.
 * Use `create(PositionFilterSchema)` to create a new message.
 */
export const PositionFilterSchema: GenMessage<PositionFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 51);

/**
 * Sort options for entity lists
 *
 * @generated from message api.v1alpha1.EntitySortOptions
 */
export type EntitySortOptions = Message<"api.v1alpha1.EntitySortOptions"> & {
  /**
   * Field to sort by
   *
   * @generated from field: api.v1alpha1.EntitySortField sort_by = 1;
   */
  sortBy: EntitySortField;

  /**
   * Sort direction
   *
   * @generated from field: api.v1alpha1.EntitySortDirection direction = 2;
   */
  direction: EntitySortDirection;
};

/**
 * Describes the message api.v1alpha1.EntitySortOptions.
 * Use `create(EntitySortOptionsSchema)` to create a new message.
 */
export const EntitySortOptionsSchema: GenMessage<EntitySortOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 52);

/**
 * List entities response
 *
 * @generated from message api.v1alpha1.ListEntitiesResponse
 */
export type ListEntitiesResponse = Message<"api.v1alpha1.ListEntitiesResponse"> & {
  /**
   * List of entities
   *
   * @generated from field: repeated api.v1alpha1.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * Pagination information
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo;

  /**
   * List statistics
   *
   * @generated from field: api.v1alpha1.EntityListStats stats = 3;
   */
  stats?: EntityListStats;
};

/**
 * Describes the message api.v1alpha1.ListEntitiesResponse.
 * Use `create(ListEntitiesResponseSchema)` to create a new message.
 */
export const ListEntitiesResponseSchema: GenMessage<ListEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 53);

/**
 * Statistics for entity list
 *
 * @generated from message api.v1alpha1.EntityListStats
 */
export type EntityListStats = Message<"api.v1alpha1.EntityListStats"> & {
  /**
   * Total entities matching filter
   *
   * @generated from field: int32 total_count = 1;
   */
  totalCount: number;

  /**
   * Entities returned in this page
   *
   * @generated from field: int32 returned_count = 2;
   */
  returnedCount: number;

  /**
   * Entities by type breakdown
   *
   * @generated from field: map<string, int32> entities_by_type = 3;
   */
  entitiesByType: { [key: string]: number };

  /**
   * Average entity size
   *
   * @generated from field: double average_size = 4;
   */
  averageSize: number;
};

/**
 * Describes the message api.v1alpha1.EntityListStats.
 * Use `create(EntityListStatsSchema)` to create a new message.
 */
export const EntityListStatsSchema: GenMessage<EntityListStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 54);

/**
 * Find entities by type request
 *
 * @generated from message api.v1alpha1.FindEntitiesByTypeRequest
 */
export type FindEntitiesByTypeRequest = Message<"api.v1alpha1.FindEntitiesByTypeRequest"> & {
  /**
   * Room to search in
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity type to find
   *
   * @generated from field: string entity_type = 2;
   */
  entityType: string;

  /**
   * Additional search criteria
   *
   * @generated from field: api.v1alpha1.TypeSearchCriteria search_criteria = 3;
   */
  searchCriteria?: TypeSearchCriteria;

  /**
   * Maximum results to return
   *
   * @generated from field: int32 max_results = 4;
   */
  maxResults: number;
};

/**
 * Describes the message api.v1alpha1.FindEntitiesByTypeRequest.
 * Use `create(FindEntitiesByTypeRequestSchema)` to create a new message.
 */
export const FindEntitiesByTypeRequestSchema: GenMessage<FindEntitiesByTypeRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 55);

/**
 * Search criteria for entity type queries
 *
 * @generated from message api.v1alpha1.TypeSearchCriteria
 */
export type TypeSearchCriteria = Message<"api.v1alpha1.TypeSearchCriteria"> & {
  /**
   * Required properties
   *
   * @generated from field: map<string, string> required_properties = 1;
   */
  requiredProperties: { [key: string]: string };

  /**
   * Position constraints
   *
   * @generated from field: api.v1alpha1.PositionFilter position_constraints = 2;
   */
  positionConstraints?: PositionFilter;

  /**
   * Size constraints
   *
   * @generated from field: api.v1alpha1.SizeFilter size_constraints = 3;
   */
  sizeConstraints?: SizeFilter;

  /**
   * State constraints
   *
   * @generated from field: repeated string allowed_states = 4;
   */
  allowedStates: string[];
};

/**
 * Describes the message api.v1alpha1.TypeSearchCriteria.
 * Use `create(TypeSearchCriteriaSchema)` to create a new message.
 */
export const TypeSearchCriteriaSchema: GenMessage<TypeSearchCriteria> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 56);

/**
 * Size-based filter
 *
 * @generated from message api.v1alpha1.SizeFilter
 */
export type SizeFilter = Message<"api.v1alpha1.SizeFilter"> & {
  /**
   * @generated from field: double min_size = 1;
   */
  minSize: number;

  /**
   * @generated from field: double max_size = 2;
   */
  maxSize: number;
};

/**
 * Describes the message api.v1alpha1.SizeFilter.
 * Use `create(SizeFilterSchema)` to create a new message.
 */
export const SizeFilterSchema: GenMessage<SizeFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 57);

/**
 * Find entities by type response
 *
 * @generated from message api.v1alpha1.FindEntitiesByTypeResponse
 */
export type FindEntitiesByTypeResponse = Message<"api.v1alpha1.FindEntitiesByTypeResponse"> & {
  /**
   * Found entities
   *
   * @generated from field: repeated api.v1alpha1.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * Search statistics
   *
   * @generated from field: api.v1alpha1.TypeSearchStats search_stats = 2;
   */
  searchStats?: TypeSearchStats;
};

/**
 * Describes the message api.v1alpha1.FindEntitiesByTypeResponse.
 * Use `create(FindEntitiesByTypeResponseSchema)` to create a new message.
 */
export const FindEntitiesByTypeResponseSchema: GenMessage<FindEntitiesByTypeResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 58);

/**
 * Statistics for type search
 *
 * @generated from message api.v1alpha1.TypeSearchStats
 */
export type TypeSearchStats = Message<"api.v1alpha1.TypeSearchStats"> & {
  /**
   * Search execution time
   *
   * @generated from field: int64 search_time_ms = 1;
   */
  searchTimeMs: bigint;

  /**
   * Total entities examined
   *
   * @generated from field: int32 entities_examined = 2;
   */
  entitiesExamined: number;

  /**
   * Entities matching criteria
   *
   * @generated from field: int32 entities_matched = 3;
   */
  entitiesMatched: number;

  /**
   * Whether results were truncated
   *
   * @generated from field: bool results_truncated = 4;
   */
  resultsTruncated: boolean;
};

/**
 * Describes the message api.v1alpha1.TypeSearchStats.
 * Use `create(TypeSearchStatsSchema)` to create a new message.
 */
export const TypeSearchStatsSchema: GenMessage<TypeSearchStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 59);

/**
 * List spawn templates request
 *
 * @generated from message api.v1alpha1.ListSpawnTemplatesRequest
 */
export type ListSpawnTemplatesRequest = Message<"api.v1alpha1.ListSpawnTemplatesRequest"> & {
  /**
   * Template filter
   *
   * @generated from field: api.v1alpha1.SpawnTemplateFilter filter = 1;
   */
  filter?: SpawnTemplateFilter;

  /**
   * Pagination
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo;

  /**
   * Whether to include template details
   *
   * @generated from field: bool include_details = 3;
   */
  includeDetails: boolean;
};

/**
 * Describes the message api.v1alpha1.ListSpawnTemplatesRequest.
 * Use `create(ListSpawnTemplatesRequestSchema)` to create a new message.
 */
export const ListSpawnTemplatesRequestSchema: GenMessage<ListSpawnTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 60);

/**
 * Filter for spawn templates
 *
 * @generated from message api.v1alpha1.SpawnTemplateFilter
 */
export type SpawnTemplateFilter = Message<"api.v1alpha1.SpawnTemplateFilter"> & {
  /**
   * Template categories
   *
   * @generated from field: repeated string categories = 1;
   */
  categories: string[];

  /**
   * Template themes
   *
   * @generated from field: repeated string themes = 2;
   */
  themes: string[];

  /**
   * Difficulty ranges
   *
   * @generated from field: api.v1alpha1.DifficultyRange difficulty_range = 3;
   */
  difficultyRange?: DifficultyRange;

  /**
   * Entity types included in template
   *
   * @generated from field: repeated string entity_types = 4;
   */
  entityTypes: string[];

  /**
   * Search term in name/description
   *
   * @generated from field: string search_term = 5;
   */
  searchTerm: string;
};

/**
 * Describes the message api.v1alpha1.SpawnTemplateFilter.
 * Use `create(SpawnTemplateFilterSchema)` to create a new message.
 */
export const SpawnTemplateFilterSchema: GenMessage<SpawnTemplateFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 61);

/**
 * Difficulty range filter
 *
 * @generated from message api.v1alpha1.DifficultyRange
 */
export type DifficultyRange = Message<"api.v1alpha1.DifficultyRange"> & {
  /**
   * @generated from field: double min_difficulty = 1;
   */
  minDifficulty: number;

  /**
   * @generated from field: double max_difficulty = 2;
   */
  maxDifficulty: number;
};

/**
 * Describes the message api.v1alpha1.DifficultyRange.
 * Use `create(DifficultyRangeSchema)` to create a new message.
 */
export const DifficultyRangeSchema: GenMessage<DifficultyRange> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 62);

/**
 * List spawn templates response
 *
 * @generated from message api.v1alpha1.ListSpawnTemplatesResponse
 */
export type ListSpawnTemplatesResponse = Message<"api.v1alpha1.ListSpawnTemplatesResponse"> & {
  /**
   * Available spawn templates
   *
   * @generated from field: repeated api.v1alpha1.SpawnTemplate templates = 1;
   */
  templates: SpawnTemplate[];

  /**
   * Pagination information
   *
   * @generated from field: api.v1alpha1.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo;
};

/**
 * Describes the message api.v1alpha1.ListSpawnTemplatesResponse.
 * Use `create(ListSpawnTemplatesResponseSchema)` to create a new message.
 */
export const ListSpawnTemplatesResponseSchema: GenMessage<ListSpawnTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 63);

/**
 * Spawn template definition
 *
 * @generated from message api.v1alpha1.SpawnTemplate
 */
export type SpawnTemplate = Message<"api.v1alpha1.SpawnTemplate"> & {
  /**
   * Template identifier
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Template name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Template description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Template category
   *
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * Template theme
   *
   * @generated from field: string theme = 5;
   */
  theme: string;

  /**
   * Difficulty rating
   *
   * @generated from field: double difficulty_rating = 6;
   */
  difficultyRating: number;

  /**
   * Entity spawn definitions
   *
   * @generated from field: repeated api.v1alpha1.TemplateEntitySpawn entity_spawns = 7;
   */
  entitySpawns: TemplateEntitySpawn[];

  /**
   * Template metadata
   *
   * @generated from field: api.v1alpha1.SpawnTemplateMetadata metadata = 8;
   */
  metadata?: SpawnTemplateMetadata;
};

/**
 * Describes the message api.v1alpha1.SpawnTemplate.
 * Use `create(SpawnTemplateSchema)` to create a new message.
 */
export const SpawnTemplateSchema: GenMessage<SpawnTemplate> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 64);

/**
 * Entity spawn definition within template
 *
 * @generated from message api.v1alpha1.TemplateEntitySpawn
 */
export type TemplateEntitySpawn = Message<"api.v1alpha1.TemplateEntitySpawn"> & {
  /**
   * Entity definition
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 1;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Spawn probability (0.0-1.0)
   *
   * @generated from field: double spawn_probability = 2;
   */
  spawnProbability: number;

  /**
   * Minimum count to spawn
   *
   * @generated from field: int32 min_count = 3;
   */
  minCount: number;

  /**
   * Maximum count to spawn
   *
   * @generated from field: int32 max_count = 4;
   */
  maxCount: number;

  /**
   * Spawn weight for random selection
   *
   * @generated from field: double spawn_weight = 5;
   */
  spawnWeight: number;

  /**
   * Location constraints
   *
   * @generated from field: api.v1alpha1.SpawnConstraints location_constraints = 6;
   */
  locationConstraints?: SpawnConstraints;
};

/**
 * Describes the message api.v1alpha1.TemplateEntitySpawn.
 * Use `create(TemplateEntitySpawnSchema)` to create a new message.
 */
export const TemplateEntitySpawnSchema: GenMessage<TemplateEntitySpawn> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 65);

/**
 * Metadata for spawn template
 *
 * @generated from message api.v1alpha1.SpawnTemplateMetadata
 */
export type SpawnTemplateMetadata = Message<"api.v1alpha1.SpawnTemplateMetadata"> & {
  /**
   * Template author
   *
   * @generated from field: string author = 1;
   */
  author: string;

  /**
   * Template version
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Creation timestamp
   *
   * @generated from field: int64 created_at = 3;
   */
  createdAt: bigint;

  /**
   * Last update timestamp
   *
   * @generated from field: int64 updated_at = 4;
   */
  updatedAt: bigint;

  /**
   * Usage statistics
   *
   * @generated from field: api.v1alpha1.SpawnTemplateUsageStats usage_stats = 5;
   */
  usageStats?: SpawnTemplateUsageStats;

  /**
   * Template tags
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];
};

/**
 * Describes the message api.v1alpha1.SpawnTemplateMetadata.
 * Use `create(SpawnTemplateMetadataSchema)` to create a new message.
 */
export const SpawnTemplateMetadataSchema: GenMessage<SpawnTemplateMetadata> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 66);

/**
 * Usage statistics for spawn template
 *
 * @generated from message api.v1alpha1.SpawnTemplateUsageStats
 */
export type SpawnTemplateUsageStats = Message<"api.v1alpha1.SpawnTemplateUsageStats"> & {
  /**
   * Number of times template has been used
   *
   * @generated from field: int64 usage_count = 1;
   */
  usageCount: bigint;

  /**
   * Total entities spawned from template
   *
   * @generated from field: int64 entities_spawned = 2;
   */
  entitiesSpawned: bigint;

  /**
   * Average entities per spawn
   *
   * @generated from field: double average_entities_per_spawn = 3;
   */
  averageEntitiesPerSpawn: number;

  /**
   * Success rate of spawns
   *
   * @generated from field: double spawn_success_rate = 4;
   */
  spawnSuccessRate: number;

  /**
   * Last used timestamp
   *
   * @generated from field: int64 last_used = 5;
   */
  lastUsed: bigint;

  /**
   * Average user rating
   *
   * @generated from field: double average_rating = 6;
   */
  averageRating: number;

  /**
   * Number of ratings
   *
   * @generated from field: int32 rating_count = 7;
   */
  ratingCount: number;
};

/**
 * Describes the message api.v1alpha1.SpawnTemplateUsageStats.
 * Use `create(SpawnTemplateUsageStatsSchema)` to create a new message.
 */
export const SpawnTemplateUsageStatsSchema: GenMessage<SpawnTemplateUsageStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 67);

/**
 * Create spawn template request
 *
 * @generated from message api.v1alpha1.CreateSpawnTemplateRequest
 */
export type CreateSpawnTemplateRequest = Message<"api.v1alpha1.CreateSpawnTemplateRequest"> & {
  /**
   * Template to create
   *
   * @generated from field: api.v1alpha1.SpawnTemplate template = 1;
   */
  template?: SpawnTemplate;

  /**
   * Whether to make template public
   *
   * @generated from field: bool is_public = 2;
   */
  isPublic: boolean;
};

/**
 * Describes the message api.v1alpha1.CreateSpawnTemplateRequest.
 * Use `create(CreateSpawnTemplateRequestSchema)` to create a new message.
 */
export const CreateSpawnTemplateRequestSchema: GenMessage<CreateSpawnTemplateRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 68);

/**
 * Create spawn template response
 *
 * @generated from message api.v1alpha1.CreateSpawnTemplateResponse
 */
export type CreateSpawnTemplateResponse = Message<"api.v1alpha1.CreateSpawnTemplateResponse"> & {
  /**
   * Created template
   *
   * @generated from field: api.v1alpha1.SpawnTemplate template = 1;
   */
  template?: SpawnTemplate;

  /**
   * Creation confirmation
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message api.v1alpha1.CreateSpawnTemplateResponse.
 * Use `create(CreateSpawnTemplateResponseSchema)` to create a new message.
 */
export const CreateSpawnTemplateResponseSchema: GenMessage<CreateSpawnTemplateResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 69);

/**
 * Get spawn template request
 *
 * @generated from message api.v1alpha1.GetSpawnTemplateRequest
 */
export type GetSpawnTemplateRequest = Message<"api.v1alpha1.GetSpawnTemplateRequest"> & {
  /**
   * Template identifier
   *
   * @generated from field: string template_id = 1;
   */
  templateId: string;

  /**
   * Whether to include usage statistics
   *
   * @generated from field: bool include_stats = 2;
   */
  includeStats: boolean;
};

/**
 * Describes the message api.v1alpha1.GetSpawnTemplateRequest.
 * Use `create(GetSpawnTemplateRequestSchema)` to create a new message.
 */
export const GetSpawnTemplateRequestSchema: GenMessage<GetSpawnTemplateRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 70);

/**
 * Get spawn template response
 *
 * @generated from message api.v1alpha1.GetSpawnTemplateResponse
 */
export type GetSpawnTemplateResponse = Message<"api.v1alpha1.GetSpawnTemplateResponse"> & {
  /**
   * Requested template
   *
   * @generated from field: api.v1alpha1.SpawnTemplate template = 1;
   */
  template?: SpawnTemplate;

  /**
   * Template usage statistics (if requested)
   *
   * @generated from field: api.v1alpha1.SpawnTemplateUsageStats usage_stats = 2;
   */
  usageStats?: SpawnTemplateUsageStats;
};

/**
 * Describes the message api.v1alpha1.GetSpawnTemplateResponse.
 * Use `create(GetSpawnTemplateResponseSchema)` to create a new message.
 */
export const GetSpawnTemplateResponseSchema: GenMessage<GetSpawnTemplateResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 71);

/**
 * Batch spawn entities request
 *
 * @generated from message api.v1alpha1.BatchSpawnEntitiesRequest
 */
export type BatchSpawnEntitiesRequest = Message<"api.v1alpha1.BatchSpawnEntitiesRequest"> & {
  /**
   * Room to spawn entities in
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Batch of spawn operations
   *
   * @generated from field: repeated api.v1alpha1.SpawnOperation spawn_operations = 2;
   */
  spawnOperations: SpawnOperation[];

  /**
   * Batch options
   *
   * @generated from field: api.v1alpha1.BatchOptions batch_options = 3;
   */
  batchOptions?: BatchOptions;
};

/**
 * Describes the message api.v1alpha1.BatchSpawnEntitiesRequest.
 * Use `create(BatchSpawnEntitiesRequestSchema)` to create a new message.
 */
export const BatchSpawnEntitiesRequestSchema: GenMessage<BatchSpawnEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 72);

/**
 * Individual spawn operation in batch
 *
 * @generated from message api.v1alpha1.SpawnOperation
 */
export type SpawnOperation = Message<"api.v1alpha1.SpawnOperation"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity definition
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 2;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Spawn options
   *
   * @generated from field: api.v1alpha1.SpawnOptions spawn_options = 3;
   */
  spawnOptions?: SpawnOptions;

  /**
   * Location preferences
   *
   * @generated from field: api.v1alpha1.SpawnLocationPreferences location_preferences = 4;
   */
  locationPreferences?: SpawnLocationPreferences;
};

/**
 * Describes the message api.v1alpha1.SpawnOperation.
 * Use `create(SpawnOperationSchema)` to create a new message.
 */
export const SpawnOperationSchema: GenMessage<SpawnOperation> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 73);

/**
 * Options for batch operations
 *
 * @generated from message api.v1alpha1.BatchOptions
 */
export type BatchOptions = Message<"api.v1alpha1.BatchOptions"> & {
  /**
   * Whether to abort all operations if any fail
   *
   * @generated from field: bool all_or_nothing = 1;
   */
  allOrNothing: boolean;

  /**
   * Maximum time for entire batch
   *
   * @generated from field: int32 timeout_ms = 2;
   */
  timeoutMs: number;

  /**
   * Number of parallel operations
   *
   * @generated from field: int32 parallelism = 3;
   */
  parallelism: number;

  /**
   * Whether to maintain order of operations
   *
   * @generated from field: bool maintain_order = 4;
   */
  maintainOrder: boolean;
};

/**
 * Describes the message api.v1alpha1.BatchOptions.
 * Use `create(BatchOptionsSchema)` to create a new message.
 */
export const BatchOptionsSchema: GenMessage<BatchOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 74);

/**
 * Batch spawn entities response
 *
 * @generated from message api.v1alpha1.BatchSpawnEntitiesResponse
 */
export type BatchSpawnEntitiesResponse = Message<"api.v1alpha1.BatchSpawnEntitiesResponse"> & {
  /**
   * Successful spawn results
   *
   * @generated from field: repeated api.v1alpha1.BatchSpawnResult successful_spawns = 1;
   */
  successfulSpawns: BatchSpawnResult[];

  /**
   * Failed spawn operations
   *
   * @generated from field: repeated api.v1alpha1.BatchSpawnFailure failed_spawns = 2;
   */
  failedSpawns: BatchSpawnFailure[];

  /**
   * Batch statistics
   *
   * @generated from field: api.v1alpha1.BatchSpawnStats batch_stats = 3;
   */
  batchStats?: BatchSpawnStats;
};

/**
 * Describes the message api.v1alpha1.BatchSpawnEntitiesResponse.
 * Use `create(BatchSpawnEntitiesResponseSchema)` to create a new message.
 */
export const BatchSpawnEntitiesResponseSchema: GenMessage<BatchSpawnEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 75);

/**
 * Result of successful batch spawn operation
 *
 * @generated from message api.v1alpha1.BatchSpawnResult
 */
export type BatchSpawnResult = Message<"api.v1alpha1.BatchSpawnResult"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Spawned entity
   *
   * @generated from field: api.v1alpha1.Entity entity = 2;
   */
  entity?: Entity;

  /**
   * Spawn statistics
   *
   * @generated from field: api.v1alpha1.SpawnStats spawn_stats = 3;
   */
  spawnStats?: SpawnStats;
};

/**
 * Describes the message api.v1alpha1.BatchSpawnResult.
 * Use `create(BatchSpawnResultSchema)` to create a new message.
 */
export const BatchSpawnResultSchema: GenMessage<BatchSpawnResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 76);

/**
 * Failed batch spawn operation
 *
 * @generated from message api.v1alpha1.BatchSpawnFailure
 */
export type BatchSpawnFailure = Message<"api.v1alpha1.BatchSpawnFailure"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity definition that failed
   *
   * @generated from field: api.v1alpha1.EntityDefinition entity_definition = 2;
   */
  entityDefinition?: EntityDefinition;

  /**
   * Failure reason
   *
   * @generated from field: string failure_reason = 3;
   */
  failureReason: string;

  /**
   * Error details
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 4;
   */
  errors: RoomError[];
};

/**
 * Describes the message api.v1alpha1.BatchSpawnFailure.
 * Use `create(BatchSpawnFailureSchema)` to create a new message.
 */
export const BatchSpawnFailureSchema: GenMessage<BatchSpawnFailure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 77);

/**
 * Statistics for batch spawn operations
 *
 * @generated from message api.v1alpha1.BatchSpawnStats
 */
export type BatchSpawnStats = Message<"api.v1alpha1.BatchSpawnStats"> & {
  /**
   * Total batch time
   *
   * @generated from field: int64 total_batch_time_ms = 1;
   */
  totalBatchTimeMs: bigint;

  /**
   * Successful operations
   *
   * @generated from field: int32 successful_operations = 2;
   */
  successfulOperations: number;

  /**
   * Failed operations
   *
   * @generated from field: int32 failed_operations = 3;
   */
  failedOperations: number;

  /**
   * Average operation time
   *
   * @generated from field: double average_operation_time_ms = 4;
   */
  averageOperationTimeMs: number;

  /**
   * Parallel operations executed
   *
   * @generated from field: int32 parallel_operations = 5;
   */
  parallelOperations: number;
};

/**
 * Describes the message api.v1alpha1.BatchSpawnStats.
 * Use `create(BatchSpawnStatsSchema)` to create a new message.
 */
export const BatchSpawnStatsSchema: GenMessage<BatchSpawnStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 78);

/**
 * Batch move entities request
 *
 * @generated from message api.v1alpha1.BatchMoveEntitiesRequest
 */
export type BatchMoveEntitiesRequest = Message<"api.v1alpha1.BatchMoveEntitiesRequest"> & {
  /**
   * Room containing entities
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Batch of move operations
   *
   * @generated from field: repeated api.v1alpha1.MoveOperation move_operations = 2;
   */
  moveOperations: MoveOperation[];

  /**
   * Batch options
   *
   * @generated from field: api.v1alpha1.BatchOptions batch_options = 3;
   */
  batchOptions?: BatchOptions;
};

/**
 * Describes the message api.v1alpha1.BatchMoveEntitiesRequest.
 * Use `create(BatchMoveEntitiesRequestSchema)` to create a new message.
 */
export const BatchMoveEntitiesRequestSchema: GenMessage<BatchMoveEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 79);

/**
 * Individual move operation in batch
 *
 * @generated from message api.v1alpha1.MoveOperation
 */
export type MoveOperation = Message<"api.v1alpha1.MoveOperation"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity to move
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * New position
   *
   * @generated from field: api.v1alpha1.Position new_position = 3;
   */
  newPosition?: Position;

  /**
   * Movement options
   *
   * @generated from field: api.v1alpha1.EntityMovementOptions movement_options = 4;
   */
  movementOptions?: EntityMovementOptions;
};

/**
 * Describes the message api.v1alpha1.MoveOperation.
 * Use `create(MoveOperationSchema)` to create a new message.
 */
export const MoveOperationSchema: GenMessage<MoveOperation> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 80);

/**
 * Batch move entities response
 *
 * @generated from message api.v1alpha1.BatchMoveEntitiesResponse
 */
export type BatchMoveEntitiesResponse = Message<"api.v1alpha1.BatchMoveEntitiesResponse"> & {
  /**
   * Successful move results
   *
   * @generated from field: repeated api.v1alpha1.BatchMoveResult successful_moves = 1;
   */
  successfulMoves: BatchMoveResult[];

  /**
   * Failed move operations
   *
   * @generated from field: repeated api.v1alpha1.BatchMoveFailure failed_moves = 2;
   */
  failedMoves: BatchMoveFailure[];

  /**
   * Batch statistics
   *
   * @generated from field: api.v1alpha1.BatchMoveStats batch_stats = 3;
   */
  batchStats?: BatchMoveStats;
};

/**
 * Describes the message api.v1alpha1.BatchMoveEntitiesResponse.
 * Use `create(BatchMoveEntitiesResponseSchema)` to create a new message.
 */
export const BatchMoveEntitiesResponseSchema: GenMessage<BatchMoveEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 81);

/**
 * Result of successful batch move operation
 *
 * @generated from message api.v1alpha1.BatchMoveResult
 */
export type BatchMoveResult = Message<"api.v1alpha1.BatchMoveResult"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Updated entity
   *
   * @generated from field: api.v1alpha1.Entity entity = 2;
   */
  entity?: Entity;

  /**
   * Movement statistics
   *
   * @generated from field: api.v1alpha1.MovementStats movement_stats = 3;
   */
  movementStats?: MovementStats;
};

/**
 * Describes the message api.v1alpha1.BatchMoveResult.
 * Use `create(BatchMoveResultSchema)` to create a new message.
 */
export const BatchMoveResultSchema: GenMessage<BatchMoveResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 82);

/**
 * Failed batch move operation
 *
 * @generated from message api.v1alpha1.BatchMoveFailure
 */
export type BatchMoveFailure = Message<"api.v1alpha1.BatchMoveFailure"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity that failed to move
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Failure reason
   *
   * @generated from field: string failure_reason = 3;
   */
  failureReason: string;

  /**
   * Error details
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 4;
   */
  errors: RoomError[];
};

/**
 * Describes the message api.v1alpha1.BatchMoveFailure.
 * Use `create(BatchMoveFailureSchema)` to create a new message.
 */
export const BatchMoveFailureSchema: GenMessage<BatchMoveFailure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 83);

/**
 * Statistics for batch move operations
 *
 * @generated from message api.v1alpha1.BatchMoveStats
 */
export type BatchMoveStats = Message<"api.v1alpha1.BatchMoveStats"> & {
  /**
   * Total batch time
   *
   * @generated from field: int64 total_batch_time_ms = 1;
   */
  totalBatchTimeMs: bigint;

  /**
   * Successful operations
   *
   * @generated from field: int32 successful_operations = 2;
   */
  successfulOperations: number;

  /**
   * Failed operations
   *
   * @generated from field: int32 failed_operations = 3;
   */
  failedOperations: number;

  /**
   * Average operation time
   *
   * @generated from field: double average_operation_time_ms = 4;
   */
  averageOperationTimeMs: number;

  /**
   * Total distance moved
   *
   * @generated from field: double total_distance_moved = 5;
   */
  totalDistanceMoved: number;
};

/**
 * Describes the message api.v1alpha1.BatchMoveStats.
 * Use `create(BatchMoveStatsSchema)` to create a new message.
 */
export const BatchMoveStatsSchema: GenMessage<BatchMoveStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 84);

/**
 * Batch remove entities request
 *
 * @generated from message api.v1alpha1.BatchRemoveEntitiesRequest
 */
export type BatchRemoveEntitiesRequest = Message<"api.v1alpha1.BatchRemoveEntitiesRequest"> & {
  /**
   * Room containing entities
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Batch of remove operations
   *
   * @generated from field: repeated api.v1alpha1.RemoveOperation remove_operations = 2;
   */
  removeOperations: RemoveOperation[];

  /**
   * Batch options
   *
   * @generated from field: api.v1alpha1.BatchOptions batch_options = 3;
   */
  batchOptions?: BatchOptions;
};

/**
 * Describes the message api.v1alpha1.BatchRemoveEntitiesRequest.
 * Use `create(BatchRemoveEntitiesRequestSchema)` to create a new message.
 */
export const BatchRemoveEntitiesRequestSchema: GenMessage<BatchRemoveEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 85);

/**
 * Individual remove operation in batch
 *
 * @generated from message api.v1alpha1.RemoveOperation
 */
export type RemoveOperation = Message<"api.v1alpha1.RemoveOperation"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity to remove
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Removal options
   *
   * @generated from field: api.v1alpha1.RemovalOptions removal_options = 3;
   */
  removalOptions?: RemovalOptions;
};

/**
 * Describes the message api.v1alpha1.RemoveOperation.
 * Use `create(RemoveOperationSchema)` to create a new message.
 */
export const RemoveOperationSchema: GenMessage<RemoveOperation> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 86);

/**
 * Batch remove entities response
 *
 * @generated from message api.v1alpha1.BatchRemoveEntitiesResponse
 */
export type BatchRemoveEntitiesResponse = Message<"api.v1alpha1.BatchRemoveEntitiesResponse"> & {
  /**
   * Successful remove results
   *
   * @generated from field: repeated api.v1alpha1.BatchRemoveResult successful_removes = 1;
   */
  successfulRemoves: BatchRemoveResult[];

  /**
   * Failed remove operations
   *
   * @generated from field: repeated api.v1alpha1.BatchRemoveFailure failed_removes = 2;
   */
  failedRemoves: BatchRemoveFailure[];

  /**
   * Batch statistics
   *
   * @generated from field: api.v1alpha1.BatchRemoveStats batch_stats = 3;
   */
  batchStats?: BatchRemoveStats;
};

/**
 * Describes the message api.v1alpha1.BatchRemoveEntitiesResponse.
 * Use `create(BatchRemoveEntitiesResponseSchema)` to create a new message.
 */
export const BatchRemoveEntitiesResponseSchema: GenMessage<BatchRemoveEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 87);

/**
 * Result of successful batch remove operation
 *
 * @generated from message api.v1alpha1.BatchRemoveResult
 */
export type BatchRemoveResult = Message<"api.v1alpha1.BatchRemoveResult"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Confirmation message
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Removal statistics
   *
   * @generated from field: api.v1alpha1.RemovalStats removal_stats = 3;
   */
  removalStats?: RemovalStats;
};

/**
 * Describes the message api.v1alpha1.BatchRemoveResult.
 * Use `create(BatchRemoveResultSchema)` to create a new message.
 */
export const BatchRemoveResultSchema: GenMessage<BatchRemoveResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 88);

/**
 * Failed batch remove operation
 *
 * @generated from message api.v1alpha1.BatchRemoveFailure
 */
export type BatchRemoveFailure = Message<"api.v1alpha1.BatchRemoveFailure"> & {
  /**
   * Operation identifier
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * Entity that failed to remove
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Failure reason
   *
   * @generated from field: string failure_reason = 3;
   */
  failureReason: string;

  /**
   * Error details
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 4;
   */
  errors: RoomError[];
};

/**
 * Describes the message api.v1alpha1.BatchRemoveFailure.
 * Use `create(BatchRemoveFailureSchema)` to create a new message.
 */
export const BatchRemoveFailureSchema: GenMessage<BatchRemoveFailure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 89);

/**
 * Statistics for batch remove operations
 *
 * @generated from message api.v1alpha1.BatchRemoveStats
 */
export type BatchRemoveStats = Message<"api.v1alpha1.BatchRemoveStats"> & {
  /**
   * Total batch time
   *
   * @generated from field: int64 total_batch_time_ms = 1;
   */
  totalBatchTimeMs: bigint;

  /**
   * Successful operations
   *
   * @generated from field: int32 successful_operations = 2;
   */
  successfulOperations: number;

  /**
   * Failed operations
   *
   * @generated from field: int32 failed_operations = 3;
   */
  failedOperations: number;

  /**
   * Average operation time
   *
   * @generated from field: double average_operation_time_ms = 4;
   */
  averageOperationTimeMs: number;

  /**
   * Total loot items dropped
   *
   * @generated from field: int32 total_loot_dropped = 5;
   */
  totalLootDropped: number;
};

/**
 * Describes the message api.v1alpha1.BatchRemoveStats.
 * Use `create(BatchRemoveStatsSchema)` to create a new message.
 */
export const BatchRemoveStatsSchema: GenMessage<BatchRemoveStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spawn, 90);

/**
 * Spawn area types
 *
 * @generated from enum api.v1alpha1.SpawnAreaType
 */
export enum SpawnAreaType {
  /**
   * @generated from enum value: SPAWN_AREA_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SPAWN_AREA_TYPE_CIRCLE = 1;
   */
  CIRCLE = 1,

  /**
   * @generated from enum value: SPAWN_AREA_TYPE_RECTANGLE = 2;
   */
  RECTANGLE = 2,

  /**
   * @generated from enum value: SPAWN_AREA_TYPE_CUSTOM = 3;
   */
  CUSTOM = 3,
}

/**
 * Describes the enum api.v1alpha1.SpawnAreaType.
 */
export const SpawnAreaTypeSchema: GenEnum<SpawnAreaType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spawn, 0);

/**
 * Strategy for spawn order
 *
 * @generated from enum api.v1alpha1.SpawnOrderStrategy
 */
export enum SpawnOrderStrategy {
  /**
   * @generated from enum value: SPAWN_ORDER_STRATEGY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Spawn by priority first
   *
   * @generated from enum value: SPAWN_ORDER_STRATEGY_PRIORITY = 1;
   */
  PRIORITY = 1,

  /**
   * Largest entities first
   *
   * @generated from enum value: SPAWN_ORDER_STRATEGY_SIZE_DESC = 2;
   */
  SIZE_DESC = 2,

  /**
   * Smallest entities first
   *
   * @generated from enum value: SPAWN_ORDER_STRATEGY_SIZE_ASC = 3;
   */
  SIZE_ASC = 3,

  /**
   * Random order
   *
   * @generated from enum value: SPAWN_ORDER_STRATEGY_RANDOM = 4;
   */
  RANDOM = 4,
}

/**
 * Describes the enum api.v1alpha1.SpawnOrderStrategy.
 */
export const SpawnOrderStrategySchema: GenEnum<SpawnOrderStrategy> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spawn, 1);

/**
 * Sort direction for entities
 *
 * @generated from enum api.v1alpha1.EntitySortDirection
 */
export enum EntitySortDirection {
  /**
   * @generated from enum value: ENTITY_SORT_DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENTITY_SORT_DIRECTION_ASC = 1;
   */
  ASC = 1,

  /**
   * @generated from enum value: ENTITY_SORT_DIRECTION_DESC = 2;
   */
  DESC = 2,
}

/**
 * Describes the enum api.v1alpha1.EntitySortDirection.
 */
export const EntitySortDirectionSchema: GenEnum<EntitySortDirection> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spawn, 2);

/**
 * Available sort fields for entities
 *
 * @generated from enum api.v1alpha1.EntitySortField
 */
export enum EntitySortField {
  /**
   * @generated from enum value: ENTITY_SORT_FIELD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENTITY_SORT_FIELD_NAME = 1;
   */
  NAME = 1,

  /**
   * @generated from enum value: ENTITY_SORT_FIELD_TYPE = 2;
   */
  TYPE = 2,

  /**
   * @generated from enum value: ENTITY_SORT_FIELD_CREATED_AT = 3;
   */
  CREATED_AT = 3,

  /**
   * @generated from enum value: ENTITY_SORT_FIELD_DISTANCE_FROM_CENTER = 4;
   */
  DISTANCE_FROM_CENTER = 4,

  /**
   * @generated from enum value: ENTITY_SORT_FIELD_SIZE = 5;
   */
  SIZE = 5,
}

/**
 * Describes the enum api.v1alpha1.EntitySortField.
 */
export const EntitySortFieldSchema: GenEnum<EntitySortField> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spawn, 3);

/**
 * Entity spawning and management service for rooms
 * Handles entity creation, placement, movement, and lifecycle management
 *
 * @generated from service api.v1alpha1.SpawnService
 */
export const SpawnService: GenService<{
  /**
   * Entity spawning operations
   *
   * @generated from rpc api.v1alpha1.SpawnService.SpawnEntity
   */
  spawnEntity: {
    methodKind: "unary";
    input: typeof SpawnEntityRequestSchema;
    output: typeof SpawnEntityResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.SpawnMultipleEntities
   */
  spawnMultipleEntities: {
    methodKind: "unary";
    input: typeof SpawnMultipleEntitiesRequestSchema;
    output: typeof SpawnMultipleEntitiesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.SpawnFromTemplate
   */
  spawnFromTemplate: {
    methodKind: "unary";
    input: typeof SpawnFromTemplateRequestSchema;
    output: typeof SpawnFromTemplateResponseSchema;
  },
  /**
   * Entity management operations
   *
   * @generated from rpc api.v1alpha1.SpawnService.MoveEntity
   */
  moveEntity: {
    methodKind: "unary";
    input: typeof MoveEntityRequestSchema;
    output: typeof MoveEntityResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.UpdateEntity
   */
  updateEntity: {
    methodKind: "unary";
    input: typeof UpdateEntityRequestSchema;
    output: typeof UpdateEntityResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.RemoveEntity
   */
  removeEntity: {
    methodKind: "unary";
    input: typeof RemoveEntityRequestSchema;
    output: typeof RemoveEntityResponseSchema;
  },
  /**
   * Entity query operations
   *
   * @generated from rpc api.v1alpha1.SpawnService.GetEntity
   */
  getEntity: {
    methodKind: "unary";
    input: typeof GetEntityRequestSchema;
    output: typeof GetEntityResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.ListEntities
   */
  listEntities: {
    methodKind: "unary";
    input: typeof ListEntitiesRequestSchema;
    output: typeof ListEntitiesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.FindEntitiesByType
   */
  findEntitiesByType: {
    methodKind: "unary";
    input: typeof FindEntitiesByTypeRequestSchema;
    output: typeof FindEntitiesByTypeResponseSchema;
  },
  /**
   * Spawn template operations
   *
   * @generated from rpc api.v1alpha1.SpawnService.ListSpawnTemplates
   */
  listSpawnTemplates: {
    methodKind: "unary";
    input: typeof ListSpawnTemplatesRequestSchema;
    output: typeof ListSpawnTemplatesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.CreateSpawnTemplate
   */
  createSpawnTemplate: {
    methodKind: "unary";
    input: typeof CreateSpawnTemplateRequestSchema;
    output: typeof CreateSpawnTemplateResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.GetSpawnTemplate
   */
  getSpawnTemplate: {
    methodKind: "unary";
    input: typeof GetSpawnTemplateRequestSchema;
    output: typeof GetSpawnTemplateResponseSchema;
  },
  /**
   * Batch operations
   *
   * @generated from rpc api.v1alpha1.SpawnService.BatchSpawnEntities
   */
  batchSpawnEntities: {
    methodKind: "unary";
    input: typeof BatchSpawnEntitiesRequestSchema;
    output: typeof BatchSpawnEntitiesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.BatchMoveEntities
   */
  batchMoveEntities: {
    methodKind: "unary";
    input: typeof BatchMoveEntitiesRequestSchema;
    output: typeof BatchMoveEntitiesResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpawnService.BatchRemoveEntities
   */
  batchRemoveEntities: {
    methodKind: "unary";
    input: typeof BatchRemoveEntitiesRequestSchema;
    output: typeof BatchRemoveEntitiesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_api_v1alpha1_room_spawn, 0);

