// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/room_selectables.proto

#include "api/v1alpha1/room_selectables.pb.h"
#include "api/v1alpha1/room_selectables.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace api {
namespace v1alpha1 {

static const char* SelectionTableService_method_names[] = {
  "/api.v1alpha1.SelectionTableService/CreateSelectionTable",
  "/api.v1alpha1.SelectionTableService/GetSelectionTable",
  "/api.v1alpha1.SelectionTableService/UpdateSelectionTable",
  "/api.v1alpha1.SelectionTableService/DeleteSelectionTable",
  "/api.v1alpha1.SelectionTableService/ListSelectionTables",
  "/api.v1alpha1.SelectionTableService/RollOnTable",
  "/api.v1alpha1.SelectionTableService/RollMultiple",
  "/api.v1alpha1.SelectionTableService/RollWithModifiers",
  "/api.v1alpha1.SelectionTableService/BatchRollTables",
  "/api.v1alpha1.SelectionTableService/GenerateEncounter",
  "/api.v1alpha1.SelectionTableService/GenerateLoot",
  "/api.v1alpha1.SelectionTableService/ValidateSelectionTable",
  "/api.v1alpha1.SelectionTableService/GetTableStatistics",
  "/api.v1alpha1.SelectionTableService/ExportSelectionTable",
  "/api.v1alpha1.SelectionTableService/ImportSelectionTable",
};

std::unique_ptr< SelectionTableService::Stub> SelectionTableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SelectionTableService::Stub> stub(new SelectionTableService::Stub(channel, options));
  return stub;
}

SelectionTableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateSelectionTable_(SelectionTableService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSelectionTable_(SelectionTableService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSelectionTable_(SelectionTableService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSelectionTable_(SelectionTableService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSelectionTables_(SelectionTableService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollOnTable_(SelectionTableService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollMultiple_(SelectionTableService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollWithModifiers_(SelectionTableService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchRollTables_(SelectionTableService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateEncounter_(SelectionTableService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateLoot_(SelectionTableService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateSelectionTable_(SelectionTableService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTableStatistics_(SelectionTableService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportSelectionTable_(SelectionTableService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportSelectionTable_(SelectionTableService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SelectionTableService::Stub::CreateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSelectionTableRequest& request, ::api::v1alpha1::CreateSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::CreateSelectionTableRequest, ::api::v1alpha1::CreateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::CreateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSelectionTableRequest* request, ::api::v1alpha1::CreateSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::CreateSelectionTableRequest, ::api::v1alpha1::CreateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::CreateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSelectionTableRequest* request, ::api::v1alpha1::CreateSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncCreateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::CreateSelectionTableResponse, ::api::v1alpha1::CreateSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSelectionTableResponse>* SelectionTableService::Stub::AsyncCreateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::GetSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::GetSelectionTableRequest& request, ::api::v1alpha1::GetSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetSelectionTableRequest, ::api::v1alpha1::GetSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::GetSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::GetSelectionTableRequest* request, ::api::v1alpha1::GetSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetSelectionTableRequest, ::api::v1alpha1::GetSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::GetSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::GetSelectionTableRequest* request, ::api::v1alpha1::GetSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncGetSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetSelectionTableResponse, ::api::v1alpha1::GetSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSelectionTableResponse>* SelectionTableService::Stub::AsyncGetSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::UpdateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest& request, ::api::v1alpha1::UpdateSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::UpdateSelectionTableRequest, ::api::v1alpha1::UpdateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::UpdateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest* request, ::api::v1alpha1::UpdateSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::UpdateSelectionTableRequest, ::api::v1alpha1::UpdateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::UpdateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest* request, ::api::v1alpha1::UpdateSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncUpdateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::UpdateSelectionTableResponse, ::api::v1alpha1::UpdateSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateSelectionTableResponse>* SelectionTableService::Stub::AsyncUpdateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::DeleteSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest& request, ::api::v1alpha1::DeleteSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::DeleteSelectionTableRequest, ::api::v1alpha1::DeleteSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::DeleteSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest* request, ::api::v1alpha1::DeleteSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::DeleteSelectionTableRequest, ::api::v1alpha1::DeleteSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::DeleteSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest* request, ::api::v1alpha1::DeleteSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::DeleteSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncDeleteSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::DeleteSelectionTableResponse, ::api::v1alpha1::DeleteSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::DeleteSelectionTableResponse>* SelectionTableService::Stub::AsyncDeleteSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::ListSelectionTables(::grpc::ClientContext* context, const ::api::v1alpha1::ListSelectionTablesRequest& request, ::api::v1alpha1::ListSelectionTablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ListSelectionTablesRequest, ::api::v1alpha1::ListSelectionTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSelectionTables_, context, request, response);
}

void SelectionTableService::Stub::async::ListSelectionTables(::grpc::ClientContext* context, const ::api::v1alpha1::ListSelectionTablesRequest* request, ::api::v1alpha1::ListSelectionTablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ListSelectionTablesRequest, ::api::v1alpha1::ListSelectionTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSelectionTables_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::ListSelectionTables(::grpc::ClientContext* context, const ::api::v1alpha1::ListSelectionTablesRequest* request, ::api::v1alpha1::ListSelectionTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSelectionTables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSelectionTablesResponse>* SelectionTableService::Stub::PrepareAsyncListSelectionTablesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSelectionTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ListSelectionTablesResponse, ::api::v1alpha1::ListSelectionTablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSelectionTables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSelectionTablesResponse>* SelectionTableService::Stub::AsyncListSelectionTablesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSelectionTablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSelectionTablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::RollOnTable(::grpc::ClientContext* context, const ::api::v1alpha1::RollOnTableRequest& request, ::api::v1alpha1::RollOnTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::RollOnTableRequest, ::api::v1alpha1::RollOnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollOnTable_, context, request, response);
}

void SelectionTableService::Stub::async::RollOnTable(::grpc::ClientContext* context, const ::api::v1alpha1::RollOnTableRequest* request, ::api::v1alpha1::RollOnTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::RollOnTableRequest, ::api::v1alpha1::RollOnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollOnTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::RollOnTable(::grpc::ClientContext* context, const ::api::v1alpha1::RollOnTableRequest* request, ::api::v1alpha1::RollOnTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollOnTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollOnTableResponse>* SelectionTableService::Stub::PrepareAsyncRollOnTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollOnTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::RollOnTableResponse, ::api::v1alpha1::RollOnTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollOnTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollOnTableResponse>* SelectionTableService::Stub::AsyncRollOnTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollOnTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollOnTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::RollMultiple(::grpc::ClientContext* context, const ::api::v1alpha1::RollMultipleRequest& request, ::api::v1alpha1::RollMultipleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::RollMultipleRequest, ::api::v1alpha1::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollMultiple_, context, request, response);
}

void SelectionTableService::Stub::async::RollMultiple(::grpc::ClientContext* context, const ::api::v1alpha1::RollMultipleRequest* request, ::api::v1alpha1::RollMultipleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::RollMultipleRequest, ::api::v1alpha1::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollMultiple_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::RollMultiple(::grpc::ClientContext* context, const ::api::v1alpha1::RollMultipleRequest* request, ::api::v1alpha1::RollMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollMultiple_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollMultipleResponse>* SelectionTableService::Stub::PrepareAsyncRollMultipleRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::RollMultipleResponse, ::api::v1alpha1::RollMultipleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollMultiple_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollMultipleResponse>* SelectionTableService::Stub::AsyncRollMultipleRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollMultipleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::RollWithModifiers(::grpc::ClientContext* context, const ::api::v1alpha1::RollWithModifiersRequest& request, ::api::v1alpha1::RollWithModifiersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::RollWithModifiersRequest, ::api::v1alpha1::RollWithModifiersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollWithModifiers_, context, request, response);
}

void SelectionTableService::Stub::async::RollWithModifiers(::grpc::ClientContext* context, const ::api::v1alpha1::RollWithModifiersRequest* request, ::api::v1alpha1::RollWithModifiersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::RollWithModifiersRequest, ::api::v1alpha1::RollWithModifiersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollWithModifiers_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::RollWithModifiers(::grpc::ClientContext* context, const ::api::v1alpha1::RollWithModifiersRequest* request, ::api::v1alpha1::RollWithModifiersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollWithModifiers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollWithModifiersResponse>* SelectionTableService::Stub::PrepareAsyncRollWithModifiersRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollWithModifiersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::RollWithModifiersResponse, ::api::v1alpha1::RollWithModifiersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollWithModifiers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RollWithModifiersResponse>* SelectionTableService::Stub::AsyncRollWithModifiersRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RollWithModifiersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollWithModifiersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::BatchRollTables(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRollTablesRequest& request, ::api::v1alpha1::BatchRollTablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::BatchRollTablesRequest, ::api::v1alpha1::BatchRollTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchRollTables_, context, request, response);
}

void SelectionTableService::Stub::async::BatchRollTables(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRollTablesRequest* request, ::api::v1alpha1::BatchRollTablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::BatchRollTablesRequest, ::api::v1alpha1::BatchRollTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRollTables_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::BatchRollTables(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRollTablesRequest* request, ::api::v1alpha1::BatchRollTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRollTables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRollTablesResponse>* SelectionTableService::Stub::PrepareAsyncBatchRollTablesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRollTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::BatchRollTablesResponse, ::api::v1alpha1::BatchRollTablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchRollTables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRollTablesResponse>* SelectionTableService::Stub::AsyncBatchRollTablesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRollTablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchRollTablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::GenerateEncounter(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateEncounterRequest& request, ::api::v1alpha1::GenerateEncounterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GenerateEncounterRequest, ::api::v1alpha1::GenerateEncounterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateEncounter_, context, request, response);
}

void SelectionTableService::Stub::async::GenerateEncounter(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateEncounterRequest* request, ::api::v1alpha1::GenerateEncounterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GenerateEncounterRequest, ::api::v1alpha1::GenerateEncounterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateEncounter_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::GenerateEncounter(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateEncounterRequest* request, ::api::v1alpha1::GenerateEncounterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateEncounter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateEncounterResponse>* SelectionTableService::Stub::PrepareAsyncGenerateEncounterRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateEncounterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GenerateEncounterResponse, ::api::v1alpha1::GenerateEncounterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateEncounter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateEncounterResponse>* SelectionTableService::Stub::AsyncGenerateEncounterRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateEncounterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateEncounterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::GenerateLoot(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateLootRequest& request, ::api::v1alpha1::GenerateLootResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GenerateLootRequest, ::api::v1alpha1::GenerateLootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateLoot_, context, request, response);
}

void SelectionTableService::Stub::async::GenerateLoot(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateLootRequest* request, ::api::v1alpha1::GenerateLootResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GenerateLootRequest, ::api::v1alpha1::GenerateLootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateLoot_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::GenerateLoot(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateLootRequest* request, ::api::v1alpha1::GenerateLootResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateLoot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateLootResponse>* SelectionTableService::Stub::PrepareAsyncGenerateLootRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateLootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GenerateLootResponse, ::api::v1alpha1::GenerateLootRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateLoot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GenerateLootResponse>* SelectionTableService::Stub::AsyncGenerateLootRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GenerateLootRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateLootRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::ValidateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest& request, ::api::v1alpha1::ValidateSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ValidateSelectionTableRequest, ::api::v1alpha1::ValidateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::ValidateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest* request, ::api::v1alpha1::ValidateSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ValidateSelectionTableRequest, ::api::v1alpha1::ValidateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::ValidateSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest* request, ::api::v1alpha1::ValidateSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncValidateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ValidateSelectionTableResponse, ::api::v1alpha1::ValidateSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ValidateSelectionTableResponse>* SelectionTableService::Stub::AsyncValidateSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::GetTableStatistics(::grpc::ClientContext* context, const ::api::v1alpha1::GetTableStatisticsRequest& request, ::api::v1alpha1::GetTableStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetTableStatisticsRequest, ::api::v1alpha1::GetTableStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTableStatistics_, context, request, response);
}

void SelectionTableService::Stub::async::GetTableStatistics(::grpc::ClientContext* context, const ::api::v1alpha1::GetTableStatisticsRequest* request, ::api::v1alpha1::GetTableStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetTableStatisticsRequest, ::api::v1alpha1::GetTableStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTableStatistics_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::GetTableStatistics(::grpc::ClientContext* context, const ::api::v1alpha1::GetTableStatisticsRequest* request, ::api::v1alpha1::GetTableStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTableStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetTableStatisticsResponse>* SelectionTableService::Stub::PrepareAsyncGetTableStatisticsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetTableStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetTableStatisticsResponse, ::api::v1alpha1::GetTableStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTableStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetTableStatisticsResponse>* SelectionTableService::Stub::AsyncGetTableStatisticsRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetTableStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTableStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::ExportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ExportSelectionTableRequest& request, ::api::v1alpha1::ExportSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ExportSelectionTableRequest, ::api::v1alpha1::ExportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::ExportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ExportSelectionTableRequest* request, ::api::v1alpha1::ExportSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ExportSelectionTableRequest, ::api::v1alpha1::ExportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::ExportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ExportSelectionTableRequest* request, ::api::v1alpha1::ExportSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ExportSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncExportSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ExportSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ExportSelectionTableResponse, ::api::v1alpha1::ExportSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ExportSelectionTableResponse>* SelectionTableService::Stub::AsyncExportSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ExportSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectionTableService::Stub::ImportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ImportSelectionTableRequest& request, ::api::v1alpha1::ImportSelectionTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ImportSelectionTableRequest, ::api::v1alpha1::ImportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportSelectionTable_, context, request, response);
}

void SelectionTableService::Stub::async::ImportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ImportSelectionTableRequest* request, ::api::v1alpha1::ImportSelectionTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ImportSelectionTableRequest, ::api::v1alpha1::ImportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportSelectionTable_, context, request, response, std::move(f));
}

void SelectionTableService::Stub::async::ImportSelectionTable(::grpc::ClientContext* context, const ::api::v1alpha1::ImportSelectionTableRequest* request, ::api::v1alpha1::ImportSelectionTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportSelectionTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ImportSelectionTableResponse>* SelectionTableService::Stub::PrepareAsyncImportSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ImportSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ImportSelectionTableResponse, ::api::v1alpha1::ImportSelectionTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportSelectionTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ImportSelectionTableResponse>* SelectionTableService::Stub::AsyncImportSelectionTableRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ImportSelectionTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportSelectionTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

SelectionTableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::CreateSelectionTableRequest, ::api::v1alpha1::CreateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::CreateSelectionTableRequest* req,
             ::api::v1alpha1::CreateSelectionTableResponse* resp) {
               return service->CreateSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::GetSelectionTableRequest, ::api::v1alpha1::GetSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetSelectionTableRequest* req,
             ::api::v1alpha1::GetSelectionTableResponse* resp) {
               return service->GetSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::UpdateSelectionTableRequest, ::api::v1alpha1::UpdateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::UpdateSelectionTableRequest* req,
             ::api::v1alpha1::UpdateSelectionTableResponse* resp) {
               return service->UpdateSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::DeleteSelectionTableRequest, ::api::v1alpha1::DeleteSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::DeleteSelectionTableRequest* req,
             ::api::v1alpha1::DeleteSelectionTableResponse* resp) {
               return service->DeleteSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::ListSelectionTablesRequest, ::api::v1alpha1::ListSelectionTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ListSelectionTablesRequest* req,
             ::api::v1alpha1::ListSelectionTablesResponse* resp) {
               return service->ListSelectionTables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::RollOnTableRequest, ::api::v1alpha1::RollOnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::RollOnTableRequest* req,
             ::api::v1alpha1::RollOnTableResponse* resp) {
               return service->RollOnTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::RollMultipleRequest, ::api::v1alpha1::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::RollMultipleRequest* req,
             ::api::v1alpha1::RollMultipleResponse* resp) {
               return service->RollMultiple(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::RollWithModifiersRequest, ::api::v1alpha1::RollWithModifiersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::RollWithModifiersRequest* req,
             ::api::v1alpha1::RollWithModifiersResponse* resp) {
               return service->RollWithModifiers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::BatchRollTablesRequest, ::api::v1alpha1::BatchRollTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::BatchRollTablesRequest* req,
             ::api::v1alpha1::BatchRollTablesResponse* resp) {
               return service->BatchRollTables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::GenerateEncounterRequest, ::api::v1alpha1::GenerateEncounterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GenerateEncounterRequest* req,
             ::api::v1alpha1::GenerateEncounterResponse* resp) {
               return service->GenerateEncounter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::GenerateLootRequest, ::api::v1alpha1::GenerateLootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GenerateLootRequest* req,
             ::api::v1alpha1::GenerateLootResponse* resp) {
               return service->GenerateLoot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::ValidateSelectionTableRequest, ::api::v1alpha1::ValidateSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ValidateSelectionTableRequest* req,
             ::api::v1alpha1::ValidateSelectionTableResponse* resp) {
               return service->ValidateSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::GetTableStatisticsRequest, ::api::v1alpha1::GetTableStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetTableStatisticsRequest* req,
             ::api::v1alpha1::GetTableStatisticsResponse* resp) {
               return service->GetTableStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::ExportSelectionTableRequest, ::api::v1alpha1::ExportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ExportSelectionTableRequest* req,
             ::api::v1alpha1::ExportSelectionTableResponse* resp) {
               return service->ExportSelectionTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectionTableService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectionTableService::Service, ::api::v1alpha1::ImportSelectionTableRequest, ::api::v1alpha1::ImportSelectionTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectionTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ImportSelectionTableRequest* req,
             ::api::v1alpha1::ImportSelectionTableResponse* resp) {
               return service->ImportSelectionTable(ctx, req, resp);
             }, this)));
}

SelectionTableService::Service::~Service() {
}

::grpc::Status SelectionTableService::Service::CreateSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::CreateSelectionTableRequest* request, ::api::v1alpha1::CreateSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::GetSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::GetSelectionTableRequest* request, ::api::v1alpha1::GetSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::UpdateSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::UpdateSelectionTableRequest* request, ::api::v1alpha1::UpdateSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::DeleteSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::DeleteSelectionTableRequest* request, ::api::v1alpha1::DeleteSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::ListSelectionTables(::grpc::ServerContext* context, const ::api::v1alpha1::ListSelectionTablesRequest* request, ::api::v1alpha1::ListSelectionTablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::RollOnTable(::grpc::ServerContext* context, const ::api::v1alpha1::RollOnTableRequest* request, ::api::v1alpha1::RollOnTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::RollMultiple(::grpc::ServerContext* context, const ::api::v1alpha1::RollMultipleRequest* request, ::api::v1alpha1::RollMultipleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::RollWithModifiers(::grpc::ServerContext* context, const ::api::v1alpha1::RollWithModifiersRequest* request, ::api::v1alpha1::RollWithModifiersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::BatchRollTables(::grpc::ServerContext* context, const ::api::v1alpha1::BatchRollTablesRequest* request, ::api::v1alpha1::BatchRollTablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::GenerateEncounter(::grpc::ServerContext* context, const ::api::v1alpha1::GenerateEncounterRequest* request, ::api::v1alpha1::GenerateEncounterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::GenerateLoot(::grpc::ServerContext* context, const ::api::v1alpha1::GenerateLootRequest* request, ::api::v1alpha1::GenerateLootResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::ValidateSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::ValidateSelectionTableRequest* request, ::api::v1alpha1::ValidateSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::GetTableStatistics(::grpc::ServerContext* context, const ::api::v1alpha1::GetTableStatisticsRequest* request, ::api::v1alpha1::GetTableStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::ExportSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::ExportSelectionTableRequest* request, ::api::v1alpha1::ExportSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectionTableService::Service::ImportSelectionTable(::grpc::ServerContext* context, const ::api::v1alpha1::ImportSelectionTableRequest* request, ::api::v1alpha1::ImportSelectionTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

