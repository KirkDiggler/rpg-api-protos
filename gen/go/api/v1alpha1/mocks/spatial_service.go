// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/api/v1alpha1/room_spatial_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSpatialServiceClient is a mock of SpatialServiceClient interface.
type MockSpatialServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpatialServiceClientMockRecorder
}

// MockSpatialServiceClientMockRecorder is the mock recorder for MockSpatialServiceClient.
type MockSpatialServiceClientMockRecorder struct {
	mock *MockSpatialServiceClient
}

// NewMockSpatialServiceClient creates a new mock instance.
func NewMockSpatialServiceClient(ctrl *gomock.Controller) *MockSpatialServiceClient {
	mock := &MockSpatialServiceClient{ctrl: ctrl}
	mock.recorder = &MockSpatialServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpatialServiceClient) EXPECT() *MockSpatialServiceClientMockRecorder {
	return m.recorder
}

// CalculateMovementPath mocks base method.
func (m *MockSpatialServiceClient) CalculateMovementPath(ctx context.Context, in *v1alpha1.CalculateMovementPathRequest, opts ...grpc.CallOption) (*v1alpha1.CalculateMovementPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateMovementPath", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CalculateMovementPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMovementPath indicates an expected call of CalculateMovementPath.
func (mr *MockSpatialServiceClientMockRecorder) CalculateMovementPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMovementPath", reflect.TypeOf((*MockSpatialServiceClient)(nil).CalculateMovementPath), varargs...)
}

// CalculateMultiRoomPath mocks base method.
func (m *MockSpatialServiceClient) CalculateMultiRoomPath(ctx context.Context, in *v1alpha1.CalculateMultiRoomPathRequest, opts ...grpc.CallOption) (*v1alpha1.CalculateMultiRoomPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateMultiRoomPath", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CalculateMultiRoomPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMultiRoomPath indicates an expected call of CalculateMultiRoomPath.
func (mr *MockSpatialServiceClientMockRecorder) CalculateMultiRoomPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMultiRoomPath", reflect.TypeOf((*MockSpatialServiceClient)(nil).CalculateMultiRoomPath), varargs...)
}

// GetSpatialStats mocks base method.
func (m *MockSpatialServiceClient) GetSpatialStats(ctx context.Context, in *v1alpha1.GetSpatialStatsRequest, opts ...grpc.CallOption) (*v1alpha1.GetSpatialStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpatialStats", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSpatialStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpatialStats indicates an expected call of GetSpatialStats.
func (mr *MockSpatialServiceClientMockRecorder) GetSpatialStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpatialStats", reflect.TypeOf((*MockSpatialServiceClient)(nil).GetSpatialStats), varargs...)
}

// InvalidateSpatialCache mocks base method.
func (m *MockSpatialServiceClient) InvalidateSpatialCache(ctx context.Context, in *v1alpha1.InvalidateSpatialCacheRequest, opts ...grpc.CallOption) (*v1alpha1.InvalidateSpatialCacheResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvalidateSpatialCache", varargs...)
	ret0, _ := ret[0].(*v1alpha1.InvalidateSpatialCacheResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSpatialCache indicates an expected call of InvalidateSpatialCache.
func (mr *MockSpatialServiceClientMockRecorder) InvalidateSpatialCache(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSpatialCache", reflect.TypeOf((*MockSpatialServiceClient)(nil).InvalidateSpatialCache), varargs...)
}

// QueryAreaOfEffect mocks base method.
func (m *MockSpatialServiceClient) QueryAreaOfEffect(ctx context.Context, in *v1alpha1.QueryAreaOfEffectRequest, opts ...grpc.CallOption) (*v1alpha1.QueryAreaOfEffectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAreaOfEffect", varargs...)
	ret0, _ := ret[0].(*v1alpha1.QueryAreaOfEffectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAreaOfEffect indicates an expected call of QueryAreaOfEffect.
func (mr *MockSpatialServiceClientMockRecorder) QueryAreaOfEffect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAreaOfEffect", reflect.TypeOf((*MockSpatialServiceClient)(nil).QueryAreaOfEffect), varargs...)
}

// QueryEntitiesInRange mocks base method.
func (m *MockSpatialServiceClient) QueryEntitiesInRange(ctx context.Context, in *v1alpha1.QueryEntitiesInRangeRequest, opts ...grpc.CallOption) (*v1alpha1.QueryEntitiesInRangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryEntitiesInRange", varargs...)
	ret0, _ := ret[0].(*v1alpha1.QueryEntitiesInRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEntitiesInRange indicates an expected call of QueryEntitiesInRange.
func (mr *MockSpatialServiceClientMockRecorder) QueryEntitiesInRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEntitiesInRange", reflect.TypeOf((*MockSpatialServiceClient)(nil).QueryEntitiesInRange), varargs...)
}

// QueryLineOfSight mocks base method.
func (m *MockSpatialServiceClient) QueryLineOfSight(ctx context.Context, in *v1alpha1.QueryLineOfSightRequest, opts ...grpc.CallOption) (*v1alpha1.QueryLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryLineOfSight", varargs...)
	ret0, _ := ret[0].(*v1alpha1.QueryLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLineOfSight indicates an expected call of QueryLineOfSight.
func (mr *MockSpatialServiceClientMockRecorder) QueryLineOfSight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLineOfSight", reflect.TypeOf((*MockSpatialServiceClient)(nil).QueryLineOfSight), varargs...)
}

// QueryMultiRoomLineOfSight mocks base method.
func (m *MockSpatialServiceClient) QueryMultiRoomLineOfSight(ctx context.Context, in *v1alpha1.QueryMultiRoomLineOfSightRequest, opts ...grpc.CallOption) (*v1alpha1.QueryMultiRoomLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMultiRoomLineOfSight", varargs...)
	ret0, _ := ret[0].(*v1alpha1.QueryMultiRoomLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiRoomLineOfSight indicates an expected call of QueryMultiRoomLineOfSight.
func (mr *MockSpatialServiceClientMockRecorder) QueryMultiRoomLineOfSight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiRoomLineOfSight", reflect.TypeOf((*MockSpatialServiceClient)(nil).QueryMultiRoomLineOfSight), varargs...)
}

// QuerySpatialIndex mocks base method.
func (m *MockSpatialServiceClient) QuerySpatialIndex(ctx context.Context, in *v1alpha1.QuerySpatialIndexRequest, opts ...grpc.CallOption) (*v1alpha1.QuerySpatialIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySpatialIndex", varargs...)
	ret0, _ := ret[0].(*v1alpha1.QuerySpatialIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySpatialIndex indicates an expected call of QuerySpatialIndex.
func (mr *MockSpatialServiceClientMockRecorder) QuerySpatialIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySpatialIndex", reflect.TypeOf((*MockSpatialServiceClient)(nil).QuerySpatialIndex), varargs...)
}

// ValidateEntityPlacement mocks base method.
func (m *MockSpatialServiceClient) ValidateEntityPlacement(ctx context.Context, in *v1alpha1.ValidateEntityPlacementRequest, opts ...grpc.CallOption) (*v1alpha1.ValidateEntityPlacementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateEntityPlacement", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidateEntityPlacementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEntityPlacement indicates an expected call of ValidateEntityPlacement.
func (mr *MockSpatialServiceClientMockRecorder) ValidateEntityPlacement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEntityPlacement", reflect.TypeOf((*MockSpatialServiceClient)(nil).ValidateEntityPlacement), varargs...)
}

// ValidateMovement mocks base method.
func (m *MockSpatialServiceClient) ValidateMovement(ctx context.Context, in *v1alpha1.ValidateMovementRequest, opts ...grpc.CallOption) (*v1alpha1.ValidateMovementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateMovement", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidateMovementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMovement indicates an expected call of ValidateMovement.
func (mr *MockSpatialServiceClientMockRecorder) ValidateMovement(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMovement", reflect.TypeOf((*MockSpatialServiceClient)(nil).ValidateMovement), varargs...)
}

// MockSpatialServiceServer is a mock of SpatialServiceServer interface.
type MockSpatialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSpatialServiceServerMockRecorder
}

// MockSpatialServiceServerMockRecorder is the mock recorder for MockSpatialServiceServer.
type MockSpatialServiceServerMockRecorder struct {
	mock *MockSpatialServiceServer
}

// NewMockSpatialServiceServer creates a new mock instance.
func NewMockSpatialServiceServer(ctrl *gomock.Controller) *MockSpatialServiceServer {
	mock := &MockSpatialServiceServer{ctrl: ctrl}
	mock.recorder = &MockSpatialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpatialServiceServer) EXPECT() *MockSpatialServiceServerMockRecorder {
	return m.recorder
}

// CalculateMovementPath mocks base method.
func (m *MockSpatialServiceServer) CalculateMovementPath(arg0 context.Context, arg1 *v1alpha1.CalculateMovementPathRequest) (*v1alpha1.CalculateMovementPathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateMovementPath", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CalculateMovementPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMovementPath indicates an expected call of CalculateMovementPath.
func (mr *MockSpatialServiceServerMockRecorder) CalculateMovementPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMovementPath", reflect.TypeOf((*MockSpatialServiceServer)(nil).CalculateMovementPath), arg0, arg1)
}

// CalculateMultiRoomPath mocks base method.
func (m *MockSpatialServiceServer) CalculateMultiRoomPath(arg0 context.Context, arg1 *v1alpha1.CalculateMultiRoomPathRequest) (*v1alpha1.CalculateMultiRoomPathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateMultiRoomPath", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CalculateMultiRoomPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMultiRoomPath indicates an expected call of CalculateMultiRoomPath.
func (mr *MockSpatialServiceServerMockRecorder) CalculateMultiRoomPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMultiRoomPath", reflect.TypeOf((*MockSpatialServiceServer)(nil).CalculateMultiRoomPath), arg0, arg1)
}

// GetSpatialStats mocks base method.
func (m *MockSpatialServiceServer) GetSpatialStats(arg0 context.Context, arg1 *v1alpha1.GetSpatialStatsRequest) (*v1alpha1.GetSpatialStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpatialStats", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetSpatialStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpatialStats indicates an expected call of GetSpatialStats.
func (mr *MockSpatialServiceServerMockRecorder) GetSpatialStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpatialStats", reflect.TypeOf((*MockSpatialServiceServer)(nil).GetSpatialStats), arg0, arg1)
}

// InvalidateSpatialCache mocks base method.
func (m *MockSpatialServiceServer) InvalidateSpatialCache(arg0 context.Context, arg1 *v1alpha1.InvalidateSpatialCacheRequest) (*v1alpha1.InvalidateSpatialCacheResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateSpatialCache", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.InvalidateSpatialCacheResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateSpatialCache indicates an expected call of InvalidateSpatialCache.
func (mr *MockSpatialServiceServerMockRecorder) InvalidateSpatialCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSpatialCache", reflect.TypeOf((*MockSpatialServiceServer)(nil).InvalidateSpatialCache), arg0, arg1)
}

// QueryAreaOfEffect mocks base method.
func (m *MockSpatialServiceServer) QueryAreaOfEffect(arg0 context.Context, arg1 *v1alpha1.QueryAreaOfEffectRequest) (*v1alpha1.QueryAreaOfEffectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAreaOfEffect", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.QueryAreaOfEffectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAreaOfEffect indicates an expected call of QueryAreaOfEffect.
func (mr *MockSpatialServiceServerMockRecorder) QueryAreaOfEffect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAreaOfEffect", reflect.TypeOf((*MockSpatialServiceServer)(nil).QueryAreaOfEffect), arg0, arg1)
}

// QueryEntitiesInRange mocks base method.
func (m *MockSpatialServiceServer) QueryEntitiesInRange(arg0 context.Context, arg1 *v1alpha1.QueryEntitiesInRangeRequest) (*v1alpha1.QueryEntitiesInRangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEntitiesInRange", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.QueryEntitiesInRangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEntitiesInRange indicates an expected call of QueryEntitiesInRange.
func (mr *MockSpatialServiceServerMockRecorder) QueryEntitiesInRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEntitiesInRange", reflect.TypeOf((*MockSpatialServiceServer)(nil).QueryEntitiesInRange), arg0, arg1)
}

// QueryLineOfSight mocks base method.
func (m *MockSpatialServiceServer) QueryLineOfSight(arg0 context.Context, arg1 *v1alpha1.QueryLineOfSightRequest) (*v1alpha1.QueryLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLineOfSight", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.QueryLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLineOfSight indicates an expected call of QueryLineOfSight.
func (mr *MockSpatialServiceServerMockRecorder) QueryLineOfSight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLineOfSight", reflect.TypeOf((*MockSpatialServiceServer)(nil).QueryLineOfSight), arg0, arg1)
}

// QueryMultiRoomLineOfSight mocks base method.
func (m *MockSpatialServiceServer) QueryMultiRoomLineOfSight(arg0 context.Context, arg1 *v1alpha1.QueryMultiRoomLineOfSightRequest) (*v1alpha1.QueryMultiRoomLineOfSightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiRoomLineOfSight", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.QueryMultiRoomLineOfSightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiRoomLineOfSight indicates an expected call of QueryMultiRoomLineOfSight.
func (mr *MockSpatialServiceServerMockRecorder) QueryMultiRoomLineOfSight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiRoomLineOfSight", reflect.TypeOf((*MockSpatialServiceServer)(nil).QueryMultiRoomLineOfSight), arg0, arg1)
}

// QuerySpatialIndex mocks base method.
func (m *MockSpatialServiceServer) QuerySpatialIndex(arg0 context.Context, arg1 *v1alpha1.QuerySpatialIndexRequest) (*v1alpha1.QuerySpatialIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySpatialIndex", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.QuerySpatialIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySpatialIndex indicates an expected call of QuerySpatialIndex.
func (mr *MockSpatialServiceServerMockRecorder) QuerySpatialIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySpatialIndex", reflect.TypeOf((*MockSpatialServiceServer)(nil).QuerySpatialIndex), arg0, arg1)
}

// ValidateEntityPlacement mocks base method.
func (m *MockSpatialServiceServer) ValidateEntityPlacement(arg0 context.Context, arg1 *v1alpha1.ValidateEntityPlacementRequest) (*v1alpha1.ValidateEntityPlacementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEntityPlacement", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidateEntityPlacementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEntityPlacement indicates an expected call of ValidateEntityPlacement.
func (mr *MockSpatialServiceServerMockRecorder) ValidateEntityPlacement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEntityPlacement", reflect.TypeOf((*MockSpatialServiceServer)(nil).ValidateEntityPlacement), arg0, arg1)
}

// ValidateMovement mocks base method.
func (m *MockSpatialServiceServer) ValidateMovement(arg0 context.Context, arg1 *v1alpha1.ValidateMovementRequest) (*v1alpha1.ValidateMovementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMovement", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidateMovementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMovement indicates an expected call of ValidateMovement.
func (mr *MockSpatialServiceServerMockRecorder) ValidateMovement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMovement", reflect.TypeOf((*MockSpatialServiceServer)(nil).ValidateMovement), arg0, arg1)
}

// MockUnsafeSpatialServiceServer is a mock of UnsafeSpatialServiceServer interface.
type MockUnsafeSpatialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSpatialServiceServerMockRecorder
}

// MockUnsafeSpatialServiceServerMockRecorder is the mock recorder for MockUnsafeSpatialServiceServer.
type MockUnsafeSpatialServiceServerMockRecorder struct {
	mock *MockUnsafeSpatialServiceServer
}

// NewMockUnsafeSpatialServiceServer creates a new mock instance.
func NewMockUnsafeSpatialServiceServer(ctrl *gomock.Controller) *MockUnsafeSpatialServiceServer {
	mock := &MockUnsafeSpatialServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSpatialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSpatialServiceServer) EXPECT() *MockUnsafeSpatialServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSpatialServiceServer mocks base method.
func (m *MockUnsafeSpatialServiceServer) mustEmbedUnimplementedSpatialServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSpatialServiceServer")
}

// mustEmbedUnimplementedSpatialServiceServer indicates an expected call of mustEmbedUnimplementedSpatialServiceServer.
func (mr *MockUnsafeSpatialServiceServerMockRecorder) mustEmbedUnimplementedSpatialServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSpatialServiceServer", reflect.TypeOf((*MockUnsafeSpatialServiceServer)(nil).mustEmbedUnimplementedSpatialServiceServer))
}
