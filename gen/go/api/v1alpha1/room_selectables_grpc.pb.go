// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/room_selectables.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SelectionTableService_CreateSelectionTable_FullMethodName   = "/api.v1alpha1.SelectionTableService/CreateSelectionTable"
	SelectionTableService_GetSelectionTable_FullMethodName      = "/api.v1alpha1.SelectionTableService/GetSelectionTable"
	SelectionTableService_UpdateSelectionTable_FullMethodName   = "/api.v1alpha1.SelectionTableService/UpdateSelectionTable"
	SelectionTableService_DeleteSelectionTable_FullMethodName   = "/api.v1alpha1.SelectionTableService/DeleteSelectionTable"
	SelectionTableService_ListSelectionTables_FullMethodName    = "/api.v1alpha1.SelectionTableService/ListSelectionTables"
	SelectionTableService_RollOnTable_FullMethodName            = "/api.v1alpha1.SelectionTableService/RollOnTable"
	SelectionTableService_RollMultiple_FullMethodName           = "/api.v1alpha1.SelectionTableService/RollMultiple"
	SelectionTableService_RollWithModifiers_FullMethodName      = "/api.v1alpha1.SelectionTableService/RollWithModifiers"
	SelectionTableService_BatchRollTables_FullMethodName        = "/api.v1alpha1.SelectionTableService/BatchRollTables"
	SelectionTableService_GenerateEncounter_FullMethodName      = "/api.v1alpha1.SelectionTableService/GenerateEncounter"
	SelectionTableService_GenerateLoot_FullMethodName           = "/api.v1alpha1.SelectionTableService/GenerateLoot"
	SelectionTableService_ValidateSelectionTable_FullMethodName = "/api.v1alpha1.SelectionTableService/ValidateSelectionTable"
	SelectionTableService_GetTableStatistics_FullMethodName     = "/api.v1alpha1.SelectionTableService/GetTableStatistics"
	SelectionTableService_ExportSelectionTable_FullMethodName   = "/api.v1alpha1.SelectionTableService/ExportSelectionTable"
	SelectionTableService_ImportSelectionTable_FullMethodName   = "/api.v1alpha1.SelectionTableService/ImportSelectionTable"
)

// SelectionTableServiceClient is the client API for SelectionTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Selection table service for random generation and content selection
// Handles loot tables, encounter tables, and other random selection systems
type SelectionTableServiceClient interface {
	// Selection table operations
	CreateSelectionTable(ctx context.Context, in *CreateSelectionTableRequest, opts ...grpc.CallOption) (*CreateSelectionTableResponse, error)
	GetSelectionTable(ctx context.Context, in *GetSelectionTableRequest, opts ...grpc.CallOption) (*GetSelectionTableResponse, error)
	UpdateSelectionTable(ctx context.Context, in *UpdateSelectionTableRequest, opts ...grpc.CallOption) (*UpdateSelectionTableResponse, error)
	DeleteSelectionTable(ctx context.Context, in *DeleteSelectionTableRequest, opts ...grpc.CallOption) (*DeleteSelectionTableResponse, error)
	ListSelectionTables(ctx context.Context, in *ListSelectionTablesRequest, opts ...grpc.CallOption) (*ListSelectionTablesResponse, error)
	// Selection operations
	RollOnTable(ctx context.Context, in *RollOnTableRequest, opts ...grpc.CallOption) (*RollOnTableResponse, error)
	RollMultiple(ctx context.Context, in *RollMultipleRequest, opts ...grpc.CallOption) (*RollMultipleResponse, error)
	RollWithModifiers(ctx context.Context, in *RollWithModifiersRequest, opts ...grpc.CallOption) (*RollWithModifiersResponse, error)
	// Batch operations
	BatchRollTables(ctx context.Context, in *BatchRollTablesRequest, opts ...grpc.CallOption) (*BatchRollTablesResponse, error)
	GenerateEncounter(ctx context.Context, in *GenerateEncounterRequest, opts ...grpc.CallOption) (*GenerateEncounterResponse, error)
	GenerateLoot(ctx context.Context, in *GenerateLootRequest, opts ...grpc.CallOption) (*GenerateLootResponse, error)
	// Table management
	ValidateSelectionTable(ctx context.Context, in *ValidateSelectionTableRequest, opts ...grpc.CallOption) (*ValidateSelectionTableResponse, error)
	GetTableStatistics(ctx context.Context, in *GetTableStatisticsRequest, opts ...grpc.CallOption) (*GetTableStatisticsResponse, error)
	ExportSelectionTable(ctx context.Context, in *ExportSelectionTableRequest, opts ...grpc.CallOption) (*ExportSelectionTableResponse, error)
	ImportSelectionTable(ctx context.Context, in *ImportSelectionTableRequest, opts ...grpc.CallOption) (*ImportSelectionTableResponse, error)
}

type selectionTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectionTableServiceClient(cc grpc.ClientConnInterface) SelectionTableServiceClient {
	return &selectionTableServiceClient{cc}
}

func (c *selectionTableServiceClient) CreateSelectionTable(ctx context.Context, in *CreateSelectionTableRequest, opts ...grpc.CallOption) (*CreateSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_CreateSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) GetSelectionTable(ctx context.Context, in *GetSelectionTableRequest, opts ...grpc.CallOption) (*GetSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_GetSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) UpdateSelectionTable(ctx context.Context, in *UpdateSelectionTableRequest, opts ...grpc.CallOption) (*UpdateSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_UpdateSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) DeleteSelectionTable(ctx context.Context, in *DeleteSelectionTableRequest, opts ...grpc.CallOption) (*DeleteSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_DeleteSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) ListSelectionTables(ctx context.Context, in *ListSelectionTablesRequest, opts ...grpc.CallOption) (*ListSelectionTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSelectionTablesResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_ListSelectionTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) RollOnTable(ctx context.Context, in *RollOnTableRequest, opts ...grpc.CallOption) (*RollOnTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollOnTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_RollOnTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) RollMultiple(ctx context.Context, in *RollMultipleRequest, opts ...grpc.CallOption) (*RollMultipleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollMultipleResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_RollMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) RollWithModifiers(ctx context.Context, in *RollWithModifiersRequest, opts ...grpc.CallOption) (*RollWithModifiersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollWithModifiersResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_RollWithModifiers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) BatchRollTables(ctx context.Context, in *BatchRollTablesRequest, opts ...grpc.CallOption) (*BatchRollTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchRollTablesResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_BatchRollTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) GenerateEncounter(ctx context.Context, in *GenerateEncounterRequest, opts ...grpc.CallOption) (*GenerateEncounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEncounterResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_GenerateEncounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) GenerateLoot(ctx context.Context, in *GenerateLootRequest, opts ...grpc.CallOption) (*GenerateLootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateLootResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_GenerateLoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) ValidateSelectionTable(ctx context.Context, in *ValidateSelectionTableRequest, opts ...grpc.CallOption) (*ValidateSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_ValidateSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) GetTableStatistics(ctx context.Context, in *GetTableStatisticsRequest, opts ...grpc.CallOption) (*GetTableStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableStatisticsResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_GetTableStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) ExportSelectionTable(ctx context.Context, in *ExportSelectionTableRequest, opts ...grpc.CallOption) (*ExportSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_ExportSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionTableServiceClient) ImportSelectionTable(ctx context.Context, in *ImportSelectionTableRequest, opts ...grpc.CallOption) (*ImportSelectionTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportSelectionTableResponse)
	err := c.cc.Invoke(ctx, SelectionTableService_ImportSelectionTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectionTableServiceServer is the server API for SelectionTableService service.
// All implementations should embed UnimplementedSelectionTableServiceServer
// for forward compatibility.
//
// Selection table service for random generation and content selection
// Handles loot tables, encounter tables, and other random selection systems
type SelectionTableServiceServer interface {
	// Selection table operations
	CreateSelectionTable(context.Context, *CreateSelectionTableRequest) (*CreateSelectionTableResponse, error)
	GetSelectionTable(context.Context, *GetSelectionTableRequest) (*GetSelectionTableResponse, error)
	UpdateSelectionTable(context.Context, *UpdateSelectionTableRequest) (*UpdateSelectionTableResponse, error)
	DeleteSelectionTable(context.Context, *DeleteSelectionTableRequest) (*DeleteSelectionTableResponse, error)
	ListSelectionTables(context.Context, *ListSelectionTablesRequest) (*ListSelectionTablesResponse, error)
	// Selection operations
	RollOnTable(context.Context, *RollOnTableRequest) (*RollOnTableResponse, error)
	RollMultiple(context.Context, *RollMultipleRequest) (*RollMultipleResponse, error)
	RollWithModifiers(context.Context, *RollWithModifiersRequest) (*RollWithModifiersResponse, error)
	// Batch operations
	BatchRollTables(context.Context, *BatchRollTablesRequest) (*BatchRollTablesResponse, error)
	GenerateEncounter(context.Context, *GenerateEncounterRequest) (*GenerateEncounterResponse, error)
	GenerateLoot(context.Context, *GenerateLootRequest) (*GenerateLootResponse, error)
	// Table management
	ValidateSelectionTable(context.Context, *ValidateSelectionTableRequest) (*ValidateSelectionTableResponse, error)
	GetTableStatistics(context.Context, *GetTableStatisticsRequest) (*GetTableStatisticsResponse, error)
	ExportSelectionTable(context.Context, *ExportSelectionTableRequest) (*ExportSelectionTableResponse, error)
	ImportSelectionTable(context.Context, *ImportSelectionTableRequest) (*ImportSelectionTableResponse, error)
}

// UnimplementedSelectionTableServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSelectionTableServiceServer struct{}

func (UnimplementedSelectionTableServiceServer) CreateSelectionTable(context.Context, *CreateSelectionTableRequest) (*CreateSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) GetSelectionTable(context.Context, *GetSelectionTableRequest) (*GetSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) UpdateSelectionTable(context.Context, *UpdateSelectionTableRequest) (*UpdateSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) DeleteSelectionTable(context.Context, *DeleteSelectionTableRequest) (*DeleteSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) ListSelectionTables(context.Context, *ListSelectionTablesRequest) (*ListSelectionTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelectionTables not implemented")
}
func (UnimplementedSelectionTableServiceServer) RollOnTable(context.Context, *RollOnTableRequest) (*RollOnTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollOnTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) RollMultiple(context.Context, *RollMultipleRequest) (*RollMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollMultiple not implemented")
}
func (UnimplementedSelectionTableServiceServer) RollWithModifiers(context.Context, *RollWithModifiersRequest) (*RollWithModifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollWithModifiers not implemented")
}
func (UnimplementedSelectionTableServiceServer) BatchRollTables(context.Context, *BatchRollTablesRequest) (*BatchRollTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRollTables not implemented")
}
func (UnimplementedSelectionTableServiceServer) GenerateEncounter(context.Context, *GenerateEncounterRequest) (*GenerateEncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEncounter not implemented")
}
func (UnimplementedSelectionTableServiceServer) GenerateLoot(context.Context, *GenerateLootRequest) (*GenerateLootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLoot not implemented")
}
func (UnimplementedSelectionTableServiceServer) ValidateSelectionTable(context.Context, *ValidateSelectionTableRequest) (*ValidateSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) GetTableStatistics(context.Context, *GetTableStatisticsRequest) (*GetTableStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableStatistics not implemented")
}
func (UnimplementedSelectionTableServiceServer) ExportSelectionTable(context.Context, *ExportSelectionTableRequest) (*ExportSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) ImportSelectionTable(context.Context, *ImportSelectionTableRequest) (*ImportSelectionTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSelectionTable not implemented")
}
func (UnimplementedSelectionTableServiceServer) testEmbeddedByValue() {}

// UnsafeSelectionTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectionTableServiceServer will
// result in compilation errors.
type UnsafeSelectionTableServiceServer interface {
	mustEmbedUnimplementedSelectionTableServiceServer()
}

func RegisterSelectionTableServiceServer(s grpc.ServiceRegistrar, srv SelectionTableServiceServer) {
	// If the following call pancis, it indicates UnimplementedSelectionTableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SelectionTableService_ServiceDesc, srv)
}

func _SelectionTableService_CreateSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).CreateSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_CreateSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).CreateSelectionTable(ctx, req.(*CreateSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_GetSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).GetSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_GetSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).GetSelectionTable(ctx, req.(*GetSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_UpdateSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).UpdateSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_UpdateSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).UpdateSelectionTable(ctx, req.(*UpdateSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_DeleteSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).DeleteSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_DeleteSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).DeleteSelectionTable(ctx, req.(*DeleteSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_ListSelectionTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectionTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).ListSelectionTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_ListSelectionTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).ListSelectionTables(ctx, req.(*ListSelectionTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_RollOnTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollOnTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).RollOnTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_RollOnTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).RollOnTable(ctx, req.(*RollOnTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_RollMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).RollMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_RollMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).RollMultiple(ctx, req.(*RollMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_RollWithModifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollWithModifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).RollWithModifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_RollWithModifiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).RollWithModifiers(ctx, req.(*RollWithModifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_BatchRollTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRollTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).BatchRollTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_BatchRollTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).BatchRollTables(ctx, req.(*BatchRollTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_GenerateEncounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).GenerateEncounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_GenerateEncounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).GenerateEncounter(ctx, req.(*GenerateEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_GenerateLoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).GenerateLoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_GenerateLoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).GenerateLoot(ctx, req.(*GenerateLootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_ValidateSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).ValidateSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_ValidateSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).ValidateSelectionTable(ctx, req.(*ValidateSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_GetTableStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).GetTableStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_GetTableStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).GetTableStatistics(ctx, req.(*GetTableStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_ExportSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).ExportSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_ExportSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).ExportSelectionTable(ctx, req.(*ExportSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionTableService_ImportSelectionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSelectionTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionTableServiceServer).ImportSelectionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectionTableService_ImportSelectionTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionTableServiceServer).ImportSelectionTable(ctx, req.(*ImportSelectionTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SelectionTableService_ServiceDesc is the grpc.ServiceDesc for SelectionTableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectionTableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.SelectionTableService",
	HandlerType: (*SelectionTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSelectionTable",
			Handler:    _SelectionTableService_CreateSelectionTable_Handler,
		},
		{
			MethodName: "GetSelectionTable",
			Handler:    _SelectionTableService_GetSelectionTable_Handler,
		},
		{
			MethodName: "UpdateSelectionTable",
			Handler:    _SelectionTableService_UpdateSelectionTable_Handler,
		},
		{
			MethodName: "DeleteSelectionTable",
			Handler:    _SelectionTableService_DeleteSelectionTable_Handler,
		},
		{
			MethodName: "ListSelectionTables",
			Handler:    _SelectionTableService_ListSelectionTables_Handler,
		},
		{
			MethodName: "RollOnTable",
			Handler:    _SelectionTableService_RollOnTable_Handler,
		},
		{
			MethodName: "RollMultiple",
			Handler:    _SelectionTableService_RollMultiple_Handler,
		},
		{
			MethodName: "RollWithModifiers",
			Handler:    _SelectionTableService_RollWithModifiers_Handler,
		},
		{
			MethodName: "BatchRollTables",
			Handler:    _SelectionTableService_BatchRollTables_Handler,
		},
		{
			MethodName: "GenerateEncounter",
			Handler:    _SelectionTableService_GenerateEncounter_Handler,
		},
		{
			MethodName: "GenerateLoot",
			Handler:    _SelectionTableService_GenerateLoot_Handler,
		},
		{
			MethodName: "ValidateSelectionTable",
			Handler:    _SelectionTableService_ValidateSelectionTable_Handler,
		},
		{
			MethodName: "GetTableStatistics",
			Handler:    _SelectionTableService_GetTableStatistics_Handler,
		},
		{
			MethodName: "ExportSelectionTable",
			Handler:    _SelectionTableService_ExportSelectionTable_Handler,
		},
		{
			MethodName: "ImportSelectionTable",
			Handler:    _SelectionTableService_ImportSelectionTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/room_selectables.proto",
}
