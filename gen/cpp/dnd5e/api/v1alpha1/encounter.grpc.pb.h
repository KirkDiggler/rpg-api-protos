// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dnd5e/api/v1alpha1/encounter.proto
#ifndef GRPC_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto__INCLUDED
#define GRPC_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto__INCLUDED

#include "dnd5e/api/v1alpha1/encounter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace dnd5e {
namespace api {
namespace v1alpha1 {

// ============================================================================
// FUTURE: MULTIPLAYER STREAMING
// ============================================================================
//
// FUTURE: StreamEncounterEvents RPC for multi-client synchronization
// For Phase 1 single-player demo, each action returns complete state
//
// ============================================================================
// SERVICE DEFINITION
// ============================================================================
//
// EncounterService manages D&D 5e encounters
class EncounterService final {
 public:
  static constexpr char const* service_full_name() {
    return "dnd5e.api.v1alpha1.EncounterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // DungeonStart generates room, places entities, and rolls initiative
    virtual ::grpc::Status DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>> AsyncDungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>>(AsyncDungeonStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>> PrepareAsyncDungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>>(PrepareAsyncDungeonStartRaw(context, request, cq));
    }
    // GetCombatState retrieves current state (mainly for reconnection)
    virtual ::grpc::Status GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>> AsyncGetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>>(AsyncGetCombatStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>> PrepareAsyncGetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>>(PrepareAsyncGetCombatStateRaw(context, request, cq));
    }
    // Movement - client calculates valid moves, server validates
    virtual ::grpc::Status MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>> AsyncMoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>>(AsyncMoveCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>> PrepareAsyncMoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>>(PrepareAsyncMoveCharacterRaw(context, request, cq));
    }
    // Turn Management
    virtual ::grpc::Status EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::dnd5e::api::v1alpha1::EndTurnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>> AsyncEndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>>(AsyncEndTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>> PrepareAsyncEndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>>(PrepareAsyncEndTurnRaw(context, request, cq));
    }
    // Combat Actions
    virtual ::grpc::Status Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::dnd5e::api::v1alpha1::AttackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>> AsyncAttack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>>(AsyncAttackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>> PrepareAsyncAttack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>>(PrepareAsyncAttackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // DungeonStart generates room, places entities, and rolls initiative
      virtual void DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetCombatState retrieves current state (mainly for reconnection)
      virtual void GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Movement - client calculates valid moves, server validates
      virtual void MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Turn Management
      virtual void EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Combat Actions
      virtual void Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>* AsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::DungeonStartResponse>* PrepareAsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>* AsyncGetCombatStateRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::GetCombatStateResponse>* PrepareAsyncGetCombatStateRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>* AsyncMoveCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::MoveCharacterResponse>* PrepareAsyncMoveCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>* AsyncEndTurnRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::EndTurnResponse>* PrepareAsyncEndTurnRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>* AsyncAttackRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dnd5e::api::v1alpha1::AttackResponse>* PrepareAsyncAttackRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>> AsyncDungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>>(AsyncDungeonStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>> PrepareAsyncDungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>>(PrepareAsyncDungeonStartRaw(context, request, cq));
    }
    ::grpc::Status GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>> AsyncGetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>>(AsyncGetCombatStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>> PrepareAsyncGetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>>(PrepareAsyncGetCombatStateRaw(context, request, cq));
    }
    ::grpc::Status MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>> AsyncMoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>>(AsyncMoveCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>> PrepareAsyncMoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>>(PrepareAsyncMoveCharacterRaw(context, request, cq));
    }
    ::grpc::Status EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::dnd5e::api::v1alpha1::EndTurnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>> AsyncEndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>>(AsyncEndTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>> PrepareAsyncEndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>>(PrepareAsyncEndTurnRaw(context, request, cq));
    }
    ::grpc::Status Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::dnd5e::api::v1alpha1::AttackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>> AsyncAttack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>>(AsyncAttackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>> PrepareAsyncAttack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>>(PrepareAsyncAttackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, std::function<void(::grpc::Status)>) override;
      void DungeonStart(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCombatState(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response, std::function<void(::grpc::Status)>) override;
      void EndTurn(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response, std::function<void(::grpc::Status)>) override;
      void Attack(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>* AsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DungeonStartResponse>* PrepareAsyncDungeonStartRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>* AsyncGetCombatStateRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCombatStateResponse>* PrepareAsyncGetCombatStateRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>* AsyncMoveCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::MoveCharacterResponse>* PrepareAsyncMoveCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>* AsyncEndTurnRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EndTurnResponse>* PrepareAsyncEndTurnRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>* AsyncAttackRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AttackResponse>* PrepareAsyncAttackRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AttackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DungeonStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCombatState_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_EndTurn_;
    const ::grpc::internal::RpcMethod rpcmethod_Attack_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // DungeonStart generates room, places entities, and rolls initiative
    virtual ::grpc::Status DungeonStart(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response);
    // GetCombatState retrieves current state (mainly for reconnection)
    virtual ::grpc::Status GetCombatState(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response);
    // Movement - client calculates valid moves, server validates
    virtual ::grpc::Status MoveCharacter(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response);
    // Turn Management
    virtual ::grpc::Status EndTurn(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response);
    // Combat Actions
    virtual ::grpc::Status Attack(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DungeonStart() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDungeonStart(::grpc::ServerContext* context, ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::dnd5e::api::v1alpha1::DungeonStartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCombatState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCombatState(::grpc::ServerContext* context, ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::dnd5e::api::v1alpha1::GetCombatStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveCharacter(::grpc::ServerContext* context, ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::dnd5e::api::v1alpha1::MoveCharacterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndTurn() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTurn(::grpc::ServerContext* context, ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::dnd5e::api::v1alpha1::EndTurnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Attack() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttack(::grpc::ServerContext* context, ::dnd5e::api::v1alpha1::AttackRequest* request, ::grpc::ServerAsyncResponseWriter< ::dnd5e::api::v1alpha1::AttackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DungeonStart<WithAsyncMethod_GetCombatState<WithAsyncMethod_MoveCharacter<WithAsyncMethod_EndTurn<WithAsyncMethod_Attack<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DungeonStart() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dnd5e::api::v1alpha1::DungeonStartRequest* request, ::dnd5e::api::v1alpha1::DungeonStartResponse* response) { return this->DungeonStart(context, request, response); }));}
    void SetMessageAllocatorFor_DungeonStart(
        ::grpc::MessageAllocator< ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DungeonStart(
      ::grpc::CallbackServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCombatState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::GetCombatStateRequest, ::dnd5e::api::v1alpha1::GetCombatStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* request, ::dnd5e::api::v1alpha1::GetCombatStateResponse* response) { return this->GetCombatState(context, request, response); }));}
    void SetMessageAllocatorFor_GetCombatState(
        ::grpc::MessageAllocator< ::dnd5e::api::v1alpha1::GetCombatStateRequest, ::dnd5e::api::v1alpha1::GetCombatStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::GetCombatStateRequest, ::dnd5e::api::v1alpha1::GetCombatStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCombatState(
      ::grpc::CallbackServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::MoveCharacterRequest, ::dnd5e::api::v1alpha1::MoveCharacterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* request, ::dnd5e::api::v1alpha1::MoveCharacterResponse* response) { return this->MoveCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_MoveCharacter(
        ::grpc::MessageAllocator< ::dnd5e::api::v1alpha1::MoveCharacterRequest, ::dnd5e::api::v1alpha1::MoveCharacterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::MoveCharacterRequest, ::dnd5e::api::v1alpha1::MoveCharacterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndTurn() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::EndTurnRequest, ::dnd5e::api::v1alpha1::EndTurnResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dnd5e::api::v1alpha1::EndTurnRequest* request, ::dnd5e::api::v1alpha1::EndTurnResponse* response) { return this->EndTurn(context, request, response); }));}
    void SetMessageAllocatorFor_EndTurn(
        ::grpc::MessageAllocator< ::dnd5e::api::v1alpha1::EndTurnRequest, ::dnd5e::api::v1alpha1::EndTurnResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::EndTurnRequest, ::dnd5e::api::v1alpha1::EndTurnResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Attack() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::AttackRequest, ::dnd5e::api::v1alpha1::AttackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dnd5e::api::v1alpha1::AttackRequest* request, ::dnd5e::api::v1alpha1::AttackResponse* response) { return this->Attack(context, request, response); }));}
    void SetMessageAllocatorFor_Attack(
        ::grpc::MessageAllocator< ::dnd5e::api::v1alpha1::AttackRequest, ::dnd5e::api::v1alpha1::AttackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dnd5e::api::v1alpha1::AttackRequest, ::dnd5e::api::v1alpha1::AttackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Attack(
      ::grpc::CallbackServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DungeonStart<WithCallbackMethod_GetCombatState<WithCallbackMethod_MoveCharacter<WithCallbackMethod_EndTurn<WithCallbackMethod_Attack<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DungeonStart() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCombatState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndTurn() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Attack() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DungeonStart() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDungeonStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCombatState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCombatState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndTurn() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTurn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Attack() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttack(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DungeonStart() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DungeonStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DungeonStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCombatState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCombatState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCombatState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndTurn() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndTurn(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Attack() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Attack(context, request, response); }));
    }
    ~WithRawCallbackMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Attack(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DungeonStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DungeonStart() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dnd5e::api::v1alpha1::DungeonStartRequest, ::dnd5e::api::v1alpha1::DungeonStartResponse>* streamer) {
                       return this->StreamedDungeonStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DungeonStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DungeonStart(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::DungeonStartRequest* /*request*/, ::dnd5e::api::v1alpha1::DungeonStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDungeonStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dnd5e::api::v1alpha1::DungeonStartRequest,::dnd5e::api::v1alpha1::DungeonStartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCombatState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCombatState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dnd5e::api::v1alpha1::GetCombatStateRequest, ::dnd5e::api::v1alpha1::GetCombatStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dnd5e::api::v1alpha1::GetCombatStateRequest, ::dnd5e::api::v1alpha1::GetCombatStateResponse>* streamer) {
                       return this->StreamedGetCombatState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCombatState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCombatState(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::GetCombatStateRequest* /*request*/, ::dnd5e::api::v1alpha1::GetCombatStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCombatState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dnd5e::api::v1alpha1::GetCombatStateRequest,::dnd5e::api::v1alpha1::GetCombatStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveCharacter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dnd5e::api::v1alpha1::MoveCharacterRequest, ::dnd5e::api::v1alpha1::MoveCharacterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dnd5e::api::v1alpha1::MoveCharacterRequest, ::dnd5e::api::v1alpha1::MoveCharacterResponse>* streamer) {
                       return this->StreamedMoveCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveCharacter(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::MoveCharacterRequest* /*request*/, ::dnd5e::api::v1alpha1::MoveCharacterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dnd5e::api::v1alpha1::MoveCharacterRequest,::dnd5e::api::v1alpha1::MoveCharacterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndTurn() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dnd5e::api::v1alpha1::EndTurnRequest, ::dnd5e::api::v1alpha1::EndTurnResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dnd5e::api::v1alpha1::EndTurnRequest, ::dnd5e::api::v1alpha1::EndTurnResponse>* streamer) {
                       return this->StreamedEndTurn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::EndTurnRequest* /*request*/, ::dnd5e::api::v1alpha1::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndTurn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dnd5e::api::v1alpha1::EndTurnRequest,::dnd5e::api::v1alpha1::EndTurnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Attack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Attack() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dnd5e::api::v1alpha1::AttackRequest, ::dnd5e::api::v1alpha1::AttackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dnd5e::api::v1alpha1::AttackRequest, ::dnd5e::api::v1alpha1::AttackResponse>* streamer) {
                       return this->StreamedAttack(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Attack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Attack(::grpc::ServerContext* /*context*/, const ::dnd5e::api::v1alpha1::AttackRequest* /*request*/, ::dnd5e::api::v1alpha1::AttackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAttack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dnd5e::api::v1alpha1::AttackRequest,::dnd5e::api::v1alpha1::AttackResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DungeonStart<WithStreamedUnaryMethod_GetCombatState<WithStreamedUnaryMethod_MoveCharacter<WithStreamedUnaryMethod_EndTurn<WithStreamedUnaryMethod_Attack<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DungeonStart<WithStreamedUnaryMethod_GetCombatState<WithStreamedUnaryMethod_MoveCharacter<WithStreamedUnaryMethod_EndTurn<WithStreamedUnaryMethod_Attack<Service > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace api
}  // namespace dnd5e


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto__INCLUDED
