// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dnd5e/api/v1alpha1/encounter.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EncounterService_DungeonStart_FullMethodName   = "/dnd5e.api.v1alpha1.EncounterService/DungeonStart"
	EncounterService_GetCombatState_FullMethodName = "/dnd5e.api.v1alpha1.EncounterService/GetCombatState"
	EncounterService_MoveCharacter_FullMethodName  = "/dnd5e.api.v1alpha1.EncounterService/MoveCharacter"
	EncounterService_EndTurn_FullMethodName        = "/dnd5e.api.v1alpha1.EncounterService/EndTurn"
	EncounterService_Attack_FullMethodName         = "/dnd5e.api.v1alpha1.EncounterService/Attack"
)

// EncounterServiceClient is the client API for EncounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EncounterService manages D&D 5e encounters
type EncounterServiceClient interface {
	// DungeonStart generates room, places entities, and rolls initiative
	DungeonStart(ctx context.Context, in *DungeonStartRequest, opts ...grpc.CallOption) (*DungeonStartResponse, error)
	// GetCombatState retrieves current state (mainly for reconnection)
	GetCombatState(ctx context.Context, in *GetCombatStateRequest, opts ...grpc.CallOption) (*GetCombatStateResponse, error)
	// Movement - client calculates valid moves, server validates
	MoveCharacter(ctx context.Context, in *MoveCharacterRequest, opts ...grpc.CallOption) (*MoveCharacterResponse, error)
	// Turn Management
	EndTurn(ctx context.Context, in *EndTurnRequest, opts ...grpc.CallOption) (*EndTurnResponse, error)
	// Combat Actions
	Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error)
}

type encounterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncounterServiceClient(cc grpc.ClientConnInterface) EncounterServiceClient {
	return &encounterServiceClient{cc}
}

func (c *encounterServiceClient) DungeonStart(ctx context.Context, in *DungeonStartRequest, opts ...grpc.CallOption) (*DungeonStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DungeonStartResponse)
	err := c.cc.Invoke(ctx, EncounterService_DungeonStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) GetCombatState(ctx context.Context, in *GetCombatStateRequest, opts ...grpc.CallOption) (*GetCombatStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCombatStateResponse)
	err := c.cc.Invoke(ctx, EncounterService_GetCombatState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) MoveCharacter(ctx context.Context, in *MoveCharacterRequest, opts ...grpc.CallOption) (*MoveCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveCharacterResponse)
	err := c.cc.Invoke(ctx, EncounterService_MoveCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) EndTurn(ctx context.Context, in *EndTurnRequest, opts ...grpc.CallOption) (*EndTurnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndTurnResponse)
	err := c.cc.Invoke(ctx, EncounterService_EndTurn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttackResponse)
	err := c.cc.Invoke(ctx, EncounterService_Attack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncounterServiceServer is the server API for EncounterService service.
// All implementations should embed UnimplementedEncounterServiceServer
// for forward compatibility.
//
// EncounterService manages D&D 5e encounters
type EncounterServiceServer interface {
	// DungeonStart generates room, places entities, and rolls initiative
	DungeonStart(context.Context, *DungeonStartRequest) (*DungeonStartResponse, error)
	// GetCombatState retrieves current state (mainly for reconnection)
	GetCombatState(context.Context, *GetCombatStateRequest) (*GetCombatStateResponse, error)
	// Movement - client calculates valid moves, server validates
	MoveCharacter(context.Context, *MoveCharacterRequest) (*MoveCharacterResponse, error)
	// Turn Management
	EndTurn(context.Context, *EndTurnRequest) (*EndTurnResponse, error)
	// Combat Actions
	Attack(context.Context, *AttackRequest) (*AttackResponse, error)
}

// UnimplementedEncounterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEncounterServiceServer struct{}

func (UnimplementedEncounterServiceServer) DungeonStart(context.Context, *DungeonStartRequest) (*DungeonStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DungeonStart not implemented")
}
func (UnimplementedEncounterServiceServer) GetCombatState(context.Context, *GetCombatStateRequest) (*GetCombatStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombatState not implemented")
}
func (UnimplementedEncounterServiceServer) MoveCharacter(context.Context, *MoveCharacterRequest) (*MoveCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCharacter not implemented")
}
func (UnimplementedEncounterServiceServer) EndTurn(context.Context, *EndTurnRequest) (*EndTurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTurn not implemented")
}
func (UnimplementedEncounterServiceServer) Attack(context.Context, *AttackRequest) (*AttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedEncounterServiceServer) testEmbeddedByValue() {}

// UnsafeEncounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncounterServiceServer will
// result in compilation errors.
type UnsafeEncounterServiceServer interface {
	mustEmbedUnimplementedEncounterServiceServer()
}

func RegisterEncounterServiceServer(s grpc.ServiceRegistrar, srv EncounterServiceServer) {
	// If the following call pancis, it indicates UnimplementedEncounterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EncounterService_ServiceDesc, srv)
}

func _EncounterService_DungeonStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DungeonStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).DungeonStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_DungeonStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).DungeonStart(ctx, req.(*DungeonStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_GetCombatState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCombatStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).GetCombatState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_GetCombatState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).GetCombatState(ctx, req.(*GetCombatStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_MoveCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).MoveCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_MoveCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).MoveCharacter(ctx, req.(*MoveCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_EndTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).EndTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_EndTurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).EndTurn(ctx, req.(*EndTurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_Attack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).Attack(ctx, req.(*AttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncounterService_ServiceDesc is the grpc.ServiceDesc for EncounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnd5e.api.v1alpha1.EncounterService",
	HandlerType: (*EncounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DungeonStart",
			Handler:    _EncounterService_DungeonStart_Handler,
		},
		{
			MethodName: "GetCombatState",
			Handler:    _EncounterService_GetCombatState_Handler,
		},
		{
			MethodName: "MoveCharacter",
			Handler:    _EncounterService_MoveCharacter_Handler,
		},
		{
			MethodName: "EndTurn",
			Handler:    _EncounterService_EndTurn_Handler,
		},
		{
			MethodName: "Attack",
			Handler:    _EncounterService_Attack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnd5e/api/v1alpha1/encounter.proto",
}
