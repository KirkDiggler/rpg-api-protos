syntax = "proto3";

package dnd5e.api.v1alpha1;

import "api/v1alpha1/room_common.proto";
import "dnd5e/api/v1alpha1/encounter.proto";

// ============================================================================
// WEBSOCKET EVENT MESSAGES FOR REAL-TIME UPDATES
// ============================================================================

// EncounterEvent is the wrapper for all encounter-related events
message EncounterEvent {
  string encounter_id = 1;
  string event_id = 2;  // Unique event ID for deduplication
  int64 timestamp = 3;  // Unix timestamp in milliseconds
  
  // One of these will be set based on event type
  oneof event {
    CombatStartedEvent combat_started = 10;
    InitiativeRolledEvent initiative_rolled = 11;
    TurnStartedEvent turn_started = 12;
    TurnEndedEvent turn_ended = 13;
    RoundStartedEvent round_started = 14;
    RoundEndedEvent round_ended = 15;
    EntityMovedEvent entity_moved = 16;
    AttackMadeEvent attack_made = 17;
    DamageTakenEvent damage_taken = 18;
    EntityDefeatedEvent entity_defeated = 19;
    CombatEndedEvent combat_ended = 20;
    StateChangedEvent state_changed = 21;  // Generic state update
  }
}

// CombatStartedEvent fires when combat begins
message CombatStartedEvent {
  CombatState initial_state = 1;
}

// InitiativeRolledEvent fires for each initiative roll
message InitiativeRolledEvent {
  string entity_id = 1;
  int32 roll = 2;
  int32 modifier = 3;
  int32 total = 4;
}

// TurnStartedEvent fires when a new turn begins
message TurnStartedEvent {
  string entity_id = 1;
  int32 round = 2;
  TurnState turn_state = 3;
}

// TurnEndedEvent fires when a turn ends
message TurnEndedEvent {
  string entity_id = 1;
  int32 round = 2;
}

// RoundStartedEvent fires when a new round begins
message RoundStartedEvent {
  int32 round = 1;
}

// RoundEndedEvent fires when a round completes
message RoundEndedEvent {
  int32 round = 1;
}

// EntityMovedEvent fires when an entity changes position
message EntityMovedEvent {
  string entity_id = 1;
  .api.v1alpha1.Position from_position = 2;
  .api.v1alpha1.Position to_position = 3;
  int32 movement_cost = 4;
  int32 movement_remaining = 5;
}

// AttackMadeEvent fires when an attack is made
message AttackMadeEvent {
  string attacker_id = 1;
  string target_id = 2;
  AttackResult result = 3;
}

// DamageTakenEvent fires when an entity takes damage
message DamageTakenEvent {
  string entity_id = 1;
  int32 damage = 2;
  string damage_type = 3;
  int32 hp_remaining = 4;
  int32 hp_max = 5;
}

// EntityDefeatedEvent fires when an entity reaches 0 HP
message EntityDefeatedEvent {
  string entity_id = 1;
  string defeated_by = 2;  // Entity that dealt the killing blow
}

// CombatEndedEvent fires when combat concludes
message CombatEndedEvent {
  enum EndReason {
    END_REASON_UNSPECIFIED = 0;
    END_REASON_VICTORY = 1;     // All enemies defeated
    END_REASON_DEFEAT = 2;      // All players defeated
    END_REASON_FLED = 3;        // Players fled
    END_REASON_NEGOTIATED = 4;  // Peaceful resolution
    END_REASON_TIMEOUT = 5;     // Combat timed out
  }
  EndReason reason = 1;
  repeated string victor_ids = 2;  // IDs of victorious entities
  repeated string defeated_ids = 3;  // IDs of defeated entities
}

// StateChangedEvent is a generic event for any state change
message StateChangedEvent {
  CombatState combat_state = 1;
  Room room = 2;
}

// SubscribeToEncounterRequest subscribes to encounter events
message SubscribeToEncounterRequest {
  string encounter_id = 1;
  repeated string event_types = 2;  // Optional filter for specific event types
}

// SubscribeToEncounterResponse confirms subscription
message SubscribeToEncounterResponse {
  string subscription_id = 1;
  CombatState current_state = 2;  // Current state at time of subscription
  Room current_room = 3;
}

// UnsubscribeFromEncounterRequest cancels a subscription
message UnsubscribeFromEncounterRequest {
  string subscription_id = 1;
}

// UnsubscribeFromEncounterResponse confirms unsubscription
message UnsubscribeFromEncounterResponse {
  bool success = 1;
}