// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/clients/dnd5e/api/v1alpha1/character_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/clients/dnd5e/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCharacterServiceClient is a mock of CharacterServiceClient interface.
type MockCharacterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceClientMockRecorder
}

// MockCharacterServiceClientMockRecorder is the mock recorder for MockCharacterServiceClient.
type MockCharacterServiceClientMockRecorder struct {
	mock *MockCharacterServiceClient
}

// NewMockCharacterServiceClient creates a new mock instance.
func NewMockCharacterServiceClient(ctrl *gomock.Controller) *MockCharacterServiceClient {
	mock := &MockCharacterServiceClient{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceClient) EXPECT() *MockCharacterServiceClientMockRecorder {
	return m.recorder
}

// CreateDraft mocks base method.
func (m *MockCharacterServiceClient) CreateDraft(ctx context.Context, in *v1alpha1.CreateDraftRequest, opts ...grpc.CallOption) (*v1alpha1.CreateDraftResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDraft", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockCharacterServiceClientMockRecorder) CreateDraft(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockCharacterServiceClient)(nil).CreateDraft), varargs...)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceClient) DeleteCharacter(ctx context.Context, in *v1alpha1.DeleteCharacterRequest, opts ...grpc.CallOption) (*v1alpha1.DeleteCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCharacter", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceClientMockRecorder) DeleteCharacter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).DeleteCharacter), varargs...)
}

// DeleteDraft mocks base method.
func (m *MockCharacterServiceClient) DeleteDraft(ctx context.Context, in *v1alpha1.DeleteDraftRequest, opts ...grpc.CallOption) (*v1alpha1.DeleteDraftResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDraft", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDraft indicates an expected call of DeleteDraft.
func (mr *MockCharacterServiceClientMockRecorder) DeleteDraft(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraft", reflect.TypeOf((*MockCharacterServiceClient)(nil).DeleteDraft), varargs...)
}

// FinalizeDraft mocks base method.
func (m *MockCharacterServiceClient) FinalizeDraft(ctx context.Context, in *v1alpha1.FinalizeDraftRequest, opts ...grpc.CallOption) (*v1alpha1.FinalizeDraftResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FinalizeDraft", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FinalizeDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeDraft indicates an expected call of FinalizeDraft.
func (mr *MockCharacterServiceClientMockRecorder) FinalizeDraft(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDraft", reflect.TypeOf((*MockCharacterServiceClient)(nil).FinalizeDraft), varargs...)
}

// GetBackgroundDetails mocks base method.
func (m *MockCharacterServiceClient) GetBackgroundDetails(ctx context.Context, in *v1alpha1.GetBackgroundDetailsRequest, opts ...grpc.CallOption) (*v1alpha1.GetBackgroundDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackgroundDetails", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetBackgroundDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgroundDetails indicates an expected call of GetBackgroundDetails.
func (mr *MockCharacterServiceClientMockRecorder) GetBackgroundDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundDetails", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetBackgroundDetails), varargs...)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceClient) GetCharacter(ctx context.Context, in *v1alpha1.GetCharacterRequest, opts ...grpc.CallOption) (*v1alpha1.GetCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacter", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceClientMockRecorder) GetCharacter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetCharacter), varargs...)
}

// GetClassDetails mocks base method.
func (m *MockCharacterServiceClient) GetClassDetails(ctx context.Context, in *v1alpha1.GetClassDetailsRequest, opts ...grpc.CallOption) (*v1alpha1.GetClassDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClassDetails", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetClassDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassDetails indicates an expected call of GetClassDetails.
func (mr *MockCharacterServiceClientMockRecorder) GetClassDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassDetails", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetClassDetails), varargs...)
}

// GetDraft mocks base method.
func (m *MockCharacterServiceClient) GetDraft(ctx context.Context, in *v1alpha1.GetDraftRequest, opts ...grpc.CallOption) (*v1alpha1.GetDraftResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDraft", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraft indicates an expected call of GetDraft.
func (mr *MockCharacterServiceClientMockRecorder) GetDraft(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraft", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetDraft), varargs...)
}

// GetRaceDetails mocks base method.
func (m *MockCharacterServiceClient) GetRaceDetails(ctx context.Context, in *v1alpha1.GetRaceDetailsRequest, opts ...grpc.CallOption) (*v1alpha1.GetRaceDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRaceDetails", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetRaceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaceDetails indicates an expected call of GetRaceDetails.
func (mr *MockCharacterServiceClientMockRecorder) GetRaceDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaceDetails", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetRaceDetails), varargs...)
}

// ListBackgrounds mocks base method.
func (m *MockCharacterServiceClient) ListBackgrounds(ctx context.Context, in *v1alpha1.ListBackgroundsRequest, opts ...grpc.CallOption) (*v1alpha1.ListBackgroundsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackgrounds", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListBackgroundsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackgrounds indicates an expected call of ListBackgrounds.
func (mr *MockCharacterServiceClientMockRecorder) ListBackgrounds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackgrounds", reflect.TypeOf((*MockCharacterServiceClient)(nil).ListBackgrounds), varargs...)
}

// ListCharacters mocks base method.
func (m *MockCharacterServiceClient) ListCharacters(ctx context.Context, in *v1alpha1.ListCharactersRequest, opts ...grpc.CallOption) (*v1alpha1.ListCharactersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCharacters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListCharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockCharacterServiceClientMockRecorder) ListCharacters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockCharacterServiceClient)(nil).ListCharacters), varargs...)
}

// ListClasses mocks base method.
func (m *MockCharacterServiceClient) ListClasses(ctx context.Context, in *v1alpha1.ListClassesRequest, opts ...grpc.CallOption) (*v1alpha1.ListClassesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClasses", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListClassesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClasses indicates an expected call of ListClasses.
func (mr *MockCharacterServiceClientMockRecorder) ListClasses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClasses", reflect.TypeOf((*MockCharacterServiceClient)(nil).ListClasses), varargs...)
}

// ListDrafts mocks base method.
func (m *MockCharacterServiceClient) ListDrafts(ctx context.Context, in *v1alpha1.ListDraftsRequest, opts ...grpc.CallOption) (*v1alpha1.ListDraftsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDrafts", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListDraftsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDrafts indicates an expected call of ListDrafts.
func (mr *MockCharacterServiceClientMockRecorder) ListDrafts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDrafts", reflect.TypeOf((*MockCharacterServiceClient)(nil).ListDrafts), varargs...)
}

// ListRaces mocks base method.
func (m *MockCharacterServiceClient) ListRaces(ctx context.Context, in *v1alpha1.ListRacesRequest, opts ...grpc.CallOption) (*v1alpha1.ListRacesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRaces", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListRacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRaces indicates an expected call of ListRaces.
func (mr *MockCharacterServiceClientMockRecorder) ListRaces(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRaces", reflect.TypeOf((*MockCharacterServiceClient)(nil).ListRaces), varargs...)
}

// RollAbilityScores mocks base method.
func (m *MockCharacterServiceClient) RollAbilityScores(ctx context.Context, in *v1alpha1.RollAbilityScoresRequest, opts ...grpc.CallOption) (*v1alpha1.RollAbilityScoresResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollAbilityScores", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RollAbilityScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollAbilityScores indicates an expected call of RollAbilityScores.
func (mr *MockCharacterServiceClientMockRecorder) RollAbilityScores(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollAbilityScores", reflect.TypeOf((*MockCharacterServiceClient)(nil).RollAbilityScores), varargs...)
}

// UpdateAbilityScores mocks base method.
func (m *MockCharacterServiceClient) UpdateAbilityScores(ctx context.Context, in *v1alpha1.UpdateAbilityScoresRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateAbilityScoresResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAbilityScores", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateAbilityScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbilityScores indicates an expected call of UpdateAbilityScores.
func (mr *MockCharacterServiceClientMockRecorder) UpdateAbilityScores(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbilityScores", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateAbilityScores), varargs...)
}

// UpdateBackground mocks base method.
func (m *MockCharacterServiceClient) UpdateBackground(ctx context.Context, in *v1alpha1.UpdateBackgroundRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateBackgroundResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackground", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateBackgroundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackground indicates an expected call of UpdateBackground.
func (mr *MockCharacterServiceClientMockRecorder) UpdateBackground(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackground", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateBackground), varargs...)
}

// UpdateClass mocks base method.
func (m *MockCharacterServiceClient) UpdateClass(ctx context.Context, in *v1alpha1.UpdateClassRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateClassResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClass", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateClassResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockCharacterServiceClientMockRecorder) UpdateClass(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateClass), varargs...)
}

// UpdateName mocks base method.
func (m *MockCharacterServiceClient) UpdateName(ctx context.Context, in *v1alpha1.UpdateNameRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateName", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockCharacterServiceClientMockRecorder) UpdateName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateName), varargs...)
}

// UpdateRace mocks base method.
func (m *MockCharacterServiceClient) UpdateRace(ctx context.Context, in *v1alpha1.UpdateRaceRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateRaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRace", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateRaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRace indicates an expected call of UpdateRace.
func (mr *MockCharacterServiceClientMockRecorder) UpdateRace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRace", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateRace), varargs...)
}

// UpdateSkills mocks base method.
func (m *MockCharacterServiceClient) UpdateSkills(ctx context.Context, in *v1alpha1.UpdateSkillsRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateSkillsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSkills", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateSkillsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkills indicates an expected call of UpdateSkills.
func (mr *MockCharacterServiceClientMockRecorder) UpdateSkills(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkills", reflect.TypeOf((*MockCharacterServiceClient)(nil).UpdateSkills), varargs...)
}

// ValidateDraft mocks base method.
func (m *MockCharacterServiceClient) ValidateDraft(ctx context.Context, in *v1alpha1.ValidateDraftRequest, opts ...grpc.CallOption) (*v1alpha1.ValidateDraftResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateDraft", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidateDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDraft indicates an expected call of ValidateDraft.
func (mr *MockCharacterServiceClientMockRecorder) ValidateDraft(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDraft", reflect.TypeOf((*MockCharacterServiceClient)(nil).ValidateDraft), varargs...)
}

// MockCharacterServiceServer is a mock of CharacterServiceServer interface.
type MockCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceServerMockRecorder
}

// MockCharacterServiceServerMockRecorder is the mock recorder for MockCharacterServiceServer.
type MockCharacterServiceServerMockRecorder struct {
	mock *MockCharacterServiceServer
}

// NewMockCharacterServiceServer creates a new mock instance.
func NewMockCharacterServiceServer(ctrl *gomock.Controller) *MockCharacterServiceServer {
	mock := &MockCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceServer) EXPECT() *MockCharacterServiceServerMockRecorder {
	return m.recorder
}

// CreateDraft mocks base method.
func (m *MockCharacterServiceServer) CreateDraft(arg0 context.Context, arg1 *v1alpha1.CreateDraftRequest) (*v1alpha1.CreateDraftResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CreateDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockCharacterServiceServerMockRecorder) CreateDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockCharacterServiceServer)(nil).CreateDraft), arg0, arg1)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceServer) DeleteCharacter(arg0 context.Context, arg1 *v1alpha1.DeleteCharacterRequest) (*v1alpha1.DeleteCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.DeleteCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceServerMockRecorder) DeleteCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).DeleteCharacter), arg0, arg1)
}

// DeleteDraft mocks base method.
func (m *MockCharacterServiceServer) DeleteDraft(arg0 context.Context, arg1 *v1alpha1.DeleteDraftRequest) (*v1alpha1.DeleteDraftResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDraft", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.DeleteDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDraft indicates an expected call of DeleteDraft.
func (mr *MockCharacterServiceServerMockRecorder) DeleteDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraft", reflect.TypeOf((*MockCharacterServiceServer)(nil).DeleteDraft), arg0, arg1)
}

// FinalizeDraft mocks base method.
func (m *MockCharacterServiceServer) FinalizeDraft(arg0 context.Context, arg1 *v1alpha1.FinalizeDraftRequest) (*v1alpha1.FinalizeDraftResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDraft", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.FinalizeDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeDraft indicates an expected call of FinalizeDraft.
func (mr *MockCharacterServiceServerMockRecorder) FinalizeDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDraft", reflect.TypeOf((*MockCharacterServiceServer)(nil).FinalizeDraft), arg0, arg1)
}

// GetBackgroundDetails mocks base method.
func (m *MockCharacterServiceServer) GetBackgroundDetails(arg0 context.Context, arg1 *v1alpha1.GetBackgroundDetailsRequest) (*v1alpha1.GetBackgroundDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetBackgroundDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgroundDetails indicates an expected call of GetBackgroundDetails.
func (mr *MockCharacterServiceServerMockRecorder) GetBackgroundDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundDetails", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetBackgroundDetails), arg0, arg1)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceServer) GetCharacter(arg0 context.Context, arg1 *v1alpha1.GetCharacterRequest) (*v1alpha1.GetCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceServerMockRecorder) GetCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetCharacter), arg0, arg1)
}

// GetClassDetails mocks base method.
func (m *MockCharacterServiceServer) GetClassDetails(arg0 context.Context, arg1 *v1alpha1.GetClassDetailsRequest) (*v1alpha1.GetClassDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetClassDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassDetails indicates an expected call of GetClassDetails.
func (mr *MockCharacterServiceServerMockRecorder) GetClassDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassDetails", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetClassDetails), arg0, arg1)
}

// GetDraft mocks base method.
func (m *MockCharacterServiceServer) GetDraft(arg0 context.Context, arg1 *v1alpha1.GetDraftRequest) (*v1alpha1.GetDraftResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraft", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraft indicates an expected call of GetDraft.
func (mr *MockCharacterServiceServerMockRecorder) GetDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraft", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetDraft), arg0, arg1)
}

// GetRaceDetails mocks base method.
func (m *MockCharacterServiceServer) GetRaceDetails(arg0 context.Context, arg1 *v1alpha1.GetRaceDetailsRequest) (*v1alpha1.GetRaceDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaceDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetRaceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaceDetails indicates an expected call of GetRaceDetails.
func (mr *MockCharacterServiceServerMockRecorder) GetRaceDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaceDetails", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetRaceDetails), arg0, arg1)
}

// ListBackgrounds mocks base method.
func (m *MockCharacterServiceServer) ListBackgrounds(arg0 context.Context, arg1 *v1alpha1.ListBackgroundsRequest) (*v1alpha1.ListBackgroundsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackgrounds", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListBackgroundsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackgrounds indicates an expected call of ListBackgrounds.
func (mr *MockCharacterServiceServerMockRecorder) ListBackgrounds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackgrounds", reflect.TypeOf((*MockCharacterServiceServer)(nil).ListBackgrounds), arg0, arg1)
}

// ListCharacters mocks base method.
func (m *MockCharacterServiceServer) ListCharacters(arg0 context.Context, arg1 *v1alpha1.ListCharactersRequest) (*v1alpha1.ListCharactersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharacters", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListCharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockCharacterServiceServerMockRecorder) ListCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockCharacterServiceServer)(nil).ListCharacters), arg0, arg1)
}

// ListClasses mocks base method.
func (m *MockCharacterServiceServer) ListClasses(arg0 context.Context, arg1 *v1alpha1.ListClassesRequest) (*v1alpha1.ListClassesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClasses", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListClassesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClasses indicates an expected call of ListClasses.
func (mr *MockCharacterServiceServerMockRecorder) ListClasses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClasses", reflect.TypeOf((*MockCharacterServiceServer)(nil).ListClasses), arg0, arg1)
}

// ListDrafts mocks base method.
func (m *MockCharacterServiceServer) ListDrafts(arg0 context.Context, arg1 *v1alpha1.ListDraftsRequest) (*v1alpha1.ListDraftsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDrafts", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListDraftsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDrafts indicates an expected call of ListDrafts.
func (mr *MockCharacterServiceServerMockRecorder) ListDrafts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDrafts", reflect.TypeOf((*MockCharacterServiceServer)(nil).ListDrafts), arg0, arg1)
}

// ListRaces mocks base method.
func (m *MockCharacterServiceServer) ListRaces(arg0 context.Context, arg1 *v1alpha1.ListRacesRequest) (*v1alpha1.ListRacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRaces", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListRacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRaces indicates an expected call of ListRaces.
func (mr *MockCharacterServiceServerMockRecorder) ListRaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRaces", reflect.TypeOf((*MockCharacterServiceServer)(nil).ListRaces), arg0, arg1)
}

// RollAbilityScores mocks base method.
func (m *MockCharacterServiceServer) RollAbilityScores(arg0 context.Context, arg1 *v1alpha1.RollAbilityScoresRequest) (*v1alpha1.RollAbilityScoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollAbilityScores", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RollAbilityScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollAbilityScores indicates an expected call of RollAbilityScores.
func (mr *MockCharacterServiceServerMockRecorder) RollAbilityScores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollAbilityScores", reflect.TypeOf((*MockCharacterServiceServer)(nil).RollAbilityScores), arg0, arg1)
}

// UpdateAbilityScores mocks base method.
func (m *MockCharacterServiceServer) UpdateAbilityScores(arg0 context.Context, arg1 *v1alpha1.UpdateAbilityScoresRequest) (*v1alpha1.UpdateAbilityScoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAbilityScores", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateAbilityScoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbilityScores indicates an expected call of UpdateAbilityScores.
func (mr *MockCharacterServiceServerMockRecorder) UpdateAbilityScores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbilityScores", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateAbilityScores), arg0, arg1)
}

// UpdateBackground mocks base method.
func (m *MockCharacterServiceServer) UpdateBackground(arg0 context.Context, arg1 *v1alpha1.UpdateBackgroundRequest) (*v1alpha1.UpdateBackgroundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackground", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateBackgroundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackground indicates an expected call of UpdateBackground.
func (mr *MockCharacterServiceServerMockRecorder) UpdateBackground(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackground", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateBackground), arg0, arg1)
}

// UpdateClass mocks base method.
func (m *MockCharacterServiceServer) UpdateClass(arg0 context.Context, arg1 *v1alpha1.UpdateClassRequest) (*v1alpha1.UpdateClassResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateClassResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockCharacterServiceServerMockRecorder) UpdateClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateClass), arg0, arg1)
}

// UpdateName mocks base method.
func (m *MockCharacterServiceServer) UpdateName(arg0 context.Context, arg1 *v1alpha1.UpdateNameRequest) (*v1alpha1.UpdateNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockCharacterServiceServerMockRecorder) UpdateName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateName), arg0, arg1)
}

// UpdateRace mocks base method.
func (m *MockCharacterServiceServer) UpdateRace(arg0 context.Context, arg1 *v1alpha1.UpdateRaceRequest) (*v1alpha1.UpdateRaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRace", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateRaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRace indicates an expected call of UpdateRace.
func (mr *MockCharacterServiceServerMockRecorder) UpdateRace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRace", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateRace), arg0, arg1)
}

// UpdateSkills mocks base method.
func (m *MockCharacterServiceServer) UpdateSkills(arg0 context.Context, arg1 *v1alpha1.UpdateSkillsRequest) (*v1alpha1.UpdateSkillsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkills", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateSkillsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkills indicates an expected call of UpdateSkills.
func (mr *MockCharacterServiceServerMockRecorder) UpdateSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkills", reflect.TypeOf((*MockCharacterServiceServer)(nil).UpdateSkills), arg0, arg1)
}

// ValidateDraft mocks base method.
func (m *MockCharacterServiceServer) ValidateDraft(arg0 context.Context, arg1 *v1alpha1.ValidateDraftRequest) (*v1alpha1.ValidateDraftResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDraft", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidateDraftResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDraft indicates an expected call of ValidateDraft.
func (mr *MockCharacterServiceServerMockRecorder) ValidateDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDraft", reflect.TypeOf((*MockCharacterServiceServer)(nil).ValidateDraft), arg0, arg1)
}

// MockUnsafeCharacterServiceServer is a mock of UnsafeCharacterServiceServer interface.
type MockUnsafeCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCharacterServiceServerMockRecorder
}

// MockUnsafeCharacterServiceServerMockRecorder is the mock recorder for MockUnsafeCharacterServiceServer.
type MockUnsafeCharacterServiceServerMockRecorder struct {
	mock *MockUnsafeCharacterServiceServer
}

// NewMockUnsafeCharacterServiceServer creates a new mock instance.
func NewMockUnsafeCharacterServiceServer(ctrl *gomock.Controller) *MockUnsafeCharacterServiceServer {
	mock := &MockUnsafeCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCharacterServiceServer) EXPECT() *MockUnsafeCharacterServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCharacterServiceServer mocks base method.
func (m *MockUnsafeCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCharacterServiceServer")
}

// mustEmbedUnimplementedCharacterServiceServer indicates an expected call of mustEmbedUnimplementedCharacterServiceServer.
func (mr *MockUnsafeCharacterServiceServerMockRecorder) mustEmbedUnimplementedCharacterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCharacterServiceServer", reflect.TypeOf((*MockUnsafeCharacterServiceServer)(nil).mustEmbedUnimplementedCharacterServiceServer))
}
