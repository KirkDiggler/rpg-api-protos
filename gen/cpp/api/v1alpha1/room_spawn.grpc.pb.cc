// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/v1alpha1/room_spawn.proto

#include "api/v1alpha1/room_spawn.pb.h"
#include "api/v1alpha1/room_spawn.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace api {
namespace v1alpha1 {

static const char* SpawnService_method_names[] = {
  "/api.v1alpha1.SpawnService/SpawnEntity",
  "/api.v1alpha1.SpawnService/SpawnMultipleEntities",
  "/api.v1alpha1.SpawnService/SpawnFromTemplate",
  "/api.v1alpha1.SpawnService/MoveEntity",
  "/api.v1alpha1.SpawnService/UpdateEntity",
  "/api.v1alpha1.SpawnService/RemoveEntity",
  "/api.v1alpha1.SpawnService/GetEntity",
  "/api.v1alpha1.SpawnService/ListEntities",
  "/api.v1alpha1.SpawnService/FindEntitiesByType",
  "/api.v1alpha1.SpawnService/ListSpawnTemplates",
  "/api.v1alpha1.SpawnService/CreateSpawnTemplate",
  "/api.v1alpha1.SpawnService/GetSpawnTemplate",
  "/api.v1alpha1.SpawnService/BatchSpawnEntities",
  "/api.v1alpha1.SpawnService/BatchMoveEntities",
  "/api.v1alpha1.SpawnService/BatchRemoveEntities",
};

std::unique_ptr< SpawnService::Stub> SpawnService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpawnService::Stub> stub(new SpawnService::Stub(channel, options));
  return stub;
}

SpawnService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SpawnEntity_(SpawnService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnMultipleEntities_(SpawnService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnFromTemplate_(SpawnService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveEntity_(SpawnService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEntity_(SpawnService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEntity_(SpawnService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntity_(SpawnService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListEntities_(SpawnService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindEntitiesByType_(SpawnService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSpawnTemplates_(SpawnService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSpawnTemplate_(SpawnService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpawnTemplate_(SpawnService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchSpawnEntities_(SpawnService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchMoveEntities_(SpawnService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchRemoveEntities_(SpawnService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpawnService::Stub::SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::api::v1alpha1::SpawnEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnEntity_, context, request, response);
}

void SpawnService::Stub::async::SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnEntity(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>* SpawnService::Stub::PrepareAsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::SpawnEntityResponse, ::api::v1alpha1::SpawnEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnEntityResponse>* SpawnService::Stub::AsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnMultipleEntities_, context, request, response);
}

void SpawnService::Stub::async::SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnMultipleEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnMultipleEntities(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnMultipleEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* SpawnService::Stub::PrepareAsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::SpawnMultipleEntitiesResponse, ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnMultipleEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnMultipleEntitiesResponse>* SpawnService::Stub::AsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnMultipleEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::api::v1alpha1::SpawnFromTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnFromTemplate_, context, request, response);
}

void SpawnService::Stub::async::SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnFromTemplate_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnFromTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnFromTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>* SpawnService::Stub::PrepareAsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::SpawnFromTemplateResponse, ::api::v1alpha1::SpawnFromTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnFromTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::SpawnFromTemplateResponse>* SpawnService::Stub::AsyncSpawnFromTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnFromTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::api::v1alpha1::MoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveEntity_, context, request, response);
}

void SpawnService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>* SpawnService::Stub::PrepareAsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::MoveEntityResponse, ::api::v1alpha1::MoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::MoveEntityResponse>* SpawnService::Stub::AsyncMoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::api::v1alpha1::UpdateEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateEntity_, context, request, response);
}

void SpawnService::Stub::async::UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::UpdateEntity(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>* SpawnService::Stub::PrepareAsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::UpdateEntityResponse, ::api::v1alpha1::UpdateEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::UpdateEntityResponse>* SpawnService::Stub::AsyncUpdateEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::UpdateEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::api::v1alpha1::RemoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveEntity_, context, request, response);
}

void SpawnService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>* SpawnService::Stub::PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::RemoveEntityResponse, ::api::v1alpha1::RemoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::RemoveEntityResponse>* SpawnService::Stub::AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::api::v1alpha1::GetEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntity_, context, request, response);
}

void SpawnService::Stub::async::GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetEntity(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>* SpawnService::Stub::PrepareAsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetEntityResponse, ::api::v1alpha1::GetEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetEntityResponse>* SpawnService::Stub::AsyncGetEntityRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::api::v1alpha1::ListEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListEntities_, context, request, response);
}

void SpawnService::Stub::async::ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::ListEntities(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>* SpawnService::Stub::PrepareAsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ListEntitiesResponse, ::api::v1alpha1::ListEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListEntitiesResponse>* SpawnService::Stub::AsyncListEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::api::v1alpha1::FindEntitiesByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindEntitiesByType_, context, request, response);
}

void SpawnService::Stub::async::FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindEntitiesByType_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::FindEntitiesByType(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindEntitiesByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>* SpawnService::Stub::PrepareAsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::FindEntitiesByTypeResponse, ::api::v1alpha1::FindEntitiesByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindEntitiesByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::FindEntitiesByTypeResponse>* SpawnService::Stub::AsyncFindEntitiesByTypeRaw(::grpc::ClientContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindEntitiesByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::api::v1alpha1::ListSpawnTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSpawnTemplates_, context, request, response);
}

void SpawnService::Stub::async::ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpawnTemplates_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::ListSpawnTemplates(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpawnTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>* SpawnService::Stub::PrepareAsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::ListSpawnTemplatesResponse, ::api::v1alpha1::ListSpawnTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSpawnTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::ListSpawnTemplatesResponse>* SpawnService::Stub::AsyncListSpawnTemplatesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSpawnTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::api::v1alpha1::CreateSpawnTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpawnTemplate_, context, request, response);
}

void SpawnService::Stub::async::CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnTemplate_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::CreateSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>* SpawnService::Stub::PrepareAsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::CreateSpawnTemplateResponse, ::api::v1alpha1::CreateSpawnTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpawnTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::CreateSpawnTemplateResponse>* SpawnService::Stub::AsyncCreateSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpawnTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::api::v1alpha1::GetSpawnTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpawnTemplate_, context, request, response);
}

void SpawnService::Stub::async::GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnTemplate_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetSpawnTemplate(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>* SpawnService::Stub::PrepareAsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::GetSpawnTemplateResponse, ::api::v1alpha1::GetSpawnTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpawnTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::GetSpawnTemplateResponse>* SpawnService::Stub::AsyncGetSpawnTemplateRaw(::grpc::ClientContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpawnTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchSpawnEntities_, context, request, response);
}

void SpawnService::Stub::async::BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchSpawnEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::BatchSpawnEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchSpawnEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>* SpawnService::Stub::PrepareAsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::BatchSpawnEntitiesResponse, ::api::v1alpha1::BatchSpawnEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchSpawnEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchSpawnEntitiesResponse>* SpawnService::Stub::AsyncBatchSpawnEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchSpawnEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::api::v1alpha1::BatchMoveEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchMoveEntities_, context, request, response);
}

void SpawnService::Stub::async::BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchMoveEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::BatchMoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchMoveEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>* SpawnService::Stub::PrepareAsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::BatchMoveEntitiesResponse, ::api::v1alpha1::BatchMoveEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchMoveEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchMoveEntitiesResponse>* SpawnService::Stub::AsyncBatchMoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchMoveEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchRemoveEntities_, context, request, response);
}

void SpawnService::Stub::async::BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRemoveEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::BatchRemoveEntities(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRemoveEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>* SpawnService::Stub::PrepareAsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1alpha1::BatchRemoveEntitiesResponse, ::api::v1alpha1::BatchRemoveEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchRemoveEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1alpha1::BatchRemoveEntitiesResponse>* SpawnService::Stub::AsyncBatchRemoveEntitiesRaw(::grpc::ClientContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchRemoveEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

SpawnService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::SpawnEntityRequest, ::api::v1alpha1::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::SpawnEntityRequest* req,
             ::api::v1alpha1::SpawnEntityResponse* resp) {
               return service->SpawnEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::SpawnMultipleEntitiesRequest, ::api::v1alpha1::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::SpawnMultipleEntitiesRequest* req,
             ::api::v1alpha1::SpawnMultipleEntitiesResponse* resp) {
               return service->SpawnMultipleEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::SpawnFromTemplateRequest, ::api::v1alpha1::SpawnFromTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::SpawnFromTemplateRequest* req,
             ::api::v1alpha1::SpawnFromTemplateResponse* resp) {
               return service->SpawnFromTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::MoveEntityRequest, ::api::v1alpha1::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::MoveEntityRequest* req,
             ::api::v1alpha1::MoveEntityResponse* resp) {
               return service->MoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::UpdateEntityRequest, ::api::v1alpha1::UpdateEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::UpdateEntityRequest* req,
             ::api::v1alpha1::UpdateEntityResponse* resp) {
               return service->UpdateEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::RemoveEntityRequest, ::api::v1alpha1::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::RemoveEntityRequest* req,
             ::api::v1alpha1::RemoveEntityResponse* resp) {
               return service->RemoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::GetEntityRequest, ::api::v1alpha1::GetEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetEntityRequest* req,
             ::api::v1alpha1::GetEntityResponse* resp) {
               return service->GetEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::ListEntitiesRequest, ::api::v1alpha1::ListEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ListEntitiesRequest* req,
             ::api::v1alpha1::ListEntitiesResponse* resp) {
               return service->ListEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::FindEntitiesByTypeRequest, ::api::v1alpha1::FindEntitiesByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::FindEntitiesByTypeRequest* req,
             ::api::v1alpha1::FindEntitiesByTypeResponse* resp) {
               return service->FindEntitiesByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::ListSpawnTemplatesRequest, ::api::v1alpha1::ListSpawnTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::ListSpawnTemplatesRequest* req,
             ::api::v1alpha1::ListSpawnTemplatesResponse* resp) {
               return service->ListSpawnTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::CreateSpawnTemplateRequest, ::api::v1alpha1::CreateSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::CreateSpawnTemplateRequest* req,
             ::api::v1alpha1::CreateSpawnTemplateResponse* resp) {
               return service->CreateSpawnTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::GetSpawnTemplateRequest, ::api::v1alpha1::GetSpawnTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::GetSpawnTemplateRequest* req,
             ::api::v1alpha1::GetSpawnTemplateResponse* resp) {
               return service->GetSpawnTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::BatchSpawnEntitiesRequest, ::api::v1alpha1::BatchSpawnEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::BatchSpawnEntitiesRequest* req,
             ::api::v1alpha1::BatchSpawnEntitiesResponse* resp) {
               return service->BatchSpawnEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::BatchMoveEntitiesRequest, ::api::v1alpha1::BatchMoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::BatchMoveEntitiesRequest* req,
             ::api::v1alpha1::BatchMoveEntitiesResponse* resp) {
               return service->BatchMoveEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::api::v1alpha1::BatchRemoveEntitiesRequest, ::api::v1alpha1::BatchRemoveEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1alpha1::BatchRemoveEntitiesRequest* req,
             ::api::v1alpha1::BatchRemoveEntitiesResponse* resp) {
               return service->BatchRemoveEntities(ctx, req, resp);
             }, this)));
}

SpawnService::Service::~Service() {
}

::grpc::Status SpawnService::Service::SpawnEntity(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnEntityRequest* request, ::api::v1alpha1::SpawnEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::SpawnMultipleEntities(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnMultipleEntitiesRequest* request, ::api::v1alpha1::SpawnMultipleEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::SpawnFromTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::SpawnFromTemplateRequest* request, ::api::v1alpha1::SpawnFromTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::MoveEntity(::grpc::ServerContext* context, const ::api::v1alpha1::MoveEntityRequest* request, ::api::v1alpha1::MoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::UpdateEntity(::grpc::ServerContext* context, const ::api::v1alpha1::UpdateEntityRequest* request, ::api::v1alpha1::UpdateEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::RemoveEntity(::grpc::ServerContext* context, const ::api::v1alpha1::RemoveEntityRequest* request, ::api::v1alpha1::RemoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetEntity(::grpc::ServerContext* context, const ::api::v1alpha1::GetEntityRequest* request, ::api::v1alpha1::GetEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::ListEntities(::grpc::ServerContext* context, const ::api::v1alpha1::ListEntitiesRequest* request, ::api::v1alpha1::ListEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::FindEntitiesByType(::grpc::ServerContext* context, const ::api::v1alpha1::FindEntitiesByTypeRequest* request, ::api::v1alpha1::FindEntitiesByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::ListSpawnTemplates(::grpc::ServerContext* context, const ::api::v1alpha1::ListSpawnTemplatesRequest* request, ::api::v1alpha1::ListSpawnTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::CreateSpawnTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::CreateSpawnTemplateRequest* request, ::api::v1alpha1::CreateSpawnTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetSpawnTemplate(::grpc::ServerContext* context, const ::api::v1alpha1::GetSpawnTemplateRequest* request, ::api::v1alpha1::GetSpawnTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::BatchSpawnEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchSpawnEntitiesRequest* request, ::api::v1alpha1::BatchSpawnEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::BatchMoveEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchMoveEntitiesRequest* request, ::api::v1alpha1::BatchMoveEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::BatchRemoveEntities(::grpc::ServerContext* context, const ::api::v1alpha1::BatchRemoveEntitiesRequest* request, ::api::v1alpha1::BatchRemoveEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

