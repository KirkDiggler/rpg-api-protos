// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dnd5e/api/v1alpha1/character.proto

#include "dnd5e/api/v1alpha1/character.pb.h"
#include "dnd5e/api/v1alpha1/character.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace dnd5e {
namespace api {
namespace v1alpha1 {

static const char* CharacterService_method_names[] = {
  "/dnd5e.api.v1alpha1.CharacterService/CreateDraft",
  "/dnd5e.api.v1alpha1.CharacterService/GetDraft",
  "/dnd5e.api.v1alpha1.CharacterService/ListDrafts",
  "/dnd5e.api.v1alpha1.CharacterService/DeleteDraft",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateName",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateRace",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateClass",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateBackground",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateAbilityScores",
  "/dnd5e.api.v1alpha1.CharacterService/UpdateSkills",
  "/dnd5e.api.v1alpha1.CharacterService/ValidateDraft",
  "/dnd5e.api.v1alpha1.CharacterService/GetDraftPreview",
  "/dnd5e.api.v1alpha1.CharacterService/FinalizeDraft",
  "/dnd5e.api.v1alpha1.CharacterService/GetCharacter",
  "/dnd5e.api.v1alpha1.CharacterService/ListCharacters",
  "/dnd5e.api.v1alpha1.CharacterService/DeleteCharacter",
  "/dnd5e.api.v1alpha1.CharacterService/ListRaces",
  "/dnd5e.api.v1alpha1.CharacterService/ListClasses",
  "/dnd5e.api.v1alpha1.CharacterService/ListBackgrounds",
  "/dnd5e.api.v1alpha1.CharacterService/GetRaceDetails",
  "/dnd5e.api.v1alpha1.CharacterService/GetClassDetails",
  "/dnd5e.api.v1alpha1.CharacterService/GetBackgroundDetails",
  "/dnd5e.api.v1alpha1.CharacterService/GetFeature",
  "/dnd5e.api.v1alpha1.CharacterService/RollAbilityScores",
  "/dnd5e.api.v1alpha1.CharacterService/ListEquipmentByType",
  "/dnd5e.api.v1alpha1.CharacterService/ListSpellsByLevel",
  "/dnd5e.api.v1alpha1.CharacterService/GetCharacterInventory",
  "/dnd5e.api.v1alpha1.CharacterService/EquipItem",
  "/dnd5e.api.v1alpha1.CharacterService/UnequipItem",
  "/dnd5e.api.v1alpha1.CharacterService/AddToInventory",
  "/dnd5e.api.v1alpha1.CharacterService/RemoveFromInventory",
};

std::unique_ptr< CharacterService::Stub> CharacterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CharacterService::Stub> stub(new CharacterService::Stub(channel, options));
  return stub;
}

CharacterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDraft_(CharacterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDraft_(CharacterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDrafts_(CharacterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDraft_(CharacterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateName_(CharacterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRace_(CharacterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateClass_(CharacterService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBackground_(CharacterService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAbilityScores_(CharacterService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSkills_(CharacterService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateDraft_(CharacterService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDraftPreview_(CharacterService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinalizeDraft_(CharacterService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharacter_(CharacterService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCharacters_(CharacterService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCharacter_(CharacterService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRaces_(CharacterService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListClasses_(CharacterService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBackgrounds_(CharacterService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRaceDetails_(CharacterService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClassDetails_(CharacterService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBackgroundDetails_(CharacterService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFeature_(CharacterService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollAbilityScores_(CharacterService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListEquipmentByType_(CharacterService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSpellsByLevel_(CharacterService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharacterInventory_(CharacterService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EquipItem_(CharacterService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnequipItem_(CharacterService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddToInventory_(CharacterService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFromInventory_(CharacterService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CharacterService::Stub::CreateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest& request, ::dnd5e::api::v1alpha1::CreateDraftResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::CreateDraftRequest, ::dnd5e::api::v1alpha1::CreateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDraft_, context, request, response);
}

void CharacterService::Stub::async::CreateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest* request, ::dnd5e::api::v1alpha1::CreateDraftResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::CreateDraftRequest, ::dnd5e::api::v1alpha1::CreateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDraft_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::CreateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest* request, ::dnd5e::api::v1alpha1::CreateDraftResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDraft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::CreateDraftResponse>* CharacterService::Stub::PrepareAsyncCreateDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::CreateDraftResponse, ::dnd5e::api::v1alpha1::CreateDraftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDraft_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::CreateDraftResponse>* CharacterService::Stub::AsyncCreateDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDraftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest& request, ::dnd5e::api::v1alpha1::GetDraftResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetDraftRequest, ::dnd5e::api::v1alpha1::GetDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDraft_, context, request, response);
}

void CharacterService::Stub::async::GetDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest* request, ::dnd5e::api::v1alpha1::GetDraftResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetDraftRequest, ::dnd5e::api::v1alpha1::GetDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDraft_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest* request, ::dnd5e::api::v1alpha1::GetDraftResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDraft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetDraftResponse>* CharacterService::Stub::PrepareAsyncGetDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetDraftResponse, ::dnd5e::api::v1alpha1::GetDraftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDraft_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetDraftResponse>* CharacterService::Stub::AsyncGetDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDraftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListDrafts(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest& request, ::dnd5e::api::v1alpha1::ListDraftsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListDraftsRequest, ::dnd5e::api::v1alpha1::ListDraftsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDrafts_, context, request, response);
}

void CharacterService::Stub::async::ListDrafts(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest* request, ::dnd5e::api::v1alpha1::ListDraftsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListDraftsRequest, ::dnd5e::api::v1alpha1::ListDraftsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDrafts_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListDrafts(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest* request, ::dnd5e::api::v1alpha1::ListDraftsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDrafts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListDraftsResponse>* CharacterService::Stub::PrepareAsyncListDraftsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListDraftsResponse, ::dnd5e::api::v1alpha1::ListDraftsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDrafts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListDraftsResponse>* CharacterService::Stub::AsyncListDraftsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDraftsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::DeleteDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest& request, ::dnd5e::api::v1alpha1::DeleteDraftResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::DeleteDraftRequest, ::dnd5e::api::v1alpha1::DeleteDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDraft_, context, request, response);
}

void CharacterService::Stub::async::DeleteDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest* request, ::dnd5e::api::v1alpha1::DeleteDraftResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::DeleteDraftRequest, ::dnd5e::api::v1alpha1::DeleteDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDraft_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::DeleteDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest* request, ::dnd5e::api::v1alpha1::DeleteDraftResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDraft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DeleteDraftResponse>* CharacterService::Stub::PrepareAsyncDeleteDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::DeleteDraftResponse, ::dnd5e::api::v1alpha1::DeleteDraftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDraft_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DeleteDraftResponse>* CharacterService::Stub::AsyncDeleteDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDraftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateName(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest& request, ::dnd5e::api::v1alpha1::UpdateNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateNameRequest, ::dnd5e::api::v1alpha1::UpdateNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateName_, context, request, response);
}

void CharacterService::Stub::async::UpdateName(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest* request, ::dnd5e::api::v1alpha1::UpdateNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateNameRequest, ::dnd5e::api::v1alpha1::UpdateNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateName_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateName(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest* request, ::dnd5e::api::v1alpha1::UpdateNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateNameResponse>* CharacterService::Stub::PrepareAsyncUpdateNameRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateNameResponse, ::dnd5e::api::v1alpha1::UpdateNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateNameResponse>* CharacterService::Stub::AsyncUpdateNameRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateRace(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest& request, ::dnd5e::api::v1alpha1::UpdateRaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateRaceRequest, ::dnd5e::api::v1alpha1::UpdateRaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRace_, context, request, response);
}

void CharacterService::Stub::async::UpdateRace(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest* request, ::dnd5e::api::v1alpha1::UpdateRaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateRaceRequest, ::dnd5e::api::v1alpha1::UpdateRaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRace_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateRace(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest* request, ::dnd5e::api::v1alpha1::UpdateRaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateRaceResponse>* CharacterService::Stub::PrepareAsyncUpdateRaceRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateRaceResponse, ::dnd5e::api::v1alpha1::UpdateRaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateRaceResponse>* CharacterService::Stub::AsyncUpdateRaceRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateClass(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest& request, ::dnd5e::api::v1alpha1::UpdateClassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateClassRequest, ::dnd5e::api::v1alpha1::UpdateClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateClass_, context, request, response);
}

void CharacterService::Stub::async::UpdateClass(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest* request, ::dnd5e::api::v1alpha1::UpdateClassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateClassRequest, ::dnd5e::api::v1alpha1::UpdateClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClass_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateClass(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest* request, ::dnd5e::api::v1alpha1::UpdateClassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClass_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateClassResponse>* CharacterService::Stub::PrepareAsyncUpdateClassRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateClassResponse, ::dnd5e::api::v1alpha1::UpdateClassRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateClass_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateClassResponse>* CharacterService::Stub::AsyncUpdateClassRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateClassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateBackground(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest& request, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateBackgroundRequest, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBackground_, context, request, response);
}

void CharacterService::Stub::async::UpdateBackground(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest* request, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateBackgroundRequest, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBackground_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateBackground(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest* request, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBackground_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateBackgroundResponse>* CharacterService::Stub::PrepareAsyncUpdateBackgroundRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateBackgroundResponse, ::dnd5e::api::v1alpha1::UpdateBackgroundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBackground_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateBackgroundResponse>* CharacterService::Stub::AsyncUpdateBackgroundRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBackgroundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest& request, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAbilityScores_, context, request, response);
}

void CharacterService::Stub::async::UpdateAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAbilityScores_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAbilityScores_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse>* CharacterService::Stub::PrepareAsyncUpdateAbilityScoresRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse, ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAbilityScores_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse>* CharacterService::Stub::AsyncUpdateAbilityScoresRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAbilityScoresRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UpdateSkills(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest& request, ::dnd5e::api::v1alpha1::UpdateSkillsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UpdateSkillsRequest, ::dnd5e::api::v1alpha1::UpdateSkillsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSkills_, context, request, response);
}

void CharacterService::Stub::async::UpdateSkills(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest* request, ::dnd5e::api::v1alpha1::UpdateSkillsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UpdateSkillsRequest, ::dnd5e::api::v1alpha1::UpdateSkillsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSkills_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UpdateSkills(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest* request, ::dnd5e::api::v1alpha1::UpdateSkillsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSkills_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateSkillsResponse>* CharacterService::Stub::PrepareAsyncUpdateSkillsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UpdateSkillsResponse, ::dnd5e::api::v1alpha1::UpdateSkillsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSkills_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UpdateSkillsResponse>* CharacterService::Stub::AsyncUpdateSkillsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSkillsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ValidateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest& request, ::dnd5e::api::v1alpha1::ValidateDraftResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ValidateDraftRequest, ::dnd5e::api::v1alpha1::ValidateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateDraft_, context, request, response);
}

void CharacterService::Stub::async::ValidateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest* request, ::dnd5e::api::v1alpha1::ValidateDraftResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ValidateDraftRequest, ::dnd5e::api::v1alpha1::ValidateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateDraft_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ValidateDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest* request, ::dnd5e::api::v1alpha1::ValidateDraftResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateDraft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ValidateDraftResponse>* CharacterService::Stub::PrepareAsyncValidateDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ValidateDraftResponse, ::dnd5e::api::v1alpha1::ValidateDraftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateDraft_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ValidateDraftResponse>* CharacterService::Stub::AsyncValidateDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateDraftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetDraftPreview(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest& request, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetDraftPreviewRequest, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDraftPreview_, context, request, response);
}

void CharacterService::Stub::async::GetDraftPreview(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest* request, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetDraftPreviewRequest, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDraftPreview_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetDraftPreview(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest* request, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDraftPreview_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetDraftPreviewResponse>* CharacterService::Stub::PrepareAsyncGetDraftPreviewRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetDraftPreviewResponse, ::dnd5e::api::v1alpha1::GetDraftPreviewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDraftPreview_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetDraftPreviewResponse>* CharacterService::Stub::AsyncGetDraftPreviewRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDraftPreviewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::FinalizeDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest& request, ::dnd5e::api::v1alpha1::FinalizeDraftResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::FinalizeDraftRequest, ::dnd5e::api::v1alpha1::FinalizeDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinalizeDraft_, context, request, response);
}

void CharacterService::Stub::async::FinalizeDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest* request, ::dnd5e::api::v1alpha1::FinalizeDraftResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::FinalizeDraftRequest, ::dnd5e::api::v1alpha1::FinalizeDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinalizeDraft_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::FinalizeDraft(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest* request, ::dnd5e::api::v1alpha1::FinalizeDraftResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinalizeDraft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::FinalizeDraftResponse>* CharacterService::Stub::PrepareAsyncFinalizeDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::FinalizeDraftResponse, ::dnd5e::api::v1alpha1::FinalizeDraftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinalizeDraft_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::FinalizeDraftResponse>* CharacterService::Stub::AsyncFinalizeDraftRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinalizeDraftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest& request, ::dnd5e::api::v1alpha1::GetCharacterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetCharacterRequest, ::dnd5e::api::v1alpha1::GetCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacter_, context, request, response);
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest* request, ::dnd5e::api::v1alpha1::GetCharacterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetCharacterRequest, ::dnd5e::api::v1alpha1::GetCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest* request, ::dnd5e::api::v1alpha1::GetCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCharacterResponse>* CharacterService::Stub::PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetCharacterResponse, ::dnd5e::api::v1alpha1::GetCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCharacterResponse>* CharacterService::Stub::AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListCharacters(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest& request, ::dnd5e::api::v1alpha1::ListCharactersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListCharactersRequest, ::dnd5e::api::v1alpha1::ListCharactersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCharacters_, context, request, response);
}

void CharacterService::Stub::async::ListCharacters(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest* request, ::dnd5e::api::v1alpha1::ListCharactersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListCharactersRequest, ::dnd5e::api::v1alpha1::ListCharactersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCharacters_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListCharacters(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest* request, ::dnd5e::api::v1alpha1::ListCharactersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCharacters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListCharactersResponse>* CharacterService::Stub::PrepareAsyncListCharactersRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListCharactersResponse, ::dnd5e::api::v1alpha1::ListCharactersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCharacters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListCharactersResponse>* CharacterService::Stub::AsyncListCharactersRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCharactersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::DeleteCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest& request, ::dnd5e::api::v1alpha1::DeleteCharacterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::DeleteCharacterRequest, ::dnd5e::api::v1alpha1::DeleteCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCharacter_, context, request, response);
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest* request, ::dnd5e::api::v1alpha1::DeleteCharacterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::DeleteCharacterRequest, ::dnd5e::api::v1alpha1::DeleteCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest* request, ::dnd5e::api::v1alpha1::DeleteCharacterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DeleteCharacterResponse>* CharacterService::Stub::PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::DeleteCharacterResponse, ::dnd5e::api::v1alpha1::DeleteCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::DeleteCharacterResponse>* CharacterService::Stub::AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListRaces(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest& request, ::dnd5e::api::v1alpha1::ListRacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListRacesRequest, ::dnd5e::api::v1alpha1::ListRacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRaces_, context, request, response);
}

void CharacterService::Stub::async::ListRaces(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest* request, ::dnd5e::api::v1alpha1::ListRacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListRacesRequest, ::dnd5e::api::v1alpha1::ListRacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRaces_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListRaces(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest* request, ::dnd5e::api::v1alpha1::ListRacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListRacesResponse>* CharacterService::Stub::PrepareAsyncListRacesRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListRacesResponse, ::dnd5e::api::v1alpha1::ListRacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListRacesResponse>* CharacterService::Stub::AsyncListRacesRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListClasses(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest& request, ::dnd5e::api::v1alpha1::ListClassesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListClassesRequest, ::dnd5e::api::v1alpha1::ListClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListClasses_, context, request, response);
}

void CharacterService::Stub::async::ListClasses(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest* request, ::dnd5e::api::v1alpha1::ListClassesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListClassesRequest, ::dnd5e::api::v1alpha1::ListClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClasses_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListClasses(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest* request, ::dnd5e::api::v1alpha1::ListClassesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListClassesResponse>* CharacterService::Stub::PrepareAsyncListClassesRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListClassesResponse, ::dnd5e::api::v1alpha1::ListClassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListClasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListClassesResponse>* CharacterService::Stub::AsyncListClassesRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListClassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListBackgrounds(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest& request, ::dnd5e::api::v1alpha1::ListBackgroundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListBackgroundsRequest, ::dnd5e::api::v1alpha1::ListBackgroundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBackgrounds_, context, request, response);
}

void CharacterService::Stub::async::ListBackgrounds(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest* request, ::dnd5e::api::v1alpha1::ListBackgroundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListBackgroundsRequest, ::dnd5e::api::v1alpha1::ListBackgroundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBackgrounds_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListBackgrounds(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest* request, ::dnd5e::api::v1alpha1::ListBackgroundsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBackgrounds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListBackgroundsResponse>* CharacterService::Stub::PrepareAsyncListBackgroundsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListBackgroundsResponse, ::dnd5e::api::v1alpha1::ListBackgroundsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBackgrounds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListBackgroundsResponse>* CharacterService::Stub::AsyncListBackgroundsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBackgroundsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetRaceDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest& request, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetRaceDetailsRequest, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRaceDetails_, context, request, response);
}

void CharacterService::Stub::async::GetRaceDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest* request, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetRaceDetailsRequest, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRaceDetails_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetRaceDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest* request, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRaceDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetRaceDetailsResponse>* CharacterService::Stub::PrepareAsyncGetRaceDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetRaceDetailsResponse, ::dnd5e::api::v1alpha1::GetRaceDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRaceDetails_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetRaceDetailsResponse>* CharacterService::Stub::AsyncGetRaceDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaceDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetClassDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest& request, ::dnd5e::api::v1alpha1::GetClassDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetClassDetailsRequest, ::dnd5e::api::v1alpha1::GetClassDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClassDetails_, context, request, response);
}

void CharacterService::Stub::async::GetClassDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest* request, ::dnd5e::api::v1alpha1::GetClassDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetClassDetailsRequest, ::dnd5e::api::v1alpha1::GetClassDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClassDetails_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetClassDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest* request, ::dnd5e::api::v1alpha1::GetClassDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClassDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetClassDetailsResponse>* CharacterService::Stub::PrepareAsyncGetClassDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetClassDetailsResponse, ::dnd5e::api::v1alpha1::GetClassDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClassDetails_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetClassDetailsResponse>* CharacterService::Stub::AsyncGetClassDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClassDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetBackgroundDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest& request, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBackgroundDetails_, context, request, response);
}

void CharacterService::Stub::async::GetBackgroundDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest* request, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBackgroundDetails_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetBackgroundDetails(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest* request, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBackgroundDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse>* CharacterService::Stub::PrepareAsyncGetBackgroundDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse, ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBackgroundDetails_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse>* CharacterService::Stub::AsyncGetBackgroundDetailsRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBackgroundDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetFeature(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest& request, ::dnd5e::api::v1alpha1::GetFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetFeatureRequest, ::dnd5e::api::v1alpha1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFeature_, context, request, response);
}

void CharacterService::Stub::async::GetFeature(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest* request, ::dnd5e::api::v1alpha1::GetFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetFeatureRequest, ::dnd5e::api::v1alpha1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetFeature(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest* request, ::dnd5e::api::v1alpha1::GetFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetFeatureResponse>* CharacterService::Stub::PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetFeatureResponse, ::dnd5e::api::v1alpha1::GetFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetFeatureResponse>* CharacterService::Stub::AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::RollAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest& request, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::RollAbilityScoresRequest, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollAbilityScores_, context, request, response);
}

void CharacterService::Stub::async::RollAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::RollAbilityScoresRequest, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollAbilityScores_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::RollAbilityScores(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollAbilityScores_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::RollAbilityScoresResponse>* CharacterService::Stub::PrepareAsyncRollAbilityScoresRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::RollAbilityScoresResponse, ::dnd5e::api::v1alpha1::RollAbilityScoresRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollAbilityScores_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::RollAbilityScoresResponse>* CharacterService::Stub::AsyncRollAbilityScoresRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollAbilityScoresRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListEquipmentByType(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest& request, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListEquipmentByType_, context, request, response);
}

void CharacterService::Stub::async::ListEquipmentByType(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest* request, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEquipmentByType_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListEquipmentByType(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest* request, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEquipmentByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse>* CharacterService::Stub::PrepareAsyncListEquipmentByTypeRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse, ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListEquipmentByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse>* CharacterService::Stub::AsyncListEquipmentByTypeRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListEquipmentByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::ListSpellsByLevel(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest& request, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSpellsByLevel_, context, request, response);
}

void CharacterService::Stub::async::ListSpellsByLevel(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest* request, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpellsByLevel_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::ListSpellsByLevel(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest* request, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpellsByLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse>* CharacterService::Stub::PrepareAsyncListSpellsByLevelRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse, ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSpellsByLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse>* CharacterService::Stub::AsyncListSpellsByLevelRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSpellsByLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetCharacterInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest& request, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacterInventory_, context, request, response);
}

void CharacterService::Stub::async::GetCharacterInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest* request, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacterInventory_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacterInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest* request, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacterInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse>* CharacterService::Stub::PrepareAsyncGetCharacterInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse, ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacterInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse>* CharacterService::Stub::AsyncGetCharacterInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharacterInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::EquipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest& request, ::dnd5e::api::v1alpha1::EquipItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::EquipItemRequest, ::dnd5e::api::v1alpha1::EquipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EquipItem_, context, request, response);
}

void CharacterService::Stub::async::EquipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest* request, ::dnd5e::api::v1alpha1::EquipItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::EquipItemRequest, ::dnd5e::api::v1alpha1::EquipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EquipItem_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::EquipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest* request, ::dnd5e::api::v1alpha1::EquipItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EquipItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EquipItemResponse>* CharacterService::Stub::PrepareAsyncEquipItemRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::EquipItemResponse, ::dnd5e::api::v1alpha1::EquipItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EquipItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::EquipItemResponse>* CharacterService::Stub::AsyncEquipItemRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEquipItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::UnequipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest& request, ::dnd5e::api::v1alpha1::UnequipItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::UnequipItemRequest, ::dnd5e::api::v1alpha1::UnequipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnequipItem_, context, request, response);
}

void CharacterService::Stub::async::UnequipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest* request, ::dnd5e::api::v1alpha1::UnequipItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::UnequipItemRequest, ::dnd5e::api::v1alpha1::UnequipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnequipItem_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::UnequipItem(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest* request, ::dnd5e::api::v1alpha1::UnequipItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnequipItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UnequipItemResponse>* CharacterService::Stub::PrepareAsyncUnequipItemRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::UnequipItemResponse, ::dnd5e::api::v1alpha1::UnequipItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnequipItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::UnequipItemResponse>* CharacterService::Stub::AsyncUnequipItemRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnequipItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::AddToInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest& request, ::dnd5e::api::v1alpha1::AddToInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::AddToInventoryRequest, ::dnd5e::api::v1alpha1::AddToInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddToInventory_, context, request, response);
}

void CharacterService::Stub::async::AddToInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest* request, ::dnd5e::api::v1alpha1::AddToInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::AddToInventoryRequest, ::dnd5e::api::v1alpha1::AddToInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddToInventory_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::AddToInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest* request, ::dnd5e::api::v1alpha1::AddToInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddToInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AddToInventoryResponse>* CharacterService::Stub::PrepareAsyncAddToInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::AddToInventoryResponse, ::dnd5e::api::v1alpha1::AddToInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddToInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::AddToInventoryResponse>* CharacterService::Stub::AsyncAddToInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddToInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::RemoveFromInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest& request, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFromInventory_, context, request, response);
}

void CharacterService::Stub::async::RemoveFromInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest* request, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFromInventory_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::RemoveFromInventory(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest* request, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFromInventory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse>* CharacterService::Stub::PrepareAsyncRemoveFromInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse, ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFromInventory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse>* CharacterService::Stub::AsyncRemoveFromInventoryRaw(::grpc::ClientContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFromInventoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

CharacterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::CreateDraftRequest, ::dnd5e::api::v1alpha1::CreateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::CreateDraftRequest* req,
             ::dnd5e::api::v1alpha1::CreateDraftResponse* resp) {
               return service->CreateDraft(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetDraftRequest, ::dnd5e::api::v1alpha1::GetDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetDraftRequest* req,
             ::dnd5e::api::v1alpha1::GetDraftResponse* resp) {
               return service->GetDraft(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListDraftsRequest, ::dnd5e::api::v1alpha1::ListDraftsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListDraftsRequest* req,
             ::dnd5e::api::v1alpha1::ListDraftsResponse* resp) {
               return service->ListDrafts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::DeleteDraftRequest, ::dnd5e::api::v1alpha1::DeleteDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::DeleteDraftRequest* req,
             ::dnd5e::api::v1alpha1::DeleteDraftResponse* resp) {
               return service->DeleteDraft(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateNameRequest, ::dnd5e::api::v1alpha1::UpdateNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateNameRequest* req,
             ::dnd5e::api::v1alpha1::UpdateNameResponse* resp) {
               return service->UpdateName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateRaceRequest, ::dnd5e::api::v1alpha1::UpdateRaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateRaceRequest* req,
             ::dnd5e::api::v1alpha1::UpdateRaceResponse* resp) {
               return service->UpdateRace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateClassRequest, ::dnd5e::api::v1alpha1::UpdateClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateClassRequest* req,
             ::dnd5e::api::v1alpha1::UpdateClassResponse* resp) {
               return service->UpdateClass(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateBackgroundRequest, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest* req,
             ::dnd5e::api::v1alpha1::UpdateBackgroundResponse* resp) {
               return service->UpdateBackground(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest* req,
             ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse* resp) {
               return service->UpdateAbilityScores(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UpdateSkillsRequest, ::dnd5e::api::v1alpha1::UpdateSkillsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UpdateSkillsRequest* req,
             ::dnd5e::api::v1alpha1::UpdateSkillsResponse* resp) {
               return service->UpdateSkills(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ValidateDraftRequest, ::dnd5e::api::v1alpha1::ValidateDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ValidateDraftRequest* req,
             ::dnd5e::api::v1alpha1::ValidateDraftResponse* resp) {
               return service->ValidateDraft(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetDraftPreviewRequest, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest* req,
             ::dnd5e::api::v1alpha1::GetDraftPreviewResponse* resp) {
               return service->GetDraftPreview(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::FinalizeDraftRequest, ::dnd5e::api::v1alpha1::FinalizeDraftResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::FinalizeDraftRequest* req,
             ::dnd5e::api::v1alpha1::FinalizeDraftResponse* resp) {
               return service->FinalizeDraft(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetCharacterRequest, ::dnd5e::api::v1alpha1::GetCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetCharacterRequest* req,
             ::dnd5e::api::v1alpha1::GetCharacterResponse* resp) {
               return service->GetCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListCharactersRequest, ::dnd5e::api::v1alpha1::ListCharactersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListCharactersRequest* req,
             ::dnd5e::api::v1alpha1::ListCharactersResponse* resp) {
               return service->ListCharacters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::DeleteCharacterRequest, ::dnd5e::api::v1alpha1::DeleteCharacterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::DeleteCharacterRequest* req,
             ::dnd5e::api::v1alpha1::DeleteCharacterResponse* resp) {
               return service->DeleteCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListRacesRequest, ::dnd5e::api::v1alpha1::ListRacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListRacesRequest* req,
             ::dnd5e::api::v1alpha1::ListRacesResponse* resp) {
               return service->ListRaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListClassesRequest, ::dnd5e::api::v1alpha1::ListClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListClassesRequest* req,
             ::dnd5e::api::v1alpha1::ListClassesResponse* resp) {
               return service->ListClasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListBackgroundsRequest, ::dnd5e::api::v1alpha1::ListBackgroundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListBackgroundsRequest* req,
             ::dnd5e::api::v1alpha1::ListBackgroundsResponse* resp) {
               return service->ListBackgrounds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetRaceDetailsRequest, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest* req,
             ::dnd5e::api::v1alpha1::GetRaceDetailsResponse* resp) {
               return service->GetRaceDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetClassDetailsRequest, ::dnd5e::api::v1alpha1::GetClassDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetClassDetailsRequest* req,
             ::dnd5e::api::v1alpha1::GetClassDetailsResponse* resp) {
               return service->GetClassDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest* req,
             ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse* resp) {
               return service->GetBackgroundDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetFeatureRequest, ::dnd5e::api::v1alpha1::GetFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetFeatureRequest* req,
             ::dnd5e::api::v1alpha1::GetFeatureResponse* resp) {
               return service->GetFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::RollAbilityScoresRequest, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest* req,
             ::dnd5e::api::v1alpha1::RollAbilityScoresResponse* resp) {
               return service->RollAbilityScores(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest* req,
             ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse* resp) {
               return service->ListEquipmentByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest* req,
             ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse* resp) {
               return service->ListSpellsByLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest* req,
             ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse* resp) {
               return service->GetCharacterInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::EquipItemRequest, ::dnd5e::api::v1alpha1::EquipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::EquipItemRequest* req,
             ::dnd5e::api::v1alpha1::EquipItemResponse* resp) {
               return service->EquipItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::UnequipItemRequest, ::dnd5e::api::v1alpha1::UnequipItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::UnequipItemRequest* req,
             ::dnd5e::api::v1alpha1::UnequipItemResponse* resp) {
               return service->UnequipItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::AddToInventoryRequest, ::dnd5e::api::v1alpha1::AddToInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::AddToInventoryRequest* req,
             ::dnd5e::api::v1alpha1::AddToInventoryResponse* resp) {
               return service->AddToInventory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest* req,
             ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse* resp) {
               return service->RemoveFromInventory(ctx, req, resp);
             }, this)));
}

CharacterService::Service::~Service() {
}

::grpc::Status CharacterService::Service::CreateDraft(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::CreateDraftRequest* request, ::dnd5e::api::v1alpha1::CreateDraftResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetDraft(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetDraftRequest* request, ::dnd5e::api::v1alpha1::GetDraftResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListDrafts(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListDraftsRequest* request, ::dnd5e::api::v1alpha1::ListDraftsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::DeleteDraft(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::DeleteDraftRequest* request, ::dnd5e::api::v1alpha1::DeleteDraftResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateName(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateNameRequest* request, ::dnd5e::api::v1alpha1::UpdateNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateRace(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateRaceRequest* request, ::dnd5e::api::v1alpha1::UpdateRaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateClass(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateClassRequest* request, ::dnd5e::api::v1alpha1::UpdateClassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateBackground(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateBackgroundRequest* request, ::dnd5e::api::v1alpha1::UpdateBackgroundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateAbilityScores(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::UpdateAbilityScoresResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UpdateSkills(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UpdateSkillsRequest* request, ::dnd5e::api::v1alpha1::UpdateSkillsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ValidateDraft(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ValidateDraftRequest* request, ::dnd5e::api::v1alpha1::ValidateDraftResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetDraftPreview(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetDraftPreviewRequest* request, ::dnd5e::api::v1alpha1::GetDraftPreviewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::FinalizeDraft(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::FinalizeDraftRequest* request, ::dnd5e::api::v1alpha1::FinalizeDraftResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetCharacter(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetCharacterRequest* request, ::dnd5e::api::v1alpha1::GetCharacterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListCharacters(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListCharactersRequest* request, ::dnd5e::api::v1alpha1::ListCharactersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::DeleteCharacter(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::DeleteCharacterRequest* request, ::dnd5e::api::v1alpha1::DeleteCharacterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListRaces(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListRacesRequest* request, ::dnd5e::api::v1alpha1::ListRacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListClasses(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListClassesRequest* request, ::dnd5e::api::v1alpha1::ListClassesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListBackgrounds(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListBackgroundsRequest* request, ::dnd5e::api::v1alpha1::ListBackgroundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetRaceDetails(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetRaceDetailsRequest* request, ::dnd5e::api::v1alpha1::GetRaceDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetClassDetails(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetClassDetailsRequest* request, ::dnd5e::api::v1alpha1::GetClassDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetBackgroundDetails(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetBackgroundDetailsRequest* request, ::dnd5e::api::v1alpha1::GetBackgroundDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetFeature(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetFeatureRequest* request, ::dnd5e::api::v1alpha1::GetFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::RollAbilityScores(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::RollAbilityScoresRequest* request, ::dnd5e::api::v1alpha1::RollAbilityScoresResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListEquipmentByType(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListEquipmentByTypeRequest* request, ::dnd5e::api::v1alpha1::ListEquipmentByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::ListSpellsByLevel(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::ListSpellsByLevelRequest* request, ::dnd5e::api::v1alpha1::ListSpellsByLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetCharacterInventory(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::GetCharacterInventoryRequest* request, ::dnd5e::api::v1alpha1::GetCharacterInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::EquipItem(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::EquipItemRequest* request, ::dnd5e::api::v1alpha1::EquipItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::UnequipItem(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::UnequipItemRequest* request, ::dnd5e::api::v1alpha1::UnequipItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::AddToInventory(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::AddToInventoryRequest* request, ::dnd5e::api::v1alpha1::AddToInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::RemoveFromInventory(::grpc::ServerContext* context, const ::dnd5e::api::v1alpha1::RemoveFromInventoryRequest* request, ::dnd5e::api::v1alpha1::RemoveFromInventoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dnd5e
}  // namespace api
}  // namespace v1alpha1
#include <grpcpp/ports_undef.inc>

