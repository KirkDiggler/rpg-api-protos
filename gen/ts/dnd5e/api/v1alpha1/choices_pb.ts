// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file dnd5e/api/v1alpha1/choices.proto (package dnd5e.api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { AbilityScores } from "./common_pb";
import { file_dnd5e_api_v1alpha1_common } from "./common_pb";
import type { Ammunition, Armor, ArmorCategory, Background, FightingStyle, Language, Pack, Skill, Spell, Tool, ToolCategory, Weapon, WeaponCategory } from "./enums_pb";
import { file_dnd5e_api_v1alpha1_enums } from "./enums_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dnd5e/api/v1alpha1/choices.proto.
 */
export const file_dnd5e_api_v1alpha1_choices: GenFile = /*@__PURE__*/
  fileDesc("CiBkbmQ1ZS9hcGkvdjFhbHBoYTEvY2hvaWNlcy5wcm90bxISZG5kNWUuYXBpLnYxYWxwaGExIsUECgZDaG9pY2USCgoCaWQYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSFAoMY2hvb3NlX2NvdW50GAMgASgFEjcKC2Nob2ljZV90eXBlGAQgASgOMiIuZG5kNWUuYXBpLnYxYWxwaGExLkNob2ljZUNhdGVnb3J5EjkKDXNraWxsX29wdGlvbnMYBSABKAsyIC5kbmQ1ZS5hcGkudjFhbHBoYTEuU2tpbGxPcHRpb25zSAASQQoRZXF1aXBtZW50X29wdGlvbnMYBiABKAsyJC5kbmQ1ZS5hcGkudjFhbHBoYTEuRXF1aXBtZW50T3B0aW9uc0gAEj8KEGxhbmd1YWdlX29wdGlvbnMYByABKAsyIy5kbmQ1ZS5hcGkudjFhbHBoYTEuTGFuZ3VhZ2VPcHRpb25zSAASNwoMdG9vbF9vcHRpb25zGAggASgLMh8uZG5kNWUuYXBpLnYxYWxwaGExLlRvb2xPcHRpb25zSAASSgoWZmlnaHRpbmdfc3R5bGVfb3B0aW9ucxgJIAEoCzIoLmRuZDVlLmFwaS52MWFscGhhMS5GaWdodGluZ1N0eWxlT3B0aW9uc0gAEjkKDXNwZWxsX29wdGlvbnMYCiABKAsyIC5kbmQ1ZS5hcGkudjFhbHBoYTEuU3BlbGxPcHRpb25zSAASQQoRZXhwZXJ0aXNlX29wdGlvbnMYCyABKAsyJC5kbmQ1ZS5hcGkudjFhbHBoYTEuRXhwZXJ0aXNlT3B0aW9uc0gAQgkKB29wdGlvbnMiPAoMU2tpbGxPcHRpb25zEiwKCWF2YWlsYWJsZRgBIAMoDjIZLmRuZDVlLmFwaS52MWFscGhhMS5Ta2lsbCJIChBFcXVpcG1lbnRPcHRpb25zEjQKB2J1bmRsZXMYASADKAsyIy5kbmQ1ZS5hcGkudjFhbHBoYTEuRXF1aXBtZW50QnVuZGxlIqUBCg9FcXVpcG1lbnRCdW5kbGUSCgoCaWQYASABKAkSDQoFbGFiZWwYAiABKAkSMAoFaXRlbXMYAyADKAsyIS5kbmQ1ZS5hcGkudjFhbHBoYTEuRXF1aXBtZW50SXRlbRJFChBjYXRlZ29yeV9jaG9pY2VzGAQgAygLMisuZG5kNWUuYXBpLnYxYWxwaGExLkVxdWlwbWVudENhdGVnb3J5Q2hvaWNlIqgCCg1FcXVpcG1lbnRJdGVtEhQKDHNlbGVjdGlvbl9pZBgBIAEoCRIQCghxdWFudGl0eRgCIAEoBRIsCgZ3ZWFwb24YAyABKA4yGi5kbmQ1ZS5hcGkudjFhbHBoYTEuV2VhcG9uSAASKgoFYXJtb3IYBCABKA4yGS5kbmQ1ZS5hcGkudjFhbHBoYTEuQXJtb3JIABIoCgR0b29sGAUgASgOMhguZG5kNWUuYXBpLnYxYWxwaGExLlRvb2xIABIoCgRwYWNrGAYgASgOMhguZG5kNWUuYXBpLnYxYWxwaGExLlBhY2tIABI0CgphbW11bml0aW9uGAcgASgOMh4uZG5kNWUuYXBpLnYxYWxwaGExLkFtbXVuaXRpb25IAEILCgl0eXBlX2hpbnQi7wEKF0VxdWlwbWVudENhdGVnb3J5Q2hvaWNlEg4KBmNob29zZRgBIAEoBRI9ChF3ZWFwb25fY2F0ZWdvcmllcxgCIAMoDjIiLmRuZDVlLmFwaS52MWFscGhhMS5XZWFwb25DYXRlZ29yeRI7ChBhcm1vcl9jYXRlZ29yaWVzGAMgAygOMiEuZG5kNWUuYXBpLnYxYWxwaGExLkFybW9yQ2F0ZWdvcnkSOQoPdG9vbF9jYXRlZ29yaWVzGAQgAygOMiAuZG5kNWUuYXBpLnYxYWxwaGExLlRvb2xDYXRlZ29yeRINCgVsYWJlbBgFIAEoCSJCCg9MYW5ndWFnZU9wdGlvbnMSLwoJYXZhaWxhYmxlGAEgAygOMhwuZG5kNWUuYXBpLnYxYWxwaGExLkxhbmd1YWdlIjoKC1Rvb2xPcHRpb25zEisKCWF2YWlsYWJsZRgBIAMoDjIYLmRuZDVlLmFwaS52MWFscGhhMS5Ub29sIkwKFEZpZ2h0aW5nU3R5bGVPcHRpb25zEjQKCWF2YWlsYWJsZRgBIAMoDjIhLmRuZDVlLmFwaS52MWFscGhhMS5GaWdodGluZ1N0eWxlIpEBCgxTcGVsbE9wdGlvbnMSLAoJYXZhaWxhYmxlGAEgAygOMhkuZG5kNWUuYXBpLnYxYWxwaGExLlNwZWxsEhMKC3NwZWxsX2xldmVsGAIgASgFEj4KDnNlbGVjdGlvbl90eXBlGAMgASgOMiYuZG5kNWUuYXBpLnYxYWxwaGExLlNwZWxsU2VsZWN0aW9uVHlwZSJ6ChBFeHBlcnRpc2VPcHRpb25zEjMKEGF2YWlsYWJsZV9za2lsbHMYASADKA4yGS5kbmQ1ZS5hcGkudjFhbHBoYTEuU2tpbGwSMQoPYXZhaWxhYmxlX3Rvb2xzGAIgAygOMhguZG5kNWUuYXBpLnYxYWxwaGExLlRvb2wi4AQKEENob2ljZVN1Ym1pc3Npb24SEQoJY2hvaWNlX2lkGAEgASgJEjQKCGNhdGVnb3J5GAIgASgOMiIuZG5kNWUuYXBpLnYxYWxwaGExLkNob2ljZUNhdGVnb3J5EjAKBnNvdXJjZRgDIAEoDjIgLmRuZDVlLmFwaS52MWFscGhhMS5DaG9pY2VTb3VyY2USEQoJb3B0aW9uX2lkGAQgASgJEhUKDXNlbGVjdGlvbl9pZHMYBSADKAkSNAoGc2tpbGxzGAYgASgLMiIuZG5kNWUuYXBpLnYxYWxwaGExLlNraWxsU2VsZWN0aW9uSAASOwoJZXF1aXBtZW50GAcgASgLMiYuZG5kNWUuYXBpLnYxYWxwaGExLkVxdWlwbWVudFNlbGVjdGlvbkgAEjoKCWxhbmd1YWdlcxgIIAEoCzIlLmRuZDVlLmFwaS52MWFscGhhMS5MYW5ndWFnZVNlbGVjdGlvbkgAEjIKBXRvb2xzGAkgASgLMiEuZG5kNWUuYXBpLnYxYWxwaGExLlRvb2xTZWxlY3Rpb25IABJECg5maWdodGluZ19zdHlsZRgKIAEoCzIqLmRuZDVlLmFwaS52MWFscGhhMS5GaWdodGluZ1N0eWxlU2VsZWN0aW9uSAASNAoGc3BlbGxzGAsgASgLMiIuZG5kNWUuYXBpLnYxYWxwaGExLlNwZWxsU2VsZWN0aW9uSAASOwoJZXhwZXJ0aXNlGAwgASgLMiYuZG5kNWUuYXBpLnYxYWxwaGExLkV4cGVydGlzZVNlbGVjdGlvbkgAQgsKCXNlbGVjdGlvbiI7Cg5Ta2lsbFNlbGVjdGlvbhIpCgZza2lsbHMYASADKA4yGS5kbmQ1ZS5hcGkudjFhbHBoYTEuU2tpbGwiTwoSRXF1aXBtZW50U2VsZWN0aW9uEjkKBWl0ZW1zGAEgAygLMiouZG5kNWUuYXBpLnYxYWxwaGExLkVxdWlwbWVudFNlbGVjdGlvbkl0ZW0iuQIKFkVxdWlwbWVudFNlbGVjdGlvbkl0ZW0SLAoGd2VhcG9uGAEgASgOMhouZG5kNWUuYXBpLnYxYWxwaGExLldlYXBvbkgAEioKBWFybW9yGAIgASgOMhkuZG5kNWUuYXBpLnYxYWxwaGExLkFybW9ySAASKAoEdG9vbBgDIAEoDjIYLmRuZDVlLmFwaS52MWFscGhhMS5Ub29sSAASKAoEcGFjaxgEIAEoDjIYLmRuZDVlLmFwaS52MWFscGhhMS5QYWNrSAASNAoKYW1tdW5pdGlvbhgFIAEoDjIeLmRuZDVlLmFwaS52MWFscGhhMS5BbW11bml0aW9uSAASHAoSb3RoZXJfZXF1aXBtZW50X2lkGAYgASgJSAASEAoIcXVhbnRpdHkYByABKAVCCwoJZXF1aXBtZW50IkQKEUxhbmd1YWdlU2VsZWN0aW9uEi8KCWxhbmd1YWdlcxgBIAMoDjIcLmRuZDVlLmFwaS52MWFscGhhMS5MYW5ndWFnZSI4Cg1Ub29sU2VsZWN0aW9uEicKBXRvb2xzGAEgAygOMhguZG5kNWUuYXBpLnYxYWxwaGExLlRvb2wiSgoWRmlnaHRpbmdTdHlsZVNlbGVjdGlvbhIwCgVzdHlsZRgBIAEoDjIhLmRuZDVlLmFwaS52MWFscGhhMS5GaWdodGluZ1N0eWxlIjsKDlNwZWxsU2VsZWN0aW9uEikKBnNwZWxscxgBIAMoDjIZLmRuZDVlLmFwaS52MWFscGhhMS5TcGVsbCJoChJFeHBlcnRpc2VTZWxlY3Rpb24SKQoGc2tpbGxzGAEgAygOMhkuZG5kNWUuYXBpLnYxYWxwaGExLlNraWxsEicKBXRvb2xzGAIgAygOMhguZG5kNWUuYXBpLnYxYWxwaGExLlRvb2wixgUKCkNob2ljZURhdGESNAoIY2F0ZWdvcnkYASABKA4yIi5kbmQ1ZS5hcGkudjFhbHBoYTEuQ2hvaWNlQ2F0ZWdvcnkSMAoGc291cmNlGAIgASgOMiAuZG5kNWUuYXBpLnYxYWxwaGExLkNob2ljZVNvdXJjZRIRCgljaG9pY2VfaWQYAyABKAkSEQoJb3B0aW9uX2lkGAQgASgJEg4KBG5hbWUYBSABKAlIABI0CgZza2lsbHMYBiABKAsyIi5kbmQ1ZS5hcGkudjFhbHBoYTEuU2tpbGxTZWxlY3Rpb25IABI6CglsYW5ndWFnZXMYByABKAsyJS5kbmQ1ZS5hcGkudjFhbHBoYTEuTGFuZ3VhZ2VTZWxlY3Rpb25IABI7Cg5hYmlsaXR5X3Njb3JlcxgIIAEoCzIhLmRuZDVlLmFwaS52MWFscGhhMS5BYmlsaXR5U2NvcmVzSAASRAoOZmlnaHRpbmdfc3R5bGUYCSABKAsyKi5kbmQ1ZS5hcGkudjFhbHBoYTEuRmlnaHRpbmdTdHlsZVNlbGVjdGlvbkgAEjsKCWVxdWlwbWVudBgKIAEoCzImLmRuZDVlLmFwaS52MWFscGhhMS5FcXVpcG1lbnRTZWxlY3Rpb25IABI0CgpiYWNrZ3JvdW5kGAsgASgOMh4uZG5kNWUuYXBpLnYxYWxwaGExLkJhY2tncm91bmRIABI0CgZzcGVsbHMYDCABKAsyIi5kbmQ1ZS5hcGkudjFhbHBoYTEuU3BlbGxTZWxlY3Rpb25IABIyCgV0b29scxgNIAEoCzIhLmRuZDVlLmFwaS52MWFscGhhMS5Ub29sU2VsZWN0aW9uSAASOwoJZXhwZXJ0aXNlGA4gASgLMiYuZG5kNWUuYXBpLnYxYWxwaGExLkV4cGVydGlzZVNlbGVjdGlvbkgAQgsKCXNlbGVjdGlvbiqhAQoSU3BlbGxTZWxlY3Rpb25UeXBlEiQKIFNQRUxMX1NFTEVDVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASIgoeU1BFTExfU0VMRUNUSU9OX1RZUEVfU1BFTExCT09LEAESHgoaU1BFTExfU0VMRUNUSU9OX1RZUEVfS05PV04QAhIhCh1TUEVMTF9TRUxFQ1RJT05fVFlQRV9QUkVQQVJFRBADKs0BCgxDaG9pY2VTb3VyY2USHQoZQ0hPSUNFX1NPVVJDRV9VTlNQRUNJRklFRBAAEhgKFENIT0lDRV9TT1VSQ0VfUExBWUVSEAESFgoSQ0hPSUNFX1NPVVJDRV9SQUNFEAISGQoVQ0hPSUNFX1NPVVJDRV9TVUJSQUNFEAMSFwoTQ0hPSUNFX1NPVVJDRV9DTEFTUxAEEhwKGENIT0lDRV9TT1VSQ0VfQkFDS0dST1VORBAFEhoKFkNIT0lDRV9TT1VSQ0VfTEVWRUxfVVAQBirdBAoOQ2hvaWNlQ2F0ZWdvcnkSHwobQ0hPSUNFX0NBVEVHT1JZX1VOU1BFQ0lGSUVEEAASHQoZQ0hPSUNFX0NBVEVHT1JZX0VRVUlQTUVOVBABEhoKFkNIT0lDRV9DQVRFR09SWV9TS0lMTFMQAhIZChVDSE9JQ0VfQ0FURUdPUllfVE9PTFMQAxIdChlDSE9JQ0VfQ0FURUdPUllfTEFOR1VBR0VTEAQSKAokQ0hPSUNFX0NBVEVHT1JZX1dFQVBPTl9QUk9GSUNJRU5DSUVTEAUSJwojQ0hPSUNFX0NBVEVHT1JZX0FSTU9SX1BST0ZJQ0lFTkNJRVMQBhIaChZDSE9JQ0VfQ0FURUdPUllfU1BFTExTEAcSGQoVQ0hPSUNFX0NBVEVHT1JZX0ZFQVRTEAgSIgoeQ0hPSUNFX0NBVEVHT1JZX0FCSUxJVFlfU0NPUkVTEAkSGAoUQ0hPSUNFX0NBVEVHT1JZX05BTUUQChIiCh5DSE9JQ0VfQ0FURUdPUllfRklHSFRJTkdfU1RZTEUQCxIYChRDSE9JQ0VfQ0FURUdPUllfUkFDRRAMEhkKFUNIT0lDRV9DQVRFR09SWV9DTEFTUxANEh4KGkNIT0lDRV9DQVRFR09SWV9CQUNLR1JPVU5EEA4SHAoYQ0hPSUNFX0NBVEVHT1JZX0NBTlRSSVBTEA8SHQoZQ0hPSUNFX0NBVEVHT1JZX0VYUEVSVElTRRAQEhsKF0NIT0lDRV9DQVRFR09SWV9TVUJSQUNFEBESGgoWQ0hPSUNFX0NBVEVHT1JZX1RSQUlUUxASQt0BChZjb20uZG5kNWUuYXBpLnYxYWxwaGExQgxDaG9pY2VzUHJvdG9QAVpLZ2l0aHViLmNvbS9LaXJrRGlnZ2xlci9ycGctYXBpLXByb3Rvcy9nZW4vZ28vZG5kNWUvYXBpL3YxYWxwaGExO2FwaXYxYWxwaGExogIDREFYqgISRG5kNWUuQXBpLlYxYWxwaGExygISRG5kNWVcQXBpXFYxYWxwaGEx4gIeRG5kNWVcQXBpXFYxYWxwaGExXEdQQk1ldGFkYXRh6gIURG5kNWU6OkFwaTo6VjFhbHBoYTFiBnByb3RvMw", [file_dnd5e_api_v1alpha1_common, file_dnd5e_api_v1alpha1_enums]);

/**
 * Choice represents any decision point in character creation
 * This is the ONE way to represent all choices - maps to toolkit's Requirements
 *
 * @generated from message dnd5e.api.v1alpha1.Choice
 */
export type Choice = Message<"dnd5e.api.v1alpha1.Choice"> & {
  /**
   * Unique identifier (e.g., "fighter-skills", "fighter-armor")
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Human-readable description
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * How many to choose
   *
   * @generated from field: int32 choose_count = 3;
   */
  chooseCount: number;

  /**
   * Category for validation
   *
   * @generated from field: dnd5e.api.v1alpha1.ChoiceCategory choice_type = 4;
   */
  choiceType: ChoiceCategory;

  /**
   * Category-specific options - only one will be set based on choice_type
   *
   * @generated from oneof dnd5e.api.v1alpha1.Choice.options
   */
  options: {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SkillOptions skill_options = 5;
     */
    value: SkillOptions;
    case: "skillOptions";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.EquipmentOptions equipment_options = 6;
     */
    value: EquipmentOptions;
    case: "equipmentOptions";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.LanguageOptions language_options = 7;
     */
    value: LanguageOptions;
    case: "languageOptions";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.ToolOptions tool_options = 8;
     */
    value: ToolOptions;
    case: "toolOptions";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.FightingStyleOptions fighting_style_options = 9;
     */
    value: FightingStyleOptions;
    case: "fightingStyleOptions";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SpellOptions spell_options = 10;
     */
    value: SpellOptions;
    case: "spellOptions";
  } | {
    /**
     * Add more as needed for other choice types
     *
     * @generated from field: dnd5e.api.v1alpha1.ExpertiseOptions expertise_options = 11;
     */
    value: ExpertiseOptions;
    case: "expertiseOptions";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dnd5e.api.v1alpha1.Choice.
 * Use `create(ChoiceSchema)` to create a new message.
 */
export const ChoiceSchema: GenMessage<Choice> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 0);

/**
 * Skills that can be chosen
 *
 * @generated from message dnd5e.api.v1alpha1.SkillOptions
 */
export type SkillOptions = Message<"dnd5e.api.v1alpha1.SkillOptions"> & {
  /**
   * Available skills to choose from
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.Skill available = 1;
   */
  available: Skill[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.SkillOptions.
 * Use `create(SkillOptionsSchema)` to create a new message.
 */
export const SkillOptionsSchema: GenMessage<SkillOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 1);

/**
 * Equipment bundles (e.g., "chain mail" OR "leather + longbow + arrows")
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentOptions
 */
export type EquipmentOptions = Message<"dnd5e.api.v1alpha1.EquipmentOptions"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.EquipmentBundle bundles = 1;
   */
  bundles: EquipmentBundle[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentOptions.
 * Use `create(EquipmentOptionsSchema)` to create a new message.
 */
export const EquipmentOptionsSchema: GenMessage<EquipmentOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 2);

/**
 * Single equipment bundle option
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentBundle
 */
export type EquipmentBundle = Message<"dnd5e.api.v1alpha1.EquipmentBundle"> & {
  /**
   * Bundle identifier (e.g., "fighter-armor-a")
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name (e.g., "Chain mail")
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * Concrete items in this bundle
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.EquipmentItem items = 3;
   */
  items: EquipmentItem[];

  /**
   * Category-based selections
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.EquipmentCategoryChoice category_choices = 4;
   */
  categoryChoices: EquipmentCategoryChoice[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentBundle.
 * Use `create(EquipmentBundleSchema)` to create a new message.
 */
export const EquipmentBundleSchema: GenMessage<EquipmentBundle> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 3);

/**
 * Concrete equipment item
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentItem
 */
export type EquipmentItem = Message<"dnd5e.api.v1alpha1.EquipmentItem"> & {
  /**
   * Maps to toolkit's SelectionID (e.g., "chain-mail", "shield")
   *
   * @generated from field: string selection_id = 1;
   */
  selectionId: string;

  /**
   * How many (default 1)
   *
   * @generated from field: int32 quantity = 2;
   */
  quantity: number;

  /**
   * Optional type hint for client convenience (can help with icon display, etc.)
   *
   * @generated from oneof dnd5e.api.v1alpha1.EquipmentItem.type_hint
   */
  typeHint: {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Weapon weapon = 3;
     */
    value: Weapon;
    case: "weapon";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Armor armor = 4;
     */
    value: Armor;
    case: "armor";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Tool tool = 5;
     */
    value: Tool;
    case: "tool";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Pack pack = 6;
     */
    value: Pack;
    case: "pack";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Ammunition ammunition = 7;
     */
    value: Ammunition;
    case: "ammunition";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentItem.
 * Use `create(EquipmentItemSchema)` to create a new message.
 */
export const EquipmentItemSchema: GenMessage<EquipmentItem> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 4);

/**
 * Category-based equipment selection (e.g., "choose 2 martial weapons")
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentCategoryChoice
 */
export type EquipmentCategoryChoice = Message<"dnd5e.api.v1alpha1.EquipmentCategoryChoice"> & {
  /**
   * How many to choose (e.g., 1 or 2)
   *
   * @generated from field: int32 choose = 1;
   */
  choose: number;

  /**
   * Weapon categories to choose from
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.WeaponCategory weapon_categories = 2;
   */
  weaponCategories: WeaponCategory[];

  /**
   * Armor categories to choose from
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.ArmorCategory armor_categories = 3;
   */
  armorCategories: ArmorCategory[];

  /**
   * Tool categories to choose from
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.ToolCategory tool_categories = 4;
   */
  toolCategories: ToolCategory[];

  /**
   * Description (e.g., "Choose two martial weapons")
   *
   * @generated from field: string label = 5;
   */
  label: string;
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentCategoryChoice.
 * Use `create(EquipmentCategoryChoiceSchema)` to create a new message.
 */
export const EquipmentCategoryChoiceSchema: GenMessage<EquipmentCategoryChoice> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 5);

/**
 * Languages that can be chosen
 *
 * @generated from message dnd5e.api.v1alpha1.LanguageOptions
 */
export type LanguageOptions = Message<"dnd5e.api.v1alpha1.LanguageOptions"> & {
  /**
   * nil in toolkit means "any language"
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.Language available = 1;
   */
  available: Language[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.LanguageOptions.
 * Use `create(LanguageOptionsSchema)` to create a new message.
 */
export const LanguageOptionsSchema: GenMessage<LanguageOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 6);

/**
 * Tools that can be chosen
 *
 * @generated from message dnd5e.api.v1alpha1.ToolOptions
 */
export type ToolOptions = Message<"dnd5e.api.v1alpha1.ToolOptions"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Tool available = 1;
   */
  available: Tool[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.ToolOptions.
 * Use `create(ToolOptionsSchema)` to create a new message.
 */
export const ToolOptionsSchema: GenMessage<ToolOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 7);

/**
 * Fighting styles that can be chosen
 *
 * @generated from message dnd5e.api.v1alpha1.FightingStyleOptions
 */
export type FightingStyleOptions = Message<"dnd5e.api.v1alpha1.FightingStyleOptions"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.FightingStyle available = 1;
   */
  available: FightingStyle[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.FightingStyleOptions.
 * Use `create(FightingStyleOptionsSchema)` to create a new message.
 */
export const FightingStyleOptionsSchema: GenMessage<FightingStyleOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 8);

/**
 * Spells that can be chosen
 *
 * @generated from message dnd5e.api.v1alpha1.SpellOptions
 */
export type SpellOptions = Message<"dnd5e.api.v1alpha1.SpellOptions"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Spell available = 1;
   */
  available: Spell[];

  /**
   * Optional: level of spells being chosen
   *
   * @generated from field: int32 spell_level = 2;
   */
  spellLevel: number;

  /**
   * How spells are selected (learned, prepared, etc.)
   *
   * @generated from field: dnd5e.api.v1alpha1.SpellSelectionType selection_type = 3;
   */
  selectionType: SpellSelectionType;
};

/**
 * Describes the message dnd5e.api.v1alpha1.SpellOptions.
 * Use `create(SpellOptionsSchema)` to create a new message.
 */
export const SpellOptionsSchema: GenMessage<SpellOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 9);

/**
 * Skills/tools that can gain expertise
 *
 * @generated from message dnd5e.api.v1alpha1.ExpertiseOptions
 */
export type ExpertiseOptions = Message<"dnd5e.api.v1alpha1.ExpertiseOptions"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Skill available_skills = 1;
   */
  availableSkills: Skill[];

  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Tool available_tools = 2;
   */
  availableTools: Tool[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.ExpertiseOptions.
 * Use `create(ExpertiseOptionsSchema)` to create a new message.
 */
export const ExpertiseOptionsSchema: GenMessage<ExpertiseOptions> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 10);

/**
 * Represents a submitted choice (what the player actually selected)
 * Maps closely to toolkit's Submission struct
 *
 * @generated from message dnd5e.api.v1alpha1.ChoiceSubmission
 */
export type ChoiceSubmission = Message<"dnd5e.api.v1alpha1.ChoiceSubmission"> & {
  /**
   * Which choice this is for (matches Choice.id)
   *
   * @generated from field: string choice_id = 1;
   */
  choiceId: string;

  /**
   * Category of the choice
   *
   * @generated from field: dnd5e.api.v1alpha1.ChoiceCategory category = 2;
   */
  category: ChoiceCategory;

  /**
   * Where this choice came from
   *
   * @generated from field: dnd5e.api.v1alpha1.ChoiceSource source = 3;
   */
  source: ChoiceSource;

  /**
   * For equipment bundles, which bundle was selected
   *
   * @generated from field: string option_id = 4;
   */
  optionId: string;

  /**
   * The actual selection IDs - mirrors toolkit's Values []shared.SelectionID
   * For equipment category choices like "choose 2 martial weapons", this would contain
   * the IDs of the selected weapons (e.g., ["longsword", "battleaxe"])
   *
   * Generic selection IDs (can be equipment, spells, skills, etc.)
   *
   * @generated from field: repeated string selection_ids = 5;
   */
  selectionIds: string[];

  /**
   * DEPRECATED: Category-specific selections (maintained for backward compatibility)
   * The actual selection - only one will be set based on category
   *
   * @generated from oneof dnd5e.api.v1alpha1.ChoiceSubmission.selection
   */
  selection: {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SkillSelection skills = 6;
     */
    value: SkillSelection;
    case: "skills";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.EquipmentSelection equipment = 7;
     */
    value: EquipmentSelection;
    case: "equipment";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.LanguageSelection languages = 8;
     */
    value: LanguageSelection;
    case: "languages";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.ToolSelection tools = 9;
     */
    value: ToolSelection;
    case: "tools";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.FightingStyleSelection fighting_style = 10;
     */
    value: FightingStyleSelection;
    case: "fightingStyle";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SpellSelection spells = 11;
     */
    value: SpellSelection;
    case: "spells";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.ExpertiseSelection expertise = 12;
     */
    value: ExpertiseSelection;
    case: "expertise";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dnd5e.api.v1alpha1.ChoiceSubmission.
 * Use `create(ChoiceSubmissionSchema)` to create a new message.
 */
export const ChoiceSubmissionSchema: GenMessage<ChoiceSubmission> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 11);

/**
 * Selected skills
 *
 * @generated from message dnd5e.api.v1alpha1.SkillSelection
 */
export type SkillSelection = Message<"dnd5e.api.v1alpha1.SkillSelection"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Skill skills = 1;
   */
  skills: Skill[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.SkillSelection.
 * Use `create(SkillSelectionSchema)` to create a new message.
 */
export const SkillSelectionSchema: GenMessage<SkillSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 12);

/**
 * Selected equipment - supports multiple items from category choices
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentSelection
 */
export type EquipmentSelection = Message<"dnd5e.api.v1alpha1.EquipmentSelection"> & {
  /**
   * Multiple items can be selected
   *
   * @generated from field: repeated dnd5e.api.v1alpha1.EquipmentSelectionItem items = 1;
   */
  items: EquipmentSelectionItem[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentSelection.
 * Use `create(EquipmentSelectionSchema)` to create a new message.
 */
export const EquipmentSelectionSchema: GenMessage<EquipmentSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 13);

/**
 * A specific equipment item with quantity
 *
 * @generated from message dnd5e.api.v1alpha1.EquipmentSelectionItem
 */
export type EquipmentSelectionItem = Message<"dnd5e.api.v1alpha1.EquipmentSelectionItem"> & {
  /**
   * @generated from oneof dnd5e.api.v1alpha1.EquipmentSelectionItem.equipment
   */
  equipment: {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Weapon weapon = 1;
     */
    value: Weapon;
    case: "weapon";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Armor armor = 2;
     */
    value: Armor;
    case: "armor";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Tool tool = 3;
     */
    value: Tool;
    case: "tool";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Pack pack = 4;
     */
    value: Pack;
    case: "pack";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Ammunition ammunition = 5;
     */
    value: Ammunition;
    case: "ammunition";
  } | {
    /**
     * For items not yet enumerated
     *
     * @generated from field: string other_equipment_id = 6;
     */
    value: string;
    case: "otherEquipmentId";
  } | { case: undefined; value?: undefined };

  /**
   * Default 1
   *
   * @generated from field: int32 quantity = 7;
   */
  quantity: number;
};

/**
 * Describes the message dnd5e.api.v1alpha1.EquipmentSelectionItem.
 * Use `create(EquipmentSelectionItemSchema)` to create a new message.
 */
export const EquipmentSelectionItemSchema: GenMessage<EquipmentSelectionItem> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 14);

/**
 * Selected languages
 *
 * @generated from message dnd5e.api.v1alpha1.LanguageSelection
 */
export type LanguageSelection = Message<"dnd5e.api.v1alpha1.LanguageSelection"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Language languages = 1;
   */
  languages: Language[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.LanguageSelection.
 * Use `create(LanguageSelectionSchema)` to create a new message.
 */
export const LanguageSelectionSchema: GenMessage<LanguageSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 15);

/**
 * Selected tools
 *
 * @generated from message dnd5e.api.v1alpha1.ToolSelection
 */
export type ToolSelection = Message<"dnd5e.api.v1alpha1.ToolSelection"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Tool tools = 1;
   */
  tools: Tool[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.ToolSelection.
 * Use `create(ToolSelectionSchema)` to create a new message.
 */
export const ToolSelectionSchema: GenMessage<ToolSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 16);

/**
 * Selected fighting style
 *
 * @generated from message dnd5e.api.v1alpha1.FightingStyleSelection
 */
export type FightingStyleSelection = Message<"dnd5e.api.v1alpha1.FightingStyleSelection"> & {
  /**
   * Usually just one
   *
   * @generated from field: dnd5e.api.v1alpha1.FightingStyle style = 1;
   */
  style: FightingStyle;
};

/**
 * Describes the message dnd5e.api.v1alpha1.FightingStyleSelection.
 * Use `create(FightingStyleSelectionSchema)` to create a new message.
 */
export const FightingStyleSelectionSchema: GenMessage<FightingStyleSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 17);

/**
 * Selected spells
 *
 * @generated from message dnd5e.api.v1alpha1.SpellSelection
 */
export type SpellSelection = Message<"dnd5e.api.v1alpha1.SpellSelection"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Spell spells = 1;
   */
  spells: Spell[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.SpellSelection.
 * Use `create(SpellSelectionSchema)` to create a new message.
 */
export const SpellSelectionSchema: GenMessage<SpellSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 18);

/**
 * Selected expertise
 *
 * @generated from message dnd5e.api.v1alpha1.ExpertiseSelection
 */
export type ExpertiseSelection = Message<"dnd5e.api.v1alpha1.ExpertiseSelection"> & {
  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Skill skills = 1;
   */
  skills: Skill[];

  /**
   * @generated from field: repeated dnd5e.api.v1alpha1.Tool tools = 2;
   */
  tools: Tool[];
};

/**
 * Describes the message dnd5e.api.v1alpha1.ExpertiseSelection.
 * Use `create(ExpertiseSelectionSchema)` to create a new message.
 */
export const ExpertiseSelectionSchema: GenMessage<ExpertiseSelection> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 19);

/**
 * Tracks a choice that was made during character creation
 * Stored with the character to remember what choices were made
 *
 * @generated from message dnd5e.api.v1alpha1.ChoiceData
 */
export type ChoiceData = Message<"dnd5e.api.v1alpha1.ChoiceData"> & {
  /**
   * @generated from field: dnd5e.api.v1alpha1.ChoiceCategory category = 1;
   */
  category: ChoiceCategory;

  /**
   * @generated from field: dnd5e.api.v1alpha1.ChoiceSource source = 2;
   */
  source: ChoiceSource;

  /**
   * The Choice.id this relates to
   *
   * @generated from field: string choice_id = 3;
   */
  choiceId: string;

  /**
   * For equipment bundles, which bundle was selected
   *
   * @generated from field: string option_id = 4;
   */
  optionId: string;

  /**
   * @generated from oneof dnd5e.api.v1alpha1.ChoiceData.selection
   */
  selection: {
    /**
     * For character name
     *
     * @generated from field: string name = 5;
     */
    value: string;
    case: "name";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SkillSelection skills = 6;
     */
    value: SkillSelection;
    case: "skills";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.LanguageSelection languages = 7;
     */
    value: LanguageSelection;
    case: "languages";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.AbilityScores ability_scores = 8;
     */
    value: AbilityScores;
    case: "abilityScores";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.FightingStyleSelection fighting_style = 9;
     */
    value: FightingStyleSelection;
    case: "fightingStyle";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.EquipmentSelection equipment = 10;
     */
    value: EquipmentSelection;
    case: "equipment";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.Background background = 11;
     */
    value: Background;
    case: "background";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.SpellSelection spells = 12;
     */
    value: SpellSelection;
    case: "spells";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.ToolSelection tools = 13;
     */
    value: ToolSelection;
    case: "tools";
  } | {
    /**
     * @generated from field: dnd5e.api.v1alpha1.ExpertiseSelection expertise = 14;
     */
    value: ExpertiseSelection;
    case: "expertise";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dnd5e.api.v1alpha1.ChoiceData.
 * Use `create(ChoiceDataSchema)` to create a new message.
 */
export const ChoiceDataSchema: GenMessage<ChoiceData> = /*@__PURE__*/
  messageDesc(file_dnd5e_api_v1alpha1_choices, 20);

/**
 * Types of spell selection systems
 *
 * @generated from enum dnd5e.api.v1alpha1.SpellSelectionType
 */
export enum SpellSelectionType {
  /**
   * @generated from enum value: SPELL_SELECTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Wizard spellbook system
   *
   * @generated from enum value: SPELL_SELECTION_TYPE_SPELLBOOK = 1;
   */
  SPELLBOOK = 1,

  /**
   * Fixed known spells (sorcerer, warlock)
   *
   * @generated from enum value: SPELL_SELECTION_TYPE_KNOWN = 2;
   */
  KNOWN = 2,

  /**
   * Prepared spells (cleric, druid)
   *
   * @generated from enum value: SPELL_SELECTION_TYPE_PREPARED = 3;
   */
  PREPARED = 3,
}

/**
 * Describes the enum dnd5e.api.v1alpha1.SpellSelectionType.
 */
export const SpellSelectionTypeSchema: GenEnum<SpellSelectionType> = /*@__PURE__*/
  enumDesc(file_dnd5e_api_v1alpha1_choices, 0);

/**
 * Source of a choice during character creation
 *
 * @generated from enum dnd5e.api.v1alpha1.ChoiceSource
 */
export enum ChoiceSource {
  /**
   * @generated from enum value: CHOICE_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Direct player choice
   *
   * @generated from enum value: CHOICE_SOURCE_PLAYER = 1;
   */
  PLAYER = 1,

  /**
   * @generated from enum value: CHOICE_SOURCE_RACE = 2;
   */
  RACE = 2,

  /**
   * @generated from enum value: CHOICE_SOURCE_SUBRACE = 3;
   */
  SUBRACE = 3,

  /**
   * @generated from enum value: CHOICE_SOURCE_CLASS = 4;
   */
  CLASS = 4,

  /**
   * @generated from enum value: CHOICE_SOURCE_BACKGROUND = 5;
   */
  BACKGROUND = 5,

  /**
   * Choices made during level progression
   *
   * @generated from enum value: CHOICE_SOURCE_LEVEL_UP = 6;
   */
  LEVEL_UP = 6,
}

/**
 * Describes the enum dnd5e.api.v1alpha1.ChoiceSource.
 */
export const ChoiceSourceSchema: GenEnum<ChoiceSource> = /*@__PURE__*/
  enumDesc(file_dnd5e_api_v1alpha1_choices, 1);

/**
 * Category of choice being made
 *
 * @generated from enum dnd5e.api.v1alpha1.ChoiceCategory
 */
export enum ChoiceCategory {
  /**
   * @generated from enum value: CHOICE_CATEGORY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHOICE_CATEGORY_EQUIPMENT = 1;
   */
  EQUIPMENT = 1,

  /**
   * Skill proficiencies
   *
   * @generated from enum value: CHOICE_CATEGORY_SKILLS = 2;
   */
  SKILLS = 2,

  /**
   * Tool proficiencies
   *
   * @generated from enum value: CHOICE_CATEGORY_TOOLS = 3;
   */
  TOOLS = 3,

  /**
   * Languages
   *
   * @generated from enum value: CHOICE_CATEGORY_LANGUAGES = 4;
   */
  LANGUAGES = 4,

  /**
   * Weapon proficiencies
   *
   * @generated from enum value: CHOICE_CATEGORY_WEAPON_PROFICIENCIES = 5;
   */
  WEAPON_PROFICIENCIES = 5,

  /**
   * Armor proficiencies
   *
   * @generated from enum value: CHOICE_CATEGORY_ARMOR_PROFICIENCIES = 6;
   */
  ARMOR_PROFICIENCIES = 6,

  /**
   * Spells known/prepared
   *
   * @generated from enum value: CHOICE_CATEGORY_SPELLS = 7;
   */
  SPELLS = 7,

  /**
   * Feats
   *
   * @generated from enum value: CHOICE_CATEGORY_FEATS = 8;
   */
  FEATS = 8,

  /**
   * Ability score improvements
   *
   * @generated from enum value: CHOICE_CATEGORY_ABILITY_SCORES = 9;
   */
  ABILITY_SCORES = 9,

  /**
   * Character name
   *
   * @generated from enum value: CHOICE_CATEGORY_NAME = 10;
   */
  NAME = 10,

  /**
   * Fighting style selection
   *
   * @generated from enum value: CHOICE_CATEGORY_FIGHTING_STYLE = 11;
   */
  FIGHTING_STYLE = 11,

  /**
   * Race selection
   *
   * @generated from enum value: CHOICE_CATEGORY_RACE = 12;
   */
  RACE = 12,

  /**
   * Class selection
   *
   * @generated from enum value: CHOICE_CATEGORY_CLASS = 13;
   */
  CLASS = 13,

  /**
   * Background selection
   *
   * @generated from enum value: CHOICE_CATEGORY_BACKGROUND = 14;
   */
  BACKGROUND = 14,

  /**
   * Cantrips known
   *
   * @generated from enum value: CHOICE_CATEGORY_CANTRIPS = 15;
   */
  CANTRIPS = 15,

  /**
   * Expertise (double proficiency) choices
   *
   * @generated from enum value: CHOICE_CATEGORY_EXPERTISE = 16;
   */
  EXPERTISE = 16,

  /**
   * Subrace selection (e.g., High Elf, Mountain Dwarf)
   *
   * @generated from enum value: CHOICE_CATEGORY_SUBRACE = 17;
   */
  SUBRACE = 17,

  /**
   * Racial or class traits (e.g., Draconic Ancestry)
   *
   * @generated from enum value: CHOICE_CATEGORY_TRAITS = 18;
   */
  TRAITS = 18,
}

/**
 * Describes the enum dnd5e.api.v1alpha1.ChoiceCategory.
 */
export const ChoiceCategorySchema: GenEnum<ChoiceCategory> = /*@__PURE__*/
  enumDesc(file_dnd5e_api_v1alpha1_choices, 2);

