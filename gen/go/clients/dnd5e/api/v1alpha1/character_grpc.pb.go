// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dnd5e/api/v1alpha1/character.proto

package apiv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterService_CreateDraft_FullMethodName          = "/dnd5e.api.v1alpha1.CharacterService/CreateDraft"
	CharacterService_GetDraft_FullMethodName             = "/dnd5e.api.v1alpha1.CharacterService/GetDraft"
	CharacterService_ListDrafts_FullMethodName           = "/dnd5e.api.v1alpha1.CharacterService/ListDrafts"
	CharacterService_DeleteDraft_FullMethodName          = "/dnd5e.api.v1alpha1.CharacterService/DeleteDraft"
	CharacterService_UpdateName_FullMethodName           = "/dnd5e.api.v1alpha1.CharacterService/UpdateName"
	CharacterService_UpdateRace_FullMethodName           = "/dnd5e.api.v1alpha1.CharacterService/UpdateRace"
	CharacterService_UpdateClass_FullMethodName          = "/dnd5e.api.v1alpha1.CharacterService/UpdateClass"
	CharacterService_UpdateBackground_FullMethodName     = "/dnd5e.api.v1alpha1.CharacterService/UpdateBackground"
	CharacterService_UpdateAbilityScores_FullMethodName  = "/dnd5e.api.v1alpha1.CharacterService/UpdateAbilityScores"
	CharacterService_UpdateSkills_FullMethodName         = "/dnd5e.api.v1alpha1.CharacterService/UpdateSkills"
	CharacterService_ValidateDraft_FullMethodName        = "/dnd5e.api.v1alpha1.CharacterService/ValidateDraft"
	CharacterService_FinalizeDraft_FullMethodName        = "/dnd5e.api.v1alpha1.CharacterService/FinalizeDraft"
	CharacterService_GetCharacter_FullMethodName         = "/dnd5e.api.v1alpha1.CharacterService/GetCharacter"
	CharacterService_ListCharacters_FullMethodName       = "/dnd5e.api.v1alpha1.CharacterService/ListCharacters"
	CharacterService_DeleteCharacter_FullMethodName      = "/dnd5e.api.v1alpha1.CharacterService/DeleteCharacter"
	CharacterService_ListRaces_FullMethodName            = "/dnd5e.api.v1alpha1.CharacterService/ListRaces"
	CharacterService_ListClasses_FullMethodName          = "/dnd5e.api.v1alpha1.CharacterService/ListClasses"
	CharacterService_ListBackgrounds_FullMethodName      = "/dnd5e.api.v1alpha1.CharacterService/ListBackgrounds"
	CharacterService_GetRaceDetails_FullMethodName       = "/dnd5e.api.v1alpha1.CharacterService/GetRaceDetails"
	CharacterService_GetClassDetails_FullMethodName      = "/dnd5e.api.v1alpha1.CharacterService/GetClassDetails"
	CharacterService_GetBackgroundDetails_FullMethodName = "/dnd5e.api.v1alpha1.CharacterService/GetBackgroundDetails"
	CharacterService_GetFeature_FullMethodName           = "/dnd5e.api.v1alpha1.CharacterService/GetFeature"
	CharacterService_RollAbilityScores_FullMethodName    = "/dnd5e.api.v1alpha1.CharacterService/RollAbilityScores"
	CharacterService_ListEquipmentByType_FullMethodName  = "/dnd5e.api.v1alpha1.CharacterService/ListEquipmentByType"
	CharacterService_ListSpellsByLevel_FullMethodName    = "/dnd5e.api.v1alpha1.CharacterService/ListSpellsByLevel"
)

// CharacterServiceClient is the client API for CharacterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for D&D 5e character creation and management
// Supports both wizard-style step-by-step creation and free-form editing
type CharacterServiceClient interface {
	// Draft lifecycle
	CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*CreateDraftResponse, error)
	GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*GetDraftResponse, error)
	ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error)
	DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*DeleteDraftResponse, error)
	// Section-based updates (supports skip-around editing)
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error)
	UpdateRace(ctx context.Context, in *UpdateRaceRequest, opts ...grpc.CallOption) (*UpdateRaceResponse, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error)
	UpdateBackground(ctx context.Context, in *UpdateBackgroundRequest, opts ...grpc.CallOption) (*UpdateBackgroundResponse, error)
	UpdateAbilityScores(ctx context.Context, in *UpdateAbilityScoresRequest, opts ...grpc.CallOption) (*UpdateAbilityScoresResponse, error)
	UpdateSkills(ctx context.Context, in *UpdateSkillsRequest, opts ...grpc.CallOption) (*UpdateSkillsResponse, error)
	// Validation
	ValidateDraft(ctx context.Context, in *ValidateDraftRequest, opts ...grpc.CallOption) (*ValidateDraftResponse, error)
	// Character finalization
	FinalizeDraft(ctx context.Context, in *FinalizeDraftRequest, opts ...grpc.CallOption) (*FinalizeDraftResponse, error)
	// Completed character operations
	GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*GetCharacterResponse, error)
	ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error)
	DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error)
	// Data loading for character creation UI
	ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error)
	ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error)
	ListBackgrounds(ctx context.Context, in *ListBackgroundsRequest, opts ...grpc.CallOption) (*ListBackgroundsResponse, error)
	GetRaceDetails(ctx context.Context, in *GetRaceDetailsRequest, opts ...grpc.CallOption) (*GetRaceDetailsResponse, error)
	GetClassDetails(ctx context.Context, in *GetClassDetailsRequest, opts ...grpc.CallOption) (*GetClassDetailsResponse, error)
	GetBackgroundDetails(ctx context.Context, in *GetBackgroundDetailsRequest, opts ...grpc.CallOption) (*GetBackgroundDetailsResponse, error)
	GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
	// Dice rolling for character creation
	RollAbilityScores(ctx context.Context, in *RollAbilityScoresRequest, opts ...grpc.CallOption) (*RollAbilityScoresResponse, error)
	// Equipment listing by type
	ListEquipmentByType(ctx context.Context, in *ListEquipmentByTypeRequest, opts ...grpc.CallOption) (*ListEquipmentByTypeResponse, error)
	// Spell listing by level
	ListSpellsByLevel(ctx context.Context, in *ListSpellsByLevelRequest, opts ...grpc.CallOption) (*ListSpellsByLevelResponse, error)
}

type characterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterServiceClient(cc grpc.ClientConnInterface) CharacterServiceClient {
	return &characterServiceClient{cc}
}

func (c *characterServiceClient) CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*CreateDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDraftResponse)
	err := c.cc.Invoke(ctx, CharacterService_CreateDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*GetDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDraftResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDraftsResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListDrafts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*DeleteDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDraftResponse)
	err := c.cc.Invoke(ctx, CharacterService_DeleteDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNameResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateRace(ctx context.Context, in *UpdateRaceRequest, opts ...grpc.CallOption) (*UpdateRaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRaceResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateRace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClassResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateBackground(ctx context.Context, in *UpdateBackgroundRequest, opts ...grpc.CallOption) (*UpdateBackgroundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackgroundResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateBackground_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateAbilityScores(ctx context.Context, in *UpdateAbilityScoresRequest, opts ...grpc.CallOption) (*UpdateAbilityScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAbilityScoresResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateAbilityScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) UpdateSkills(ctx context.Context, in *UpdateSkillsRequest, opts ...grpc.CallOption) (*UpdateSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSkillsResponse)
	err := c.cc.Invoke(ctx, CharacterService_UpdateSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ValidateDraft(ctx context.Context, in *ValidateDraftRequest, opts ...grpc.CallOption) (*ValidateDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateDraftResponse)
	err := c.cc.Invoke(ctx, CharacterService_ValidateDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) FinalizeDraft(ctx context.Context, in *FinalizeDraftRequest, opts ...grpc.CallOption) (*FinalizeDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeDraftResponse)
	err := c.cc.Invoke(ctx, CharacterService_FinalizeDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*GetCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharacterResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharactersResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCharacterResponse)
	err := c.cc.Invoke(ctx, CharacterService_DeleteCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRacesResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListRaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassesResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListBackgrounds(ctx context.Context, in *ListBackgroundsRequest, opts ...grpc.CallOption) (*ListBackgroundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackgroundsResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListBackgrounds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetRaceDetails(ctx context.Context, in *GetRaceDetailsRequest, opts ...grpc.CallOption) (*GetRaceDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRaceDetailsResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetRaceDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetClassDetails(ctx context.Context, in *GetClassDetailsRequest, opts ...grpc.CallOption) (*GetClassDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClassDetailsResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetClassDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetBackgroundDetails(ctx context.Context, in *GetBackgroundDetailsRequest, opts ...grpc.CallOption) (*GetBackgroundDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackgroundDetailsResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetBackgroundDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, CharacterService_GetFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) RollAbilityScores(ctx context.Context, in *RollAbilityScoresRequest, opts ...grpc.CallOption) (*RollAbilityScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollAbilityScoresResponse)
	err := c.cc.Invoke(ctx, CharacterService_RollAbilityScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListEquipmentByType(ctx context.Context, in *ListEquipmentByTypeRequest, opts ...grpc.CallOption) (*ListEquipmentByTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEquipmentByTypeResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListEquipmentByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) ListSpellsByLevel(ctx context.Context, in *ListSpellsByLevelRequest, opts ...grpc.CallOption) (*ListSpellsByLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpellsByLevelResponse)
	err := c.cc.Invoke(ctx, CharacterService_ListSpellsByLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServiceServer is the server API for CharacterService service.
// All implementations should embed UnimplementedCharacterServiceServer
// for forward compatibility.
//
// Service for D&D 5e character creation and management
// Supports both wizard-style step-by-step creation and free-form editing
type CharacterServiceServer interface {
	// Draft lifecycle
	CreateDraft(context.Context, *CreateDraftRequest) (*CreateDraftResponse, error)
	GetDraft(context.Context, *GetDraftRequest) (*GetDraftResponse, error)
	ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error)
	DeleteDraft(context.Context, *DeleteDraftRequest) (*DeleteDraftResponse, error)
	// Section-based updates (supports skip-around editing)
	UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error)
	UpdateRace(context.Context, *UpdateRaceRequest) (*UpdateRaceResponse, error)
	UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error)
	UpdateBackground(context.Context, *UpdateBackgroundRequest) (*UpdateBackgroundResponse, error)
	UpdateAbilityScores(context.Context, *UpdateAbilityScoresRequest) (*UpdateAbilityScoresResponse, error)
	UpdateSkills(context.Context, *UpdateSkillsRequest) (*UpdateSkillsResponse, error)
	// Validation
	ValidateDraft(context.Context, *ValidateDraftRequest) (*ValidateDraftResponse, error)
	// Character finalization
	FinalizeDraft(context.Context, *FinalizeDraftRequest) (*FinalizeDraftResponse, error)
	// Completed character operations
	GetCharacter(context.Context, *GetCharacterRequest) (*GetCharacterResponse, error)
	ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error)
	DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error)
	// Data loading for character creation UI
	ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error)
	ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error)
	ListBackgrounds(context.Context, *ListBackgroundsRequest) (*ListBackgroundsResponse, error)
	GetRaceDetails(context.Context, *GetRaceDetailsRequest) (*GetRaceDetailsResponse, error)
	GetClassDetails(context.Context, *GetClassDetailsRequest) (*GetClassDetailsResponse, error)
	GetBackgroundDetails(context.Context, *GetBackgroundDetailsRequest) (*GetBackgroundDetailsResponse, error)
	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	// Dice rolling for character creation
	RollAbilityScores(context.Context, *RollAbilityScoresRequest) (*RollAbilityScoresResponse, error)
	// Equipment listing by type
	ListEquipmentByType(context.Context, *ListEquipmentByTypeRequest) (*ListEquipmentByTypeResponse, error)
	// Spell listing by level
	ListSpellsByLevel(context.Context, *ListSpellsByLevelRequest) (*ListSpellsByLevelResponse, error)
}

// UnimplementedCharacterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterServiceServer struct{}

func (UnimplementedCharacterServiceServer) CreateDraft(context.Context, *CreateDraftRequest) (*CreateDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraft not implemented")
}
func (UnimplementedCharacterServiceServer) GetDraft(context.Context, *GetDraftRequest) (*GetDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraft not implemented")
}
func (UnimplementedCharacterServiceServer) ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrafts not implemented")
}
func (UnimplementedCharacterServiceServer) DeleteDraft(context.Context, *DeleteDraftRequest) (*DeleteDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraft not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateRace(context.Context, *UpdateRaceRequest) (*UpdateRaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRace not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateBackground(context.Context, *UpdateBackgroundRequest) (*UpdateBackgroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackground not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateAbilityScores(context.Context, *UpdateAbilityScoresRequest) (*UpdateAbilityScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAbilityScores not implemented")
}
func (UnimplementedCharacterServiceServer) UpdateSkills(context.Context, *UpdateSkillsRequest) (*UpdateSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkills not implemented")
}
func (UnimplementedCharacterServiceServer) ValidateDraft(context.Context, *ValidateDraftRequest) (*ValidateDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDraft not implemented")
}
func (UnimplementedCharacterServiceServer) FinalizeDraft(context.Context, *FinalizeDraftRequest) (*FinalizeDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeDraft not implemented")
}
func (UnimplementedCharacterServiceServer) GetCharacter(context.Context, *GetCharacterRequest) (*GetCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharacters not implemented")
}
func (UnimplementedCharacterServiceServer) DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaces not implemented")
}
func (UnimplementedCharacterServiceServer) ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClasses not implemented")
}
func (UnimplementedCharacterServiceServer) ListBackgrounds(context.Context, *ListBackgroundsRequest) (*ListBackgroundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackgrounds not implemented")
}
func (UnimplementedCharacterServiceServer) GetRaceDetails(context.Context, *GetRaceDetailsRequest) (*GetRaceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaceDetails not implemented")
}
func (UnimplementedCharacterServiceServer) GetClassDetails(context.Context, *GetClassDetailsRequest) (*GetClassDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassDetails not implemented")
}
func (UnimplementedCharacterServiceServer) GetBackgroundDetails(context.Context, *GetBackgroundDetailsRequest) (*GetBackgroundDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackgroundDetails not implemented")
}
func (UnimplementedCharacterServiceServer) GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedCharacterServiceServer) RollAbilityScores(context.Context, *RollAbilityScoresRequest) (*RollAbilityScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollAbilityScores not implemented")
}
func (UnimplementedCharacterServiceServer) ListEquipmentByType(context.Context, *ListEquipmentByTypeRequest) (*ListEquipmentByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentByType not implemented")
}
func (UnimplementedCharacterServiceServer) ListSpellsByLevel(context.Context, *ListSpellsByLevelRequest) (*ListSpellsByLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpellsByLevel not implemented")
}
func (UnimplementedCharacterServiceServer) testEmbeddedByValue() {}

// UnsafeCharacterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServiceServer will
// result in compilation errors.
type UnsafeCharacterServiceServer interface {
	mustEmbedUnimplementedCharacterServiceServer()
}

func RegisterCharacterServiceServer(s grpc.ServiceRegistrar, srv CharacterServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterService_ServiceDesc, srv)
}

func _CharacterService_CreateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).CreateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_CreateDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).CreateDraft(ctx, req.(*CreateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetDraft(ctx, req.(*GetDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDraftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListDrafts(ctx, req.(*ListDraftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_DeleteDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).DeleteDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_DeleteDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).DeleteDraft(ctx, req.(*DeleteDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateName(ctx, req.(*UpdateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateRace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateRace(ctx, req.(*UpdateRaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackgroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateBackground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateBackground(ctx, req.(*UpdateBackgroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateAbilityScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAbilityScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateAbilityScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateAbilityScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateAbilityScores(ctx, req.(*UpdateAbilityScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_UpdateSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).UpdateSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_UpdateSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).UpdateSkills(ctx, req.(*UpdateSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ValidateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ValidateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ValidateDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ValidateDraft(ctx, req.(*ValidateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_FinalizeDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).FinalizeDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_FinalizeDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).FinalizeDraft(ctx, req.(*FinalizeDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharacter(ctx, req.(*GetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListCharacters(ctx, req.(*ListCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, req.(*DeleteCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListRaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListRaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListRaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListRaces(ctx, req.(*ListRacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListClasses(ctx, req.(*ListClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListBackgrounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackgroundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListBackgrounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListBackgrounds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListBackgrounds(ctx, req.(*ListBackgroundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetRaceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetRaceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetRaceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetRaceDetails(ctx, req.(*GetRaceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetClassDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetClassDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetClassDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetClassDetails(ctx, req.(*GetClassDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetBackgroundDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackgroundDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetBackgroundDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetBackgroundDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetBackgroundDetails(ctx, req.(*GetBackgroundDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_RollAbilityScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollAbilityScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).RollAbilityScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_RollAbilityScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).RollAbilityScores(ctx, req.(*RollAbilityScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListEquipmentByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListEquipmentByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListEquipmentByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListEquipmentByType(ctx, req.(*ListEquipmentByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_ListSpellsByLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpellsByLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).ListSpellsByLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_ListSpellsByLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).ListSpellsByLevel(ctx, req.(*ListSpellsByLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterService_ServiceDesc is the grpc.ServiceDesc for CharacterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnd5e.api.v1alpha1.CharacterService",
	HandlerType: (*CharacterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDraft",
			Handler:    _CharacterService_CreateDraft_Handler,
		},
		{
			MethodName: "GetDraft",
			Handler:    _CharacterService_GetDraft_Handler,
		},
		{
			MethodName: "ListDrafts",
			Handler:    _CharacterService_ListDrafts_Handler,
		},
		{
			MethodName: "DeleteDraft",
			Handler:    _CharacterService_DeleteDraft_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _CharacterService_UpdateName_Handler,
		},
		{
			MethodName: "UpdateRace",
			Handler:    _CharacterService_UpdateRace_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _CharacterService_UpdateClass_Handler,
		},
		{
			MethodName: "UpdateBackground",
			Handler:    _CharacterService_UpdateBackground_Handler,
		},
		{
			MethodName: "UpdateAbilityScores",
			Handler:    _CharacterService_UpdateAbilityScores_Handler,
		},
		{
			MethodName: "UpdateSkills",
			Handler:    _CharacterService_UpdateSkills_Handler,
		},
		{
			MethodName: "ValidateDraft",
			Handler:    _CharacterService_ValidateDraft_Handler,
		},
		{
			MethodName: "FinalizeDraft",
			Handler:    _CharacterService_FinalizeDraft_Handler,
		},
		{
			MethodName: "GetCharacter",
			Handler:    _CharacterService_GetCharacter_Handler,
		},
		{
			MethodName: "ListCharacters",
			Handler:    _CharacterService_ListCharacters_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _CharacterService_DeleteCharacter_Handler,
		},
		{
			MethodName: "ListRaces",
			Handler:    _CharacterService_ListRaces_Handler,
		},
		{
			MethodName: "ListClasses",
			Handler:    _CharacterService_ListClasses_Handler,
		},
		{
			MethodName: "ListBackgrounds",
			Handler:    _CharacterService_ListBackgrounds_Handler,
		},
		{
			MethodName: "GetRaceDetails",
			Handler:    _CharacterService_GetRaceDetails_Handler,
		},
		{
			MethodName: "GetClassDetails",
			Handler:    _CharacterService_GetClassDetails_Handler,
		},
		{
			MethodName: "GetBackgroundDetails",
			Handler:    _CharacterService_GetBackgroundDetails_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _CharacterService_GetFeature_Handler,
		},
		{
			MethodName: "RollAbilityScores",
			Handler:    _CharacterService_RollAbilityScores_Handler,
		},
		{
			MethodName: "ListEquipmentByType",
			Handler:    _CharacterService_ListEquipmentByType_Handler,
		},
		{
			MethodName: "ListSpellsByLevel",
			Handler:    _CharacterService_ListSpellsByLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnd5e/api/v1alpha1/character.proto",
}
