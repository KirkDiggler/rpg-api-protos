// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file api/v1alpha1/room_spatial.proto (package api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Entity, Position, RoomError } from "./room_common_pb";
import { file_api_v1alpha1_room_common } from "./room_common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/room_spatial.proto.
 */
export const file_api_v1alpha1_room_spatial: GenFile = /*@__PURE__*/
  fileDesc("", [file_api_v1alpha1_room_common]);

/**
 * Line of sight query request
 *
 * @generated from message api.v1alpha1.QueryLineOfSightRequest
 */
export type QueryLineOfSightRequest = Message<"api.v1alpha1.QueryLineOfSightRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Source position
   *
   * @generated from field: api.v1alpha1.Position from_position = 2;
   */
  fromPosition?: Position;

  /**
   * Target position
   *
   * @generated from field: api.v1alpha1.Position to_position = 3;
   */
  toPosition?: Position;

  /**
   * Entity performing the check (for size/height considerations)
   *
   * @generated from field: string entity_id = 4;
   */
  entityId: string;

  /**
   * Entity size if not specified by entity_id
   *
   * @generated from field: double entity_size = 5;
   */
  entitySize: number;

  /**
   * Line of sight options
   *
   * @generated from field: api.v1alpha1.LineOfSightOptions options = 6;
   */
  options?: LineOfSightOptions;
};

/**
 * Describes the message api.v1alpha1.QueryLineOfSightRequest.
 * Use `create(QueryLineOfSightRequestSchema)` to create a new message.
 */
export const QueryLineOfSightRequestSchema: GenMessage<QueryLineOfSightRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 0);

/**
 * Options for line of sight calculations
 *
 * @generated from message api.v1alpha1.LineOfSightOptions
 */
export type LineOfSightOptions = Message<"api.v1alpha1.LineOfSightOptions"> & {
  /**
   * Whether to consider entity height
   *
   * @generated from field: bool consider_height = 1;
   */
  considerHeight: boolean;

  /**
   * Whether partial cover blocks sight
   *
   * @generated from field: bool partial_cover_blocks = 2;
   */
  partialCoverBlocks: boolean;

  /**
   * Maximum range for line of sight
   *
   * @generated from field: double max_range = 3;
   */
  maxRange: number;

  /**
   * Whether to ignore certain entity types
   *
   * @generated from field: repeated string ignore_entity_types = 4;
   */
  ignoreEntityTypes: string[];

  /**
   * Whether to provide detailed blocking information
   *
   * @generated from field: bool detailed_blocking_info = 5;
   */
  detailedBlockingInfo: boolean;
};

/**
 * Describes the message api.v1alpha1.LineOfSightOptions.
 * Use `create(LineOfSightOptionsSchema)` to create a new message.
 */
export const LineOfSightOptionsSchema: GenMessage<LineOfSightOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 1);

/**
 * Line of sight query response
 *
 * @generated from message api.v1alpha1.QueryLineOfSightResponse
 */
export type QueryLineOfSightResponse = Message<"api.v1alpha1.QueryLineOfSightResponse"> & {
  /**
   * Whether line of sight exists
   *
   * @generated from field: bool has_line_of_sight = 1;
   */
  hasLineOfSight: boolean;

  /**
   * Distance between positions
   *
   * @generated from field: double distance = 2;
   */
  distance: number;

  /**
   * Blocking information if no line of sight
   *
   * @generated from field: api.v1alpha1.BlockingInfo blocking_info = 3;
   */
  blockingInfo?: BlockingInfo;

  /**
   * Cover information
   *
   * @generated from field: api.v1alpha1.CoverInfo cover_info = 4;
   */
  coverInfo?: CoverInfo;

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 5;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.QueryLineOfSightResponse.
 * Use `create(QueryLineOfSightResponseSchema)` to create a new message.
 */
export const QueryLineOfSightResponseSchema: GenMessage<QueryLineOfSightResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 2);

/**
 * Information about what blocks line of sight
 *
 * @generated from message api.v1alpha1.BlockingInfo
 */
export type BlockingInfo = Message<"api.v1alpha1.BlockingInfo"> & {
  /**
   * Entity that blocks the line of sight
   *
   * @generated from field: string blocking_entity_id = 1;
   */
  blockingEntityId: string;

  /**
   * Position where line of sight is blocked
   *
   * @generated from field: api.v1alpha1.Position blocking_position = 2;
   */
  blockingPosition?: Position;

  /**
   * Type of blocking ("wall", "entity", "terrain")
   *
   * @generated from field: string blocking_type = 3;
   */
  blockingType: string;

  /**
   * Percentage of line blocked
   *
   * @generated from field: double blocking_percentage = 4;
   */
  blockingPercentage: number;
};

/**
 * Describes the message api.v1alpha1.BlockingInfo.
 * Use `create(BlockingInfoSchema)` to create a new message.
 */
export const BlockingInfoSchema: GenMessage<BlockingInfo> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 3);

/**
 * Information about cover between positions
 *
 * @generated from message api.v1alpha1.CoverInfo
 */
export type CoverInfo = Message<"api.v1alpha1.CoverInfo"> & {
  /**
   * Cover type
   *
   * @generated from field: api.v1alpha1.CoverType cover_type = 1;
   */
  coverType: CoverType;

  /**
   * Cover percentage (0.0 = no cover, 1.0 = full cover)
   *
   * @generated from field: double cover_percentage = 2;
   */
  coverPercentage: number;

  /**
   * Entity providing cover
   *
   * @generated from field: string cover_source_id = 3;
   */
  coverSourceId: string;

  /**
   * Cover position
   *
   * @generated from field: api.v1alpha1.Position cover_position = 4;
   */
  coverPosition?: Position;
};

/**
 * Describes the message api.v1alpha1.CoverInfo.
 * Use `create(CoverInfoSchema)` to create a new message.
 */
export const CoverInfoSchema: GenMessage<CoverInfo> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 4);

/**
 * Movement validation request
 *
 * @generated from message api.v1alpha1.ValidateMovementRequest
 */
export type ValidateMovementRequest = Message<"api.v1alpha1.ValidateMovementRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity attempting movement
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Starting position
   *
   * @generated from field: api.v1alpha1.Position from_position = 3;
   */
  fromPosition?: Position;

  /**
   * Ending position
   *
   * @generated from field: api.v1alpha1.Position to_position = 4;
   */
  toPosition?: Position;

  /**
   * Movement options
   *
   * @generated from field: api.v1alpha1.MovementOptions options = 5;
   */
  options?: MovementOptions;
};

/**
 * Describes the message api.v1alpha1.ValidateMovementRequest.
 * Use `create(ValidateMovementRequestSchema)` to create a new message.
 */
export const ValidateMovementRequestSchema: GenMessage<ValidateMovementRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 5);

/**
 * Options for movement validation
 *
 * @generated from message api.v1alpha1.MovementOptions
 */
export type MovementOptions = Message<"api.v1alpha1.MovementOptions"> & {
  /**
   * Movement type
   *
   * @generated from field: api.v1alpha1.MovementType movement_type = 1;
   */
  movementType: MovementType;

  /**
   * Available movement speed
   *
   * @generated from field: double movement_speed = 2;
   */
  movementSpeed: number;

  /**
   * Whether to allow movement through difficult terrain
   *
   * @generated from field: bool allow_difficult_terrain = 3;
   */
  allowDifficultTerrain: boolean;

  /**
   * Whether to allow movement through other entities
   *
   * @generated from field: bool allow_entity_overlap = 4;
   */
  allowEntityOverlap: boolean;

  /**
   * Maximum movement cost allowed
   *
   * @generated from field: double max_movement_cost = 5;
   */
  maxMovementCost: number;
};

/**
 * Describes the message api.v1alpha1.MovementOptions.
 * Use `create(MovementOptionsSchema)` to create a new message.
 */
export const MovementOptionsSchema: GenMessage<MovementOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 6);

/**
 * Movement validation response
 *
 * @generated from message api.v1alpha1.ValidateMovementResponse
 */
export type ValidateMovementResponse = Message<"api.v1alpha1.ValidateMovementResponse"> & {
  /**
   * Whether movement is valid
   *
   * @generated from field: bool is_valid = 1;
   */
  isValid: boolean;

  /**
   * Movement cost
   *
   * @generated from field: double movement_cost = 2;
   */
  movementCost: number;

  /**
   * Path taken (simplified)
   *
   * @generated from field: repeated api.v1alpha1.Position path = 3;
   */
  path: Position[];

  /**
   * Terrain effects encountered
   *
   * @generated from field: repeated api.v1alpha1.TerrainEffect terrain_effects = 4;
   */
  terrainEffects: TerrainEffect[];

  /**
   * Validation errors if invalid
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 5;
   */
  errors: RoomError[];

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 6;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.ValidateMovementResponse.
 * Use `create(ValidateMovementResponseSchema)` to create a new message.
 */
export const ValidateMovementResponseSchema: GenMessage<ValidateMovementResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 7);

/**
 * Terrain effect information
 *
 * @generated from message api.v1alpha1.TerrainEffect
 */
export type TerrainEffect = Message<"api.v1alpha1.TerrainEffect"> & {
  /**
   * Position of the effect
   *
   * @generated from field: api.v1alpha1.Position position = 1;
   */
  position?: Position;

  /**
   * Type of terrain effect
   *
   * "difficult", "hazardous", "impassable"
   *
   * @generated from field: string effect_type = 2;
   */
  effectType: string;

  /**
   * Movement cost multiplier
   *
   * @generated from field: double cost_multiplier = 3;
   */
  costMultiplier: number;

  /**
   * Description of the effect
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * Source of the terrain effect
   *
   * @generated from field: string source_id = 5;
   */
  sourceId: string;
};

/**
 * Describes the message api.v1alpha1.TerrainEffect.
 * Use `create(TerrainEffectSchema)` to create a new message.
 */
export const TerrainEffectSchema: GenMessage<TerrainEffect> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 8);

/**
 * Entity placement validation request
 *
 * @generated from message api.v1alpha1.ValidateEntityPlacementRequest
 */
export type ValidateEntityPlacementRequest = Message<"api.v1alpha1.ValidateEntityPlacementRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity to place
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Desired position
   *
   * @generated from field: api.v1alpha1.Position position = 3;
   */
  position?: Position;

  /**
   * Entity size if not specified by entity_id
   *
   * @generated from field: double entity_size = 4;
   */
  entitySize: number;

  /**
   * Placement options
   *
   * @generated from field: api.v1alpha1.PlacementOptions options = 5;
   */
  options?: PlacementOptions;
};

/**
 * Describes the message api.v1alpha1.ValidateEntityPlacementRequest.
 * Use `create(ValidateEntityPlacementRequestSchema)` to create a new message.
 */
export const ValidateEntityPlacementRequestSchema: GenMessage<ValidateEntityPlacementRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 9);

/**
 * Options for entity placement
 *
 * @generated from message api.v1alpha1.PlacementOptions
 */
export type PlacementOptions = Message<"api.v1alpha1.PlacementOptions"> & {
  /**
   * Whether to allow overlap with other entities
   *
   * @generated from field: bool allow_entity_overlap = 1;
   */
  allowEntityOverlap: boolean;

  /**
   * Whether to allow placement on difficult terrain
   *
   * @generated from field: bool allow_difficult_terrain = 2;
   */
  allowDifficultTerrain: boolean;

  /**
   * Whether to find nearest valid position if invalid
   *
   * @generated from field: bool find_nearest_valid = 3;
   */
  findNearestValid: boolean;

  /**
   * Maximum distance to search for valid position
   *
   * @generated from field: double max_search_distance = 4;
   */
  maxSearchDistance: number;
};

/**
 * Describes the message api.v1alpha1.PlacementOptions.
 * Use `create(PlacementOptionsSchema)` to create a new message.
 */
export const PlacementOptionsSchema: GenMessage<PlacementOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 10);

/**
 * Entity placement validation response
 *
 * @generated from message api.v1alpha1.ValidateEntityPlacementResponse
 */
export type ValidateEntityPlacementResponse = Message<"api.v1alpha1.ValidateEntityPlacementResponse"> & {
  /**
   * Whether placement is valid
   *
   * @generated from field: bool is_valid = 1;
   */
  isValid: boolean;

  /**
   * Actual placement position (may differ if find_nearest_valid used)
   *
   * @generated from field: api.v1alpha1.Position actual_position = 2;
   */
  actualPosition?: Position;

  /**
   * Overlapping entities if any
   *
   * @generated from field: repeated string overlapping_entities = 3;
   */
  overlappingEntities: string[];

  /**
   * Terrain effects at position
   *
   * @generated from field: repeated api.v1alpha1.TerrainEffect terrain_effects = 4;
   */
  terrainEffects: TerrainEffect[];

  /**
   * Placement errors if invalid
   *
   * @generated from field: repeated api.v1alpha1.RoomError errors = 5;
   */
  errors: RoomError[];

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 6;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.ValidateEntityPlacementResponse.
 * Use `create(ValidateEntityPlacementResponseSchema)` to create a new message.
 */
export const ValidateEntityPlacementResponseSchema: GenMessage<ValidateEntityPlacementResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 11);

/**
 * Range query request
 *
 * @generated from message api.v1alpha1.QueryEntitiesInRangeRequest
 */
export type QueryEntitiesInRangeRequest = Message<"api.v1alpha1.QueryEntitiesInRangeRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Center position
   *
   * @generated from field: api.v1alpha1.Position center_position = 2;
   */
  centerPosition?: Position;

  /**
   * Range radius
   *
   * @generated from field: double range = 3;
   */
  range: number;

  /**
   * Range query options
   *
   * @generated from field: api.v1alpha1.RangeQueryOptions options = 4;
   */
  options?: RangeQueryOptions;
};

/**
 * Describes the message api.v1alpha1.QueryEntitiesInRangeRequest.
 * Use `create(QueryEntitiesInRangeRequestSchema)` to create a new message.
 */
export const QueryEntitiesInRangeRequestSchema: GenMessage<QueryEntitiesInRangeRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 12);

/**
 * Options for range queries
 *
 * @generated from message api.v1alpha1.RangeQueryOptions
 */
export type RangeQueryOptions = Message<"api.v1alpha1.RangeQueryOptions"> & {
  /**
   * Entity types to include
   *
   * @generated from field: repeated string include_entity_types = 1;
   */
  includeEntityTypes: string[];

  /**
   * Entity types to exclude
   *
   * @generated from field: repeated string exclude_entity_types = 2;
   */
  excludeEntityTypes: string[];

  /**
   * Whether to require line of sight
   *
   * @generated from field: bool require_line_of_sight = 3;
   */
  requireLineOfSight: boolean;

  /**
   * Maximum number of entities to return
   *
   * @generated from field: int32 max_results = 4;
   */
  maxResults: number;

  /**
   * Sort order for results
   *
   * @generated from field: api.v1alpha1.RangeSortOrder sort_order = 5;
   */
  sortOrder: RangeSortOrder;
};

/**
 * Describes the message api.v1alpha1.RangeQueryOptions.
 * Use `create(RangeQueryOptionsSchema)` to create a new message.
 */
export const RangeQueryOptionsSchema: GenMessage<RangeQueryOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 13);

/**
 * Range query response
 *
 * @generated from message api.v1alpha1.QueryEntitiesInRangeResponse
 */
export type QueryEntitiesInRangeResponse = Message<"api.v1alpha1.QueryEntitiesInRangeResponse"> & {
  /**
   * Entities found in range
   *
   * @generated from field: repeated api.v1alpha1.EntityRangeResult entities = 1;
   */
  entities: EntityRangeResult[];

  /**
   * Total entities in range (before max_results limit)
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 3;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.QueryEntitiesInRangeResponse.
 * Use `create(QueryEntitiesInRangeResponseSchema)` to create a new message.
 */
export const QueryEntitiesInRangeResponseSchema: GenMessage<QueryEntitiesInRangeResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 14);

/**
 * Entity result with range information
 *
 * @generated from message api.v1alpha1.EntityRangeResult
 */
export type EntityRangeResult = Message<"api.v1alpha1.EntityRangeResult"> & {
  /**
   * Entity information
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Distance from center
   *
   * @generated from field: double distance = 2;
   */
  distance: number;

  /**
   * Direction from center (radians)
   *
   * @generated from field: double direction = 3;
   */
  direction: number;

  /**
   * Whether entity has line of sight to center
   *
   * @generated from field: bool has_line_of_sight = 4;
   */
  hasLineOfSight: boolean;

  /**
   * Cover information
   *
   * @generated from field: api.v1alpha1.CoverInfo cover_info = 5;
   */
  coverInfo?: CoverInfo;
};

/**
 * Describes the message api.v1alpha1.EntityRangeResult.
 * Use `create(EntityRangeResultSchema)` to create a new message.
 */
export const EntityRangeResultSchema: GenMessage<EntityRangeResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 15);

/**
 * Advanced movement path calculation request
 *
 * @generated from message api.v1alpha1.CalculateMovementPathRequest
 */
export type CalculateMovementPathRequest = Message<"api.v1alpha1.CalculateMovementPathRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Entity requesting path
   *
   * @generated from field: string entity_id = 2;
   */
  entityId: string;

  /**
   * Starting position
   *
   * @generated from field: api.v1alpha1.Position from_position = 3;
   */
  fromPosition?: Position;

  /**
   * Target position
   *
   * @generated from field: api.v1alpha1.Position to_position = 4;
   */
  toPosition?: Position;

  /**
   * Pathfinding options
   *
   * @generated from field: api.v1alpha1.PathfindingOptions options = 5;
   */
  options?: PathfindingOptions;
};

/**
 * Describes the message api.v1alpha1.CalculateMovementPathRequest.
 * Use `create(CalculateMovementPathRequestSchema)` to create a new message.
 */
export const CalculateMovementPathRequestSchema: GenMessage<CalculateMovementPathRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 16);

/**
 * Advanced pathfinding options
 *
 * @generated from message api.v1alpha1.PathfindingOptions
 */
export type PathfindingOptions = Message<"api.v1alpha1.PathfindingOptions"> & {
  /**
   * Movement type
   *
   * @generated from field: api.v1alpha1.MovementType movement_type = 1;
   */
  movementType: MovementType;

  /**
   * Entity size
   *
   * @generated from field: double entity_size = 2;
   */
  entitySize: number;

  /**
   * Maximum movement cost
   *
   * @generated from field: double max_cost = 3;
   */
  maxCost: number;

  /**
   * Path preference
   *
   * @generated from field: api.v1alpha1.PathPreference path_preference = 4;
   */
  pathPreference: PathPreference;

  /**
   * Entity types to avoid
   *
   * @generated from field: repeated string avoid_entity_types = 5;
   */
  avoidEntityTypes: string[];

  /**
   * Whether to allow difficult terrain
   *
   * @generated from field: bool allow_difficult_terrain = 6;
   */
  allowDifficultTerrain: boolean;

  /**
   * Number of alternative paths to calculate
   *
   * @generated from field: int32 max_alternatives = 7;
   */
  maxAlternatives: number;

  /**
   * Pathfinding algorithm to use
   *
   * @generated from field: api.v1alpha1.PathfindingAlgorithm algorithm = 8;
   */
  algorithm: PathfindingAlgorithm;
};

/**
 * Describes the message api.v1alpha1.PathfindingOptions.
 * Use `create(PathfindingOptionsSchema)` to create a new message.
 */
export const PathfindingOptionsSchema: GenMessage<PathfindingOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 17);

/**
 * Movement path calculation response
 *
 * @generated from message api.v1alpha1.CalculateMovementPathResponse
 */
export type CalculateMovementPathResponse = Message<"api.v1alpha1.CalculateMovementPathResponse"> & {
  /**
   * Primary path
   *
   * @generated from field: api.v1alpha1.MovementPath path = 1;
   */
  path?: MovementPath;

  /**
   * Whether path reaches destination
   *
   * @generated from field: bool is_complete = 2;
   */
  isComplete: boolean;

  /**
   * All reachable positions within movement range
   *
   * @generated from field: repeated api.v1alpha1.Position reachable_area = 3;
   */
  reachableArea: Position[];

  /**
   * Alternative paths
   *
   * @generated from field: repeated api.v1alpha1.MovementPath alternatives = 4;
   */
  alternatives: MovementPath[];

  /**
   * Pathfinding performance metrics
   *
   * @generated from field: api.v1alpha1.PathfindingStats pathfinding_stats = 5;
   */
  pathfindingStats?: PathfindingStats;
};

/**
 * Describes the message api.v1alpha1.CalculateMovementPathResponse.
 * Use `create(CalculateMovementPathResponseSchema)` to create a new message.
 */
export const CalculateMovementPathResponseSchema: GenMessage<CalculateMovementPathResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 18);

/**
 * Movement path information
 *
 * @generated from message api.v1alpha1.MovementPath
 */
export type MovementPath = Message<"api.v1alpha1.MovementPath"> & {
  /**
   * Path positions
   *
   * @generated from field: repeated api.v1alpha1.Position positions = 1;
   */
  positions: Position[];

  /**
   * Total movement cost
   *
   * @generated from field: double total_cost = 2;
   */
  totalCost: number;

  /**
   * Human-readable path description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Terrain effects along path
   *
   * @generated from field: repeated api.v1alpha1.TerrainEffect terrain_effects = 4;
   */
  terrainEffects: TerrainEffect[];

  /**
   * Path type
   *
   * @generated from field: api.v1alpha1.PathPreference path_type = 5;
   */
  pathType: PathPreference;
};

/**
 * Describes the message api.v1alpha1.MovementPath.
 * Use `create(MovementPathSchema)` to create a new message.
 */
export const MovementPathSchema: GenMessage<MovementPath> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 19);

/**
 * Pathfinding performance statistics
 *
 * @generated from message api.v1alpha1.PathfindingStats
 */
export type PathfindingStats = Message<"api.v1alpha1.PathfindingStats"> & {
  /**
   * Number of nodes explored
   *
   * @generated from field: int32 nodes_explored = 1;
   */
  nodesExplored: number;

  /**
   * Computation time in milliseconds
   *
   * @generated from field: double computation_time_ms = 2;
   */
  computationTimeMs: number;

  /**
   * Algorithm used
   *
   * @generated from field: api.v1alpha1.PathfindingAlgorithm algorithm = 3;
   */
  algorithm: PathfindingAlgorithm;

  /**
   * Cache hit ratio
   *
   * @generated from field: double cache_hit_ratio = 4;
   */
  cacheHitRatio: number;

  /**
   * Memory used for pathfinding
   *
   * @generated from field: int64 memory_bytes = 5;
   */
  memoryBytes: bigint;
};

/**
 * Describes the message api.v1alpha1.PathfindingStats.
 * Use `create(PathfindingStatsSchema)` to create a new message.
 */
export const PathfindingStatsSchema: GenMessage<PathfindingStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 20);

/**
 * Area of effect query request
 *
 * @generated from message api.v1alpha1.QueryAreaOfEffectRequest
 */
export type QueryAreaOfEffectRequest = Message<"api.v1alpha1.QueryAreaOfEffectRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Center of effect
   *
   * @generated from field: api.v1alpha1.Position center_position = 2;
   */
  centerPosition?: Position;

  /**
   * Area of effect definition
   *
   * @generated from field: api.v1alpha1.AreaOfEffectShape shape = 3;
   */
  shape?: AreaOfEffectShape;

  /**
   * Query options
   *
   * @generated from field: api.v1alpha1.AreaOfEffectOptions options = 4;
   */
  options?: AreaOfEffectOptions;
};

/**
 * Describes the message api.v1alpha1.QueryAreaOfEffectRequest.
 * Use `create(QueryAreaOfEffectRequestSchema)` to create a new message.
 */
export const QueryAreaOfEffectRequestSchema: GenMessage<QueryAreaOfEffectRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 21);

/**
 * Area of effect shape definition
 *
 * @generated from message api.v1alpha1.AreaOfEffectShape
 */
export type AreaOfEffectShape = Message<"api.v1alpha1.AreaOfEffectShape"> & {
  /**
   * Shape type
   *
   * @generated from field: api.v1alpha1.AreaOfEffectType shape_type = 1;
   */
  shapeType: AreaOfEffectType;

  /**
   * Shape parameters
   *
   * @generated from oneof api.v1alpha1.AreaOfEffectShape.shape_params
   */
  shapeParams: {
    /**
     * @generated from field: api.v1alpha1.CircleParams circle = 2;
     */
    value: CircleParams;
    case: "circle";
  } | {
    /**
     * @generated from field: api.v1alpha1.ConeParams cone = 3;
     */
    value: ConeParams;
    case: "cone";
  } | {
    /**
     * @generated from field: api.v1alpha1.LineParams line = 4;
     */
    value: LineParams;
    case: "line";
  } | {
    /**
     * @generated from field: api.v1alpha1.RectangleParams rectangle = 5;
     */
    value: RectangleParams;
    case: "rectangle";
  } | {
    /**
     * @generated from field: api.v1alpha1.CustomShapeParams custom = 6;
     */
    value: CustomShapeParams;
    case: "custom";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message api.v1alpha1.AreaOfEffectShape.
 * Use `create(AreaOfEffectShapeSchema)` to create a new message.
 */
export const AreaOfEffectShapeSchema: GenMessage<AreaOfEffectShape> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 22);

/**
 * Circle area parameters
 *
 * @generated from message api.v1alpha1.CircleParams
 */
export type CircleParams = Message<"api.v1alpha1.CircleParams"> & {
  /**
   * @generated from field: double radius = 1;
   */
  radius: number;
};

/**
 * Describes the message api.v1alpha1.CircleParams.
 * Use `create(CircleParamsSchema)` to create a new message.
 */
export const CircleParamsSchema: GenMessage<CircleParams> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 23);

/**
 * Cone area parameters
 *
 * @generated from message api.v1alpha1.ConeParams
 */
export type ConeParams = Message<"api.v1alpha1.ConeParams"> & {
  /**
   * @generated from field: double radius = 1;
   */
  radius: number;

  /**
   * Direction in radians
   *
   * @generated from field: double direction = 2;
   */
  direction: number;

  /**
   * Cone angle in radians
   *
   * @generated from field: double angle = 3;
   */
  angle: number;
};

/**
 * Describes the message api.v1alpha1.ConeParams.
 * Use `create(ConeParamsSchema)` to create a new message.
 */
export const ConeParamsSchema: GenMessage<ConeParams> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 24);

/**
 * Line area parameters
 *
 * @generated from message api.v1alpha1.LineParams
 */
export type LineParams = Message<"api.v1alpha1.LineParams"> & {
  /**
   * @generated from field: double length = 1;
   */
  length: number;

  /**
   * @generated from field: double width = 2;
   */
  width: number;

  /**
   * Direction in radians
   *
   * @generated from field: double direction = 3;
   */
  direction: number;
};

/**
 * Describes the message api.v1alpha1.LineParams.
 * Use `create(LineParamsSchema)` to create a new message.
 */
export const LineParamsSchema: GenMessage<LineParams> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 25);

/**
 * Rectangle area parameters
 *
 * @generated from message api.v1alpha1.RectangleParams
 */
export type RectangleParams = Message<"api.v1alpha1.RectangleParams"> & {
  /**
   * @generated from field: double width = 1;
   */
  width: number;

  /**
   * @generated from field: double height = 2;
   */
  height: number;

  /**
   * Rotation in radians
   *
   * @generated from field: double rotation = 3;
   */
  rotation: number;
};

/**
 * Describes the message api.v1alpha1.RectangleParams.
 * Use `create(RectangleParamsSchema)` to create a new message.
 */
export const RectangleParamsSchema: GenMessage<RectangleParams> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 26);

/**
 * Custom shape parameters
 *
 * @generated from message api.v1alpha1.CustomShapeParams
 */
export type CustomShapeParams = Message<"api.v1alpha1.CustomShapeParams"> & {
  /**
   * @generated from field: repeated api.v1alpha1.Position vertices = 1;
   */
  vertices: Position[];
};

/**
 * Describes the message api.v1alpha1.CustomShapeParams.
 * Use `create(CustomShapeParamsSchema)` to create a new message.
 */
export const CustomShapeParamsSchema: GenMessage<CustomShapeParams> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 27);

/**
 * Area of effect query options
 *
 * @generated from message api.v1alpha1.AreaOfEffectOptions
 */
export type AreaOfEffectOptions = Message<"api.v1alpha1.AreaOfEffectOptions"> & {
  /**
   * Entity types to include
   *
   * @generated from field: repeated string include_entity_types = 1;
   */
  includeEntityTypes: string[];

  /**
   * Whether to require line of sight
   *
   * @generated from field: bool require_line_of_sight = 2;
   */
  requireLineOfSight: boolean;

  /**
   * Whether to exclude center position
   *
   * @generated from field: bool exclude_center = 3;
   */
  excludeCenter: boolean;

  /**
   * Cover calculation rules
   *
   * @generated from field: api.v1alpha1.CoverRules cover_rules = 4;
   */
  coverRules: CoverRules;

  /**
   * Whether to calculate secondary effects
   *
   * @generated from field: bool calculate_secondary_effects = 5;
   */
  calculateSecondaryEffects: boolean;
};

/**
 * Describes the message api.v1alpha1.AreaOfEffectOptions.
 * Use `create(AreaOfEffectOptionsSchema)` to create a new message.
 */
export const AreaOfEffectOptionsSchema: GenMessage<AreaOfEffectOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 28);

/**
 * Area of effect query response
 *
 * @generated from message api.v1alpha1.QueryAreaOfEffectResponse
 */
export type QueryAreaOfEffectResponse = Message<"api.v1alpha1.QueryAreaOfEffectResponse"> & {
  /**
   * Affected entities
   *
   * @generated from field: repeated api.v1alpha1.AreaOfEffectResult affected_entities = 1;
   */
  affectedEntities: AreaOfEffectResult[];

  /**
   * All positions in area of effect
   *
   * @generated from field: repeated api.v1alpha1.Position area_positions = 2;
   */
  areaPositions: Position[];

  /**
   * Total area coverage
   *
   * @generated from field: double total_area = 3;
   */
  totalArea: number;

  /**
   * Effect center position
   *
   * @generated from field: api.v1alpha1.Position effect_center = 4;
   */
  effectCenter?: Position;

  /**
   * Cover analysis results
   *
   * @generated from field: repeated api.v1alpha1.CoverAnalysisResult cover_analysis = 5;
   */
  coverAnalysis: CoverAnalysisResult[];

  /**
   * Secondary effects
   *
   * @generated from field: repeated api.v1alpha1.SecondaryEffect secondary_effects = 6;
   */
  secondaryEffects: SecondaryEffect[];

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 7;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.QueryAreaOfEffectResponse.
 * Use `create(QueryAreaOfEffectResponseSchema)` to create a new message.
 */
export const QueryAreaOfEffectResponseSchema: GenMessage<QueryAreaOfEffectResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 29);

/**
 * Result for entity in area of effect
 *
 * @generated from message api.v1alpha1.AreaOfEffectResult
 */
export type AreaOfEffectResult = Message<"api.v1alpha1.AreaOfEffectResult"> & {
  /**
   * Entity information
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Distance from effect center
   *
   * @generated from field: double distance = 2;
   */
  distance: number;

  /**
   * Whether entity has line of sight to center
   *
   * @generated from field: bool line_of_sight = 3;
   */
  lineOfSight: boolean;

  /**
   * Direction from center (radians)
   *
   * @generated from field: double direction = 4;
   */
  direction: number;

  /**
   * Relative position description
   *
   * @generated from field: string relative_position = 5;
   */
  relativePosition: string;

  /**
   * Cover type affecting entity
   *
   * @generated from field: api.v1alpha1.CoverType cover_type = 6;
   */
  coverType: CoverType;

  /**
   * Cover percentage
   *
   * @generated from field: double cover_percentage = 7;
   */
  coverPercentage: number;

  /**
   * Effect strength after cover (0.0-1.0)
   *
   * @generated from field: double effect_strength = 8;
   */
  effectStrength: number;
};

/**
 * Describes the message api.v1alpha1.AreaOfEffectResult.
 * Use `create(AreaOfEffectResultSchema)` to create a new message.
 */
export const AreaOfEffectResultSchema: GenMessage<AreaOfEffectResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 30);

/**
 * Cover analysis result
 *
 * @generated from message api.v1alpha1.CoverAnalysisResult
 */
export type CoverAnalysisResult = Message<"api.v1alpha1.CoverAnalysisResult"> & {
  /**
   * Position being analyzed
   *
   * @generated from field: api.v1alpha1.Position position = 1;
   */
  position?: Position;

  /**
   * Cover type at position
   *
   * @generated from field: api.v1alpha1.CoverType cover_type = 2;
   */
  coverType: CoverType;

  /**
   * Entity providing cover
   *
   * @generated from field: string cover_source = 3;
   */
  coverSource: string;

  /**
   * Cover percentage
   *
   * @generated from field: double cover_percentage = 4;
   */
  coverPercentage: number;
};

/**
 * Describes the message api.v1alpha1.CoverAnalysisResult.
 * Use `create(CoverAnalysisResultSchema)` to create a new message.
 */
export const CoverAnalysisResultSchema: GenMessage<CoverAnalysisResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 31);

/**
 * Secondary effect from area of effect
 *
 * @generated from message api.v1alpha1.SecondaryEffect
 */
export type SecondaryEffect = Message<"api.v1alpha1.SecondaryEffect"> & {
  /**
   * Effect type
   *
   * "ricochet", "explosion", "chain"
   *
   * @generated from field: string effect_type = 1;
   */
  effectType: string;

  /**
   * Origin position of secondary effect
   *
   * @generated from field: api.v1alpha1.Position origin = 2;
   */
  origin?: Position;

  /**
   * Entities affected by secondary effect
   *
   * @generated from field: repeated string target_entities = 3;
   */
  targetEntities: string[];

  /**
   * Secondary effect intensity
   *
   * @generated from field: double intensity = 4;
   */
  intensity: number;

  /**
   * Description of secondary effect
   *
   * @generated from field: string description = 5;
   */
  description: string;
};

/**
 * Describes the message api.v1alpha1.SecondaryEffect.
 * Use `create(SecondaryEffectSchema)` to create a new message.
 */
export const SecondaryEffectSchema: GenMessage<SecondaryEffect> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 32);

/**
 * Multi-room line of sight request
 *
 * @generated from message api.v1alpha1.QueryMultiRoomLineOfSightRequest
 */
export type QueryMultiRoomLineOfSightRequest = Message<"api.v1alpha1.QueryMultiRoomLineOfSightRequest"> & {
  /**
   * Starting room
   *
   * @generated from field: string from_room_id = 1;
   */
  fromRoomId: string;

  /**
   * Target room (optional, auto-detected if not provided)
   *
   * @generated from field: string to_room_id = 2;
   */
  toRoomId: string;

  /**
   * Source position
   *
   * @generated from field: api.v1alpha1.Position from_position = 3;
   */
  fromPosition?: Position;

  /**
   * Target position
   *
   * @generated from field: api.v1alpha1.Position to_position = 4;
   */
  toPosition?: Position;

  /**
   * Entity performing check
   *
   * @generated from field: string entity_id = 5;
   */
  entityId: string;

  /**
   * Multi-room options
   *
   * @generated from field: api.v1alpha1.MultiRoomOptions options = 6;
   */
  options?: MultiRoomOptions;
};

/**
 * Describes the message api.v1alpha1.QueryMultiRoomLineOfSightRequest.
 * Use `create(QueryMultiRoomLineOfSightRequestSchema)` to create a new message.
 */
export const QueryMultiRoomLineOfSightRequestSchema: GenMessage<QueryMultiRoomLineOfSightRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 33);

/**
 * Options for multi-room queries
 *
 * @generated from message api.v1alpha1.MultiRoomOptions
 */
export type MultiRoomOptions = Message<"api.v1alpha1.MultiRoomOptions"> & {
  /**
   * Entity size
   *
   * @generated from field: double entity_size = 1;
   */
  entitySize: number;

  /**
   * Maximum range across rooms
   *
   * @generated from field: double max_range = 2;
   */
  maxRange: number;

  /**
   * Whether to allow crossing room boundaries
   *
   * @generated from field: bool cross_rooms = 3;
   */
  crossRooms: boolean;

  /**
   * Maximum number of rooms to traverse
   *
   * @generated from field: int32 max_rooms = 4;
   */
  maxRooms: number;
};

/**
 * Describes the message api.v1alpha1.MultiRoomOptions.
 * Use `create(MultiRoomOptionsSchema)` to create a new message.
 */
export const MultiRoomOptionsSchema: GenMessage<MultiRoomOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 34);

/**
 * Multi-room line of sight response
 *
 * @generated from message api.v1alpha1.QueryMultiRoomLineOfSightResponse
 */
export type QueryMultiRoomLineOfSightResponse = Message<"api.v1alpha1.QueryMultiRoomLineOfSightResponse"> & {
  /**
   * Whether line of sight exists across rooms
   *
   * @generated from field: bool has_line_of_sight = 1;
   */
  hasLineOfSight: boolean;

  /**
   * Entity blocking line of sight
   *
   * @generated from field: string blocking_entity_id = 2;
   */
  blockingEntityId: string;

  /**
   * Position where blocked
   *
   * @generated from field: api.v1alpha1.Position blocking_position = 3;
   */
  blockingPosition?: Position;

  /**
   * Rooms crossed in path
   *
   * @generated from field: repeated string rooms_crossed = 4;
   */
  roomsCrossed: string[];

  /**
   * Connection points used (doors, passages)
   *
   * @generated from field: repeated api.v1alpha1.ConnectionPoint connection_points = 5;
   */
  connectionPoints: ConnectionPoint[];

  /**
   * Total distance across rooms
   *
   * @generated from field: double total_distance = 6;
   */
  totalDistance: number;

  /**
   * Path positions across rooms
   *
   * @generated from field: repeated api.v1alpha1.MultiRoomPosition path_positions = 7;
   */
  pathPositions: MultiRoomPosition[];

  /**
   * Query performance metrics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats stats = 8;
   */
  stats?: SpatialQueryStats;
};

/**
 * Describes the message api.v1alpha1.QueryMultiRoomLineOfSightResponse.
 * Use `create(QueryMultiRoomLineOfSightResponseSchema)` to create a new message.
 */
export const QueryMultiRoomLineOfSightResponseSchema: GenMessage<QueryMultiRoomLineOfSightResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 35);

/**
 * Connection point between rooms
 *
 * @generated from message api.v1alpha1.ConnectionPoint
 */
export type ConnectionPoint = Message<"api.v1alpha1.ConnectionPoint"> & {
  /**
   * Room containing connection
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Room connected to
   *
   * @generated from field: string connected_to = 2;
   */
  connectedTo: string;

  /**
   * Position of connection
   *
   * @generated from field: api.v1alpha1.Position position = 3;
   */
  position?: Position;

  /**
   * Type of connection
   *
   * "door", "passage", "window"
   *
   * @generated from field: string connection_type = 4;
   */
  connectionType: string;

  /**
   * Whether connection is blocked
   *
   * @generated from field: bool is_blocked = 5;
   */
  isBlocked: boolean;

  /**
   * Entity blocking connection
   *
   * @generated from field: string blocking_entity = 6;
   */
  blockingEntity: string;
};

/**
 * Describes the message api.v1alpha1.ConnectionPoint.
 * Use `create(ConnectionPointSchema)` to create a new message.
 */
export const ConnectionPointSchema: GenMessage<ConnectionPoint> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 36);

/**
 * Position with room context
 *
 * @generated from message api.v1alpha1.MultiRoomPosition
 */
export type MultiRoomPosition = Message<"api.v1alpha1.MultiRoomPosition"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Position within room
   *
   * @generated from field: api.v1alpha1.Position position = 2;
   */
  position?: Position;
};

/**
 * Describes the message api.v1alpha1.MultiRoomPosition.
 * Use `create(MultiRoomPositionSchema)` to create a new message.
 */
export const MultiRoomPositionSchema: GenMessage<MultiRoomPosition> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 37);

/**
 * Multi-room pathfinding request
 *
 * @generated from message api.v1alpha1.CalculateMultiRoomPathRequest
 */
export type CalculateMultiRoomPathRequest = Message<"api.v1alpha1.CalculateMultiRoomPathRequest"> & {
  /**
   * Starting room
   *
   * @generated from field: string from_room_id = 1;
   */
  fromRoomId: string;

  /**
   * Target room (optional)
   *
   * @generated from field: string to_room_id = 2;
   */
  toRoomId: string;

  /**
   * Starting position
   *
   * @generated from field: api.v1alpha1.Position from_position = 3;
   */
  fromPosition?: Position;

  /**
   * Target position
   *
   * @generated from field: api.v1alpha1.Position to_position = 4;
   */
  toPosition?: Position;

  /**
   * Entity requesting path
   *
   * @generated from field: string entity_id = 5;
   */
  entityId: string;

  /**
   * Multi-room pathfinding options
   *
   * @generated from field: api.v1alpha1.MultiRoomPathfindingOptions options = 6;
   */
  options?: MultiRoomPathfindingOptions;
};

/**
 * Describes the message api.v1alpha1.CalculateMultiRoomPathRequest.
 * Use `create(CalculateMultiRoomPathRequestSchema)` to create a new message.
 */
export const CalculateMultiRoomPathRequestSchema: GenMessage<CalculateMultiRoomPathRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 38);

/**
 * Options for multi-room pathfinding
 *
 * @generated from message api.v1alpha1.MultiRoomPathfindingOptions
 */
export type MultiRoomPathfindingOptions = Message<"api.v1alpha1.MultiRoomPathfindingOptions"> & {
  /**
   * Entity size
   *
   * @generated from field: double entity_size = 1;
   */
  entitySize: number;

  /**
   * Movement type
   *
   * @generated from field: api.v1alpha1.MovementType movement_type = 2;
   */
  movementType: MovementType;

  /**
   * Maximum total cost across rooms
   *
   * @generated from field: double max_total_cost = 3;
   */
  maxTotalCost: number;

  /**
   * Whether to allow door opening
   *
   * @generated from field: bool allow_door_opening = 4;
   */
  allowDoorOpening: boolean;

  /**
   * Whether to prefer known paths
   *
   * @generated from field: bool prefer_known_paths = 5;
   */
  preferKnownPaths: boolean;

  /**
   * Maximum number of rooms to traverse
   *
   * @generated from field: int32 max_rooms = 6;
   */
  maxRooms: number;
};

/**
 * Describes the message api.v1alpha1.MultiRoomPathfindingOptions.
 * Use `create(MultiRoomPathfindingOptionsSchema)` to create a new message.
 */
export const MultiRoomPathfindingOptionsSchema: GenMessage<MultiRoomPathfindingOptions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 39);

/**
 * Multi-room pathfinding response
 *
 * @generated from message api.v1alpha1.CalculateMultiRoomPathResponse
 */
export type CalculateMultiRoomPathResponse = Message<"api.v1alpha1.CalculateMultiRoomPathResponse"> & {
  /**
   * Multi-room path
   *
   * @generated from field: api.v1alpha1.MultiRoomPath path = 1;
   */
  path?: MultiRoomPath;

  /**
   * Whether path is complete
   *
   * @generated from field: bool is_complete = 2;
   */
  isComplete: boolean;

  /**
   * Room transitions required
   *
   * @generated from field: repeated api.v1alpha1.RoomTransition room_transitions = 3;
   */
  roomTransitions: RoomTransition[];

  /**
   * Total distance across rooms
   *
   * @generated from field: double total_distance = 4;
   */
  totalDistance: number;

  /**
   * Estimated time to traverse path
   *
   * @generated from field: double estimated_time_seconds = 5;
   */
  estimatedTimeSeconds: number;

  /**
   * Required actions along path
   *
   * @generated from field: repeated api.v1alpha1.PathAction required_actions = 6;
   */
  requiredActions: PathAction[];

  /**
   * Pathfinding performance metrics
   *
   * @generated from field: api.v1alpha1.PathfindingStats pathfinding_stats = 7;
   */
  pathfindingStats?: PathfindingStats;
};

/**
 * Describes the message api.v1alpha1.CalculateMultiRoomPathResponse.
 * Use `create(CalculateMultiRoomPathResponseSchema)` to create a new message.
 */
export const CalculateMultiRoomPathResponseSchema: GenMessage<CalculateMultiRoomPathResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 40);

/**
 * Multi-room path information
 *
 * @generated from message api.v1alpha1.MultiRoomPath
 */
export type MultiRoomPath = Message<"api.v1alpha1.MultiRoomPath"> & {
  /**
   * Path segments (one per room)
   *
   * @generated from field: repeated api.v1alpha1.PathSegment segments = 1;
   */
  segments: PathSegment[];

  /**
   * Total cost across all segments
   *
   * @generated from field: double total_cost = 2;
   */
  totalCost: number;

  /**
   * Path description
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message api.v1alpha1.MultiRoomPath.
 * Use `create(MultiRoomPathSchema)` to create a new message.
 */
export const MultiRoomPathSchema: GenMessage<MultiRoomPath> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 41);

/**
 * Path segment within a single room
 *
 * @generated from message api.v1alpha1.PathSegment
 */
export type PathSegment = Message<"api.v1alpha1.PathSegment"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Positions within room
   *
   * @generated from field: repeated api.v1alpha1.Position positions = 2;
   */
  positions: Position[];

  /**
   * Entry point to room
   *
   * @generated from field: api.v1alpha1.Position enter_point = 3;
   */
  enterPoint?: Position;

  /**
   * Exit point from room
   *
   * @generated from field: api.v1alpha1.Position exit_point = 4;
   */
  exitPoint?: Position;

  /**
   * Segment cost
   *
   * @generated from field: double segment_cost = 5;
   */
  segmentCost: number;
};

/**
 * Describes the message api.v1alpha1.PathSegment.
 * Use `create(PathSegmentSchema)` to create a new message.
 */
export const PathSegmentSchema: GenMessage<PathSegment> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 42);

/**
 * Room transition information
 *
 * @generated from message api.v1alpha1.RoomTransition
 */
export type RoomTransition = Message<"api.v1alpha1.RoomTransition"> & {
  /**
   * Source room
   *
   * @generated from field: string from_room_id = 1;
   */
  fromRoomId: string;

  /**
   * Target room
   *
   * @generated from field: string to_room_id = 2;
   */
  toRoomId: string;

  /**
   * Connection identifier
   *
   * @generated from field: string connection_id = 3;
   */
  connectionId: string;

  /**
   * Transition position
   *
   * @generated from field: api.v1alpha1.Position position = 4;
   */
  position?: Position;

  /**
   * Transition type
   *
   * @generated from field: string transition_type = 5;
   */
  transitionType: string;

  /**
   * Required action for transition
   *
   * @generated from field: string required_action = 6;
   */
  requiredAction: string;
};

/**
 * Describes the message api.v1alpha1.RoomTransition.
 * Use `create(RoomTransitionSchema)` to create a new message.
 */
export const RoomTransitionSchema: GenMessage<RoomTransition> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 43);

/**
 * Action required along path
 *
 * @generated from message api.v1alpha1.PathAction
 */
export type PathAction = Message<"api.v1alpha1.PathAction"> & {
  /**
   * Action type
   *
   * "open_door", "climb", "jump"
   *
   * @generated from field: string action_type = 1;
   */
  actionType: string;

  /**
   * Action position
   *
   * @generated from field: api.v1alpha1.Position position = 2;
   */
  position?: Position;

  /**
   * Target for action
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Action difficulty
   *
   * "trivial", "easy", "hard"
   *
   * @generated from field: string difficulty = 4;
   */
  difficulty: string;

  /**
   * Time required for action
   *
   * @generated from field: double time_seconds = 5;
   */
  timeSeconds: number;

  /**
   * Action description
   *
   * @generated from field: string description = 6;
   */
  description: string;
};

/**
 * Describes the message api.v1alpha1.PathAction.
 * Use `create(PathActionSchema)` to create a new message.
 */
export const PathActionSchema: GenMessage<PathAction> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 44);

/**
 * Spatial index query request
 *
 * @generated from message api.v1alpha1.QuerySpatialIndexRequest
 */
export type QuerySpatialIndexRequest = Message<"api.v1alpha1.QuerySpatialIndexRequest"> & {
  /**
   * Room identifier
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Index type to use
   *
   * @generated from field: api.v1alpha1.SpatialIndexType index_type = 2;
   */
  indexType: SpatialIndexType;

  /**
   * Query bounding box
   *
   * @generated from field: api.v1alpha1.BoundingBox bounding_box = 3;
   */
  boundingBox?: BoundingBox;

  /**
   * Entity types to include
   *
   * @generated from field: repeated string entity_types = 4;
   */
  entityTypes: string[];

  /**
   * Entity tags to match
   *
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * Query precision
   *
   * @generated from field: api.v1alpha1.QueryPrecision precision = 6;
   */
  precision: QueryPrecision;
};

/**
 * Describes the message api.v1alpha1.QuerySpatialIndexRequest.
 * Use `create(QuerySpatialIndexRequestSchema)` to create a new message.
 */
export const QuerySpatialIndexRequestSchema: GenMessage<QuerySpatialIndexRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 45);

/**
 * Bounding box for spatial queries
 *
 * @generated from message api.v1alpha1.BoundingBox
 */
export type BoundingBox = Message<"api.v1alpha1.BoundingBox"> & {
  /**
   * @generated from field: double min_x = 1;
   */
  minX: number;

  /**
   * @generated from field: double min_y = 2;
   */
  minY: number;

  /**
   * @generated from field: double max_x = 3;
   */
  maxX: number;

  /**
   * @generated from field: double max_y = 4;
   */
  maxY: number;
};

/**
 * Describes the message api.v1alpha1.BoundingBox.
 * Use `create(BoundingBoxSchema)` to create a new message.
 */
export const BoundingBoxSchema: GenMessage<BoundingBox> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 46);

/**
 * Spatial index query response
 *
 * @generated from message api.v1alpha1.QuerySpatialIndexResponse
 */
export type QuerySpatialIndexResponse = Message<"api.v1alpha1.QuerySpatialIndexResponse"> & {
  /**
   * Entities found in query
   *
   * @generated from field: repeated api.v1alpha1.EntityIndexResult entities = 1;
   */
  entities: EntityIndexResult[];

  /**
   * Index performance statistics
   *
   * @generated from field: api.v1alpha1.IndexStats index_stats = 2;
   */
  indexStats?: IndexStats;

  /**
   * Query region
   *
   * @generated from field: api.v1alpha1.BoundingBox query_region = 3;
   */
  queryRegion?: BoundingBox;

  /**
   * Total candidates before filtering
   *
   * @generated from field: int32 total_candidates = 4;
   */
  totalCandidates: number;

  /**
   * Results after filtering
   *
   * @generated from field: int32 filtered_results = 5;
   */
  filteredResults: number;
};

/**
 * Describes the message api.v1alpha1.QuerySpatialIndexResponse.
 * Use `create(QuerySpatialIndexResponseSchema)` to create a new message.
 */
export const QuerySpatialIndexResponseSchema: GenMessage<QuerySpatialIndexResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 47);

/**
 * Entity result from spatial index
 *
 * @generated from message api.v1alpha1.EntityIndexResult
 */
export type EntityIndexResult = Message<"api.v1alpha1.EntityIndexResult"> & {
  /**
   * Entity information
   *
   * @generated from field: api.v1alpha1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * Distance from query center
   *
   * @generated from field: double distance = 2;
   */
  distance: number;

  /**
   * Whether entity exactly matches query bounds
   *
   * @generated from field: bool exact_match = 3;
   */
  exactMatch: boolean;

  /**
   * Entity bounding box
   *
   * @generated from field: api.v1alpha1.BoundingBox entity_bounds = 4;
   */
  entityBounds?: BoundingBox;
};

/**
 * Describes the message api.v1alpha1.EntityIndexResult.
 * Use `create(EntityIndexResultSchema)` to create a new message.
 */
export const EntityIndexResultSchema: GenMessage<EntityIndexResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 48);

/**
 * Spatial index performance statistics
 *
 * @generated from message api.v1alpha1.IndexStats
 */
export type IndexStats = Message<"api.v1alpha1.IndexStats"> & {
  /**
   * Index type used
   *
   * @generated from field: api.v1alpha1.SpatialIndexType index_type = 1;
   */
  indexType: SpatialIndexType;

  /**
   * Time to build index
   *
   * @generated from field: double build_time_ms = 2;
   */
  buildTimeMs: number;

  /**
   * Time to execute query
   *
   * @generated from field: double query_time_ms = 3;
   */
  queryTimeMs: number;

  /**
   * Cache hit ratio
   *
   * @generated from field: double cache_hit_ratio = 4;
   */
  cacheHitRatio: number;

  /**
   * Index memory usage
   *
   * @generated from field: int64 index_memory_bytes = 5;
   */
  indexMemoryBytes: bigint;

  /**
   * When index was last updated
   *
   * @generated from field: int64 last_updated = 6;
   */
  lastUpdated: bigint;
};

/**
 * Describes the message api.v1alpha1.IndexStats.
 * Use `create(IndexStatsSchema)` to create a new message.
 */
export const IndexStatsSchema: GenMessage<IndexStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 49);

/**
 * Spatial statistics request
 *
 * @generated from message api.v1alpha1.GetSpatialStatsRequest
 */
export type GetSpatialStatsRequest = Message<"api.v1alpha1.GetSpatialStatsRequest"> & {
  /**
   * Room identifier (optional, for room-specific stats)
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Time range for statistics
   *
   * @generated from field: api.v1alpha1.TimeRange time_range = 2;
   */
  timeRange?: TimeRange;
};

/**
 * Describes the message api.v1alpha1.GetSpatialStatsRequest.
 * Use `create(GetSpatialStatsRequestSchema)` to create a new message.
 */
export const GetSpatialStatsRequestSchema: GenMessage<GetSpatialStatsRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 50);

/**
 * Time range for statistics
 *
 * @generated from message api.v1alpha1.TimeRange
 */
export type TimeRange = Message<"api.v1alpha1.TimeRange"> & {
  /**
   * @generated from field: int64 start_time = 1;
   */
  startTime: bigint;

  /**
   * @generated from field: int64 end_time = 2;
   */
  endTime: bigint;
};

/**
 * Describes the message api.v1alpha1.TimeRange.
 * Use `create(TimeRangeSchema)` to create a new message.
 */
export const TimeRangeSchema: GenMessage<TimeRange> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 51);

/**
 * Spatial statistics response
 *
 * @generated from message api.v1alpha1.GetSpatialStatsResponse
 */
export type GetSpatialStatsResponse = Message<"api.v1alpha1.GetSpatialStatsResponse"> & {
  /**
   * Overall spatial query statistics
   *
   * @generated from field: api.v1alpha1.SpatialQueryStats overall_stats = 1;
   */
  overallStats?: SpatialQueryStats;

  /**
   * Statistics by query type
   *
   * @generated from field: map<string, api.v1alpha1.SpatialQueryStats> stats_by_type = 2;
   */
  statsByType: { [key: string]: SpatialQueryStats };

  /**
   * Cache performance statistics
   *
   * @generated from field: api.v1alpha1.CacheStats cache_stats = 3;
   */
  cacheStats?: CacheStats;

  /**
   * Index performance statistics
   *
   * @generated from field: map<string, api.v1alpha1.IndexStats> index_stats = 4;
   */
  indexStats: { [key: string]: IndexStats };
};

/**
 * Describes the message api.v1alpha1.GetSpatialStatsResponse.
 * Use `create(GetSpatialStatsResponseSchema)` to create a new message.
 */
export const GetSpatialStatsResponseSchema: GenMessage<GetSpatialStatsResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 52);

/**
 * Cache performance statistics
 *
 * @generated from message api.v1alpha1.CacheStats
 */
export type CacheStats = Message<"api.v1alpha1.CacheStats"> & {
  /**
   * Overall cache hit ratio
   *
   * @generated from field: double hit_ratio = 1;
   */
  hitRatio: number;

  /**
   * Number of cache hits
   *
   * @generated from field: int64 hits = 2;
   */
  hits: bigint;

  /**
   * Number of cache misses
   *
   * @generated from field: int64 misses = 3;
   */
  misses: bigint;

  /**
   * Cache size in bytes
   *
   * @generated from field: int64 size_bytes = 4;
   */
  sizeBytes: bigint;

  /**
   * Number of cached entries
   *
   * @generated from field: int32 entry_count = 5;
   */
  entryCount: number;
};

/**
 * Describes the message api.v1alpha1.CacheStats.
 * Use `create(CacheStatsSchema)` to create a new message.
 */
export const CacheStatsSchema: GenMessage<CacheStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 53);

/**
 * Cache invalidation request
 *
 * @generated from message api.v1alpha1.InvalidateSpatialCacheRequest
 */
export type InvalidateSpatialCacheRequest = Message<"api.v1alpha1.InvalidateSpatialCacheRequest"> & {
  /**
   * Room identifier (optional, for room-specific invalidation)
   *
   * @generated from field: string room_id = 1;
   */
  roomId: string;

  /**
   * Cache types to invalidate
   *
   * @generated from field: repeated api.v1alpha1.CacheType cache_types = 2;
   */
  cacheTypes: CacheType[];

  /**
   * Whether to invalidate all caches
   *
   * @generated from field: bool invalidate_all = 3;
   */
  invalidateAll: boolean;
};

/**
 * Describes the message api.v1alpha1.InvalidateSpatialCacheRequest.
 * Use `create(InvalidateSpatialCacheRequestSchema)` to create a new message.
 */
export const InvalidateSpatialCacheRequestSchema: GenMessage<InvalidateSpatialCacheRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 54);

/**
 * Cache invalidation response
 *
 * @generated from message api.v1alpha1.InvalidateSpatialCacheResponse
 */
export type InvalidateSpatialCacheResponse = Message<"api.v1alpha1.InvalidateSpatialCacheResponse"> & {
  /**
   * Confirmation message
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Number of cache entries invalidated
   *
   * @generated from field: int32 entries_invalidated = 2;
   */
  entriesInvalidated: number;

  /**
   * Memory freed in bytes
   *
   * @generated from field: int64 memory_freed_bytes = 3;
   */
  memoryFreedBytes: bigint;
};

/**
 * Describes the message api.v1alpha1.InvalidateSpatialCacheResponse.
 * Use `create(InvalidateSpatialCacheResponseSchema)` to create a new message.
 */
export const InvalidateSpatialCacheResponseSchema: GenMessage<InvalidateSpatialCacheResponse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 55);

/**
 * Performance metrics for spatial queries
 *
 * @generated from message api.v1alpha1.SpatialQueryStats
 */
export type SpatialQueryStats = Message<"api.v1alpha1.SpatialQueryStats"> & {
  /**
   * Query execution time
   *
   * @generated from field: double execution_time_ms = 1;
   */
  executionTimeMs: number;

  /**
   * Number of entities processed
   *
   * @generated from field: int32 entities_processed = 2;
   */
  entitiesProcessed: number;

  /**
   * Cache hit ratio for this query
   *
   * @generated from field: double cache_hit_ratio = 3;
   */
  cacheHitRatio: number;

  /**
   * Memory used for query
   *
   * @generated from field: int64 memory_bytes = 4;
   */
  memoryBytes: bigint;

  /**
   * Number of spatial calculations performed
   *
   * @generated from field: int32 calculations_performed = 5;
   */
  calculationsPerformed: number;
};

/**
 * Describes the message api.v1alpha1.SpatialQueryStats.
 * Use `create(SpatialQueryStatsSchema)` to create a new message.
 */
export const SpatialQueryStatsSchema: GenMessage<SpatialQueryStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_spatial, 56);

/**
 * Types of cover
 *
 * @generated from enum api.v1alpha1.CoverType
 */
export enum CoverType {
  /**
   * @generated from enum value: COVER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COVER_TYPE_NONE = 1;
   */
  NONE = 1,

  /**
   * @generated from enum value: COVER_TYPE_PARTIAL = 2;
   */
  PARTIAL = 2,

  /**
   * @generated from enum value: COVER_TYPE_HALF = 3;
   */
  HALF = 3,

  /**
   * @generated from enum value: COVER_TYPE_THREE_QUARTERS = 4;
   */
  THREE_QUARTERS = 4,

  /**
   * @generated from enum value: COVER_TYPE_FULL = 5;
   */
  FULL = 5,
}

/**
 * Describes the enum api.v1alpha1.CoverType.
 */
export const CoverTypeSchema: GenEnum<CoverType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 0);

/**
 * Types of movement
 *
 * @generated from enum api.v1alpha1.MovementType
 */
export enum MovementType {
  /**
   * @generated from enum value: MOVEMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MOVEMENT_TYPE_WALK = 1;
   */
  WALK = 1,

  /**
   * @generated from enum value: MOVEMENT_TYPE_RUN = 2;
   */
  RUN = 2,

  /**
   * @generated from enum value: MOVEMENT_TYPE_FLY = 3;
   */
  FLY = 3,

  /**
   * @generated from enum value: MOVEMENT_TYPE_SWIM = 4;
   */
  SWIM = 4,

  /**
   * @generated from enum value: MOVEMENT_TYPE_CLIMB = 5;
   */
  CLIMB = 5,

  /**
   * @generated from enum value: MOVEMENT_TYPE_BURROW = 6;
   */
  BURROW = 6,

  /**
   * @generated from enum value: MOVEMENT_TYPE_TELEPORT = 7;
   */
  TELEPORT = 7,
}

/**
 * Describes the enum api.v1alpha1.MovementType.
 */
export const MovementTypeSchema: GenEnum<MovementType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 1);

/**
 * Sort order for range query results
 *
 * @generated from enum api.v1alpha1.RangeSortOrder
 */
export enum RangeSortOrder {
  /**
   * @generated from enum value: RANGE_SORT_ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RANGE_SORT_ORDER_DISTANCE_ASC = 1;
   */
  DISTANCE_ASC = 1,

  /**
   * @generated from enum value: RANGE_SORT_ORDER_DISTANCE_DESC = 2;
   */
  DISTANCE_DESC = 2,

  /**
   * @generated from enum value: RANGE_SORT_ORDER_SIZE_ASC = 3;
   */
  SIZE_ASC = 3,

  /**
   * @generated from enum value: RANGE_SORT_ORDER_SIZE_DESC = 4;
   */
  SIZE_DESC = 4,
}

/**
 * Describes the enum api.v1alpha1.RangeSortOrder.
 */
export const RangeSortOrderSchema: GenEnum<RangeSortOrder> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 2);

/**
 * Path preference types
 *
 * @generated from enum api.v1alpha1.PathPreference
 */
export enum PathPreference {
  /**
   * @generated from enum value: PATH_PREFERENCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Shortest/lowest cost path
   *
   * @generated from enum value: PATH_PREFERENCE_OPTIMAL = 1;
   */
  OPTIMAL = 1,

  /**
   * Avoid hazards and enemies
   *
   * @generated from enum value: PATH_PREFERENCE_SAFE = 2;
   */
  SAFE = 2,

  /**
   * Most direct route
   *
   * @generated from enum value: PATH_PREFERENCE_DIRECT = 3;
   */
  DIRECT = 3,

  /**
   * Maximize cover from enemies
   *
   * @generated from enum value: PATH_PREFERENCE_COVER = 4;
   */
  COVER = 4,
}

/**
 * Describes the enum api.v1alpha1.PathPreference.
 */
export const PathPreferenceSchema: GenEnum<PathPreference> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 3);

/**
 * Pathfinding algorithms
 *
 * @generated from enum api.v1alpha1.PathfindingAlgorithm
 */
export enum PathfindingAlgorithm {
  /**
   * @generated from enum value: PATHFINDING_ALGORITHM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PATHFINDING_ALGORITHM_A_STAR = 1;
   */
  A_STAR = 1,

  /**
   * @generated from enum value: PATHFINDING_ALGORITHM_DIJKSTRA = 2;
   */
  DIJKSTRA = 2,

  /**
   * @generated from enum value: PATHFINDING_ALGORITHM_JUMP_POINT = 3;
   */
  JUMP_POINT = 3,

  /**
   * @generated from enum value: PATHFINDING_ALGORITHM_HIERARCHICAL = 4;
   */
  HIERARCHICAL = 4,
}

/**
 * Describes the enum api.v1alpha1.PathfindingAlgorithm.
 */
export const PathfindingAlgorithmSchema: GenEnum<PathfindingAlgorithm> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 4);

/**
 * Area of effect types
 *
 * @generated from enum api.v1alpha1.AreaOfEffectType
 */
export enum AreaOfEffectType {
  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_CIRCLE = 1;
   */
  CIRCLE = 1,

  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_CONE = 2;
   */
  CONE = 2,

  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_LINE = 3;
   */
  LINE = 3,

  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_RECTANGLE = 4;
   */
  RECTANGLE = 4,

  /**
   * @generated from enum value: AREA_OF_EFFECT_TYPE_CUSTOM = 5;
   */
  CUSTOM = 5,
}

/**
 * Describes the enum api.v1alpha1.AreaOfEffectType.
 */
export const AreaOfEffectTypeSchema: GenEnum<AreaOfEffectType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 5);

/**
 * Cover calculation rules
 *
 * @generated from enum api.v1alpha1.CoverRules
 */
export enum CoverRules {
  /**
   * @generated from enum value: COVER_RULES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Any cover blocks effect
   *
   * @generated from enum value: COVER_RULES_STRICT = 1;
   */
  STRICT = 1,

  /**
   * Partial cover reduces effect
   *
   * @generated from enum value: COVER_RULES_PARTIAL = 2;
   */
  PARTIAL = 2,

  /**
   * Ignore cover completely
   *
   * @generated from enum value: COVER_RULES_IGNORE = 3;
   */
  IGNORE = 3,
}

/**
 * Describes the enum api.v1alpha1.CoverRules.
 */
export const CoverRulesSchema: GenEnum<CoverRules> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 6);

/**
 * Spatial index types
 *
 * @generated from enum api.v1alpha1.SpatialIndexType
 */
export enum SpatialIndexType {
  /**
   * @generated from enum value: SPATIAL_INDEX_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SPATIAL_INDEX_TYPE_QUADTREE = 1;
   */
  QUADTREE = 1,

  /**
   * @generated from enum value: SPATIAL_INDEX_TYPE_R_TREE = 2;
   */
  R_TREE = 2,

  /**
   * @generated from enum value: SPATIAL_INDEX_TYPE_GRID = 3;
   */
  GRID = 3,

  /**
   * Choose best index automatically
   *
   * @generated from enum value: SPATIAL_INDEX_TYPE_AUTO = 4;
   */
  AUTO = 4,
}

/**
 * Describes the enum api.v1alpha1.SpatialIndexType.
 */
export const SpatialIndexTypeSchema: GenEnum<SpatialIndexType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 7);

/**
 * Query precision levels
 *
 * @generated from enum api.v1alpha1.QueryPrecision
 */
export enum QueryPrecision {
  /**
   * @generated from enum value: QUERY_PRECISION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Fast but may have false positives
   *
   * @generated from enum value: QUERY_PRECISION_FAST = 1;
   */
  FAST = 1,

  /**
   * Balance of speed and accuracy
   *
   * @generated from enum value: QUERY_PRECISION_ACCURATE = 2;
   */
  ACCURATE = 2,

  /**
   * Slow but completely accurate
   *
   * @generated from enum value: QUERY_PRECISION_EXHAUSTIVE = 3;
   */
  EXHAUSTIVE = 3,
}

/**
 * Describes the enum api.v1alpha1.QueryPrecision.
 */
export const QueryPrecisionSchema: GenEnum<QueryPrecision> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 8);

/**
 * Cache types for invalidation
 *
 * @generated from enum api.v1alpha1.CacheType
 */
export enum CacheType {
  /**
   * @generated from enum value: CACHE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CACHE_TYPE_SPATIAL_INDEX = 1;
   */
  SPATIAL_INDEX = 1,

  /**
   * @generated from enum value: CACHE_TYPE_QUERY_RESULTS = 2;
   */
  QUERY_RESULTS = 2,

  /**
   * @generated from enum value: CACHE_TYPE_ROOM_STRUCTURE = 3;
   */
  ROOM_STRUCTURE = 3,

  /**
   * @generated from enum value: CACHE_TYPE_PATHFINDING = 4;
   */
  PATHFINDING = 4,
}

/**
 * Describes the enum api.v1alpha1.CacheType.
 */
export const CacheTypeSchema: GenEnum<CacheType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_spatial, 9);

/**
 * Spatial query service for tactical gameplay operations
 * Handles line of sight, movement, pathfinding, and area effects
 *
 * @generated from service api.v1alpha1.SpatialService
 */
export const SpatialService: GenService<{
  /**
   * Basic spatial queries (Phase 2)
   *
   * @generated from rpc api.v1alpha1.SpatialService.QueryLineOfSight
   */
  queryLineOfSight: {
    methodKind: "unary";
    input: typeof QueryLineOfSightRequestSchema;
    output: typeof QueryLineOfSightResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.ValidateMovement
   */
  validateMovement: {
    methodKind: "unary";
    input: typeof ValidateMovementRequestSchema;
    output: typeof ValidateMovementResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.ValidateEntityPlacement
   */
  validateEntityPlacement: {
    methodKind: "unary";
    input: typeof ValidateEntityPlacementRequestSchema;
    output: typeof ValidateEntityPlacementResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.QueryEntitiesInRange
   */
  queryEntitiesInRange: {
    methodKind: "unary";
    input: typeof QueryEntitiesInRangeRequestSchema;
    output: typeof QueryEntitiesInRangeResponseSchema;
  },
  /**
   * Advanced spatial queries (Phase 4)
   *
   * @generated from rpc api.v1alpha1.SpatialService.CalculateMovementPath
   */
  calculateMovementPath: {
    methodKind: "unary";
    input: typeof CalculateMovementPathRequestSchema;
    output: typeof CalculateMovementPathResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.QueryAreaOfEffect
   */
  queryAreaOfEffect: {
    methodKind: "unary";
    input: typeof QueryAreaOfEffectRequestSchema;
    output: typeof QueryAreaOfEffectResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.QueryMultiRoomLineOfSight
   */
  queryMultiRoomLineOfSight: {
    methodKind: "unary";
    input: typeof QueryMultiRoomLineOfSightRequestSchema;
    output: typeof QueryMultiRoomLineOfSightResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.CalculateMultiRoomPath
   */
  calculateMultiRoomPath: {
    methodKind: "unary";
    input: typeof CalculateMultiRoomPathRequestSchema;
    output: typeof CalculateMultiRoomPathResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.QuerySpatialIndex
   */
  querySpatialIndex: {
    methodKind: "unary";
    input: typeof QuerySpatialIndexRequestSchema;
    output: typeof QuerySpatialIndexResponseSchema;
  },
  /**
   * Spatial optimization and analytics
   *
   * @generated from rpc api.v1alpha1.SpatialService.GetSpatialStats
   */
  getSpatialStats: {
    methodKind: "unary";
    input: typeof GetSpatialStatsRequestSchema;
    output: typeof GetSpatialStatsResponseSchema;
  },
  /**
   * @generated from rpc api.v1alpha1.SpatialService.InvalidateSpatialCache
   */
  invalidateSpatialCache: {
    methodKind: "unary";
    input: typeof InvalidateSpatialCacheRequestSchema;
    output: typeof InvalidateSpatialCacheResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_api_v1alpha1_room_spatial, 0);

