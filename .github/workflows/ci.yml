name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
      
      - name: Lint
        run: buf lint
      
      - name: Format check
        run: buf format --diff --exit-code
      
      - name: Breaking change detection
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: buf breaking --against "https://github.com/${{ github.repository }}.git#branch=main"

  generate-and-test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
      
      - name: Install mockgen
        run: go install github.com/golang/mock/mockgen@latest
      
      - name: Generate code
        run: buf generate
      
      - name: Generate mocks
        run: |
          # Generate mocks for gRPC services
          mkdir -p gen/go/clients/dnd5e/api/v1alpha1/mocks
          mockgen -source=gen/go/clients/dnd5e/api/v1alpha1/character_grpc.pb.go -destination=gen/go/clients/dnd5e/api/v1alpha1/mocks/character_service.go -package=mocks
      
      - name: Verify Go generation
        run: |
          cd gen/go
          # Just verify the files were generated correctly
          find . -name "*.pb.go" -o -name "*.connect.go" | head -10
          echo "✓ Go files generated successfully"
      
      - name: Install TypeScript dependencies
        run: npm ci
      
      - name: Test TypeScript compilation
        run: |
          npx tsc --noEmit --project tsconfig.json
      
      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-code
          path: gen/

  publish-packages:
    runs-on: ubuntu-latest
    needs: [lint-and-format, generate-and-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
      
      - name: Install mockgen
        run: go install github.com/golang/mock/mockgen@latest
      
      - name: Generate all code
        run: |
          buf generate
          mkdir -p gen/go/clients/dnd5e/api/v1alpha1/mocks
          mockgen -source=gen/go/clients/dnd5e/api/v1alpha1/character_grpc.pb.go -destination=gen/go/clients/dnd5e/api/v1alpha1/mocks/character_service.go -package=mocks
      
      - name: Setup Go module
        run: |
          cd gen/go
          go mod init clients
          go mod tidy
      
      - name: Create release branch
        run: |
          # Create or update release branch with generated code
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create release branch
          git checkout -B generated
          
          # Remove gen/ from gitignore temporarily
          sed '/^gen\/$/d' .gitignore > .gitignore.tmp && mv .gitignore.tmp .gitignore
          
          # Add generated code
          git add gen/
          git add .gitignore
          
          # Commit if there are changes
          git diff --staged --quiet || git commit -m "chore: update generated code and mocks"
          
          # Push release branch
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git generated --force
          
          # Fetch all tags from origin
          git fetch --tags origin
          
          # Get the latest tag and increment
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -1 || echo "v0.0.0")
          if [ -z "$LATEST_TAG" ]; then LATEST_TAG="v0.0.0"; fi
          NEW_TAG=$(echo $LATEST_TAG | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          
          echo "Latest tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"
          
          # Create and push tag on the generated branch (we're already on it)
          git tag -a $NEW_TAG -m "Generated code for $NEW_TAG"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $NEW_TAG
          
          # Export tag for later steps
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      
      # Add this step when implementing connectrc
      - name: Wait for Go proxy and use connectrc
        if: false  # Change to true when ready to use
        run: |
          echo "Waiting for Go proxy to index $NEW_TAG..."
          
          # Retry logic for Go proxy
          MAX_ATTEMPTS=30
          SLEEP_TIME=10
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS..."
            
            if go list -m github.com/${{ github.repository }}@$NEW_TAG >/dev/null 2>&1; then
              echo "✓ Module is available in Go proxy!"
              break
            fi
            
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "❌ Module not available after $MAX_ATTEMPTS attempts"
              exit 1
            fi
            
            echo "Module not yet available, waiting ${SLEEP_TIME}s..."
            sleep $SLEEP_TIME
          done
          
          # Now safe to use connectrc
          # Add your connectrc commands here that do go get github.com/${{ github.repository }}@$NEW_TAG
      
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
      
      - name: Publish to npm
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Copy generated TypeScript to package root
          cp -r gen/ts/* .
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}