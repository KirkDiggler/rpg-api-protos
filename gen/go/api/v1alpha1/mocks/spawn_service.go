// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/api/v1alpha1/room_spawn_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/KirkDiggler/rpg-api-protos/gen/go/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSpawnServiceClient is a mock of SpawnServiceClient interface.
type MockSpawnServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpawnServiceClientMockRecorder
}

// MockSpawnServiceClientMockRecorder is the mock recorder for MockSpawnServiceClient.
type MockSpawnServiceClientMockRecorder struct {
	mock *MockSpawnServiceClient
}

// NewMockSpawnServiceClient creates a new mock instance.
func NewMockSpawnServiceClient(ctrl *gomock.Controller) *MockSpawnServiceClient {
	mock := &MockSpawnServiceClient{ctrl: ctrl}
	mock.recorder = &MockSpawnServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpawnServiceClient) EXPECT() *MockSpawnServiceClientMockRecorder {
	return m.recorder
}

// BatchMoveEntities mocks base method.
func (m *MockSpawnServiceClient) BatchMoveEntities(ctx context.Context, in *v1alpha1.BatchMoveEntitiesRequest, opts ...grpc.CallOption) (*v1alpha1.BatchMoveEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchMoveEntities", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BatchMoveEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchMoveEntities indicates an expected call of BatchMoveEntities.
func (mr *MockSpawnServiceClientMockRecorder) BatchMoveEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMoveEntities", reflect.TypeOf((*MockSpawnServiceClient)(nil).BatchMoveEntities), varargs...)
}

// BatchRemoveEntities mocks base method.
func (m *MockSpawnServiceClient) BatchRemoveEntities(ctx context.Context, in *v1alpha1.BatchRemoveEntitiesRequest, opts ...grpc.CallOption) (*v1alpha1.BatchRemoveEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRemoveEntities", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BatchRemoveEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRemoveEntities indicates an expected call of BatchRemoveEntities.
func (mr *MockSpawnServiceClientMockRecorder) BatchRemoveEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRemoveEntities", reflect.TypeOf((*MockSpawnServiceClient)(nil).BatchRemoveEntities), varargs...)
}

// BatchSpawnEntities mocks base method.
func (m *MockSpawnServiceClient) BatchSpawnEntities(ctx context.Context, in *v1alpha1.BatchSpawnEntitiesRequest, opts ...grpc.CallOption) (*v1alpha1.BatchSpawnEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSpawnEntities", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BatchSpawnEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSpawnEntities indicates an expected call of BatchSpawnEntities.
func (mr *MockSpawnServiceClientMockRecorder) BatchSpawnEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSpawnEntities", reflect.TypeOf((*MockSpawnServiceClient)(nil).BatchSpawnEntities), varargs...)
}

// CreateSpawnTemplate mocks base method.
func (m *MockSpawnServiceClient) CreateSpawnTemplate(ctx context.Context, in *v1alpha1.CreateSpawnTemplateRequest, opts ...grpc.CallOption) (*v1alpha1.CreateSpawnTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpawnTemplate", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateSpawnTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpawnTemplate indicates an expected call of CreateSpawnTemplate.
func (mr *MockSpawnServiceClientMockRecorder) CreateSpawnTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpawnTemplate", reflect.TypeOf((*MockSpawnServiceClient)(nil).CreateSpawnTemplate), varargs...)
}

// FindEntitiesByType mocks base method.
func (m *MockSpawnServiceClient) FindEntitiesByType(ctx context.Context, in *v1alpha1.FindEntitiesByTypeRequest, opts ...grpc.CallOption) (*v1alpha1.FindEntitiesByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindEntitiesByType", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FindEntitiesByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntitiesByType indicates an expected call of FindEntitiesByType.
func (mr *MockSpawnServiceClientMockRecorder) FindEntitiesByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntitiesByType", reflect.TypeOf((*MockSpawnServiceClient)(nil).FindEntitiesByType), varargs...)
}

// GetEntity mocks base method.
func (m *MockSpawnServiceClient) GetEntity(ctx context.Context, in *v1alpha1.GetEntityRequest, opts ...grpc.CallOption) (*v1alpha1.GetEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockSpawnServiceClientMockRecorder) GetEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockSpawnServiceClient)(nil).GetEntity), varargs...)
}

// GetSpawnTemplate mocks base method.
func (m *MockSpawnServiceClient) GetSpawnTemplate(ctx context.Context, in *v1alpha1.GetSpawnTemplateRequest, opts ...grpc.CallOption) (*v1alpha1.GetSpawnTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpawnTemplate", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSpawnTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpawnTemplate indicates an expected call of GetSpawnTemplate.
func (mr *MockSpawnServiceClientMockRecorder) GetSpawnTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpawnTemplate", reflect.TypeOf((*MockSpawnServiceClient)(nil).GetSpawnTemplate), varargs...)
}

// ListEntities mocks base method.
func (m *MockSpawnServiceClient) ListEntities(ctx context.Context, in *v1alpha1.ListEntitiesRequest, opts ...grpc.CallOption) (*v1alpha1.ListEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntities", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockSpawnServiceClientMockRecorder) ListEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockSpawnServiceClient)(nil).ListEntities), varargs...)
}

// ListSpawnTemplates mocks base method.
func (m *MockSpawnServiceClient) ListSpawnTemplates(ctx context.Context, in *v1alpha1.ListSpawnTemplatesRequest, opts ...grpc.CallOption) (*v1alpha1.ListSpawnTemplatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpawnTemplates", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListSpawnTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpawnTemplates indicates an expected call of ListSpawnTemplates.
func (mr *MockSpawnServiceClientMockRecorder) ListSpawnTemplates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpawnTemplates", reflect.TypeOf((*MockSpawnServiceClient)(nil).ListSpawnTemplates), varargs...)
}

// MoveEntity mocks base method.
func (m *MockSpawnServiceClient) MoveEntity(ctx context.Context, in *v1alpha1.MoveEntityRequest, opts ...grpc.CallOption) (*v1alpha1.MoveEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveEntity indicates an expected call of MoveEntity.
func (mr *MockSpawnServiceClientMockRecorder) MoveEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveEntity", reflect.TypeOf((*MockSpawnServiceClient)(nil).MoveEntity), varargs...)
}

// RemoveEntity mocks base method.
func (m *MockSpawnServiceClient) RemoveEntity(ctx context.Context, in *v1alpha1.RemoveEntityRequest, opts ...grpc.CallOption) (*v1alpha1.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockSpawnServiceClientMockRecorder) RemoveEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockSpawnServiceClient)(nil).RemoveEntity), varargs...)
}

// SpawnEntity mocks base method.
func (m *MockSpawnServiceClient) SpawnEntity(ctx context.Context, in *v1alpha1.SpawnEntityRequest, opts ...grpc.CallOption) (*v1alpha1.SpawnEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpawnEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SpawnEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnEntity indicates an expected call of SpawnEntity.
func (mr *MockSpawnServiceClientMockRecorder) SpawnEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnEntity", reflect.TypeOf((*MockSpawnServiceClient)(nil).SpawnEntity), varargs...)
}

// SpawnFromTemplate mocks base method.
func (m *MockSpawnServiceClient) SpawnFromTemplate(ctx context.Context, in *v1alpha1.SpawnFromTemplateRequest, opts ...grpc.CallOption) (*v1alpha1.SpawnFromTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpawnFromTemplate", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SpawnFromTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnFromTemplate indicates an expected call of SpawnFromTemplate.
func (mr *MockSpawnServiceClientMockRecorder) SpawnFromTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnFromTemplate", reflect.TypeOf((*MockSpawnServiceClient)(nil).SpawnFromTemplate), varargs...)
}

// SpawnMultipleEntities mocks base method.
func (m *MockSpawnServiceClient) SpawnMultipleEntities(ctx context.Context, in *v1alpha1.SpawnMultipleEntitiesRequest, opts ...grpc.CallOption) (*v1alpha1.SpawnMultipleEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpawnMultipleEntities", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SpawnMultipleEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnMultipleEntities indicates an expected call of SpawnMultipleEntities.
func (mr *MockSpawnServiceClientMockRecorder) SpawnMultipleEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnMultipleEntities", reflect.TypeOf((*MockSpawnServiceClient)(nil).SpawnMultipleEntities), varargs...)
}

// UpdateEntity mocks base method.
func (m *MockSpawnServiceClient) UpdateEntity(ctx context.Context, in *v1alpha1.UpdateEntityRequest, opts ...grpc.CallOption) (*v1alpha1.UpdateEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEntity", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockSpawnServiceClientMockRecorder) UpdateEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockSpawnServiceClient)(nil).UpdateEntity), varargs...)
}

// MockSpawnServiceServer is a mock of SpawnServiceServer interface.
type MockSpawnServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSpawnServiceServerMockRecorder
}

// MockSpawnServiceServerMockRecorder is the mock recorder for MockSpawnServiceServer.
type MockSpawnServiceServerMockRecorder struct {
	mock *MockSpawnServiceServer
}

// NewMockSpawnServiceServer creates a new mock instance.
func NewMockSpawnServiceServer(ctrl *gomock.Controller) *MockSpawnServiceServer {
	mock := &MockSpawnServiceServer{ctrl: ctrl}
	mock.recorder = &MockSpawnServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpawnServiceServer) EXPECT() *MockSpawnServiceServerMockRecorder {
	return m.recorder
}

// BatchMoveEntities mocks base method.
func (m *MockSpawnServiceServer) BatchMoveEntities(arg0 context.Context, arg1 *v1alpha1.BatchMoveEntitiesRequest) (*v1alpha1.BatchMoveEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchMoveEntities", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BatchMoveEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchMoveEntities indicates an expected call of BatchMoveEntities.
func (mr *MockSpawnServiceServerMockRecorder) BatchMoveEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMoveEntities", reflect.TypeOf((*MockSpawnServiceServer)(nil).BatchMoveEntities), arg0, arg1)
}

// BatchRemoveEntities mocks base method.
func (m *MockSpawnServiceServer) BatchRemoveEntities(arg0 context.Context, arg1 *v1alpha1.BatchRemoveEntitiesRequest) (*v1alpha1.BatchRemoveEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRemoveEntities", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BatchRemoveEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRemoveEntities indicates an expected call of BatchRemoveEntities.
func (mr *MockSpawnServiceServerMockRecorder) BatchRemoveEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRemoveEntities", reflect.TypeOf((*MockSpawnServiceServer)(nil).BatchRemoveEntities), arg0, arg1)
}

// BatchSpawnEntities mocks base method.
func (m *MockSpawnServiceServer) BatchSpawnEntities(arg0 context.Context, arg1 *v1alpha1.BatchSpawnEntitiesRequest) (*v1alpha1.BatchSpawnEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSpawnEntities", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BatchSpawnEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSpawnEntities indicates an expected call of BatchSpawnEntities.
func (mr *MockSpawnServiceServerMockRecorder) BatchSpawnEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSpawnEntities", reflect.TypeOf((*MockSpawnServiceServer)(nil).BatchSpawnEntities), arg0, arg1)
}

// CreateSpawnTemplate mocks base method.
func (m *MockSpawnServiceServer) CreateSpawnTemplate(arg0 context.Context, arg1 *v1alpha1.CreateSpawnTemplateRequest) (*v1alpha1.CreateSpawnTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpawnTemplate", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CreateSpawnTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpawnTemplate indicates an expected call of CreateSpawnTemplate.
func (mr *MockSpawnServiceServerMockRecorder) CreateSpawnTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpawnTemplate", reflect.TypeOf((*MockSpawnServiceServer)(nil).CreateSpawnTemplate), arg0, arg1)
}

// FindEntitiesByType mocks base method.
func (m *MockSpawnServiceServer) FindEntitiesByType(arg0 context.Context, arg1 *v1alpha1.FindEntitiesByTypeRequest) (*v1alpha1.FindEntitiesByTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntitiesByType", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.FindEntitiesByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntitiesByType indicates an expected call of FindEntitiesByType.
func (mr *MockSpawnServiceServerMockRecorder) FindEntitiesByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntitiesByType", reflect.TypeOf((*MockSpawnServiceServer)(nil).FindEntitiesByType), arg0, arg1)
}

// GetEntity mocks base method.
func (m *MockSpawnServiceServer) GetEntity(arg0 context.Context, arg1 *v1alpha1.GetEntityRequest) (*v1alpha1.GetEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockSpawnServiceServerMockRecorder) GetEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockSpawnServiceServer)(nil).GetEntity), arg0, arg1)
}

// GetSpawnTemplate mocks base method.
func (m *MockSpawnServiceServer) GetSpawnTemplate(arg0 context.Context, arg1 *v1alpha1.GetSpawnTemplateRequest) (*v1alpha1.GetSpawnTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpawnTemplate", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.GetSpawnTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpawnTemplate indicates an expected call of GetSpawnTemplate.
func (mr *MockSpawnServiceServerMockRecorder) GetSpawnTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpawnTemplate", reflect.TypeOf((*MockSpawnServiceServer)(nil).GetSpawnTemplate), arg0, arg1)
}

// ListEntities mocks base method.
func (m *MockSpawnServiceServer) ListEntities(arg0 context.Context, arg1 *v1alpha1.ListEntitiesRequest) (*v1alpha1.ListEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntities", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockSpawnServiceServerMockRecorder) ListEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockSpawnServiceServer)(nil).ListEntities), arg0, arg1)
}

// ListSpawnTemplates mocks base method.
func (m *MockSpawnServiceServer) ListSpawnTemplates(arg0 context.Context, arg1 *v1alpha1.ListSpawnTemplatesRequest) (*v1alpha1.ListSpawnTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpawnTemplates", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListSpawnTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpawnTemplates indicates an expected call of ListSpawnTemplates.
func (mr *MockSpawnServiceServerMockRecorder) ListSpawnTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpawnTemplates", reflect.TypeOf((*MockSpawnServiceServer)(nil).ListSpawnTemplates), arg0, arg1)
}

// MoveEntity mocks base method.
func (m *MockSpawnServiceServer) MoveEntity(arg0 context.Context, arg1 *v1alpha1.MoveEntityRequest) (*v1alpha1.MoveEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveEntity indicates an expected call of MoveEntity.
func (mr *MockSpawnServiceServerMockRecorder) MoveEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveEntity", reflect.TypeOf((*MockSpawnServiceServer)(nil).MoveEntity), arg0, arg1)
}

// RemoveEntity mocks base method.
func (m *MockSpawnServiceServer) RemoveEntity(arg0 context.Context, arg1 *v1alpha1.RemoveEntityRequest) (*v1alpha1.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockSpawnServiceServerMockRecorder) RemoveEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockSpawnServiceServer)(nil).RemoveEntity), arg0, arg1)
}

// SpawnEntity mocks base method.
func (m *MockSpawnServiceServer) SpawnEntity(arg0 context.Context, arg1 *v1alpha1.SpawnEntityRequest) (*v1alpha1.SpawnEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.SpawnEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnEntity indicates an expected call of SpawnEntity.
func (mr *MockSpawnServiceServerMockRecorder) SpawnEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnEntity", reflect.TypeOf((*MockSpawnServiceServer)(nil).SpawnEntity), arg0, arg1)
}

// SpawnFromTemplate mocks base method.
func (m *MockSpawnServiceServer) SpawnFromTemplate(arg0 context.Context, arg1 *v1alpha1.SpawnFromTemplateRequest) (*v1alpha1.SpawnFromTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnFromTemplate", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.SpawnFromTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnFromTemplate indicates an expected call of SpawnFromTemplate.
func (mr *MockSpawnServiceServerMockRecorder) SpawnFromTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnFromTemplate", reflect.TypeOf((*MockSpawnServiceServer)(nil).SpawnFromTemplate), arg0, arg1)
}

// SpawnMultipleEntities mocks base method.
func (m *MockSpawnServiceServer) SpawnMultipleEntities(arg0 context.Context, arg1 *v1alpha1.SpawnMultipleEntitiesRequest) (*v1alpha1.SpawnMultipleEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnMultipleEntities", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.SpawnMultipleEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnMultipleEntities indicates an expected call of SpawnMultipleEntities.
func (mr *MockSpawnServiceServerMockRecorder) SpawnMultipleEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnMultipleEntities", reflect.TypeOf((*MockSpawnServiceServer)(nil).SpawnMultipleEntities), arg0, arg1)
}

// UpdateEntity mocks base method.
func (m *MockSpawnServiceServer) UpdateEntity(arg0 context.Context, arg1 *v1alpha1.UpdateEntityRequest) (*v1alpha1.UpdateEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.UpdateEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockSpawnServiceServerMockRecorder) UpdateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockSpawnServiceServer)(nil).UpdateEntity), arg0, arg1)
}

// MockUnsafeSpawnServiceServer is a mock of UnsafeSpawnServiceServer interface.
type MockUnsafeSpawnServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSpawnServiceServerMockRecorder
}

// MockUnsafeSpawnServiceServerMockRecorder is the mock recorder for MockUnsafeSpawnServiceServer.
type MockUnsafeSpawnServiceServerMockRecorder struct {
	mock *MockUnsafeSpawnServiceServer
}

// NewMockUnsafeSpawnServiceServer creates a new mock instance.
func NewMockUnsafeSpawnServiceServer(ctrl *gomock.Controller) *MockUnsafeSpawnServiceServer {
	mock := &MockUnsafeSpawnServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSpawnServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSpawnServiceServer) EXPECT() *MockUnsafeSpawnServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSpawnServiceServer mocks base method.
func (m *MockUnsafeSpawnServiceServer) mustEmbedUnimplementedSpawnServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSpawnServiceServer")
}

// mustEmbedUnimplementedSpawnServiceServer indicates an expected call of mustEmbedUnimplementedSpawnServiceServer.
func (mr *MockUnsafeSpawnServiceServerMockRecorder) mustEmbedUnimplementedSpawnServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSpawnServiceServer", reflect.TypeOf((*MockUnsafeSpawnServiceServer)(nil).mustEmbedUnimplementedSpawnServiceServer))
}
