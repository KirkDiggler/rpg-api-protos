syntax = "proto3";

package dnd5e.api.v1alpha1;

import "dnd5e/api/v1alpha1/common.proto";
import "dnd5e/api/v1alpha1/enums.proto";

// Service for D&D 5e character creation and management
// Supports both wizard-style step-by-step creation and free-form editing
service CharacterService {
  // Draft lifecycle
  rpc CreateDraft(CreateDraftRequest) returns (CreateDraftResponse);
  rpc GetDraft(GetDraftRequest) returns (GetDraftResponse);
  rpc ListDrafts(ListDraftsRequest) returns (ListDraftsResponse);
  rpc DeleteDraft(DeleteDraftRequest) returns (DeleteDraftResponse);

  // Section-based updates (supports skip-around editing)
  rpc UpdateName(UpdateNameRequest) returns (UpdateNameResponse);
  rpc UpdateRace(UpdateRaceRequest) returns (UpdateRaceResponse);
  rpc UpdateClass(UpdateClassRequest) returns (UpdateClassResponse);
  rpc UpdateBackground(UpdateBackgroundRequest) returns (UpdateBackgroundResponse);
  rpc UpdateAbilityScores(UpdateAbilityScoresRequest) returns (UpdateAbilityScoresResponse);
  rpc UpdateSkills(UpdateSkillsRequest) returns (UpdateSkillsResponse);

  // Validation
  rpc ValidateDraft(ValidateDraftRequest) returns (ValidateDraftResponse);

  // Get a preview of what the character would look like if finalized
  rpc GetDraftPreview(GetDraftPreviewRequest) returns (GetDraftPreviewResponse);

  // Character finalization
  rpc FinalizeDraft(FinalizeDraftRequest) returns (FinalizeDraftResponse);

  // Completed character operations
  rpc GetCharacter(GetCharacterRequest) returns (GetCharacterResponse);
  rpc ListCharacters(ListCharactersRequest) returns (ListCharactersResponse);
  rpc DeleteCharacter(DeleteCharacterRequest) returns (DeleteCharacterResponse);

  // Data loading for character creation UI
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse);
  rpc ListClasses(ListClassesRequest) returns (ListClassesResponse);
  rpc ListBackgrounds(ListBackgroundsRequest) returns (ListBackgroundsResponse);
  rpc GetRaceDetails(GetRaceDetailsRequest) returns (GetRaceDetailsResponse);
  rpc GetClassDetails(GetClassDetailsRequest) returns (GetClassDetailsResponse);
  rpc GetBackgroundDetails(GetBackgroundDetailsRequest) returns (GetBackgroundDetailsResponse);
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse);

  // Dice rolling for character creation
  rpc RollAbilityScores(RollAbilityScoresRequest) returns (RollAbilityScoresResponse);

  // Get requirements for character creation choices
  rpc GetRequirements(GetRequirementsRequest) returns (GetRequirementsResponse);

  // Submit character creation choices
  rpc SubmitChoices(SubmitChoicesRequest) returns (SubmitChoicesResponse);

  // Equipment listing by type
  rpc ListEquipmentByType(ListEquipmentByTypeRequest) returns (ListEquipmentByTypeResponse);

  // Spell listing by level
  rpc ListSpellsByLevel(ListSpellsByLevelRequest) returns (ListSpellsByLevelResponse);

  // Equipment management
  rpc GetCharacterInventory(GetCharacterInventoryRequest) returns (GetCharacterInventoryResponse);
  rpc EquipItem(EquipItemRequest) returns (EquipItemResponse);
  rpc UnequipItem(UnequipItemRequest) returns (UnequipItemResponse);
  rpc AddToInventory(AddToInventoryRequest) returns (AddToInventoryResponse);
  rpc RemoveFromInventory(RemoveFromInventoryRequest) returns (RemoveFromInventoryResponse);
}

// Character feature (class features, racial traits, etc)
message CharacterFeature {
  string id = 1;
  string name = 2;
  string description = 3;
  string source = 4; // "class", "race", "background", etc
  int32 level = 5; // Level when gained (0 for racial/background)
}

// Types of class resources in D&D 5e
enum ClassResourceType {
  CLASS_RESOURCE_TYPE_UNSPECIFIED = 0;
  CLASS_RESOURCE_TYPE_RAGE = 1;
  CLASS_RESOURCE_TYPE_BARDIC_INSPIRATION = 2;
  CLASS_RESOURCE_TYPE_CHANNEL_DIVINITY = 3;
  CLASS_RESOURCE_TYPE_WILD_SHAPE = 4;
  CLASS_RESOURCE_TYPE_SECOND_WIND = 5;
  CLASS_RESOURCE_TYPE_ACTION_SURGE = 6;
  CLASS_RESOURCE_TYPE_KI_POINTS = 7;
  CLASS_RESOURCE_TYPE_DIVINE_SENSE = 8;
  CLASS_RESOURCE_TYPE_LAY_ON_HANDS = 9;
  CLASS_RESOURCE_TYPE_SORCERY_POINTS = 10;
  CLASS_RESOURCE_TYPE_ARCANE_RECOVERY = 11;
  CLASS_RESOURCE_TYPE_INDOMITABLE = 12;
  CLASS_RESOURCE_TYPE_SUPERIORITY_DICE = 13;
}

// Recharge timing for resources
enum RechargeType {
  RECHARGE_TYPE_UNSPECIFIED = 0;
  RECHARGE_TYPE_SHORT_REST = 1;
  RECHARGE_TYPE_LONG_REST = 2;
  RECHARGE_TYPE_DAWN = 3;
  RECHARGE_TYPE_NONE = 4; // Never recharges (consumable)
}

// Class resource (rage uses, ki points, etc)
message ClassResource {
  ClassResourceType type = 1;
  string name = 2; // Display name
  int32 current = 3;
  int32 maximum = 4;
  RechargeType recharge = 5;
}

// Spell slots by level
message SpellSlots {
  int32 level_1 = 1;
  int32 level_2 = 2;
  int32 level_3 = 3;
  int32 level_4 = 4;
  int32 level_5 = 5;
  int32 level_6 = 6;
  int32 level_7 = 7;
  int32 level_8 = 8;
  int32 level_9 = 9;
}

// Ability scores for a character
message AbilityScores {
  // Strength score (3-18 before racial modifiers)
  int32 strength = 1;

  // Dexterity score (3-18 before racial modifiers)
  int32 dexterity = 2;

  // Constitution score (3-18 before racial modifiers)
  int32 constitution = 3;

  // Intelligence score (3-18 before racial modifiers)
  int32 intelligence = 4;

  // Wisdom score (3-18 before racial modifiers)
  int32 wisdom = 5;

  // Charisma score (3-18 before racial modifiers)
  int32 charisma = 6;
}

// A complete D&D 5e character
message Character {
  // Unique identifier
  string id = 1;

  // Character name
  string name = 2;

  // Character level (starts at 1)
  int32 level = 3;

  // Experience points
  int32 experience_points = 4;

  // Character race
  Race race = 5;

  // Character subrace if applicable
  Subrace subrace = 6;

  // Character class
  Class class = 7;

  // Character background
  Background background = 8;

  // Character alignment
  Alignment alignment = 9;

  // Final ability scores (with racial modifiers applied)
  AbilityScores ability_scores = 10;

  // Ability modifiers (calculated from scores)
  AbilityModifiers ability_modifiers = 11;

  // Calculated combat values
  CombatStats combat_stats = 12;

  // Proficiencies
  Proficiencies proficiencies = 13;

  // Known languages
  repeated Language languages = 14;

  // Current hit points
  int32 current_hit_points = 15;

  // Temporary hit points
  int32 temporary_hit_points = 16;

  // Session association if any
  string session_id = 17;

  // Metadata
  CharacterMetadata metadata = 18;

  // Equipment slots (weapons, armor, etc.)
  EquipmentSlots equipment_slots = 19;

  // Inventory (unequipped items)
  repeated InventoryItem inventory = 20;

  // Carrying capacity and encumbrance
  EncumbranceInfo encumbrance = 21;

  // Class features and choices
  repeated CharacterFeature features = 22;
  repeated FightingStyle fighting_styles = 23;

  // Racial traits
  repeated CharacterFeature racial_traits = 24;

  // Background feature
  CharacterFeature background_feature = 25;

  // Class resources (rage uses, ki points, etc)
  repeated ClassResource class_resources = 26;

  // Spell slots for casters
  SpellSlots spell_slots = 27;
}

// Ability modifiers calculated from scores
message AbilityModifiers {
  int32 strength = 1;
  int32 dexterity = 2;
  int32 constitution = 3;
  int32 intelligence = 4;
  int32 wisdom = 5;
  int32 charisma = 6;
}

// Combat-related statistics
message CombatStats {
  // Maximum hit points
  int32 hit_point_maximum = 1;

  // Armor class
  int32 armor_class = 2;

  // Initiative modifier
  int32 initiative = 3;

  // Base movement speed in feet
  int32 speed = 4;

  // Proficiency bonus
  int32 proficiency_bonus = 5;

  // Hit dice (e.g., 1d10 for fighter)
  string hit_dice = 6;
}

// Proficiency grants structure to match toolkit approach
message ProficiencyGrants {
  repeated Armor armor = 1;
  repeated Weapon weapons = 2;
  repeated Tool tools = 3;
  repeated Skill skills = 4;
  repeated Language languages = 5;
}

// Character proficiencies
message Proficiencies {
  // Skill proficiencies
  repeated Skill skills = 1;

  // Saving throw proficiencies
  repeated Ability saving_throws = 2;

  // Armor proficiencies - now using typed enums to match toolkit
  repeated Armor armor = 3;

  // Weapon proficiencies - now using typed enums to match toolkit
  repeated Weapon weapons = 4;

  // Tool proficiencies - now using typed enums to match toolkit
  repeated Tool tools = 5;

  // DEPRECATED: Use armor field instead - kept for backward compatibility
  repeated string armor_strings = 6 [deprecated = true];

  // DEPRECATED: Use weapons field instead - kept for backward compatibility
  repeated string weapon_strings = 7 [deprecated = true];

  // DEPRECATED: Use tools field instead - kept for backward compatibility
  repeated string tool_strings = 8 [deprecated = true];
}

// Character metadata
message CharacterMetadata {
  // When the character was created
  int64 created_at = 1;

  // When the character was last updated
  int64 updated_at = 2;

  // Player/user who owns this character
  string player_id = 3;
}

// Request to get a character
message GetCharacterRequest {
  // The character ID to retrieve
  string character_id = 1;
}

// Response containing a character
message GetCharacterResponse {
  // The requested character
  Character character = 1;
}

// Request to list characters
message ListCharactersRequest {
  // Maximum number of characters to return (1-100, default 20)
  int32 page_size = 1;

  // Page token from previous response
  string page_token = 2;

  // Filter by session ID
  string session_id = 3;

  // Filter by player ID
  string player_id = 4;
}

// Response containing a list of characters
message ListCharactersResponse {
  // The list of characters
  repeated Character characters = 1;

  // Token for next page if available
  string next_page_token = 2;

  // Total number of characters matching filters
  int32 total_size = 3;
}

// Request to update a character
message UpdateCharacterRequest {
  // The character to update (ID required)
  Character character = 1;

  // Field mask to specify which fields to update
  // For now, we'll allow updating specific fields
  repeated string update_mask = 2;
}

// Response from character update
message UpdateCharacterResponse {
  // The updated character
  Character character = 1;
}

// Request to delete a character
message DeleteCharacterRequest {
  // The character ID to delete
  string character_id = 1;
}

// Response from character deletion
message DeleteCharacterResponse {
  // Confirmation message
  string message = 1;
}

// Character draft data for storage - matches toolkit's DraftData structure
message CharacterDraftData {
  // Unique identifier
  string id = 1;

  // Player creating this character
  string player_id = 2;

  // Session if part of one (optional)
  string session_id = 3;

  // Identity fields - stored as enums
  string name = 4;
  Race race = 5;
  Subrace subrace = 6;
  Class class = 7;
  Subclass subclass = 8;
  Background background = 9;

  // Base ability scores (before racial modifiers)
  AbilityScores base_ability_scores = 10;

  // Store player choices instead of computed state
  repeated ChoiceData choices = 11;

  // Track what steps are complete
  CreationProgress progress = 12;
}

// Tracks which parts of character creation are complete
message CreationProgress {
  // Core progress flags - these match the toolkit's 5-step Progress type
  bool has_name = 1;
  bool has_race = 2;
  bool has_class = 3;
  bool has_background = 4;
  bool has_ability_scores = 5;

  // DEPRECATED: Skills are part of class/background choices, not a separate step
  bool has_skills = 6 [deprecated = true];

  // DEPRECATED: Languages are part of race/background choices, not a separate step
  bool has_languages = 7 [deprecated = true];

  // Overall completion percentage (0-100)
  int32 completion_percentage = 8;

  // DEPRECATED: Character creation is non-linear, players can complete steps in any order
  CreationStep current_step = 9 [deprecated = true];
}

// DEPRECATED: Character creation is non-linear - players can complete steps in any order
// This enum assumed a wizard-style linear flow which doesn't match the flexible toolkit model
enum CreationStep {
  option deprecated = true;

  CREATION_STEP_UNSPECIFIED = 0;
  CREATION_STEP_NAME = 1;
  CREATION_STEP_RACE = 2;
  CREATION_STEP_CLASS = 3;
  CREATION_STEP_BACKGROUND = 4;
  CREATION_STEP_ABILITY_SCORES = 5;
  CREATION_STEP_SKILLS = 6;
  CREATION_STEP_LANGUAGES = 7;
  CREATION_STEP_REVIEW = 8;
}

// Draft metadata
message DraftMetadata {
  int64 created_at = 1;
  int64 updated_at = 2;
  string discord_channel_id = 3;
  string discord_message_id = 4;
}

// Character draft with full details for responses
message CharacterDraft {
  // Unique identifier
  string id = 1;

  // Player creating this character
  string player_id = 2;

  // Session if part of one
  string session_id = 3;

  // Core identity fields - stored as enums matching the toolkit
  string name = 4;
  Race race = 5;
  Subrace subrace = 6;
  Class class = 7;
  Subclass subclass = 8;
  Background background = 9;

  // Base ability scores (before racial modifiers)
  AbilityScores base_ability_scores = 10;

  // Player choices stored for validation
  repeated ChoiceData choices = 11;

  // Track what steps are complete
  CreationProgress progress = 12;

  // Current validation state (calculated on-demand)
  ValidationResult validation = 13;

  // Optional expanded info for UI display
  // These can be populated when needed for richer UI experience
  RaceInfo race_info = 14;
  SubraceInfo subrace_info = 15;
  ClassInfo class_info = 16;
  BackgroundInfo background_info = 17;
}

// Request to create a draft
message CreateDraftRequest {
  string player_id = 1;
  string session_id = 2; // Optional

  // Can optionally provide initial data
  CharacterDraftData initial_data = 3;
}

message CreateDraftResponse {
  CharacterDraft draft = 1;
}

// Request to get a draft
message GetDraftRequest {
  string draft_id = 1;
}

message GetDraftResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
}

// Request to update a draft
message UpdateDraftRequest {
  string draft_id = 1;

  // Only provided fields will be updated
  CharacterDraftData updates = 2;

  // Which fields to update (field mask pattern)
  repeated string update_mask = 3;
}

message UpdateDraftResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation

  // Deprecated: Use draft.validation instead
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

// Section-based update requests
message UpdateNameRequest {
  string draft_id = 1;
  string name = 2;
}

message UpdateRaceRequest {
  string draft_id = 1;
  Race race = 2;
  Subrace subrace = 3; // Optional, required for some races
  repeated ChoiceData race_choices = 4; // Choices made for this race
}

message UpdateClassRequest {
  string draft_id = 1;
  Class class = 2;
  repeated ChoiceData class_choices = 3; // Choices made for this class
  Subclass subclass = 4;
}

message UpdateBackgroundRequest {
  string draft_id = 1;
  Background background = 2;
  repeated ChoiceData background_choices = 3; // Choices made for this background
}

message UpdateAbilityScoresRequest {
  string draft_id = 1;

  // Choose how to set ability scores
  oneof scores_input {
    // Manually set ability scores
    AbilityScores ability_scores = 2;

    // Assign rolled dice to abilities
    RollAssignments roll_assignments = 3;
  }
}

message UpdateSkillsRequest {
  string draft_id = 1;
  repeated Skill skills = 2;
}

// Section-based update responses
message UpdateNameResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

message UpdateRaceResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

message UpdateClassResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

message UpdateBackgroundResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

message UpdateAbilityScoresResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

message UpdateSkillsResponse {
  CharacterDraft draft = 1;
  // Validation is now on draft.validation
  repeated ValidationWarning warnings = 2 [deprecated = true];
}

enum WarningType {
  WARNING_TYPE_UNSPECIFIED = 0;
  WARNING_TYPE_MISSING_REQUIRED = 1;
  WARNING_TYPE_INVALID_COMBINATION = 2;
  WARNING_TYPE_SUBOPTIMAL_CHOICE = 3;
}

// Request to list drafts
message ListDraftsRequest {
  string player_id = 1;
  string session_id = 2; // Optional filter
  int32 page_size = 3;
  string page_token = 4;
}

message ListDraftsResponse {
  repeated CharacterDraft drafts = 1;
  string next_page_token = 2;
}

// Request to validate draft
message ValidateDraftRequest {
  string draft_id = 1;
}

message ValidateDraftResponse {
  // Full validation result with 3-tier system
  ValidationResult validation = 1;

  // Quick access fields for compatibility
  bool is_complete = 2;
  bool is_valid = 3;

  // What's still needed
  repeated CreationStep missing_steps = 4;

  // Deprecated: Use validation field instead
  repeated ValidationError errors = 5 [deprecated = true];
  repeated ValidationWarning warnings = 6 [deprecated = true];
}

// Request to get a preview of the character
message GetDraftPreviewRequest {
  string draft_id = 1;
}

message GetDraftPreviewResponse {
  CharacterDraft draft = 1; // The draft with choices (includes validation)
  Character preview = 2; // Computed character state

  // Deprecated: Use draft.validation instead
  repeated ValidationWarning warnings = 3 [deprecated = true];
  repeated ValidationError errors = 4 [deprecated = true];
}

// Request to finalize draft
message FinalizeDraftRequest {
  string draft_id = 1;
}

message FinalizeDraftResponse {
  Character character = 1;

  // Draft is automatically deleted after finalization
  bool draft_deleted = 2;

  // Final validation result (should have no errors for successful finalization)
  // Optional since character is already created successfully
  ValidationResult final_validation = 3;
}

// Request to delete draft
message DeleteDraftRequest {
  string draft_id = 1;
}

message DeleteDraftResponse {
  string message = 1;
}

// Data loading messages for character creation UI

// Detailed race information for selection UI
message RaceInfo {
  // The race enum value
  Race race_id = 1;

  // Basic identification
  string name = 2;
  string description = 3;

  // Mechanical information
  int32 speed = 4;
  Size size = 5;

  // Ability score increases - map key is ability name ("strength", "dexterity", etc.)
  map<string, int32> ability_bonuses = 6;

  // Racial traits
  repeated RacialTrait traits = 7;

  // Available subraces
  repeated SubraceInfo subraces = 8;

  // Starting proficiencies - structured to match toolkit types
  ProficiencyGrants proficiency_grants = 9;

  // Starting languages
  repeated Language languages = 10;

  // All choices (languages, proficiencies, etc.)
  repeated Choice choices = 11;

  // DEPRECATED: Optional flavor text fields - not provided by toolkit
  // Can be populated from external sources (D&D 5e API, custom content, etc.)
  string age_description = 12 [deprecated = true]; // e.g., "Elves can live to be 750 years old"
  string alignment_description = 13 [deprecated = true]; // e.g., "Most dwarves are lawful"
  string size_description = 14 [deprecated = true]; // e.g., "4-5 feet tall, 150 pounds"

  // DEPRECATED: Use proficiency_grants instead
  repeated string proficiencies = 15 [deprecated = true];
}

// Subrace information
message SubraceInfo {
  // The subrace enum value
  Subrace subrace_id = 1;

  string name = 2;
  string description = 3;

  // Additional ability bonuses from subrace - map key is ability name
  map<string, int32> ability_bonuses = 4;

  // Additional traits from subrace
  repeated RacialTrait traits = 5;

  // Additional languages from subrace
  repeated Language languages = 6;

  // Additional proficiencies from subrace - structured to match toolkit types
  ProficiencyGrants proficiency_grants = 7;

  // DEPRECATED: Use proficiency_grants instead
  repeated string proficiencies = 8 [deprecated = true];
}

// Racial trait description
message RacialTrait {
  string name = 1;
  string description = 2;

  // Whether this is a choice or automatic
  bool is_choice = 3;

  // Options if this is a choice
  repeated string options = 4;
}

// Unified choice for all types - equipment, proficiencies, languages, etc.
message Choice {
  string id = 1; // Unique identifier for tracking
  string description = 2; // Human-readable description
  int32 choose_count = 3; // How many options to choose
  ChoiceCategory choice_type = 4; // What kind of choice this is

  oneof option_set {
    ExplicitOptions explicit_options = 5; // List of specific options
    CategoryReference category_reference = 6; // Reference to expandable category
  }
}

// Explicit list of options to choose from
message ExplicitOptions {
  repeated ChoiceOption options = 1;
}

// Reference to a category that needs to be resolved/expanded
message CategoryReference {
  string category_id = 1; // e.g., "martial-weapons", "artisan-tools"
  repeated string exclude_ids = 2; // Optional exclusions
}

// Individual option within a choice
message ChoiceOption {
  oneof option_type {
    ItemReference item = 1; // Single item reference
    CountedItemReference counted_item = 2; // Item with quantity
    ItemBundle bundle = 3; // Multiple items as one option
    NestedChoice nested_choice = 4; // For complex nested choices
  }
}

message ItemReference {
  // Type-safe item reference using oneof pattern
  oneof item {
    Weapon weapon = 1;
    Armor armor = 2;
    Tool tool = 3;
    Pack pack = 4;
    Ammunition ammunition = 5;
    string other_item_id = 6; // For items not yet enumerated
  }
  string name = 7; // Display name
}

message CountedItemReference {
  // Type-safe item reference using oneof pattern
  oneof item {
    Weapon weapon = 1;
    Armor armor = 2;
    Tool tool = 3;
    Pack pack = 4;
    Ammunition ammunition = 5;
    string other_item_id = 6; // For items not yet enumerated
  }
  string name = 7; // Display name
  int32 quantity = 8; // e.g., 20 arrows
}

message ItemBundle {
  repeated BundleItem items = 1; // Items in the bundle (can be concrete or choices)
}

// Represents a single item in a bundle, which can be either a concrete item or a choice
message BundleItem {
  oneof item_type {
    CountedItemReference concrete_item = 1; // Concrete item like "leather armor"
    NestedChoice choice_item = 2; // Choice like "a martial weapon"
  }
}

message NestedChoice {
  Choice choice = 1; // Allows arbitrarily complex choices
}

// Category of choice being made
enum ChoiceCategory {
  CHOICE_CATEGORY_UNSPECIFIED = 0;
  CHOICE_CATEGORY_EQUIPMENT = 1;
  CHOICE_CATEGORY_SKILLS = 2; // Skill proficiencies
  CHOICE_CATEGORY_TOOLS = 3; // Tool proficiencies
  CHOICE_CATEGORY_LANGUAGES = 4; // Languages
  CHOICE_CATEGORY_WEAPON_PROFICIENCIES = 5; // Weapon proficiencies
  CHOICE_CATEGORY_ARMOR_PROFICIENCIES = 6; // Armor proficiencies
  CHOICE_CATEGORY_SPELLS = 7; // Spells known/prepared
  CHOICE_CATEGORY_FEATS = 8; // Feats
  CHOICE_CATEGORY_ABILITY_SCORES = 9; // Ability score improvements
  CHOICE_CATEGORY_NAME = 10; // Character name
  CHOICE_CATEGORY_FIGHTING_STYLE = 11; // Fighting style selection
  CHOICE_CATEGORY_RACE = 12; // Race selection
  CHOICE_CATEGORY_CLASS = 13; // Class selection
  CHOICE_CATEGORY_BACKGROUND = 14; // Background selection
  CHOICE_CATEGORY_CANTRIPS = 15; // Cantrips known
  CHOICE_CATEGORY_EXPERTISE = 16; // Expertise (double proficiency) choices
  CHOICE_CATEGORY_SUBRACE = 17; // Subrace selection (e.g., High Elf, Mountain Dwarf)
  CHOICE_CATEGORY_TRAITS = 18; // Racial or class traits (e.g., Draconic Ancestry)
}

// Character size category
enum Size {
  SIZE_UNSPECIFIED = 0;
  SIZE_TINY = 1;
  SIZE_SMALL = 2;
  SIZE_MEDIUM = 3;
  SIZE_LARGE = 4;
  SIZE_HUGE = 5;
  SIZE_GARGANTUAN = 6;
}

// Detailed class information for selection UI
message ClassInfo {
  // The class enum value
  Class class_id = 1;

  // Basic identification
  string name = 2;
  string description = 3;

  // Mechanical information
  int32 hit_die = 4; // e.g., 10 for d10
  Ability primary_ability = 5; // Primary ability for the class

  // Proficiency categories (e.g., "all light armor", "all martial weapons")
  repeated ArmorProficiencyCategory armor_proficiency_categories = 6;
  repeated WeaponProficiencyCategory weapon_proficiency_categories = 7;
  
  // Specific proficiencies (for individual items like "longsword" or "thieves' tools")
  repeated Weapon specific_weapon_proficiencies = 28;
  repeated Tool tool_proficiencies = 8;
  repeated Ability saving_throw_proficiencies = 9;

  // DEPRECATED: Use typed proficiency fields instead
  repeated string proficiencies = 27 [deprecated = true];

  // Skill choices
  int32 skill_choices_count = 10;
  repeated Skill available_skills = 11;

  // Starting equipment choices
  repeated Choice equipment_choices = 12;

  // Class features at level 1
  repeated FeatureInfo level_1_features = 13;

  // Spellcasting information (if applicable)
  SpellcastingInfo spellcasting = 14;

  // All choices (skills, equipment, etc.)
  repeated Choice choices = 15;

  // Subclass options for this class (only populated for base classes like Cleric, not for subclasses)
  repeated SubclassInfo subclasses = 16;
}

// Information about a subclass option
message SubclassInfo {
  // The subclass enum value
  Subclass subclass_id = 1;

  // Basic identification
  string name = 2;
  string description = 3;

  // Level when this subclass becomes available
  int32 level = 4;

  // What this subclass adds to the base class
  // Note: These are ADDITIONS to the base class, not the complete set

  // Additional proficiencies granted by this subclass - structured to match toolkit types
  repeated Armor armor_proficiencies = 5;
  repeated Weapon weapon_proficiencies = 6;
  repeated Tool tool_proficiencies = 7;

  // Additional choices required by this subclass
  repeated Choice additional_choices = 8;

  // Features specific to this subclass
  repeated FeatureInfo features = 9;

  // DEPRECATED: Use typed proficiency fields instead
  repeated string armor_proficiency_strings = 10 [deprecated = true];
  repeated string weapon_proficiency_strings = 11 [deprecated = true];
  repeated string tool_proficiency_strings = 12 [deprecated = true];
}

// Deprecated: Use FeatureInfo instead for richer feature data
// message ClassFeature {
//   string name = 1;
//   string description = 2;
//   int32 level = 3;
//   // Whether this feature has choices
//   bool has_choices = 4;
//   repeated string choices = 5;
// }

// Spellcasting information
message SpellcastingInfo {
  string spellcasting_ability = 1;
  bool ritual_casting = 2;
  string spellcasting_focus = 3;
  int32 cantrips_known = 4;
  int32 spells_known = 5;
  int32 spell_slots_level_1 = 6;
}

// Detailed background information for selection UI
message BackgroundInfo {
  // The background enum value
  Background background_id = 1;

  // Basic identification
  string name = 2;
  string description = 3;

  // Mechanical benefits - structured to match toolkit types
  repeated Skill skill_proficiencies = 4;
  repeated Tool tool_proficiencies = 5;
  repeated Language languages = 6;
  int32 additional_languages = 7;

  // Starting equipment
  repeated EquipmentSelection starting_equipment = 8;
  int32 starting_gold = 9;

  // Background feature
  string feature_name = 10;
  string feature_description = 11;

  // Suggested characteristics
  repeated string personality_traits = 12;
  repeated string ideals = 13;
  repeated string bonds = 14;
  repeated string flaws = 15;

  // DEPRECATED: Use typed proficiency fields instead
  repeated string skill_proficiency_strings = 16 [deprecated = true];
  repeated string tool_proficiency_strings = 17 [deprecated = true];
}

// Detailed feature information for class features, racial traits, etc.
message FeatureInfo {
  string id = 1;
  string name = 2;
  string description = 3;
  int32 level = 4;
  string class_name = 5;
  repeated Choice choices = 6;
  bool has_choices = 7;
  // Contains spell selection requirements for features that involve spell selection.
  // This field is only populated for features that allow or require selecting spells.
  SpellSelectionInfo spell_selection = 8;
}

// Programmatic spell selection requirements
message SpellSelectionInfo {
  int32 spells_to_select = 1; // Number of spells to select
  repeated int32 spell_levels = 2; // Allowed spell levels (0 for cantrips)
  repeated string spell_lists = 3; // Allowed spell lists (e.g., "wizard", "cleric")
  SpellSelectionType selection_type = 4; // Type of spell selection system
  bool requires_replace = 5; // Whether spells can be replaced on level up
}

// Types of spell selection systems
enum SpellSelectionType {
  SPELL_SELECTION_TYPE_UNSPECIFIED = 0;
  SPELL_SELECTION_TYPE_SPELLBOOK = 1; // Wizard spellbook system
  SPELL_SELECTION_TYPE_KNOWN = 2; // Fixed known spells (sorcerer, warlock)
  SPELL_SELECTION_TYPE_PREPARED = 3; // Prepared spells (cleric, druid)
}

// Request to list races
message ListRacesRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;

  // Optional filters
  bool include_subraces = 3;
}

// Response with race list
message ListRacesResponse {
  repeated RaceInfo races = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to list classes
message ListClassesRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;

  // Optional filters
  bool include_spellcasters_only = 3;
  bool include_features = 4;
}

// Response with class list
message ListClassesResponse {
  repeated ClassInfo classes = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to list backgrounds
message ListBackgroundsRequest {
  // Pagination
  int32 page_size = 1;
  string page_token = 2;
}

// Response with background list
message ListBackgroundsResponse {
  repeated BackgroundInfo backgrounds = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Request to get detailed race information
message GetRaceDetailsRequest {
  string race_id = 1;
}

// Response with detailed race information
message GetRaceDetailsResponse {
  RaceInfo race = 1;
}

// Request to get detailed class information
message GetClassDetailsRequest {
  string class_id = 1;
}

// Response with detailed class information
message GetClassDetailsResponse {
  ClassInfo class = 1;
}

// Request to get detailed background information
message GetBackgroundDetailsRequest {
  string background_id = 1;
}

// Response with detailed background information
message GetBackgroundDetailsResponse {
  BackgroundInfo background = 1;
}

// Request for a specific feature by its ID
message GetFeatureRequest {
  string feature_id = 1;
}

// Response with detailed feature information
message GetFeatureResponse {
  FeatureInfo feature = 1;
}

// Dice rolling messages for ability scores

// Request to roll ability scores for a character draft
message RollAbilityScoresRequest {
  string draft_id = 1;
}

// A single ability score roll (4d6 drop lowest)
message AbilityScoreRoll {
  // Unique identifier for this roll (roll_1, roll_2, etc.)
  string roll_id = 1;

  // The individual dice that were rolled (4 dice)
  repeated int32 dice = 2;

  // The sum of the highest 3 dice (final ability score value)
  int32 total = 3;

  // The dice value that was dropped (lowest)
  int32 dropped = 4;

  // Human readable notation (e.g., "4d6 drop lowest: [6,5,4,1] = 15")
  string notation = 5;
}

// Response containing 6 ability score rolls
message RollAbilityScoresResponse {
  // Array of 6 rolls that can be assigned to abilities
  repeated AbilityScoreRoll rolls = 1;

  // Unix timestamp when these rolls expire (15 minutes from creation)
  int64 expires_at = 2;
}

// Request to get character creation requirements
message GetRequirementsRequest {
  string draft_id = 1;
  Class class = 2; // Optional: get requirements for a specific class
  Race race = 3; // Optional: get requirements for a specific race
}

// Response with character creation requirements
message GetRequirementsResponse {
  CharacterRequirements requirements = 1;
}

// Request to submit character creation choices
message SubmitChoicesRequest {
  string draft_id = 1;
  repeated ChoiceSubmission submissions = 2;
}

// Response from submitting choices
message SubmitChoicesResponse {
  CharacterDraft draft = 1;
  ValidationResult validation = 2;
  CharacterRequirements remaining_requirements = 3;
}

// Roll assignment mapping for ability scores
message RollAssignments {
  string strength_roll_id = 1;
  string dexterity_roll_id = 2;
  string constitution_roll_id = 3;
  string intelligence_roll_id = 4;
  string wisdom_roll_id = 5;
  string charisma_roll_id = 6;
}

// Equipment messages

// Cost information for equipment
message Cost {
  int32 quantity = 1;
  string unit = 2; // "gp", "sp", "cp", etc.
}

// Weight information for equipment
message Weight {
  int32 quantity = 1; // Weight value in fixed-point representation (e.g., grams or ounces)
  string unit = 2; // Unit of measurement (e.g., "g", "oz", "lbs")
}

// Equipment item
message Equipment {
  string id = 1;
  string name = 2;
  EquipmentCategory category = 3;
  Cost cost = 4;
  Weight weight = 5;
  string description = 6;

  // Equipment type-specific data
  oneof equipment_data {
    WeaponData weapon_data = 7;
    ArmorData armor_data = 8;
    GearData gear_data = 9;
  }
}

// Weapon-specific data
message WeaponData {
  WeaponCategory weapon_category = 1;
  string damage_dice = 2; // "1d6", "1d8", etc.
  DamageType damage_type = 3;
  repeated WeaponProperty properties = 4;
  string range = 5; // "melee", "ranged"
  int32 normal_range = 6; // range in feet for ranged weapons
  int32 long_range = 7; // long range in feet for ranged weapons
}

// Armor-specific data
message ArmorData {
  ArmorCategory armor_category = 1;
  int32 base_ac = 2;
  bool dex_bonus = 3;
  bool has_dex_limit = 4; // Indicates if max_dex_bonus is applicable
  int32 max_dex_bonus = 5; // Maximum Dexterity bonus to AC, valid only if has_dex_limit is true
  int32 str_minimum = 6;
  bool stealth_disadvantage = 7;
}

// General gear data
message GearData {
  GearCategory gear_category = 1;
  repeated string properties = 2;
}

// Equipment slots for a character
message EquipmentSlots {
  // Combat equipment
  InventoryItem main_hand = 1;
  InventoryItem off_hand = 2;

  // Armor slots
  InventoryItem armor = 3;
  InventoryItem helmet = 4;
  InventoryItem boots = 5;
  InventoryItem gloves = 6;
  InventoryItem cloak = 7;

  // Accessory slots
  InventoryItem amulet = 8;
  InventoryItem ring_1 = 9;
  InventoryItem ring_2 = 10;
  InventoryItem belt = 11;
}

// An item in inventory (equipped or not)
message InventoryItem {
  string item_id = 1; // Reference to Equipment.id
  int32 quantity = 2; // For stackable items
  bool is_attuned = 3; // For magic items requiring attunement
  string custom_name = 4; // Optional custom name (e.g., "My Lucky Sword")

  // Denormalized equipment data for quick access
  Equipment equipment = 5;
}

// Encumbrance and carrying capacity
message EncumbranceInfo {
  int32 current_weight = 1; // Total weight carried (in tenths of pounds for 0.1-pound precision)
  int32 carrying_capacity = 2; // Max weight before encumbered (in tenths of pounds for 0.1-pound precision)
  int32 max_capacity = 3; // Max weight before immobilized (in tenths of pounds for 0.1-pound precision)
  EncumbranceLevel level = 4; // Current encumbrance level
}

// Encumbrance levels
enum EncumbranceLevel {
  ENCUMBRANCE_LEVEL_UNSPECIFIED = 0;
  ENCUMBRANCE_LEVEL_UNENCUMBERED = 1; // Under carrying capacity
  ENCUMBRANCE_LEVEL_ENCUMBERED = 2; // Speed reduced by 10 feet
  ENCUMBRANCE_LEVEL_HEAVILY_ENCUMBERED = 3; // Speed reduced by 20 feet, disadvantage on ability checks
  ENCUMBRANCE_LEVEL_IMMOBILIZED = 4; // Cannot move
}

// Spell messages
// TODO: Add SpellData message when spell details are implemented in toolkit

// Source of a choice during character creation
enum ChoiceSource {
  CHOICE_SOURCE_UNSPECIFIED = 0;
  CHOICE_SOURCE_PLAYER = 1; // Direct player choice
  CHOICE_SOURCE_RACE = 2;
  CHOICE_SOURCE_SUBRACE = 3;
  CHOICE_SOURCE_CLASS = 4;
  CHOICE_SOURCE_BACKGROUND = 5;
  CHOICE_SOURCE_LEVEL_UP = 6; // Choices made during level progression
}

// New unified choice data structure for the toolkit refactoring
message ChoiceData {
  ChoiceCategory category = 1; // Type of choice (skills, languages, etc.)
  ChoiceSource source = 2; // Where this choice came from
  string choice_id = 3; // Specific choice identifier

  // Type-safe selection using oneof pattern (matching toolkit refactoring)
  oneof selection {
    string name = 4;
    SkillList skills = 5;
    LanguageList languages = 6;
    AbilityScores ability_scores = 7;
    FightingStyle fighting_style = 8;
    EquipmentList equipment = 9;
    RaceChoice race = 10;
    ClassChoice class = 11;
    Background background = 12;
    SpellList spells = 13;
    CantripList cantrips = 14;
    ExpertiseList expertise = 15;
    TraitList traits = 16;
    ToolProficiencyList tool_proficiencies = 17;
  }
}

// Wrapper messages for repeated fields in oneof
message SkillList {
  repeated Skill skills = 1;
}

message LanguageList {
  repeated Language languages = 1;
}

message EquipmentList {
  repeated EquipmentSelection items = 1;
}

message SpellList {
  repeated Spell spells = 1;
}

message CantripList {
  repeated Spell cantrips = 1;
}

message ExpertiseList {
  repeated Skill skills = 1; // Skills that get expertise (double proficiency)
}

message TraitList {
  repeated Trait traits = 1; // Racial or class trait selections
}

message ToolProficiencyList {
  repeated Tool tools = 1; // Tool proficiency selections
}

message RaceChoice {
  Race race = 1;
  Subrace subrace = 2; // Optional
}

message ClassChoice {
  Class class = 1;
  // Could add subclass later when implemented
}

// REMOVED: ChoiceSelection - replaced by ChoiceData
// REMOVED: AbilityScoreChoice - no longer needed

// ============================================================================
// New messages for toolkit integration with type-safe enums
// ============================================================================

// Equipment choice for character creation
message EquipmentChoice {
  string choice_id = 1; // e.g., "fighter-armor-a"
  string description = 2; // Human-readable description

  // Options for this choice
  repeated EquipmentOption options = 3;
}

// Single equipment option within a choice
message EquipmentOption {
  string option_id = 1; // e.g., "leather-longbow"
  string description = 2;

  // Equipment items granted by this option
  repeated EquipmentSelection items = 3;
}

// A specific equipment item with quantity
message EquipmentSelection {
  oneof equipment {
    Weapon weapon = 1;
    Armor armor = 2;
    Tool tool = 3;
    Pack pack = 4;
    Ammunition ammunition = 5;
    string other_equipment_id = 6; // For items not yet enumerated
  }
  int32 quantity = 7; // Default 1
}

// Submission for a choice made by the player
message ChoiceSubmission {
  ChoiceCategory category = 1;
  ChoiceSource source = 2;
  string choice_id = 3; // Which choice this is for
  string option_id = 4; // Which option was selected (for equipment)

  // Values selected (skills, languages, equipment, etc.)
  oneof values {
    SkillSelection skills = 5;
    LanguageSelection languages = 6;
    EquipmentSelection equipment = 7;
    FightingStyleSelection fighting_style = 8;
    ToolSelection tools = 9;
    WeaponProficiencySelection weapon_proficiencies = 10;
    ArmorProficiencySelection armor_proficiencies = 11;
  }
}

// Skill selection
message SkillSelection {
  repeated Skill skills = 1;
}

// Language selection
message LanguageSelection {
  repeated Language languages = 1;
}

// Fighting style selection
message FightingStyleSelection {
  FightingStyle style = 1;
}

// Tool proficiency selection
message ToolSelection {
  repeated Tool tools = 1;
}

// Weapon proficiency selection
message WeaponProficiencySelection {
  repeated Weapon weapons = 1;
  repeated EquipmentType categories = 2; // For "all martial weapons" etc.
}

// Armor proficiency selection
message ArmorProficiencySelection {
  repeated Armor armors = 1;
  repeated EquipmentType categories = 2; // For "all light armor" etc.
}

// Requirements for character choices
message CharacterRequirements {
  // All choices that need to be made
  repeated RequiredChoice choices = 1;

  // Validation state
  bool all_choices_made = 2;
  repeated string missing_choices = 3;
}

// A single required choice
message RequiredChoice {
  string choice_id = 1;
  ChoiceCategory category = 2;
  ChoiceSource source = 3;
  string description = 4;
  int32 count = 5; // How many to choose

  // Available options based on category
  oneof options {
    SkillOptions skill_options = 6;
    LanguageOptions language_options = 7;
    EquipmentChoice equipment_options = 8;
    FightingStyleOptions fighting_style_options = 9;
    ToolOptions tool_options = 10;
  }
}

// Available skill options
message SkillOptions {
  repeated Skill available = 1;
}

// Available language options
message LanguageOptions {
  repeated Language available = 1;
}

// Available fighting style options
message FightingStyleOptions {
  repeated FightingStyle available = 1;
}

// Available tool options
message ToolOptions {
  repeated Tool available = 1;
}

// Spell damage information
message SpellDamage {
  DamageType damage_type = 1;
  repeated DamageAtSlotLevel damage_at_slot_level = 2; // List of damage dice by slot level
}

// Damage at a specific slot level
message DamageAtSlotLevel {
  int32 slot_level = 1; // Spell slot level (0-9)
  string damage_dice = 2; // Damage dice (e.g., "2d6", "3d8")
}

// Area of effect information
message AreaOfEffect {
  string type = 1; // "sphere", "cone", "line", etc.
  int32 size = 2; // radius, length, etc.
}

// List equipment by type

// Request to list equipment by type
message ListEquipmentByTypeRequest {
  EquipmentType equipment_type = 1; // Type of equipment to filter by
  int32 page_size = 2;
  string page_token = 3;
}

// Response with equipment list
message ListEquipmentByTypeResponse {
  repeated Equipment equipment = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// List spells by level

// Request to list spells by level
message ListSpellsByLevelRequest {
  int32 level = 1; // 0-9 (0 = cantrips)
  Class class = 2; // Optional: filter by class
  int32 page_size = 3;
  string page_token = 4;
}

// Response with spell list
message ListSpellsByLevelResponse {
  repeated Spell spells = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

// Equipment management messages

// Request to get character inventory
message GetCharacterInventoryRequest {
  string character_id = 1;
}

// Response with character inventory
message GetCharacterInventoryResponse {
  EquipmentSlots equipment_slots = 1;
  repeated InventoryItem inventory = 2;
  EncumbranceInfo encumbrance = 3;
  int32 attunement_slots_used = 4;
  int32 attunement_slots_max = 5; // Usually 3 for most characters
}

// Request to equip an item
message EquipItemRequest {
  string character_id = 1;
  string item_id = 2; // Item from inventory to equip
  EquipmentSlot slot = 3; // Which slot to equip to
}

// Equipment slot types
enum EquipmentSlot {
  EQUIPMENT_SLOT_UNSPECIFIED = 0;
  EQUIPMENT_SLOT_MAIN_HAND = 1;
  EQUIPMENT_SLOT_OFF_HAND = 2;
  EQUIPMENT_SLOT_ARMOR = 3;
  EQUIPMENT_SLOT_HELMET = 4;
  EQUIPMENT_SLOT_BOOTS = 5;
  EQUIPMENT_SLOT_GLOVES = 6;
  EQUIPMENT_SLOT_CLOAK = 7;
  EQUIPMENT_SLOT_AMULET = 8;
  EQUIPMENT_SLOT_RING_1 = 9;
  EQUIPMENT_SLOT_RING_2 = 10;
  EQUIPMENT_SLOT_BELT = 11;
}

// Response from equipping an item
message EquipItemResponse {
  Character character = 1; // Updated character with new equipment
  InventoryItem previously_equipped_item = 2; // Item that was displaced from the slot (if any)
}

// Request to unequip an item
message UnequipItemRequest {
  string character_id = 1;
  EquipmentSlot slot = 2; // Which slot to unequip from
}

// Response from unequipping an item
message UnequipItemResponse {
  Character character = 1; // Updated character
}

// Request to add items to inventory
message AddToInventoryRequest {
  string character_id = 1;
  repeated InventoryAddition items = 2;
}

// Item to add to inventory
message InventoryAddition {
  string item_id = 1; // Equipment.id reference
  int32 quantity = 2; // How many to add
}

// Response from adding to inventory
message AddToInventoryResponse {
  Character character = 1; // Updated character
  repeated string errors = 2; // Any items that couldn't be added
}

// Request to remove items from inventory
message RemoveFromInventoryRequest {
  string character_id = 1;
  string item_id = 2; // Item to remove
  oneof removal_amount {
    int32 quantity = 3; // Specific quantity to remove
    bool remove_all = 4; // Remove all of this item
  }
}

// Response from removing from inventory
message RemoveFromInventoryResponse {
  Character character = 1; // Updated character
  int32 quantity_removed = 2; // Actual quantity removed
}
