// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dnd5e/api/v1alpha1/encounter.proto
// Protobuf C++ Version: 6.32.0

#include "dnd5e/api/v1alpha1/encounter.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dnd5e {
namespace api {
namespace v1alpha1 {

inline constexpr TurnChangeEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        previous_entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        next_entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        round_{0},
        new_round_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TurnChangeEvent::TurnChangeEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TurnChangeEvent_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TurnChangeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnChangeEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnChangeEventDefaultTypeInternal() {}
  union {
    TurnChangeEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnChangeEventDefaultTypeInternal _TurnChangeEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MovementError_DetailsEntry_DoNotUse::MovementError_DetailsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : MovementError_DetailsEntry_DoNotUse::MapEntry(MovementError_DetailsEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : MovementError_DetailsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct MovementError_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementError_DetailsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementError_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MovementError_DetailsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementError_DetailsEntry_DoNotUseDefaultTypeInternal _MovementError_DetailsEntry_DoNotUse_default_instance_;

inline constexpr InitiativeEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initiative_{0},
        modifier_{0},
        has_acted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR InitiativeEntry::InitiativeEntry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(InitiativeEntry_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InitiativeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitiativeEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitiativeEntryDefaultTypeInternal() {}
  union {
    InitiativeEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitiativeEntryDefaultTypeInternal _InitiativeEntry_default_instance_;

inline constexpr GetCombatStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR GetCombatStateRequest::GetCombatStateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GetCombatStateRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetCombatStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCombatStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCombatStateRequestDefaultTypeInternal() {}
  union {
    GetCombatStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCombatStateRequestDefaultTypeInternal _GetCombatStateRequest_default_instance_;

inline constexpr EndTurnRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR EndTurnRequest::EndTurnRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EndTurnRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EndTurnRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTurnRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTurnRequestDefaultTypeInternal() {}
  union {
    EndTurnRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTurnRequestDefaultTypeInternal _EndTurnRequest_default_instance_;

inline constexpr DungeonStartRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : character_ids_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DungeonStartRequest::DungeonStartRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DungeonStartRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DungeonStartRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DungeonStartRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DungeonStartRequestDefaultTypeInternal() {}
  union {
    DungeonStartRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DungeonStartRequestDefaultTypeInternal _DungeonStartRequest_default_instance_;

inline constexpr AttackResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        damage_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        attack_roll_{0},
        attack_total_{0},
        target_ac_{0},
        hit_{false},
        critical_{false},
        damage_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AttackResult::AttackResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AttackResult_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttackResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttackResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttackResultDefaultTypeInternal() {}
  union {
    AttackResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttackResultDefaultTypeInternal _AttackResult_default_instance_;

inline constexpr AttackRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        attacker_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        weapon_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR AttackRequest::AttackRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AttackRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttackRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttackRequestDefaultTypeInternal() {}
  union {
    AttackRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttackRequestDefaultTypeInternal _AttackRequest_default_instance_;

inline constexpr TurnState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        movement_used_{0},
        movement_max_{0},
        action_used_{false},
        bonus_action_used_{false},
        reaction_available_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TurnState::TurnState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TurnState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TurnStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnStateDefaultTypeInternal() {}
  union {
    TurnState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnStateDefaultTypeInternal _TurnState_default_instance_;

inline constexpr MovementError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        details_{},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{static_cast< ::dnd5e::api::v1alpha1::MovementError_ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MovementError::MovementError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MovementError_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MovementErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementErrorDefaultTypeInternal() {}
  union {
    MovementError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementErrorDefaultTypeInternal _MovementError_default_instance_;

inline constexpr MoveCharacterRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_position_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MoveCharacterRequest::MoveCharacterRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MoveCharacterRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveCharacterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveCharacterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveCharacterRequestDefaultTypeInternal() {}
  union {
    MoveCharacterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveCharacterRequestDefaultTypeInternal _MoveCharacterRequest_default_instance_;

inline constexpr EntityPlacement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        size_{0},
        blocks_movement_{false},
        blocks_line_of_sight_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EntityPlacement::EntityPlacement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EntityPlacement_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EntityPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityPlacementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityPlacementDefaultTypeInternal() {}
  union {
    EntityPlacement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityPlacementDefaultTypeInternal _EntityPlacement_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Room_EntitiesEntry_DoNotUse::Room_EntitiesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Room_EntitiesEntry_DoNotUse::MapEntry(Room_EntitiesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Room_EntitiesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Room_EntitiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Room_EntitiesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Room_EntitiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Room_EntitiesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Room_EntitiesEntry_DoNotUseDefaultTypeInternal _Room_EntitiesEntry_DoNotUse_default_instance_;

inline constexpr CombatState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        turn_order_{},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_turn_{nullptr},
        round_{0},
        active_index_{0},
        combat_started_{false},
        combat_ended_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CombatState::CombatState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CombatState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CombatStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CombatStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CombatStateDefaultTypeInternal() {}
  union {
    CombatState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CombatStateDefaultTypeInternal _CombatState_default_instance_;

inline constexpr Room::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entities_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0},
        height_{0},
        grid_type_{static_cast< ::api::v1alpha1::GridType >(0)},
        hex_orientation_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Room::Room(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Room_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;

inline constexpr EndTurnResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        combat_state_{nullptr},
        turn_change_{nullptr},
        success_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EndTurnResponse::EndTurnResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EndTurnResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EndTurnResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTurnResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTurnResponseDefaultTypeInternal() {}
  union {
    EndTurnResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTurnResponseDefaultTypeInternal _EndTurnResponse_default_instance_;

inline constexpr MoveCharacterResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        error_{nullptr},
        updated_room_{nullptr},
        combat_state_{nullptr},
        success_{false},
        movement_remaining_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MoveCharacterResponse::MoveCharacterResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MoveCharacterResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveCharacterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveCharacterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveCharacterResponseDefaultTypeInternal() {}
  union {
    MoveCharacterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveCharacterResponseDefaultTypeInternal _MoveCharacterResponse_default_instance_;

inline constexpr GetCombatStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_{nullptr},
        combat_state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetCombatStateResponse::GetCombatStateResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GetCombatStateResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetCombatStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCombatStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCombatStateResponseDefaultTypeInternal() {}
  union {
    GetCombatStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCombatStateResponseDefaultTypeInternal _GetCombatStateResponse_default_instance_;

inline constexpr DungeonStartResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encounter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_{nullptr},
        combat_state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DungeonStartResponse::DungeonStartResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DungeonStartResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DungeonStartResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DungeonStartResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DungeonStartResponseDefaultTypeInternal() {}
  union {
    DungeonStartResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DungeonStartResponseDefaultTypeInternal _DungeonStartResponse_default_instance_;

inline constexpr AttackResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        error_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        combat_state_{nullptr},
        updated_room_{nullptr},
        success_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AttackResponse::AttackResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AttackResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttackResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttackResponseDefaultTypeInternal() {}
  union {
    AttackResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttackResponseDefaultTypeInternal _AttackResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace api
}  // namespace dnd5e
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto = nullptr;
const ::uint32_t
    TableStruct_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.entity_type_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.blocks_movement_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EntityPlacement, _impl_.blocks_line_of_sight_),
        0,
        1,
        2,
        3,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room_EntitiesEntry_DoNotUse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room_EntitiesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room_EntitiesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.grid_type_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.hex_orientation_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::Room, _impl_.entities_),
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::DungeonStartRequest, _impl_.character_ids_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::DungeonStartResponse, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::DungeonStartResponse, _impl_.encounter_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::DungeonStartResponse, _impl_.room_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::DungeonStartResponse, _impl_.combat_state_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_.entity_type_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_.initiative_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_.modifier_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::InitiativeEntry, _impl_.has_acted_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.movement_used_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.movement_max_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.action_used_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.bonus_action_used_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.reaction_available_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnState, _impl_.position_),
        0,
        2,
        3,
        4,
        5,
        6,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.encounter_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.turn_order_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.active_index_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.current_turn_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.combat_started_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::CombatState, _impl_.combat_ended_),
        0,
        2,
        ~0u,
        3,
        1,
        4,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::GetCombatStateRequest, _impl_._has_bits_),
        4, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::GetCombatStateRequest, _impl_.encounter_id_),
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::GetCombatStateResponse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::GetCombatStateResponse, _impl_.room_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::GetCombatStateResponse, _impl_.combat_state_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterRequest, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterRequest, _impl_.encounter_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterRequest, _impl_.target_position_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError_DetailsEntry_DoNotUse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError_DetailsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError_DetailsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError, _impl_.code_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MovementError, _impl_.details_),
        1,
        0,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_.error_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_.movement_remaining_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_.updated_room_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::MoveCharacterResponse, _impl_.combat_state_),
        3,
        0,
        4,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnRequest, _impl_.encounter_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnRequest, _impl_.entity_id_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnChangeEvent, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnChangeEvent, _impl_.previous_entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnChangeEvent, _impl_.next_entity_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnChangeEvent, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::TurnChangeEvent, _impl_.new_round_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnResponse, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnResponse, _impl_.combat_state_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::EndTurnResponse, _impl_.turn_change_),
        2,
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackRequest, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackRequest, _impl_.encounter_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackRequest, _impl_.attacker_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackRequest, _impl_.target_id_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackRequest, _impl_.weapon_id_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.hit_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.attack_roll_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.attack_total_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.target_ac_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.damage_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.damage_type_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResult, _impl_.critical_),
        4,
        1,
        2,
        3,
        6,
        0,
        5,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_.error_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_.combat_state_),
        PROTOBUF_FIELD_OFFSET(::dnd5e::api::v1alpha1::AttackResponse, _impl_.updated_room_),
        4,
        0,
        1,
        2,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::dnd5e::api::v1alpha1::EntityPlacement)},
        {15, sizeof(::dnd5e::api::v1alpha1::Room_EntitiesEntry_DoNotUse)},
        {22, sizeof(::dnd5e::api::v1alpha1::Room)},
        {39, sizeof(::dnd5e::api::v1alpha1::DungeonStartRequest)},
        {41, sizeof(::dnd5e::api::v1alpha1::DungeonStartResponse)},
        {50, sizeof(::dnd5e::api::v1alpha1::InitiativeEntry)},
        {63, sizeof(::dnd5e::api::v1alpha1::TurnState)},
        {80, sizeof(::dnd5e::api::v1alpha1::CombatState)},
        {97, sizeof(::dnd5e::api::v1alpha1::GetCombatStateRequest)},
        {102, sizeof(::dnd5e::api::v1alpha1::GetCombatStateResponse)},
        {109, sizeof(::dnd5e::api::v1alpha1::MoveCharacterRequest)},
        {118, sizeof(::dnd5e::api::v1alpha1::MovementError_DetailsEntry_DoNotUse)},
        {125, sizeof(::dnd5e::api::v1alpha1::MovementError)},
        {134, sizeof(::dnd5e::api::v1alpha1::MoveCharacterResponse)},
        {147, sizeof(::dnd5e::api::v1alpha1::EndTurnRequest)},
        {154, sizeof(::dnd5e::api::v1alpha1::TurnChangeEvent)},
        {165, sizeof(::dnd5e::api::v1alpha1::EndTurnResponse)},
        {174, sizeof(::dnd5e::api::v1alpha1::AttackRequest)},
        {185, sizeof(::dnd5e::api::v1alpha1::AttackResult)},
        {202, sizeof(::dnd5e::api::v1alpha1::AttackResponse)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::dnd5e::api::v1alpha1::_EntityPlacement_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_Room_EntitiesEntry_DoNotUse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_Room_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_DungeonStartRequest_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_DungeonStartResponse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_InitiativeEntry_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_TurnState_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_CombatState_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_GetCombatStateRequest_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_GetCombatStateResponse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_MoveCharacterRequest_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_MovementError_DetailsEntry_DoNotUse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_MovementError_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_MoveCharacterResponse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_EndTurnRequest_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_TurnChangeEvent_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_EndTurnResponse_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_AttackRequest_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_AttackResult_default_instance_._instance,
    &::dnd5e::api::v1alpha1::_AttackResponse_default_instance_._instance,
};
const char descriptor_table_protodef_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\"dnd5e/api/v1alpha1/encounter.proto\022\022dn"
    "d5e.api.v1alpha1\032\036api/v1alpha1/room_comm"
    "on.proto\"\361\001\n\017EntityPlacement\022\033\n\tentity_i"
    "d\030\001 \001(\tR\010entityId\022\037\n\013entity_type\030\002 \001(\tR\n"
    "entityType\0222\n\010position\030\003 \001(\0132\026.api.v1alp"
    "ha1.PositionR\010position\022\022\n\004size\030\004 \001(\005R\004si"
    "ze\022\'\n\017blocks_movement\030\005 \001(\010R\016blocksMovem"
    "ent\022/\n\024blocks_line_of_sight\030\006 \001(\010R\021block"
    "sLineOfSight\"\365\002\n\004Room\022\016\n\002id\030\001 \001(\tR\002id\022\022\n"
    "\004type\030\002 \001(\tR\004type\022\024\n\005width\030\003 \001(\005R\005width\022"
    "\026\n\006height\030\004 \001(\005R\006height\0223\n\tgrid_type\030\005 \001"
    "(\0162\026.api.v1alpha1.GridTypeR\010gridType\022,\n\017"
    "hex_orientation\030\006 \001(\010H\000R\016hexOrientation\210"
    "\001\001\022B\n\010entities\030\007 \003(\0132&.dnd5e.api.v1alpha"
    "1.Room.EntitiesEntryR\010entities\032`\n\rEntiti"
    "esEntry\022\020\n\003key\030\001 \001(\tR\003key\0229\n\005value\030\002 \001(\013"
    "2#.dnd5e.api.v1alpha1.EntityPlacementR\005v"
    "alue:\0028\001B\022\n\020_hex_orientation\":\n\023DungeonS"
    "tartRequest\022#\n\rcharacter_ids\030\001 \003(\tR\014char"
    "acterIds\"\253\001\n\024DungeonStartResponse\022!\n\014enc"
    "ounter_id\030\001 \001(\tR\013encounterId\022,\n\004room\030\002 \001"
    "(\0132\030.dnd5e.api.v1alpha1.RoomR\004room\022B\n\014co"
    "mbat_state\030\003 \001(\0132\037.dnd5e.api.v1alpha1.Co"
    "mbatStateR\013combatState\"\250\001\n\017InitiativeEnt"
    "ry\022\033\n\tentity_id\030\001 \001(\tR\010entityId\022\037\n\013entit"
    "y_type\030\002 \001(\tR\nentityType\022\036\n\ninitiative\030\003"
    " \001(\005R\ninitiative\022\032\n\010modifier\030\004 \001(\005R\010modi"
    "fier\022\033\n\thas_acted\030\005 \001(\010R\010hasActed\"\240\002\n\tTu"
    "rnState\022\033\n\tentity_id\030\001 \001(\tR\010entityId\022#\n\r"
    "movement_used\030\002 \001(\005R\014movementUsed\022!\n\014mov"
    "ement_max\030\003 \001(\005R\013movementMax\022\037\n\013action_u"
    "sed\030\004 \001(\010R\nactionUsed\022*\n\021bonus_action_us"
    "ed\030\005 \001(\010R\017bonusActionUsed\022-\n\022reaction_av"
    "ailable\030\006 \001(\010R\021reactionAvailable\0222\n\010posi"
    "tion\030\007 \001(\0132\026.api.v1alpha1.PositionR\010posi"
    "tion\"\271\002\n\013CombatState\022!\n\014encounter_id\030\001 \001"
    "(\tR\013encounterId\022\024\n\005round\030\002 \001(\005R\005round\022B\n"
    "\nturn_order\030\003 \003(\0132#.dnd5e.api.v1alpha1.I"
    "nitiativeEntryR\tturnOrder\022!\n\014active_inde"
    "x\030\004 \001(\005R\013activeIndex\022@\n\014current_turn\030\005 \001"
    "(\0132\035.dnd5e.api.v1alpha1.TurnStateR\013curre"
    "ntTurn\022%\n\016combat_started\030\006 \001(\010R\rcombatSt"
    "arted\022!\n\014combat_ended\030\007 \001(\010R\013combatEnded"
    "\":\n\025GetCombatStateRequest\022!\n\014encounter_i"
    "d\030\001 \001(\tR\013encounterId\"\212\001\n\026GetCombatStateR"
    "esponse\022,\n\004room\030\001 \001(\0132\030.dnd5e.api.v1alph"
    "a1.RoomR\004room\022B\n\014combat_state\030\002 \001(\0132\037.dn"
    "d5e.api.v1alpha1.CombatStateR\013combatStat"
    "e\"\227\001\n\024MoveCharacterRequest\022!\n\014encounter_"
    "id\030\001 \001(\tR\013encounterId\022\033\n\tentity_id\030\002 \001(\t"
    "R\010entityId\022\?\n\017target_position\030\003 \001(\0132\026.ap"
    "i.v1alpha1.PositionR\016targetPosition\"\334\003\n\r"
    "MovementError\022\?\n\004code\030\001 \001(\0162+.dnd5e.api."
    "v1alpha1.MovementError.ErrorCodeR\004code\022\030"
    "\n\007message\030\002 \001(\tR\007message\022H\n\007details\030\003 \003("
    "\0132..dnd5e.api.v1alpha1.MovementError.Det"
    "ailsEntryR\007details\032:\n\014DetailsEntry\022\020\n\003ke"
    "y\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\351"
    "\001\n\tErrorCode\022\032\n\026ERROR_CODE_UNSPECIFIED\020\000"
    "\022\037\n\033ERROR_CODE_INVALID_POSITION\020\001\022$\n ERR"
    "OR_CODE_INSUFFICIENT_MOVEMENT\020\002\022\033\n\027ERROR"
    "_CODE_PATH_BLOCKED\020\003\022 \n\034ERROR_CODE_POSIT"
    "ION_OCCUPIED\020\004\022\034\n\030ERROR_CODE_OUT_OF_BOUN"
    "DS\020\005\022\034\n\030ERROR_CODE_NOT_YOUR_TURN\020\006\"\232\002\n\025M"
    "oveCharacterResponse\022\030\n\007success\030\001 \001(\010R\007s"
    "uccess\0227\n\005error\030\002 \001(\0132!.dnd5e.api.v1alph"
    "a1.MovementErrorR\005error\022-\n\022movement_rema"
    "ining\030\003 \001(\005R\021movementRemaining\022;\n\014update"
    "d_room\030\004 \001(\0132\030.dnd5e.api.v1alpha1.RoomR\013"
    "updatedRoom\022B\n\014combat_state\030\005 \001(\0132\037.dnd5"
    "e.api.v1alpha1.CombatStateR\013combatState\""
    "P\n\016EndTurnRequest\022!\n\014encounter_id\030\001 \001(\tR"
    "\013encounterId\022\033\n\tentity_id\030\002 \001(\tR\010entityI"
    "d\"\230\001\n\017TurnChangeEvent\022,\n\022previous_entity"
    "_id\030\001 \001(\tR\020previousEntityId\022$\n\016next_enti"
    "ty_id\030\002 \001(\tR\014nextEntityId\022\024\n\005round\030\003 \001(\005"
    "R\005round\022\033\n\tnew_round\030\004 \001(\010R\010newRound\"\265\001\n"
    "\017EndTurnResponse\022\030\n\007success\030\001 \001(\010R\007succe"
    "ss\022B\n\014combat_state\030\002 \001(\0132\037.dnd5e.api.v1a"
    "lpha1.CombatStateR\013combatState\022D\n\013turn_c"
    "hange\030\003 \001(\0132#.dnd5e.api.v1alpha1.TurnCha"
    "ngeEventR\nturnChange\"\215\001\n\rAttackRequest\022!"
    "\n\014encounter_id\030\001 \001(\tR\013encounterId\022\037\n\013att"
    "acker_id\030\002 \001(\tR\nattackerId\022\033\n\ttarget_id\030"
    "\003 \001(\tR\010targetId\022\033\n\tweapon_id\030\004 \001(\tR\010weap"
    "onId\"\326\001\n\014AttackResult\022\020\n\003hit\030\001 \001(\010R\003hit\022"
    "\037\n\013attack_roll\030\002 \001(\005R\nattackRoll\022!\n\014atta"
    "ck_total\030\003 \001(\005R\013attackTotal\022\033\n\ttarget_ac"
    "\030\004 \001(\005R\010targetAc\022\026\n\006damage\030\005 \001(\005R\006damage"
    "\022\037\n\013damage_type\030\006 \001(\tR\ndamageType\022\032\n\010cri"
    "tical\030\007 \001(\010R\010critical\"\373\001\n\016AttackResponse"
    "\022\030\n\007success\030\001 \001(\010R\007success\022\024\n\005error\030\002 \001("
    "\tR\005error\0228\n\006result\030\003 \001(\0132 .dnd5e.api.v1a"
    "lpha1.AttackResultR\006result\022B\n\014combat_sta"
    "te\030\004 \001(\0132\037.dnd5e.api.v1alpha1.CombatStat"
    "eR\013combatState\022;\n\014updated_room\030\005 \001(\0132\030.d"
    "nd5e.api.v1alpha1.RoomR\013updatedRoom2\351\003\n\020"
    "EncounterService\022a\n\014DungeonStart\022\'.dnd5e"
    ".api.v1alpha1.DungeonStartRequest\032(.dnd5"
    "e.api.v1alpha1.DungeonStartResponse\022g\n\016G"
    "etCombatState\022).dnd5e.api.v1alpha1.GetCo"
    "mbatStateRequest\032*.dnd5e.api.v1alpha1.Ge"
    "tCombatStateResponse\022d\n\rMoveCharacter\022(."
    "dnd5e.api.v1alpha1.MoveCharacterRequest\032"
    ").dnd5e.api.v1alpha1.MoveCharacterRespon"
    "se\022R\n\007EndTurn\022\".dnd5e.api.v1alpha1.EndTu"
    "rnRequest\032#.dnd5e.api.v1alpha1.EndTurnRe"
    "sponse\022O\n\006Attack\022!.dnd5e.api.v1alpha1.At"
    "tackRequest\032\".dnd5e.api.v1alpha1.AttackR"
    "esponseB\337\001\n\026com.dnd5e.api.v1alpha1B\016Enco"
    "unterProtoP\001ZKgithub.com/KirkDiggler/rpg"
    "-api-protos/gen/go/dnd5e/api/v1alpha1;ap"
    "iv1alpha1\242\002\003DAX\252\002\022Dnd5e.Api.V1alpha1\312\002\022D"
    "nd5e\\Api\\V1alpha1\342\002\036Dnd5e\\Api\\V1alpha1\\G"
    "PBMetadata\352\002\024Dnd5e::Api::V1alpha1b\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto_deps[1] = {
        &::descriptor_table_api_2fv1alpha1_2froom_5fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto = {
    false,
    false,
    4601,
    descriptor_table_protodef_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
    "dnd5e/api/v1alpha1/encounter.proto",
    &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto_once,
    descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto_deps,
    1,
    20,
    schemas,
    file_default_instances,
    TableStruct_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto::offsets,
    file_level_enum_descriptors_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
    file_level_service_descriptors_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
};
namespace dnd5e {
namespace api {
namespace v1alpha1 {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MovementError_ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto);
  return file_level_enum_descriptors_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MovementError_ErrorCode_internal_data_[] = {
    458752u, 0u, };
// ===================================================================

class EntityPlacement::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EntityPlacement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_._has_bits_);
};

void EntityPlacement::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
EntityPlacement::EntityPlacement(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EntityPlacement_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.EntityPlacement)
}
PROTOBUF_NDEBUG_INLINE EntityPlacement::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::EntityPlacement& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        entity_type_(arena, from.entity_type_) {}

EntityPlacement::EntityPlacement(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EntityPlacement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EntityPlacement_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EntityPlacement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, size_),
           offsetof(Impl_, blocks_line_of_sight_) -
               offsetof(Impl_, size_) +
               sizeof(Impl_::blocks_line_of_sight_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.EntityPlacement)
}
PROTOBUF_NDEBUG_INLINE EntityPlacement::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        entity_type_(arena) {}

inline void EntityPlacement::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, blocks_line_of_sight_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::blocks_line_of_sight_));
}
EntityPlacement::~EntityPlacement() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.EntityPlacement)
  SharedDtor(*this);
}
inline void EntityPlacement::SharedDtor(MessageLite& self) {
  EntityPlacement& this_ = static_cast<EntityPlacement&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.entity_type_.Destroy();
  delete this_._impl_.position_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EntityPlacement::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EntityPlacement(arena);
}
constexpr auto EntityPlacement::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EntityPlacement),
                                            alignof(EntityPlacement));
}
constexpr auto EntityPlacement::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EntityPlacement_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EntityPlacement::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EntityPlacement>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EntityPlacement::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EntityPlacement>(), &EntityPlacement::ByteSizeLong,
              &EntityPlacement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_._cached_size_),
          false,
      },
      &EntityPlacement::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EntityPlacement_class_data_ =
        EntityPlacement::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EntityPlacement::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EntityPlacement_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EntityPlacement_class_data_.tc_table);
  return EntityPlacement_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 63, 2>
EntityPlacement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EntityPlacement_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::EntityPlacement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.entity_id_)}},
    // string entity_type = 2 [json_name = "entityType"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.entity_type_)}},
    // .api.v1alpha1.Position position = 3 [json_name = "position"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.position_)}},
    // int32 size = 4 [json_name = "size"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EntityPlacement, _impl_.size_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.size_)}},
    // bool blocks_movement = 5 [json_name = "blocksMovement"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EntityPlacement, _impl_.blocks_movement_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.blocks_movement_)}},
    // bool blocks_line_of_sight = 6 [json_name = "blocksLineOfSight"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EntityPlacement, _impl_.blocks_line_of_sight_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.blocks_line_of_sight_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_type = 2 [json_name = "entityType"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.entity_type_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .api.v1alpha1.Position position = 3 [json_name = "position"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.position_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 size = 4 [json_name = "size"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.size_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool blocks_movement = 5 [json_name = "blocksMovement"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.blocks_movement_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool blocks_line_of_sight = 6 [json_name = "blocksLineOfSight"];
    {PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.blocks_line_of_sight_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::api::v1alpha1::Position>()},
  }},
  {{
    "\42\11\13\0\0\0\0\0"
    "dnd5e.api.v1alpha1.EntityPlacement"
    "entity_id"
    "entity_type"
  }},
};
PROTOBUF_NOINLINE void EntityPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.EntityPlacement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.entity_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000038U) != 0) {
    ::memset(&_impl_.size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.blocks_line_of_sight_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.blocks_line_of_sight_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EntityPlacement::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EntityPlacement& this_ = static_cast<const EntityPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EntityPlacement::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EntityPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.EntityPlacement)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.EntityPlacement.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string entity_type = 2 [json_name = "entityType"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_entity_type().empty()) {
      const ::std::string& _s = this_._internal_entity_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.EntityPlacement.entity_type");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .api.v1alpha1.Position position = 3 [json_name = "position"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
        stream);
  }

  // int32 size = 4 [json_name = "size"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    if (this_._internal_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_size(), target);
    }
  }

  // bool blocks_movement = 5 [json_name = "blocksMovement"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (this_._internal_blocks_movement() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_blocks_movement(), target);
    }
  }

  // bool blocks_line_of_sight = 6 [json_name = "blocksLineOfSight"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    if (this_._internal_blocks_line_of_sight() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_blocks_line_of_sight(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.EntityPlacement)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EntityPlacement::ByteSizeLong(const MessageLite& base) {
  const EntityPlacement& this_ = static_cast<const EntityPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EntityPlacement::ByteSizeLong() const {
  const EntityPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.EntityPlacement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string entity_type = 2 [json_name = "entityType"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_entity_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_type());
      }
    }
    // .api.v1alpha1.Position position = 3 [json_name = "position"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
    }
    // int32 size = 4 [json_name = "size"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_size());
      }
    }
    // bool blocks_movement = 5 [json_name = "blocksMovement"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_blocks_movement() != 0) {
        total_size += 2;
      }
    }
    // bool blocks_line_of_sight = 6 [json_name = "blocksLineOfSight"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_blocks_line_of_sight() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EntityPlacement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EntityPlacement*>(&to_msg);
  auto& from = static_cast<const EntityPlacement&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.EntityPlacement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_entity_type().empty()) {
        _this->_internal_set_entity_type(from._internal_entity_type());
      } else {
        if (_this->_impl_.entity_type_.IsDefault()) {
          _this->_internal_set_entity_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_size() != 0) {
        _this->_impl_.size_ = from._impl_.size_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_blocks_movement() != 0) {
        _this->_impl_.blocks_movement_ = from._impl_.blocks_movement_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_blocks_line_of_sight() != 0) {
        _this->_impl_.blocks_line_of_sight_ = from._impl_.blocks_line_of_sight_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntityPlacement::CopyFrom(const EntityPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.EntityPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EntityPlacement::InternalSwap(EntityPlacement* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_type_, &other->_impl_.entity_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.blocks_line_of_sight_)
      + sizeof(EntityPlacement::_impl_.blocks_line_of_sight_)
      - PROTOBUF_FIELD_OFFSET(EntityPlacement, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata EntityPlacement::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
Room_EntitiesEntry_DoNotUse::Room_EntitiesEntry_DoNotUse()
    : SuperType(Room_EntitiesEntry_DoNotUse_class_data_.base()) {}
Room_EntitiesEntry_DoNotUse::Room_EntitiesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, Room_EntitiesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
Room_EntitiesEntry_DoNotUse::Room_EntitiesEntry_DoNotUse() : SuperType() {}
Room_EntitiesEntry_DoNotUse::Room_EntitiesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL Room_EntitiesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Room_EntitiesEntry_DoNotUse(arena);
}
constexpr auto Room_EntitiesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Room_EntitiesEntry_DoNotUse),
                                            alignof(Room_EntitiesEntry_DoNotUse));
}
constexpr auto Room_EntitiesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Room_EntitiesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Room_EntitiesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Room_EntitiesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Room_EntitiesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&Room_EntitiesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &Room_EntitiesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Room_EntitiesEntry_DoNotUse_class_data_ =
        Room_EntitiesEntry_DoNotUse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Room_EntitiesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Room_EntitiesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Room_EntitiesEntry_DoNotUse_class_data_.tc_table);
  return Room_EntitiesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 49, 2>
Room_EntitiesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Room_EntitiesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room_EntitiesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .dnd5e.api.v1alpha1.EntityPlacement value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dnd5e.api.v1alpha1.EntityPlacement value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(Room_EntitiesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::EntityPlacement>()},
  }},
  {{
    "\45\3\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.Room.EntitiesEntry"
    "key"
  }},
};
// ===================================================================

class Room::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Room>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Room, _impl_._has_bits_);
};

Room::Room(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Room_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.Room)
}
PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::Room& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entities_{visibility, arena, from.entities_},
        id_(arena, from.id_),
        type_(arena, from.type_) {}

Room::Room(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Room& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Room_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Room* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, hex_orientation_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::hex_orientation_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.Room)
}
PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entities_{visibility, arena},
        id_(arena),
        type_(arena) {}

inline void Room::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, hex_orientation_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::hex_orientation_));
}
Room::~Room() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.Room)
  SharedDtor(*this);
}
inline void Room::SharedDtor(MessageLite& self) {
  Room& this_ = static_cast<Room&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Room::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Room(arena);
}
constexpr auto Room::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Room, _impl_.entities_) +
          decltype(Room::_impl_.entities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Room, _impl_.entities_) +
          decltype(Room::_impl_.entities_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Room), alignof(Room), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Room::PlacementNew_,
                                 sizeof(Room),
                                 alignof(Room));
  }
}
constexpr auto Room::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Room_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Room::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Room>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Room::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Room>(), &Room::ByteSizeLong,
              &Room::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Room, _impl_._cached_size_),
          false,
      },
      &Room::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Room_class_data_ =
        Room::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Room::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Room_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Room_class_data_.tc_table);
  return Room_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 46, 2>
Room::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Room, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Room_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.id_)}},
    // string type = 2 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.type_)}},
    // int32 width = 3 [json_name = "width"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.width_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.width_)}},
    // int32 height = 4 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.height_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.height_)}},
    // .api.v1alpha1.GridType grid_type = 5 [json_name = "gridType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.grid_type_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.grid_type_)}},
    // optional bool hex_orientation = 6 [json_name = "hexOrientation"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Room, _impl_.hex_orientation_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.hex_orientation_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 2 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.type_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 width = 3 [json_name = "width"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.width_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 height = 4 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.height_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .api.v1alpha1.GridType grid_type = 5 [json_name = "gridType"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.grid_type_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional bool hex_orientation = 6 [json_name = "hexOrientation"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.hex_orientation_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // map<string, .dnd5e.api.v1alpha1.EntityPlacement> entities = 7 [json_name = "entities"];
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.entities_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }},
  {{
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 11,
                                       0)},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::EntityPlacement>()},
  }},
  {{
    "\27\2\4\0\0\0\0\10"
    "dnd5e.api.v1alpha1.Room"
    "id"
    "type"
    "entities"
  }},
};
PROTOBUF_NOINLINE void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.Room)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cU) != 0) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.hex_orientation_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.hex_orientation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Room::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Room::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.Room)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1 [json_name = "id"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_id().empty()) {
      const ::std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.Room.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string type = 2 [json_name = "type"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_type().empty()) {
      const ::std::string& _s = this_._internal_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.Room.type");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 width = 3 [json_name = "width"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_width() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_width(), target);
    }
  }

  // int32 height = 4 [json_name = "height"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_height() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_height(), target);
    }
  }

  // .api.v1alpha1.GridType grid_type = 5 [json_name = "gridType"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_grid_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_grid_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool hex_orientation = 6 [json_name = "hexOrientation"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this_._internal_hex_orientation(), target);
  }

  // map<string, .dnd5e.api.v1alpha1.EntityPlacement> entities = 7 [json_name = "entities"];
  if (!this_._internal_entities().empty()) {
    using MapType = ::google::protobuf::Map<::std::string, ::dnd5e::api::v1alpha1::EntityPlacement>;
    using WireHelper = _pbi::MapEntryFuncs<::std::string, ::dnd5e::api::v1alpha1::EntityPlacement,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = this_._internal_entities();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.Room.entities");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.Room.entities");
      }
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.Room)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Room::ByteSizeLong(const MessageLite& base) {
  const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Room::ByteSizeLong() const {
  const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.Room)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, .dnd5e.api.v1alpha1.EntityPlacement> entities = 7 [json_name = "entities"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_entities_size());
      for (const auto& entry : this_._internal_entities()) {
        total_size += _pbi::MapEntryFuncs<::std::string, ::dnd5e::api::v1alpha1::EntityPlacement,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000020U & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string id = 1 [json_name = "id"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string type = 2 [json_name = "type"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_type());
      }
    }
    // int32 width = 3 [json_name = "width"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_width());
      }
    }
    // int32 height = 4 [json_name = "height"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_height());
      }
    }
    // .api.v1alpha1.GridType grid_type = 5 [json_name = "gridType"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_grid_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_grid_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Room::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.Room)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_type().empty()) {
        _this->_internal_set_type(from._internal_type());
      } else {
        if (_this->_impl_.type_.IsDefault()) {
          _this->_internal_set_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_grid_type() != 0) {
        _this->_impl_.grid_type_ = from._impl_.grid_type_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.hex_orientation_ = from._impl_.hex_orientation_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Room::InternalSwap(Room* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.hex_orientation_)
      + sizeof(Room::_impl_.hex_orientation_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata Room::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DungeonStartRequest::_Internal {
 public:
};

DungeonStartRequest::DungeonStartRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DungeonStartRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.DungeonStartRequest)
}
PROTOBUF_NDEBUG_INLINE DungeonStartRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::DungeonStartRequest& from_msg)
      : character_ids_{visibility, arena, from.character_ids_},
        _cached_size_{0} {}

DungeonStartRequest::DungeonStartRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DungeonStartRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DungeonStartRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DungeonStartRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.DungeonStartRequest)
}
PROTOBUF_NDEBUG_INLINE DungeonStartRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : character_ids_{visibility, arena},
        _cached_size_{0} {}

inline void DungeonStartRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DungeonStartRequest::~DungeonStartRequest() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.DungeonStartRequest)
  SharedDtor(*this);
}
inline void DungeonStartRequest::SharedDtor(MessageLite& self) {
  DungeonStartRequest& this_ = static_cast<DungeonStartRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DungeonStartRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DungeonStartRequest(arena);
}
constexpr auto DungeonStartRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DungeonStartRequest, _impl_.character_ids_) +
          decltype(DungeonStartRequest::_impl_.character_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DungeonStartRequest), alignof(DungeonStartRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DungeonStartRequest::PlacementNew_,
                                 sizeof(DungeonStartRequest),
                                 alignof(DungeonStartRequest));
  }
}
constexpr auto DungeonStartRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DungeonStartRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DungeonStartRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DungeonStartRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DungeonStartRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DungeonStartRequest>(), &DungeonStartRequest::ByteSizeLong,
              &DungeonStartRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DungeonStartRequest, _impl_._cached_size_),
          false,
      },
      &DungeonStartRequest::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DungeonStartRequest_class_data_ =
        DungeonStartRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DungeonStartRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DungeonStartRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DungeonStartRequest_class_data_.tc_table);
  return DungeonStartRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 60, 2>
DungeonStartRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DungeonStartRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::DungeonStartRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string character_ids = 1 [json_name = "characterIds"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DungeonStartRequest, _impl_.character_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string character_ids = 1 [json_name = "characterIds"];
    {PROTOBUF_FIELD_OFFSET(DungeonStartRequest, _impl_.character_ids_), 0, 0, (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\46\15\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.DungeonStartRequest"
    "character_ids"
  }},
};
PROTOBUF_NOINLINE void DungeonStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.DungeonStartRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_ids_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DungeonStartRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DungeonStartRequest& this_ = static_cast<const DungeonStartRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DungeonStartRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DungeonStartRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.DungeonStartRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string character_ids = 1 [json_name = "characterIds"];
  for (int i = 0, n = this_._internal_character_ids_size(); i < n; ++i) {
    const auto& s = this_._internal_character_ids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.DungeonStartRequest.character_ids");
    target = stream->WriteString(1, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.DungeonStartRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DungeonStartRequest::ByteSizeLong(const MessageLite& base) {
  const DungeonStartRequest& this_ = static_cast<const DungeonStartRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DungeonStartRequest::ByteSizeLong() const {
  const DungeonStartRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.DungeonStartRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string character_ids = 1 [json_name = "characterIds"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_character_ids().size());
      for (int i = 0, n = this_._internal_character_ids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_character_ids().Get(i));
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DungeonStartRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DungeonStartRequest*>(&to_msg);
  auto& from = static_cast<const DungeonStartRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.DungeonStartRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_character_ids()->MergeFrom(from._internal_character_ids());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DungeonStartRequest::CopyFrom(const DungeonStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.DungeonStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DungeonStartRequest::InternalSwap(DungeonStartRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.character_ids_.InternalSwap(&other->_impl_.character_ids_);
}

::google::protobuf::Metadata DungeonStartRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DungeonStartResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DungeonStartResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_._has_bits_);
};

DungeonStartResponse::DungeonStartResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DungeonStartResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.DungeonStartResponse)
}
PROTOBUF_NDEBUG_INLINE DungeonStartResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::DungeonStartResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encounter_id_(arena, from.encounter_id_) {}

DungeonStartResponse::DungeonStartResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DungeonStartResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DungeonStartResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DungeonStartResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.room_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_)
                : nullptr;
  _impl_.combat_state_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.DungeonStartResponse)
}
PROTOBUF_NDEBUG_INLINE DungeonStartResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        encounter_id_(arena) {}

inline void DungeonStartResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_),
           0,
           offsetof(Impl_, combat_state_) -
               offsetof(Impl_, room_) +
               sizeof(Impl_::combat_state_));
}
DungeonStartResponse::~DungeonStartResponse() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.DungeonStartResponse)
  SharedDtor(*this);
}
inline void DungeonStartResponse::SharedDtor(MessageLite& self) {
  DungeonStartResponse& this_ = static_cast<DungeonStartResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  delete this_._impl_.room_;
  delete this_._impl_.combat_state_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DungeonStartResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DungeonStartResponse(arena);
}
constexpr auto DungeonStartResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DungeonStartResponse),
                                            alignof(DungeonStartResponse));
}
constexpr auto DungeonStartResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DungeonStartResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DungeonStartResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DungeonStartResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DungeonStartResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DungeonStartResponse>(), &DungeonStartResponse::ByteSizeLong,
              &DungeonStartResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_._cached_size_),
          false,
      },
      &DungeonStartResponse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DungeonStartResponse_class_data_ =
        DungeonStartResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DungeonStartResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DungeonStartResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DungeonStartResponse_class_data_.tc_table);
  return DungeonStartResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 60, 2>
DungeonStartResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DungeonStartResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::DungeonStartResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.encounter_id_)}},
    // .dnd5e.api.v1alpha1.Room room = 2 [json_name = "room"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.room_)}},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 3 [json_name = "combatState"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 1, PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.combat_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dnd5e.api.v1alpha1.Room room = 2 [json_name = "room"];
    {PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.room_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 3 [json_name = "combatState"];
    {PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.combat_state_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>()},
  }},
  {{
    "\47\14\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.DungeonStartResponse"
    "encounter_id"
  }},
};
PROTOBUF_NOINLINE void DungeonStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.DungeonStartResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.encounter_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.room_ != nullptr);
      _impl_.room_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.combat_state_ != nullptr);
      _impl_.combat_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DungeonStartResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DungeonStartResponse& this_ = static_cast<const DungeonStartResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DungeonStartResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DungeonStartResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.DungeonStartResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.DungeonStartResponse.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.Room room = 2 [json_name = "room"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.room_, this_._impl_.room_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.CombatState combat_state = 3 [json_name = "combatState"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.combat_state_, this_._impl_.combat_state_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.DungeonStartResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DungeonStartResponse::ByteSizeLong(const MessageLite& base) {
  const DungeonStartResponse& this_ = static_cast<const DungeonStartResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DungeonStartResponse::ByteSizeLong() const {
  const DungeonStartResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.DungeonStartResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string encounter_id = 1 [json_name = "encounterId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
    // .dnd5e.api.v1alpha1.Room room = 2 [json_name = "room"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.room_);
    }
    // .dnd5e.api.v1alpha1.CombatState combat_state = 3 [json_name = "combatState"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.combat_state_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DungeonStartResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DungeonStartResponse*>(&to_msg);
  auto& from = static_cast<const DungeonStartResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.DungeonStartResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_encounter_id().empty()) {
        _this->_internal_set_encounter_id(from._internal_encounter_id());
      } else {
        if (_this->_impl_.encounter_id_.IsDefault()) {
          _this->_internal_set_encounter_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.room_ != nullptr);
      if (_this->_impl_.room_ == nullptr) {
        _this->_impl_.room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_);
      } else {
        _this->_impl_.room_->MergeFrom(*from._impl_.room_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.combat_state_ != nullptr);
      if (_this->_impl_.combat_state_ == nullptr) {
        _this->_impl_.combat_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_);
      } else {
        _this->_impl_.combat_state_->MergeFrom(*from._impl_.combat_state_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DungeonStartResponse::CopyFrom(const DungeonStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.DungeonStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DungeonStartResponse::InternalSwap(DungeonStartResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.combat_state_)
      + sizeof(DungeonStartResponse::_impl_.combat_state_)
      - PROTOBUF_FIELD_OFFSET(DungeonStartResponse, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::google::protobuf::Metadata DungeonStartResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InitiativeEntry::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<InitiativeEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_._has_bits_);
};

InitiativeEntry::InitiativeEntry(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InitiativeEntry_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.InitiativeEntry)
}
PROTOBUF_NDEBUG_INLINE InitiativeEntry::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::InitiativeEntry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        entity_type_(arena, from.entity_type_) {}

InitiativeEntry::InitiativeEntry(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const InitiativeEntry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InitiativeEntry_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InitiativeEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initiative_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, initiative_),
           offsetof(Impl_, has_acted_) -
               offsetof(Impl_, initiative_) +
               sizeof(Impl_::has_acted_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.InitiativeEntry)
}
PROTOBUF_NDEBUG_INLINE InitiativeEntry::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        entity_type_(arena) {}

inline void InitiativeEntry::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initiative_),
           0,
           offsetof(Impl_, has_acted_) -
               offsetof(Impl_, initiative_) +
               sizeof(Impl_::has_acted_));
}
InitiativeEntry::~InitiativeEntry() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.InitiativeEntry)
  SharedDtor(*this);
}
inline void InitiativeEntry::SharedDtor(MessageLite& self) {
  InitiativeEntry& this_ = static_cast<InitiativeEntry&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.entity_type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL InitiativeEntry::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) InitiativeEntry(arena);
}
constexpr auto InitiativeEntry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InitiativeEntry),
                                            alignof(InitiativeEntry));
}
constexpr auto InitiativeEntry::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_InitiativeEntry_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &InitiativeEntry::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<InitiativeEntry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &InitiativeEntry::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<InitiativeEntry>(), &InitiativeEntry::ByteSizeLong,
              &InitiativeEntry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_._cached_size_),
          false,
      },
      &InitiativeEntry::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull InitiativeEntry_class_data_ =
        InitiativeEntry::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
InitiativeEntry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&InitiativeEntry_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(InitiativeEntry_class_data_.tc_table);
  return InitiativeEntry_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 63, 2>
InitiativeEntry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    InitiativeEntry_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::InitiativeEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.entity_id_)}},
    // string entity_type = 2 [json_name = "entityType"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.entity_type_)}},
    // int32 initiative = 3 [json_name = "initiative"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InitiativeEntry, _impl_.initiative_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.initiative_)}},
    // int32 modifier = 4 [json_name = "modifier"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InitiativeEntry, _impl_.modifier_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.modifier_)}},
    // bool has_acted = 5 [json_name = "hasActed"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InitiativeEntry, _impl_.has_acted_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.has_acted_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_type = 2 [json_name = "entityType"];
    {PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.entity_type_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 initiative = 3 [json_name = "initiative"];
    {PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.initiative_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 modifier = 4 [json_name = "modifier"];
    {PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.modifier_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool has_acted = 5 [json_name = "hasActed"];
    {PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.has_acted_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\42\11\13\0\0\0\0\0"
    "dnd5e.api.v1alpha1.InitiativeEntry"
    "entity_id"
    "entity_type"
  }},
};
PROTOBUF_NOINLINE void InitiativeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.InitiativeEntry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.entity_type_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cU) != 0) {
    ::memset(&_impl_.initiative_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.has_acted_) -
        reinterpret_cast<char*>(&_impl_.initiative_)) + sizeof(_impl_.has_acted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL InitiativeEntry::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const InitiativeEntry& this_ = static_cast<const InitiativeEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL InitiativeEntry::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const InitiativeEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.InitiativeEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.InitiativeEntry.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string entity_type = 2 [json_name = "entityType"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_entity_type().empty()) {
      const ::std::string& _s = this_._internal_entity_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.InitiativeEntry.entity_type");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 initiative = 3 [json_name = "initiative"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_initiative() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_initiative(), target);
    }
  }

  // int32 modifier = 4 [json_name = "modifier"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_modifier() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_modifier(), target);
    }
  }

  // bool has_acted = 5 [json_name = "hasActed"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_has_acted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_has_acted(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.InitiativeEntry)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t InitiativeEntry::ByteSizeLong(const MessageLite& base) {
  const InitiativeEntry& this_ = static_cast<const InitiativeEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t InitiativeEntry::ByteSizeLong() const {
  const InitiativeEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.InitiativeEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string entity_type = 2 [json_name = "entityType"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_entity_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_type());
      }
    }
    // int32 initiative = 3 [json_name = "initiative"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_initiative() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_initiative());
      }
    }
    // int32 modifier = 4 [json_name = "modifier"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_modifier() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_modifier());
      }
    }
    // bool has_acted = 5 [json_name = "hasActed"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_has_acted() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void InitiativeEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InitiativeEntry*>(&to_msg);
  auto& from = static_cast<const InitiativeEntry&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.InitiativeEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_entity_type().empty()) {
        _this->_internal_set_entity_type(from._internal_entity_type());
      } else {
        if (_this->_impl_.entity_type_.IsDefault()) {
          _this->_internal_set_entity_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_initiative() != 0) {
        _this->_impl_.initiative_ = from._impl_.initiative_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_modifier() != 0) {
        _this->_impl_.modifier_ = from._impl_.modifier_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_has_acted() != 0) {
        _this->_impl_.has_acted_ = from._impl_.has_acted_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InitiativeEntry::CopyFrom(const InitiativeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.InitiativeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InitiativeEntry::InternalSwap(InitiativeEntry* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_type_, &other->_impl_.entity_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.has_acted_)
      + sizeof(InitiativeEntry::_impl_.has_acted_)
      - PROTOBUF_FIELD_OFFSET(InitiativeEntry, _impl_.initiative_)>(
          reinterpret_cast<char*>(&_impl_.initiative_),
          reinterpret_cast<char*>(&other->_impl_.initiative_));
}

::google::protobuf::Metadata InitiativeEntry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TurnState::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TurnState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TurnState, _impl_._has_bits_);
};

void TurnState::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
TurnState::TurnState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TurnState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.TurnState)
}
PROTOBUF_NDEBUG_INLINE TurnState::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::TurnState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_) {}

TurnState::TurnState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TurnState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TurnState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TurnState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, movement_used_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, movement_used_),
           offsetof(Impl_, reaction_available_) -
               offsetof(Impl_, movement_used_) +
               sizeof(Impl_::reaction_available_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.TurnState)
}
PROTOBUF_NDEBUG_INLINE TurnState::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena) {}

inline void TurnState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, reaction_available_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::reaction_available_));
}
TurnState::~TurnState() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.TurnState)
  SharedDtor(*this);
}
inline void TurnState::SharedDtor(MessageLite& self) {
  TurnState& this_ = static_cast<TurnState&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  delete this_._impl_.position_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TurnState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TurnState(arena);
}
constexpr auto TurnState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TurnState),
                                            alignof(TurnState));
}
constexpr auto TurnState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TurnState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TurnState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TurnState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TurnState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TurnState>(), &TurnState::ByteSizeLong,
              &TurnState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TurnState, _impl_._cached_size_),
          false,
      },
      &TurnState::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TurnState_class_data_ =
        TurnState::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TurnState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TurnState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TurnState_class_data_.tc_table);
  return TurnState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 46, 2>
TurnState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TurnState, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TurnState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::TurnState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.entity_id_)}},
    // int32 movement_used = 2 [json_name = "movementUsed"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnState, _impl_.movement_used_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.movement_used_)}},
    // int32 movement_max = 3 [json_name = "movementMax"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnState, _impl_.movement_max_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.movement_max_)}},
    // bool action_used = 4 [json_name = "actionUsed"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TurnState, _impl_.action_used_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.action_used_)}},
    // bool bonus_action_used = 5 [json_name = "bonusActionUsed"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TurnState, _impl_.bonus_action_used_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.bonus_action_used_)}},
    // bool reaction_available = 6 [json_name = "reactionAvailable"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TurnState, _impl_.reaction_available_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.reaction_available_)}},
    // .api.v1alpha1.Position position = 7 [json_name = "position"];
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(TurnState, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 movement_used = 2 [json_name = "movementUsed"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.movement_used_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 movement_max = 3 [json_name = "movementMax"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.movement_max_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool action_used = 4 [json_name = "actionUsed"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.action_used_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool bonus_action_used = 5 [json_name = "bonusActionUsed"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.bonus_action_used_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool reaction_available = 6 [json_name = "reactionAvailable"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.reaction_available_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .api.v1alpha1.Position position = 7 [json_name = "position"];
    {PROTOBUF_FIELD_OFFSET(TurnState, _impl_.position_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::api::v1alpha1::Position>()},
  }},
  {{
    "\34\11\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.TurnState"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void TurnState::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.TurnState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000007cU) != 0) {
    ::memset(&_impl_.movement_used_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reaction_available_) -
        reinterpret_cast<char*>(&_impl_.movement_used_)) + sizeof(_impl_.reaction_available_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TurnState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TurnState& this_ = static_cast<const TurnState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TurnState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TurnState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.TurnState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.TurnState.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 movement_used = 2 [json_name = "movementUsed"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_movement_used() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_movement_used(), target);
    }
  }

  // int32 movement_max = 3 [json_name = "movementMax"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_movement_max() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_movement_max(), target);
    }
  }

  // bool action_used = 4 [json_name = "actionUsed"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_action_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_action_used(), target);
    }
  }

  // bool bonus_action_used = 5 [json_name = "bonusActionUsed"];
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_bonus_action_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_bonus_action_used(), target);
    }
  }

  // bool reaction_available = 6 [json_name = "reactionAvailable"];
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_reaction_available() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_reaction_available(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .api.v1alpha1.Position position = 7 [json_name = "position"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.TurnState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TurnState::ByteSizeLong(const MessageLite& base) {
  const TurnState& this_ = static_cast<const TurnState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TurnState::ByteSizeLong() const {
  const TurnState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.TurnState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // .api.v1alpha1.Position position = 7 [json_name = "position"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
    }
    // int32 movement_used = 2 [json_name = "movementUsed"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_movement_used() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_movement_used());
      }
    }
    // int32 movement_max = 3 [json_name = "movementMax"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_movement_max() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_movement_max());
      }
    }
    // bool action_used = 4 [json_name = "actionUsed"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_action_used() != 0) {
        total_size += 2;
      }
    }
    // bool bonus_action_used = 5 [json_name = "bonusActionUsed"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_bonus_action_used() != 0) {
        total_size += 2;
      }
    }
    // bool reaction_available = 6 [json_name = "reactionAvailable"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_reaction_available() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TurnState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TurnState*>(&to_msg);
  auto& from = static_cast<const TurnState&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.TurnState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_movement_used() != 0) {
        _this->_impl_.movement_used_ = from._impl_.movement_used_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_movement_max() != 0) {
        _this->_impl_.movement_max_ = from._impl_.movement_max_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_action_used() != 0) {
        _this->_impl_.action_used_ = from._impl_.action_used_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_bonus_action_used() != 0) {
        _this->_impl_.bonus_action_used_ = from._impl_.bonus_action_used_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_reaction_available() != 0) {
        _this->_impl_.reaction_available_ = from._impl_.reaction_available_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TurnState::CopyFrom(const TurnState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.TurnState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TurnState::InternalSwap(TurnState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TurnState, _impl_.reaction_available_)
      + sizeof(TurnState::_impl_.reaction_available_)
      - PROTOBUF_FIELD_OFFSET(TurnState, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata TurnState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CombatState::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<CombatState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CombatState, _impl_._has_bits_);
};

CombatState::CombatState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CombatState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.CombatState)
}
PROTOBUF_NDEBUG_INLINE CombatState::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::CombatState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        turn_order_{visibility, arena, from.turn_order_},
        encounter_id_(arena, from.encounter_id_) {}

CombatState::CombatState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CombatState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CombatState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CombatState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_turn_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.current_turn_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, round_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, round_),
           offsetof(Impl_, combat_ended_) -
               offsetof(Impl_, round_) +
               sizeof(Impl_::combat_ended_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.CombatState)
}
PROTOBUF_NDEBUG_INLINE CombatState::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        turn_order_{visibility, arena},
        encounter_id_(arena) {}

inline void CombatState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_turn_),
           0,
           offsetof(Impl_, combat_ended_) -
               offsetof(Impl_, current_turn_) +
               sizeof(Impl_::combat_ended_));
}
CombatState::~CombatState() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.CombatState)
  SharedDtor(*this);
}
inline void CombatState::SharedDtor(MessageLite& self) {
  CombatState& this_ = static_cast<CombatState&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  delete this_._impl_.current_turn_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CombatState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CombatState(arena);
}
constexpr auto CombatState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CombatState, _impl_.turn_order_) +
          decltype(CombatState::_impl_.turn_order_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CombatState), alignof(CombatState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CombatState::PlacementNew_,
                                 sizeof(CombatState),
                                 alignof(CombatState));
  }
}
constexpr auto CombatState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CombatState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CombatState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CombatState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CombatState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CombatState>(), &CombatState::ByteSizeLong,
              &CombatState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CombatState, _impl_._cached_size_),
          false,
      },
      &CombatState::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CombatState_class_data_ =
        CombatState::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CombatState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CombatState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CombatState_class_data_.tc_table);
  return CombatState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 51, 2>
CombatState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CombatState, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CombatState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.encounter_id_)}},
    // int32 round = 2 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CombatState, _impl_.round_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.round_)}},
    // repeated .dnd5e.api.v1alpha1.InitiativeEntry turn_order = 3 [json_name = "turnOrder"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.turn_order_)}},
    // int32 active_index = 4 [json_name = "activeIndex"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CombatState, _impl_.active_index_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.active_index_)}},
    // .dnd5e.api.v1alpha1.TurnState current_turn = 5 [json_name = "currentTurn"];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.current_turn_)}},
    // bool combat_started = 6 [json_name = "combatStarted"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CombatState, _impl_.combat_started_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.combat_started_)}},
    // bool combat_ended = 7 [json_name = "combatEnded"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CombatState, _impl_.combat_ended_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(CombatState, _impl_.combat_ended_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 round = 2 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.round_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .dnd5e.api.v1alpha1.InitiativeEntry turn_order = 3 [json_name = "turnOrder"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.turn_order_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 active_index = 4 [json_name = "activeIndex"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.active_index_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .dnd5e.api.v1alpha1.TurnState current_turn = 5 [json_name = "currentTurn"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.current_turn_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool combat_started = 6 [json_name = "combatStarted"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.combat_started_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool combat_ended = 7 [json_name = "combatEnded"];
    {PROTOBUF_FIELD_OFFSET(CombatState, _impl_.combat_ended_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::InitiativeEntry>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::TurnState>()},
  }},
  {{
    "\36\14\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.CombatState"
    "encounter_id"
  }},
};
PROTOBUF_NOINLINE void CombatState::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.CombatState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turn_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.encounter_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.current_turn_ != nullptr);
      _impl_.current_turn_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cU) != 0) {
    ::memset(&_impl_.round_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.combat_ended_) -
        reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.combat_ended_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CombatState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CombatState& this_ = static_cast<const CombatState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CombatState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CombatState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.CombatState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.CombatState.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 round = 2 [json_name = "round"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_round() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_round(), target);
    }
  }

  // repeated .dnd5e.api.v1alpha1.InitiativeEntry turn_order = 3 [json_name = "turnOrder"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_turn_order_size());
       i < n; i++) {
    const auto& repfield = this_._internal_turn_order().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int32 active_index = 4 [json_name = "activeIndex"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_active_index() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_active_index(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.TurnState current_turn = 5 [json_name = "currentTurn"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.current_turn_, this_._impl_.current_turn_->GetCachedSize(), target,
        stream);
  }

  // bool combat_started = 6 [json_name = "combatStarted"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (this_._internal_combat_started() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_combat_started(), target);
    }
  }

  // bool combat_ended = 7 [json_name = "combatEnded"];
  if ((cached_has_bits & 0x00000020U) != 0) {
    if (this_._internal_combat_ended() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_combat_ended(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.CombatState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CombatState::ByteSizeLong(const MessageLite& base) {
  const CombatState& this_ = static_cast<const CombatState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CombatState::ByteSizeLong() const {
  const CombatState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.CombatState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .dnd5e.api.v1alpha1.InitiativeEntry turn_order = 3 [json_name = "turnOrder"];
    {
      total_size += 1UL * this_._internal_turn_order_size();
      for (const auto& msg : this_._internal_turn_order()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // string encounter_id = 1 [json_name = "encounterId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
    // .dnd5e.api.v1alpha1.TurnState current_turn = 5 [json_name = "currentTurn"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_turn_);
    }
    // int32 round = 2 [json_name = "round"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_round() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_round());
      }
    }
    // int32 active_index = 4 [json_name = "activeIndex"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_active_index() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_active_index());
      }
    }
    // bool combat_started = 6 [json_name = "combatStarted"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_combat_started() != 0) {
        total_size += 2;
      }
    }
    // bool combat_ended = 7 [json_name = "combatEnded"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_combat_ended() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CombatState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CombatState*>(&to_msg);
  auto& from = static_cast<const CombatState&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.CombatState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_turn_order()->MergeFrom(
      from._internal_turn_order());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_encounter_id().empty()) {
        _this->_internal_set_encounter_id(from._internal_encounter_id());
      } else {
        if (_this->_impl_.encounter_id_.IsDefault()) {
          _this->_internal_set_encounter_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.current_turn_ != nullptr);
      if (_this->_impl_.current_turn_ == nullptr) {
        _this->_impl_.current_turn_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.current_turn_);
      } else {
        _this->_impl_.current_turn_->MergeFrom(*from._impl_.current_turn_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_round() != 0) {
        _this->_impl_.round_ = from._impl_.round_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_active_index() != 0) {
        _this->_impl_.active_index_ = from._impl_.active_index_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_combat_started() != 0) {
        _this->_impl_.combat_started_ = from._impl_.combat_started_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_combat_ended() != 0) {
        _this->_impl_.combat_ended_ = from._impl_.combat_ended_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CombatState::CopyFrom(const CombatState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.CombatState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CombatState::InternalSwap(CombatState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.turn_order_.InternalSwap(&other->_impl_.turn_order_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CombatState, _impl_.combat_ended_)
      + sizeof(CombatState::_impl_.combat_ended_)
      - PROTOBUF_FIELD_OFFSET(CombatState, _impl_.current_turn_)>(
          reinterpret_cast<char*>(&_impl_.current_turn_),
          reinterpret_cast<char*>(&other->_impl_.current_turn_));
}

::google::protobuf::Metadata CombatState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetCombatStateRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GetCombatStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetCombatStateRequest, _impl_._has_bits_);
};

GetCombatStateRequest::GetCombatStateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetCombatStateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.GetCombatStateRequest)
}
PROTOBUF_NDEBUG_INLINE GetCombatStateRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::GetCombatStateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encounter_id_(arena, from.encounter_id_) {}

GetCombatStateRequest::GetCombatStateRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GetCombatStateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetCombatStateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetCombatStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.GetCombatStateRequest)
}
PROTOBUF_NDEBUG_INLINE GetCombatStateRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        encounter_id_(arena) {}

inline void GetCombatStateRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetCombatStateRequest::~GetCombatStateRequest() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.GetCombatStateRequest)
  SharedDtor(*this);
}
inline void GetCombatStateRequest::SharedDtor(MessageLite& self) {
  GetCombatStateRequest& this_ = static_cast<GetCombatStateRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GetCombatStateRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GetCombatStateRequest(arena);
}
constexpr auto GetCombatStateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetCombatStateRequest),
                                            alignof(GetCombatStateRequest));
}
constexpr auto GetCombatStateRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GetCombatStateRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GetCombatStateRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GetCombatStateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GetCombatStateRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GetCombatStateRequest>(), &GetCombatStateRequest::ByteSizeLong,
              &GetCombatStateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GetCombatStateRequest, _impl_._cached_size_),
          false,
      },
      &GetCombatStateRequest::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GetCombatStateRequest_class_data_ =
        GetCombatStateRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GetCombatStateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GetCombatStateRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GetCombatStateRequest_class_data_.tc_table);
  return GetCombatStateRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 61, 2>
GetCombatStateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCombatStateRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    GetCombatStateRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::GetCombatStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetCombatStateRequest, _impl_.encounter_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(GetCombatStateRequest, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\14\0\0\0\0\0\0"
    "dnd5e.api.v1alpha1.GetCombatStateRequest"
    "encounter_id"
  }},
};
PROTOBUF_NOINLINE void GetCombatStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.GetCombatStateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.encounter_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GetCombatStateRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GetCombatStateRequest& this_ = static_cast<const GetCombatStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GetCombatStateRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GetCombatStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.GetCombatStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.GetCombatStateRequest.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.GetCombatStateRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GetCombatStateRequest::ByteSizeLong(const MessageLite& base) {
  const GetCombatStateRequest& this_ = static_cast<const GetCombatStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GetCombatStateRequest::ByteSizeLong() const {
  const GetCombatStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.GetCombatStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string encounter_id = 1 [json_name = "encounterId"];
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GetCombatStateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetCombatStateRequest*>(&to_msg);
  auto& from = static_cast<const GetCombatStateRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.GetCombatStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!from._internal_encounter_id().empty()) {
      _this->_internal_set_encounter_id(from._internal_encounter_id());
    } else {
      if (_this->_impl_.encounter_id_.IsDefault()) {
        _this->_internal_set_encounter_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCombatStateRequest::CopyFrom(const GetCombatStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.GetCombatStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetCombatStateRequest::InternalSwap(GetCombatStateRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
}

::google::protobuf::Metadata GetCombatStateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetCombatStateResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GetCombatStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_._has_bits_);
};

GetCombatStateResponse::GetCombatStateResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetCombatStateResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.GetCombatStateResponse)
}
PROTOBUF_NDEBUG_INLINE GetCombatStateResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::GetCombatStateResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetCombatStateResponse::GetCombatStateResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GetCombatStateResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GetCombatStateResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetCombatStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.room_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_)
                : nullptr;
  _impl_.combat_state_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.GetCombatStateResponse)
}
PROTOBUF_NDEBUG_INLINE GetCombatStateResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void GetCombatStateResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_),
           0,
           offsetof(Impl_, combat_state_) -
               offsetof(Impl_, room_) +
               sizeof(Impl_::combat_state_));
}
GetCombatStateResponse::~GetCombatStateResponse() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.GetCombatStateResponse)
  SharedDtor(*this);
}
inline void GetCombatStateResponse::SharedDtor(MessageLite& self) {
  GetCombatStateResponse& this_ = static_cast<GetCombatStateResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.room_;
  delete this_._impl_.combat_state_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GetCombatStateResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GetCombatStateResponse(arena);
}
constexpr auto GetCombatStateResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetCombatStateResponse),
                                            alignof(GetCombatStateResponse));
}
constexpr auto GetCombatStateResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GetCombatStateResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GetCombatStateResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GetCombatStateResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GetCombatStateResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GetCombatStateResponse>(), &GetCombatStateResponse::ByteSizeLong,
              &GetCombatStateResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_._cached_size_),
          false,
      },
      &GetCombatStateResponse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GetCombatStateResponse_class_data_ =
        GetCombatStateResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GetCombatStateResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GetCombatStateResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GetCombatStateResponse_class_data_.tc_table);
  return GetCombatStateResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
GetCombatStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    GetCombatStateResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::GetCombatStateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.combat_state_)}},
    // .dnd5e.api.v1alpha1.Room room = 1 [json_name = "room"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.room_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dnd5e.api.v1alpha1.Room room = 1 [json_name = "room"];
    {PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.room_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    {PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.combat_state_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void GetCombatStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.GetCombatStateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.room_ != nullptr);
      _impl_.room_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.combat_state_ != nullptr);
      _impl_.combat_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GetCombatStateResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GetCombatStateResponse& this_ = static_cast<const GetCombatStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GetCombatStateResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GetCombatStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.GetCombatStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.Room room = 1 [json_name = "room"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.room_, this_._impl_.room_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.combat_state_, this_._impl_.combat_state_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.GetCombatStateResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GetCombatStateResponse::ByteSizeLong(const MessageLite& base) {
  const GetCombatStateResponse& this_ = static_cast<const GetCombatStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GetCombatStateResponse::ByteSizeLong() const {
  const GetCombatStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.GetCombatStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // .dnd5e.api.v1alpha1.Room room = 1 [json_name = "room"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.room_);
    }
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.combat_state_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GetCombatStateResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetCombatStateResponse*>(&to_msg);
  auto& from = static_cast<const GetCombatStateResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.GetCombatStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.room_ != nullptr);
      if (_this->_impl_.room_ == nullptr) {
        _this->_impl_.room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_);
      } else {
        _this->_impl_.room_->MergeFrom(*from._impl_.room_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.combat_state_ != nullptr);
      if (_this->_impl_.combat_state_ == nullptr) {
        _this->_impl_.combat_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_);
      } else {
        _this->_impl_.combat_state_->MergeFrom(*from._impl_.combat_state_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCombatStateResponse::CopyFrom(const GetCombatStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.GetCombatStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetCombatStateResponse::InternalSwap(GetCombatStateResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.combat_state_)
      + sizeof(GetCombatStateResponse::_impl_.combat_state_)
      - PROTOBUF_FIELD_OFFSET(GetCombatStateResponse, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::google::protobuf::Metadata GetCombatStateResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MoveCharacterRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MoveCharacterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_._has_bits_);
};

void MoveCharacterRequest::clear_target_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_position_ != nullptr) _impl_.target_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
MoveCharacterRequest::MoveCharacterRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MoveCharacterRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.MoveCharacterRequest)
}
PROTOBUF_NDEBUG_INLINE MoveCharacterRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::MoveCharacterRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encounter_id_(arena, from.encounter_id_),
        entity_id_(arena, from.entity_id_) {}

MoveCharacterRequest::MoveCharacterRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MoveCharacterRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MoveCharacterRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MoveCharacterRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_position_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_position_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.MoveCharacterRequest)
}
PROTOBUF_NDEBUG_INLINE MoveCharacterRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        encounter_id_(arena),
        entity_id_(arena) {}

inline void MoveCharacterRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_position_ = {};
}
MoveCharacterRequest::~MoveCharacterRequest() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.MoveCharacterRequest)
  SharedDtor(*this);
}
inline void MoveCharacterRequest::SharedDtor(MessageLite& self) {
  MoveCharacterRequest& this_ = static_cast<MoveCharacterRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  this_._impl_.entity_id_.Destroy();
  delete this_._impl_.target_position_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MoveCharacterRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MoveCharacterRequest(arena);
}
constexpr auto MoveCharacterRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MoveCharacterRequest),
                                            alignof(MoveCharacterRequest));
}
constexpr auto MoveCharacterRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MoveCharacterRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MoveCharacterRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MoveCharacterRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MoveCharacterRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MoveCharacterRequest>(), &MoveCharacterRequest::ByteSizeLong,
              &MoveCharacterRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_._cached_size_),
          false,
      },
      &MoveCharacterRequest::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MoveCharacterRequest_class_data_ =
        MoveCharacterRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MoveCharacterRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MoveCharacterRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MoveCharacterRequest_class_data_.tc_table);
  return MoveCharacterRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 69, 2>
MoveCharacterRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MoveCharacterRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::MoveCharacterRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.encounter_id_)}},
    // string entity_id = 2 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.entity_id_)}},
    // .api.v1alpha1.Position target_position = 3 [json_name = "targetPosition"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.target_position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 2 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .api.v1alpha1.Position target_position = 3 [json_name = "targetPosition"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterRequest, _impl_.target_position_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::api::v1alpha1::Position>()},
  }},
  {{
    "\47\14\11\0\0\0\0\0"
    "dnd5e.api.v1alpha1.MoveCharacterRequest"
    "encounter_id"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void MoveCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.MoveCharacterRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.encounter_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.target_position_ != nullptr);
      _impl_.target_position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MoveCharacterRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MoveCharacterRequest& this_ = static_cast<const MoveCharacterRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MoveCharacterRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MoveCharacterRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.MoveCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MoveCharacterRequest.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string entity_id = 2 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MoveCharacterRequest.entity_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .api.v1alpha1.Position target_position = 3 [json_name = "targetPosition"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.target_position_, this_._impl_.target_position_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.MoveCharacterRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MoveCharacterRequest::ByteSizeLong(const MessageLite& base) {
  const MoveCharacterRequest& this_ = static_cast<const MoveCharacterRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MoveCharacterRequest::ByteSizeLong() const {
  const MoveCharacterRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.MoveCharacterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string encounter_id = 1 [json_name = "encounterId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
    // string entity_id = 2 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // .api.v1alpha1.Position target_position = 3 [json_name = "targetPosition"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_position_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MoveCharacterRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MoveCharacterRequest*>(&to_msg);
  auto& from = static_cast<const MoveCharacterRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.MoveCharacterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_encounter_id().empty()) {
        _this->_internal_set_encounter_id(from._internal_encounter_id());
      } else {
        if (_this->_impl_.encounter_id_.IsDefault()) {
          _this->_internal_set_encounter_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.target_position_ != nullptr);
      if (_this->_impl_.target_position_ == nullptr) {
        _this->_impl_.target_position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_position_);
      } else {
        _this->_impl_.target_position_->MergeFrom(*from._impl_.target_position_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveCharacterRequest::CopyFrom(const MoveCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.MoveCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MoveCharacterRequest::InternalSwap(MoveCharacterRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  swap(_impl_.target_position_, other->_impl_.target_position_);
}

::google::protobuf::Metadata MoveCharacterRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
MovementError_DetailsEntry_DoNotUse::MovementError_DetailsEntry_DoNotUse()
    : SuperType(MovementError_DetailsEntry_DoNotUse_class_data_.base()) {}
MovementError_DetailsEntry_DoNotUse::MovementError_DetailsEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, MovementError_DetailsEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
MovementError_DetailsEntry_DoNotUse::MovementError_DetailsEntry_DoNotUse() : SuperType() {}
MovementError_DetailsEntry_DoNotUse::MovementError_DetailsEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL MovementError_DetailsEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MovementError_DetailsEntry_DoNotUse(arena);
}
constexpr auto MovementError_DetailsEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MovementError_DetailsEntry_DoNotUse),
                                            alignof(MovementError_DetailsEntry_DoNotUse));
}
constexpr auto MovementError_DetailsEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MovementError_DetailsEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MovementError_DetailsEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MovementError_DetailsEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MovementError_DetailsEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&MovementError_DetailsEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &MovementError_DetailsEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MovementError_DetailsEntry_DoNotUse_class_data_ =
        MovementError_DetailsEntry_DoNotUse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MovementError_DetailsEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MovementError_DetailsEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MovementError_DetailsEntry_DoNotUse_class_data_.tc_table);
  return MovementError_DetailsEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2>
MovementError_DetailsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MovementError_DetailsEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::MovementError_DetailsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(MovementError_DetailsEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\3\5\0\0\0\0\0"
    "dnd5e.api.v1alpha1.MovementError.DetailsEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class MovementError::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MovementError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MovementError, _impl_._has_bits_);
};

MovementError::MovementError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MovementError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.MovementError)
}
PROTOBUF_NDEBUG_INLINE MovementError::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::MovementError& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        details_{visibility, arena, from.details_},
        message_(arena, from.message_) {}

MovementError::MovementError(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MovementError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MovementError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MovementError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.MovementError)
}
PROTOBUF_NDEBUG_INLINE MovementError::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        details_{visibility, arena},
        message_(arena) {}

inline void MovementError::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
MovementError::~MovementError() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.MovementError)
  SharedDtor(*this);
}
inline void MovementError::SharedDtor(MessageLite& self) {
  MovementError& this_ = static_cast<MovementError&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MovementError::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MovementError(arena);
}
constexpr auto MovementError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MovementError, _impl_.details_) +
          decltype(MovementError::_impl_.details_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MovementError, _impl_.details_) +
          decltype(MovementError::_impl_.details_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MovementError), alignof(MovementError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MovementError::PlacementNew_,
                                 sizeof(MovementError),
                                 alignof(MovementError));
  }
}
constexpr auto MovementError::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MovementError_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MovementError::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MovementError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MovementError::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MovementError>(), &MovementError::ByteSizeLong,
              &MovementError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MovementError, _impl_._cached_size_),
          false,
      },
      &MovementError::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MovementError_class_data_ =
        MovementError::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MovementError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MovementError_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MovementError_class_data_.tc_table);
  return MovementError_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 1, 55, 2>
MovementError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MovementError, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MovementError_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::MovementError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MovementError, _impl_.message_)}},
    // .dnd5e.api.v1alpha1.MovementError.ErrorCode code = 1 [json_name = "code"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MovementError, _impl_.code_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MovementError, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dnd5e.api.v1alpha1.MovementError.ErrorCode code = 1 [json_name = "code"];
    {PROTOBUF_FIELD_OFFSET(MovementError, _impl_.code_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string message = 2 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(MovementError, _impl_.message_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> details = 3 [json_name = "details"];
    {PROTOBUF_FIELD_OFFSET(MovementError, _impl_.details_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }},
  {{
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\40\0\7\7\0\0\0\0"
    "dnd5e.api.v1alpha1.MovementError"
    "message"
    "details"
  }},
};
PROTOBUF_NOINLINE void MovementError::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.MovementError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MovementError::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MovementError& this_ = static_cast<const MovementError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MovementError::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MovementError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.MovementError)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .dnd5e.api.v1alpha1.MovementError.ErrorCode code = 1 [json_name = "code"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_code(), target);
    }
  }

  // string message = 2 [json_name = "message"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_message().empty()) {
      const ::std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MovementError.message");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // map<string, string> details = 3 [json_name = "details"];
  if (!this_._internal_details().empty()) {
    using MapType = ::google::protobuf::Map<::std::string, ::std::string>;
    using WireHelper = _pbi::MapEntryFuncs<::std::string, ::std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_details();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MovementError.details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MovementError.details");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MovementError.details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.MovementError.details");
      }
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.MovementError)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MovementError::ByteSizeLong(const MessageLite& base) {
  const MovementError& this_ = static_cast<const MovementError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MovementError::ByteSizeLong() const {
  const MovementError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.MovementError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> details = 3 [json_name = "details"];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_details_size());
      for (const auto& entry : this_._internal_details()) {
        total_size += _pbi::MapEntryFuncs<::std::string, ::std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string message = 2 [json_name = "message"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // .dnd5e.api.v1alpha1.MovementError.ErrorCode code = 1 [json_name = "code"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_code() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MovementError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MovementError*>(&to_msg);
  auto& from = static_cast<const MovementError&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.MovementError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_code() != 0) {
        _this->_impl_.code_ = from._impl_.code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MovementError::CopyFrom(const MovementError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.MovementError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MovementError::InternalSwap(MovementError* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata MovementError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MoveCharacterResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MoveCharacterResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_._has_bits_);
};

MoveCharacterResponse::MoveCharacterResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MoveCharacterResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.MoveCharacterResponse)
}
PROTOBUF_NDEBUG_INLINE MoveCharacterResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::MoveCharacterResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MoveCharacterResponse::MoveCharacterResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MoveCharacterResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MoveCharacterResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MoveCharacterResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.error_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.error_)
                : nullptr;
  _impl_.updated_room_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.updated_room_)
                : nullptr;
  _impl_.combat_state_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, movement_remaining_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::movement_remaining_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.MoveCharacterResponse)
}
PROTOBUF_NDEBUG_INLINE MoveCharacterResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MoveCharacterResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_),
           0,
           offsetof(Impl_, movement_remaining_) -
               offsetof(Impl_, error_) +
               sizeof(Impl_::movement_remaining_));
}
MoveCharacterResponse::~MoveCharacterResponse() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.MoveCharacterResponse)
  SharedDtor(*this);
}
inline void MoveCharacterResponse::SharedDtor(MessageLite& self) {
  MoveCharacterResponse& this_ = static_cast<MoveCharacterResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.error_;
  delete this_._impl_.updated_room_;
  delete this_._impl_.combat_state_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MoveCharacterResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MoveCharacterResponse(arena);
}
constexpr auto MoveCharacterResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MoveCharacterResponse),
                                            alignof(MoveCharacterResponse));
}
constexpr auto MoveCharacterResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MoveCharacterResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MoveCharacterResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MoveCharacterResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MoveCharacterResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MoveCharacterResponse>(), &MoveCharacterResponse::ByteSizeLong,
              &MoveCharacterResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_._cached_size_),
          false,
      },
      &MoveCharacterResponse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MoveCharacterResponse_class_data_ =
        MoveCharacterResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MoveCharacterResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MoveCharacterResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MoveCharacterResponse_class_data_.tc_table);
  return MoveCharacterResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2>
MoveCharacterResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MoveCharacterResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::MoveCharacterResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1 [json_name = "success"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MoveCharacterResponse, _impl_.success_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.success_)}},
    // .dnd5e.api.v1alpha1.MovementError error = 2 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.error_)}},
    // int32 movement_remaining = 3 [json_name = "movementRemaining"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveCharacterResponse, _impl_.movement_remaining_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.movement_remaining_)}},
    // .dnd5e.api.v1alpha1.Room updated_room = 4 [json_name = "updatedRoom"];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.updated_room_)}},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 5 [json_name = "combatState"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.combat_state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1 [json_name = "success"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.success_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .dnd5e.api.v1alpha1.MovementError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.error_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 movement_remaining = 3 [json_name = "movementRemaining"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.movement_remaining_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .dnd5e.api.v1alpha1.Room updated_room = 4 [json_name = "updatedRoom"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.updated_room_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 5 [json_name = "combatState"];
    {PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.combat_state_), _Internal::kHasBitsOffset + 2, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::MovementError>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MoveCharacterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.MoveCharacterResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.updated_room_ != nullptr);
      _impl_.updated_room_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.combat_state_ != nullptr);
      _impl_.combat_state_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018U) != 0) {
    ::memset(&_impl_.success_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.movement_remaining_) -
        reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.movement_remaining_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MoveCharacterResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MoveCharacterResponse& this_ = static_cast<const MoveCharacterResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MoveCharacterResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MoveCharacterResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.MoveCharacterResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_success(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.MovementError error = 2 [json_name = "error"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.error_, this_._impl_.error_->GetCachedSize(), target,
        stream);
  }

  // int32 movement_remaining = 3 [json_name = "movementRemaining"];
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (this_._internal_movement_remaining() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_movement_remaining(), target);
    }
  }

  // .dnd5e.api.v1alpha1.Room updated_room = 4 [json_name = "updatedRoom"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.updated_room_, this_._impl_.updated_room_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.CombatState combat_state = 5 [json_name = "combatState"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.combat_state_, this_._impl_.combat_state_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.MoveCharacterResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MoveCharacterResponse::ByteSizeLong(const MessageLite& base) {
  const MoveCharacterResponse& this_ = static_cast<const MoveCharacterResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MoveCharacterResponse::ByteSizeLong() const {
  const MoveCharacterResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.MoveCharacterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // .dnd5e.api.v1alpha1.MovementError error = 2 [json_name = "error"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.error_);
    }
    // .dnd5e.api.v1alpha1.Room updated_room = 4 [json_name = "updatedRoom"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_room_);
    }
    // .dnd5e.api.v1alpha1.CombatState combat_state = 5 [json_name = "combatState"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.combat_state_);
    }
    // bool success = 1 [json_name = "success"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
    // int32 movement_remaining = 3 [json_name = "movementRemaining"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_movement_remaining() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_movement_remaining());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MoveCharacterResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MoveCharacterResponse*>(&to_msg);
  auto& from = static_cast<const MoveCharacterResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.MoveCharacterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.error_ != nullptr);
      if (_this->_impl_.error_ == nullptr) {
        _this->_impl_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.error_);
      } else {
        _this->_impl_.error_->MergeFrom(*from._impl_.error_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.updated_room_ != nullptr);
      if (_this->_impl_.updated_room_ == nullptr) {
        _this->_impl_.updated_room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.updated_room_);
      } else {
        _this->_impl_.updated_room_->MergeFrom(*from._impl_.updated_room_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.combat_state_ != nullptr);
      if (_this->_impl_.combat_state_ == nullptr) {
        _this->_impl_.combat_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_);
      } else {
        _this->_impl_.combat_state_->MergeFrom(*from._impl_.combat_state_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_success() != 0) {
        _this->_impl_.success_ = from._impl_.success_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_movement_remaining() != 0) {
        _this->_impl_.movement_remaining_ = from._impl_.movement_remaining_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveCharacterResponse::CopyFrom(const MoveCharacterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.MoveCharacterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MoveCharacterResponse::InternalSwap(MoveCharacterResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.movement_remaining_)
      + sizeof(MoveCharacterResponse::_impl_.movement_remaining_)
      - PROTOBUF_FIELD_OFFSET(MoveCharacterResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::google::protobuf::Metadata MoveCharacterResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EndTurnRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EndTurnRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_._has_bits_);
};

EndTurnRequest::EndTurnRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EndTurnRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.EndTurnRequest)
}
PROTOBUF_NDEBUG_INLINE EndTurnRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::EndTurnRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encounter_id_(arena, from.encounter_id_),
        entity_id_(arena, from.entity_id_) {}

EndTurnRequest::EndTurnRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EndTurnRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EndTurnRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EndTurnRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.EndTurnRequest)
}
PROTOBUF_NDEBUG_INLINE EndTurnRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        encounter_id_(arena),
        entity_id_(arena) {}

inline void EndTurnRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EndTurnRequest::~EndTurnRequest() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.EndTurnRequest)
  SharedDtor(*this);
}
inline void EndTurnRequest::SharedDtor(MessageLite& self) {
  EndTurnRequest& this_ = static_cast<EndTurnRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  this_._impl_.entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EndTurnRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EndTurnRequest(arena);
}
constexpr auto EndTurnRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EndTurnRequest),
                                            alignof(EndTurnRequest));
}
constexpr auto EndTurnRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EndTurnRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EndTurnRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EndTurnRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EndTurnRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EndTurnRequest>(), &EndTurnRequest::ByteSizeLong,
              &EndTurnRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_._cached_size_),
          false,
      },
      &EndTurnRequest::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EndTurnRequest_class_data_ =
        EndTurnRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EndTurnRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EndTurnRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EndTurnRequest_class_data_.tc_table);
  return EndTurnRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 63, 2>
EndTurnRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    EndTurnRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::EndTurnRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string entity_id = 2 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_.entity_id_)}},
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_.encounter_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 2 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(EndTurnRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\14\11\0\0\0\0\0"
    "dnd5e.api.v1alpha1.EndTurnRequest"
    "encounter_id"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void EndTurnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.EndTurnRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.encounter_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EndTurnRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EndTurnRequest& this_ = static_cast<const EndTurnRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EndTurnRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EndTurnRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.EndTurnRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.EndTurnRequest.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string entity_id = 2 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.EndTurnRequest.entity_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.EndTurnRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EndTurnRequest::ByteSizeLong(const MessageLite& base) {
  const EndTurnRequest& this_ = static_cast<const EndTurnRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EndTurnRequest::ByteSizeLong() const {
  const EndTurnRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.EndTurnRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string encounter_id = 1 [json_name = "encounterId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
    // string entity_id = 2 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EndTurnRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EndTurnRequest*>(&to_msg);
  auto& from = static_cast<const EndTurnRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.EndTurnRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_encounter_id().empty()) {
        _this->_internal_set_encounter_id(from._internal_encounter_id());
      } else {
        if (_this->_impl_.encounter_id_.IsDefault()) {
          _this->_internal_set_encounter_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndTurnRequest::CopyFrom(const EndTurnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.EndTurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EndTurnRequest::InternalSwap(EndTurnRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
}

::google::protobuf::Metadata EndTurnRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TurnChangeEvent::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TurnChangeEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_._has_bits_);
};

TurnChangeEvent::TurnChangeEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TurnChangeEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.TurnChangeEvent)
}
PROTOBUF_NDEBUG_INLINE TurnChangeEvent::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::TurnChangeEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        previous_entity_id_(arena, from.previous_entity_id_),
        next_entity_id_(arena, from.next_entity_id_) {}

TurnChangeEvent::TurnChangeEvent(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TurnChangeEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TurnChangeEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TurnChangeEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, round_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, round_),
           offsetof(Impl_, new_round_) -
               offsetof(Impl_, round_) +
               sizeof(Impl_::new_round_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.TurnChangeEvent)
}
PROTOBUF_NDEBUG_INLINE TurnChangeEvent::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        previous_entity_id_(arena),
        next_entity_id_(arena) {}

inline void TurnChangeEvent::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, round_),
           0,
           offsetof(Impl_, new_round_) -
               offsetof(Impl_, round_) +
               sizeof(Impl_::new_round_));
}
TurnChangeEvent::~TurnChangeEvent() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.TurnChangeEvent)
  SharedDtor(*this);
}
inline void TurnChangeEvent::SharedDtor(MessageLite& self) {
  TurnChangeEvent& this_ = static_cast<TurnChangeEvent&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.previous_entity_id_.Destroy();
  this_._impl_.next_entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TurnChangeEvent::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TurnChangeEvent(arena);
}
constexpr auto TurnChangeEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TurnChangeEvent),
                                            alignof(TurnChangeEvent));
}
constexpr auto TurnChangeEvent::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TurnChangeEvent_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TurnChangeEvent::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TurnChangeEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TurnChangeEvent::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TurnChangeEvent>(), &TurnChangeEvent::ByteSizeLong,
              &TurnChangeEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_._cached_size_),
          false,
      },
      &TurnChangeEvent::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TurnChangeEvent_class_data_ =
        TurnChangeEvent::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TurnChangeEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TurnChangeEvent_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TurnChangeEvent_class_data_.tc_table);
  return TurnChangeEvent_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 75, 2>
TurnChangeEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TurnChangeEvent_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::TurnChangeEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool new_round = 4 [json_name = "newRound"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TurnChangeEvent, _impl_.new_round_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.new_round_)}},
    // string previous_entity_id = 1 [json_name = "previousEntityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.previous_entity_id_)}},
    // string next_entity_id = 2 [json_name = "nextEntityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.next_entity_id_)}},
    // int32 round = 3 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangeEvent, _impl_.round_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.round_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string previous_entity_id = 1 [json_name = "previousEntityId"];
    {PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.previous_entity_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string next_entity_id = 2 [json_name = "nextEntityId"];
    {PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.next_entity_id_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 round = 3 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.round_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool new_round = 4 [json_name = "newRound"];
    {PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.new_round_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\42\22\16\0\0\0\0\0"
    "dnd5e.api.v1alpha1.TurnChangeEvent"
    "previous_entity_id"
    "next_entity_id"
  }},
};
PROTOBUF_NOINLINE void TurnChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.TurnChangeEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.previous_entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.next_entity_id_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000000cU) != 0) {
    ::memset(&_impl_.round_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.new_round_) -
        reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.new_round_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TurnChangeEvent::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TurnChangeEvent& this_ = static_cast<const TurnChangeEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TurnChangeEvent::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TurnChangeEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.TurnChangeEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string previous_entity_id = 1 [json_name = "previousEntityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_previous_entity_id().empty()) {
      const ::std::string& _s = this_._internal_previous_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.TurnChangeEvent.previous_entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string next_entity_id = 2 [json_name = "nextEntityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_next_entity_id().empty()) {
      const ::std::string& _s = this_._internal_next_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.TurnChangeEvent.next_entity_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 round = 3 [json_name = "round"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_round() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_round(), target);
    }
  }

  // bool new_round = 4 [json_name = "newRound"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_new_round() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_new_round(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.TurnChangeEvent)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TurnChangeEvent::ByteSizeLong(const MessageLite& base) {
  const TurnChangeEvent& this_ = static_cast<const TurnChangeEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TurnChangeEvent::ByteSizeLong() const {
  const TurnChangeEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.TurnChangeEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    // string previous_entity_id = 1 [json_name = "previousEntityId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_previous_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_previous_entity_id());
      }
    }
    // string next_entity_id = 2 [json_name = "nextEntityId"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_next_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_next_entity_id());
      }
    }
    // int32 round = 3 [json_name = "round"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_round() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_round());
      }
    }
    // bool new_round = 4 [json_name = "newRound"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_new_round() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TurnChangeEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TurnChangeEvent*>(&to_msg);
  auto& from = static_cast<const TurnChangeEvent&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.TurnChangeEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_previous_entity_id().empty()) {
        _this->_internal_set_previous_entity_id(from._internal_previous_entity_id());
      } else {
        if (_this->_impl_.previous_entity_id_.IsDefault()) {
          _this->_internal_set_previous_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_next_entity_id().empty()) {
        _this->_internal_set_next_entity_id(from._internal_next_entity_id());
      } else {
        if (_this->_impl_.next_entity_id_.IsDefault()) {
          _this->_internal_set_next_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_round() != 0) {
        _this->_impl_.round_ = from._impl_.round_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_new_round() != 0) {
        _this->_impl_.new_round_ = from._impl_.new_round_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TurnChangeEvent::CopyFrom(const TurnChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.TurnChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TurnChangeEvent::InternalSwap(TurnChangeEvent* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_entity_id_, &other->_impl_.previous_entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_entity_id_, &other->_impl_.next_entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.new_round_)
      + sizeof(TurnChangeEvent::_impl_.new_round_)
      - PROTOBUF_FIELD_OFFSET(TurnChangeEvent, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::google::protobuf::Metadata TurnChangeEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EndTurnResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EndTurnResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_._has_bits_);
};

EndTurnResponse::EndTurnResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EndTurnResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.EndTurnResponse)
}
PROTOBUF_NDEBUG_INLINE EndTurnResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::EndTurnResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EndTurnResponse::EndTurnResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EndTurnResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EndTurnResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EndTurnResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.combat_state_ = ((cached_has_bits & 0x00000001U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_)
                : nullptr;
  _impl_.turn_change_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.turn_change_)
                : nullptr;
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.EndTurnResponse)
}
PROTOBUF_NDEBUG_INLINE EndTurnResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void EndTurnResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, combat_state_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, combat_state_) +
               sizeof(Impl_::success_));
}
EndTurnResponse::~EndTurnResponse() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.EndTurnResponse)
  SharedDtor(*this);
}
inline void EndTurnResponse::SharedDtor(MessageLite& self) {
  EndTurnResponse& this_ = static_cast<EndTurnResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.combat_state_;
  delete this_._impl_.turn_change_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EndTurnResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EndTurnResponse(arena);
}
constexpr auto EndTurnResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EndTurnResponse),
                                            alignof(EndTurnResponse));
}
constexpr auto EndTurnResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EndTurnResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EndTurnResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EndTurnResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EndTurnResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EndTurnResponse>(), &EndTurnResponse::ByteSizeLong,
              &EndTurnResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_._cached_size_),
          false,
      },
      &EndTurnResponse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EndTurnResponse_class_data_ =
        EndTurnResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EndTurnResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EndTurnResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EndTurnResponse_class_data_.tc_table);
  return EndTurnResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
EndTurnResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EndTurnResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::EndTurnResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1 [json_name = "success"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EndTurnResponse, _impl_.success_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.success_)}},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.combat_state_)}},
    // .dnd5e.api.v1alpha1.TurnChangeEvent turn_change = 3 [json_name = "turnChange"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.turn_change_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1 [json_name = "success"];
    {PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.success_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    {PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.combat_state_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.TurnChangeEvent turn_change = 3 [json_name = "turnChange"];
    {PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.turn_change_), _Internal::kHasBitsOffset + 1, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::TurnChangeEvent>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void EndTurnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.EndTurnResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(_impl_.combat_state_ != nullptr);
      _impl_.combat_state_->Clear();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.turn_change_ != nullptr);
      _impl_.turn_change_->Clear();
    }
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EndTurnResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EndTurnResponse& this_ = static_cast<const EndTurnResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EndTurnResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EndTurnResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.EndTurnResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_success(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.combat_state_, this_._impl_.combat_state_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.TurnChangeEvent turn_change = 3 [json_name = "turnChange"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.turn_change_, this_._impl_.turn_change_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.EndTurnResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EndTurnResponse::ByteSizeLong(const MessageLite& base) {
  const EndTurnResponse& this_ = static_cast<const EndTurnResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EndTurnResponse::ByteSizeLong() const {
  const EndTurnResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.EndTurnResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // .dnd5e.api.v1alpha1.CombatState combat_state = 2 [json_name = "combatState"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.combat_state_);
    }
    // .dnd5e.api.v1alpha1.TurnChangeEvent turn_change = 3 [json_name = "turnChange"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.turn_change_);
    }
    // bool success = 1 [json_name = "success"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EndTurnResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EndTurnResponse*>(&to_msg);
  auto& from = static_cast<const EndTurnResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.EndTurnResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      ABSL_DCHECK(from._impl_.combat_state_ != nullptr);
      if (_this->_impl_.combat_state_ == nullptr) {
        _this->_impl_.combat_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_);
      } else {
        _this->_impl_.combat_state_->MergeFrom(*from._impl_.combat_state_);
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.turn_change_ != nullptr);
      if (_this->_impl_.turn_change_ == nullptr) {
        _this->_impl_.turn_change_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.turn_change_);
      } else {
        _this->_impl_.turn_change_->MergeFrom(*from._impl_.turn_change_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_success() != 0) {
        _this->_impl_.success_ = from._impl_.success_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndTurnResponse::CopyFrom(const EndTurnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.EndTurnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EndTurnResponse::InternalSwap(EndTurnResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.success_)
      + sizeof(EndTurnResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(EndTurnResponse, _impl_.combat_state_)>(
          reinterpret_cast<char*>(&_impl_.combat_state_),
          reinterpret_cast<char*>(&other->_impl_.combat_state_));
}

::google::protobuf::Metadata EndTurnResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttackRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AttackRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_._has_bits_);
};

AttackRequest::AttackRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.AttackRequest)
}
PROTOBUF_NDEBUG_INLINE AttackRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::AttackRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encounter_id_(arena, from.encounter_id_),
        attacker_id_(arena, from.attacker_id_),
        target_id_(arena, from.target_id_),
        weapon_id_(arena, from.weapon_id_) {}

AttackRequest::AttackRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AttackRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AttackRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.AttackRequest)
}
PROTOBUF_NDEBUG_INLINE AttackRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        encounter_id_(arena),
        attacker_id_(arena),
        target_id_(arena),
        weapon_id_(arena) {}

inline void AttackRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AttackRequest::~AttackRequest() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.AttackRequest)
  SharedDtor(*this);
}
inline void AttackRequest::SharedDtor(MessageLite& self) {
  AttackRequest& this_ = static_cast<AttackRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encounter_id_.Destroy();
  this_._impl_.attacker_id_.Destroy();
  this_._impl_.target_id_.Destroy();
  this_._impl_.weapon_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AttackRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AttackRequest(arena);
}
constexpr auto AttackRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AttackRequest),
                                            alignof(AttackRequest));
}
constexpr auto AttackRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AttackRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AttackRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AttackRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AttackRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AttackRequest>(), &AttackRequest::ByteSizeLong,
              &AttackRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_._cached_size_),
          false,
      },
      &AttackRequest::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AttackRequest_class_data_ =
        AttackRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AttackRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AttackRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AttackRequest_class_data_.tc_table);
  return AttackRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 82, 2>
AttackRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AttackRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::AttackRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string weapon_id = 4 [json_name = "weaponId"];
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.weapon_id_)}},
    // string encounter_id = 1 [json_name = "encounterId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.encounter_id_)}},
    // string attacker_id = 2 [json_name = "attackerId"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.attacker_id_)}},
    // string target_id = 3 [json_name = "targetId"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.target_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string encounter_id = 1 [json_name = "encounterId"];
    {PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.encounter_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string attacker_id = 2 [json_name = "attackerId"];
    {PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.attacker_id_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_id = 3 [json_name = "targetId"];
    {PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.target_id_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string weapon_id = 4 [json_name = "weaponId"];
    {PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.weapon_id_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\14\13\11\11\0\0\0"
    "dnd5e.api.v1alpha1.AttackRequest"
    "encounter_id"
    "attacker_id"
    "target_id"
    "weapon_id"
  }},
};
PROTOBUF_NOINLINE void AttackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.AttackRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.encounter_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.attacker_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.target_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.weapon_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AttackRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AttackRequest& this_ = static_cast<const AttackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AttackRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AttackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.AttackRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string encounter_id = 1 [json_name = "encounterId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_encounter_id().empty()) {
      const ::std::string& _s = this_._internal_encounter_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackRequest.encounter_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string attacker_id = 2 [json_name = "attackerId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_attacker_id().empty()) {
      const ::std::string& _s = this_._internal_attacker_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackRequest.attacker_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string target_id = 3 [json_name = "targetId"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_target_id().empty()) {
      const ::std::string& _s = this_._internal_target_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackRequest.target_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string weapon_id = 4 [json_name = "weaponId"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (!this_._internal_weapon_id().empty()) {
      const ::std::string& _s = this_._internal_weapon_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackRequest.weapon_id");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.AttackRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AttackRequest::ByteSizeLong(const MessageLite& base) {
  const AttackRequest& this_ = static_cast<const AttackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AttackRequest::ByteSizeLong() const {
  const AttackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.AttackRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    // string encounter_id = 1 [json_name = "encounterId"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_encounter_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_encounter_id());
      }
    }
    // string attacker_id = 2 [json_name = "attackerId"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_attacker_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_attacker_id());
      }
    }
    // string target_id = 3 [json_name = "targetId"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_target_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_target_id());
      }
    }
    // string weapon_id = 4 [json_name = "weaponId"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_weapon_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_weapon_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AttackRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AttackRequest*>(&to_msg);
  auto& from = static_cast<const AttackRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.AttackRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_encounter_id().empty()) {
        _this->_internal_set_encounter_id(from._internal_encounter_id());
      } else {
        if (_this->_impl_.encounter_id_.IsDefault()) {
          _this->_internal_set_encounter_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_attacker_id().empty()) {
        _this->_internal_set_attacker_id(from._internal_attacker_id());
      } else {
        if (_this->_impl_.attacker_id_.IsDefault()) {
          _this->_internal_set_attacker_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_target_id().empty()) {
        _this->_internal_set_target_id(from._internal_target_id());
      } else {
        if (_this->_impl_.target_id_.IsDefault()) {
          _this->_internal_set_target_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_weapon_id().empty()) {
        _this->_internal_set_weapon_id(from._internal_weapon_id());
      } else {
        if (_this->_impl_.weapon_id_.IsDefault()) {
          _this->_internal_set_weapon_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttackRequest::CopyFrom(const AttackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.AttackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AttackRequest::InternalSwap(AttackRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encounter_id_, &other->_impl_.encounter_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attacker_id_, &other->_impl_.attacker_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, &other->_impl_.target_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weapon_id_, &other->_impl_.weapon_id_, arena);
}

::google::protobuf::Metadata AttackRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttackResult::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AttackResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AttackResult, _impl_._has_bits_);
};

AttackResult::AttackResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.AttackResult)
}
PROTOBUF_NDEBUG_INLINE AttackResult::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::AttackResult& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        damage_type_(arena, from.damage_type_) {}

AttackResult::AttackResult(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AttackResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AttackResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attack_roll_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, attack_roll_),
           offsetof(Impl_, damage_) -
               offsetof(Impl_, attack_roll_) +
               sizeof(Impl_::damage_));

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.AttackResult)
}
PROTOBUF_NDEBUG_INLINE AttackResult::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        damage_type_(arena) {}

inline void AttackResult::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attack_roll_),
           0,
           offsetof(Impl_, damage_) -
               offsetof(Impl_, attack_roll_) +
               sizeof(Impl_::damage_));
}
AttackResult::~AttackResult() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.AttackResult)
  SharedDtor(*this);
}
inline void AttackResult::SharedDtor(MessageLite& self) {
  AttackResult& this_ = static_cast<AttackResult&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.damage_type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AttackResult::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AttackResult(arena);
}
constexpr auto AttackResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AttackResult),
                                            alignof(AttackResult));
}
constexpr auto AttackResult::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AttackResult_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AttackResult::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AttackResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AttackResult::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AttackResult>(), &AttackResult::ByteSizeLong,
              &AttackResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AttackResult, _impl_._cached_size_),
          false,
      },
      &AttackResult::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AttackResult_class_data_ =
        AttackResult::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AttackResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AttackResult_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AttackResult_class_data_.tc_table);
  return AttackResult_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 51, 2>
AttackResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttackResult, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AttackResult_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::AttackResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool hit = 1 [json_name = "hit"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AttackResult, _impl_.hit_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.hit_)}},
    // int32 attack_roll = 2 [json_name = "attackRoll"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttackResult, _impl_.attack_roll_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.attack_roll_)}},
    // int32 attack_total = 3 [json_name = "attackTotal"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttackResult, _impl_.attack_total_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.attack_total_)}},
    // int32 target_ac = 4 [json_name = "targetAc"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttackResult, _impl_.target_ac_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.target_ac_)}},
    // int32 damage = 5 [json_name = "damage"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttackResult, _impl_.damage_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.damage_)}},
    // string damage_type = 6 [json_name = "damageType"];
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.damage_type_)}},
    // bool critical = 7 [json_name = "critical"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AttackResult, _impl_.critical_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.critical_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool hit = 1 [json_name = "hit"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.hit_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 attack_roll = 2 [json_name = "attackRoll"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.attack_roll_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 attack_total = 3 [json_name = "attackTotal"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.attack_total_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 target_ac = 4 [json_name = "targetAc"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.target_ac_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 damage = 5 [json_name = "damage"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.damage_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string damage_type = 6 [json_name = "damageType"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.damage_type_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool critical = 7 [json_name = "critical"];
    {PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.critical_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\37\0\0\0\0\0\13\0"
    "dnd5e.api.v1alpha1.AttackResult"
    "damage_type"
  }},
};
PROTOBUF_NOINLINE void AttackResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.AttackResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.damage_type_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000007eU) != 0) {
    ::memset(&_impl_.attack_roll_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.damage_) -
        reinterpret_cast<char*>(&_impl_.attack_roll_)) + sizeof(_impl_.damage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AttackResult::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AttackResult& this_ = static_cast<const AttackResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AttackResult::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AttackResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.AttackResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool hit = 1 [json_name = "hit"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_hit() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_hit(), target);
    }
  }

  // int32 attack_roll = 2 [json_name = "attackRoll"];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_attack_roll() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_attack_roll(), target);
    }
  }

  // int32 attack_total = 3 [json_name = "attackTotal"];
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_attack_total() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_attack_total(), target);
    }
  }

  // int32 target_ac = 4 [json_name = "targetAc"];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_target_ac() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_target_ac(), target);
    }
  }

  // int32 damage = 5 [json_name = "damage"];
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_damage() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_damage(), target);
    }
  }

  // string damage_type = 6 [json_name = "damageType"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_damage_type().empty()) {
      const ::std::string& _s = this_._internal_damage_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackResult.damage_type");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // bool critical = 7 [json_name = "critical"];
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_critical() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_critical(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.AttackResult)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AttackResult::ByteSizeLong(const MessageLite& base) {
  const AttackResult& this_ = static_cast<const AttackResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AttackResult::ByteSizeLong() const {
  const AttackResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.AttackResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string damage_type = 6 [json_name = "damageType"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_damage_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_damage_type());
      }
    }
    // int32 attack_roll = 2 [json_name = "attackRoll"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_attack_roll() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_attack_roll());
      }
    }
    // int32 attack_total = 3 [json_name = "attackTotal"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_attack_total() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_attack_total());
      }
    }
    // int32 target_ac = 4 [json_name = "targetAc"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_target_ac() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_target_ac());
      }
    }
    // bool hit = 1 [json_name = "hit"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_hit() != 0) {
        total_size += 2;
      }
    }
    // bool critical = 7 [json_name = "critical"];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_critical() != 0) {
        total_size += 2;
      }
    }
    // int32 damage = 5 [json_name = "damage"];
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_damage() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_damage());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AttackResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AttackResult*>(&to_msg);
  auto& from = static_cast<const AttackResult&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.AttackResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_damage_type().empty()) {
        _this->_internal_set_damage_type(from._internal_damage_type());
      } else {
        if (_this->_impl_.damage_type_.IsDefault()) {
          _this->_internal_set_damage_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_attack_roll() != 0) {
        _this->_impl_.attack_roll_ = from._impl_.attack_roll_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_attack_total() != 0) {
        _this->_impl_.attack_total_ = from._impl_.attack_total_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_target_ac() != 0) {
        _this->_impl_.target_ac_ = from._impl_.target_ac_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_hit() != 0) {
        _this->_impl_.hit_ = from._impl_.hit_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_critical() != 0) {
        _this->_impl_.critical_ = from._impl_.critical_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_damage() != 0) {
        _this->_impl_.damage_ = from._impl_.damage_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttackResult::CopyFrom(const AttackResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.AttackResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AttackResult::InternalSwap(AttackResult* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.damage_type_, &other->_impl_.damage_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.damage_)
      + sizeof(AttackResult::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(AttackResult, _impl_.attack_roll_)>(
          reinterpret_cast<char*>(&_impl_.attack_roll_),
          reinterpret_cast<char*>(&other->_impl_.attack_roll_));
}

::google::protobuf::Metadata AttackResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttackResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AttackResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_._has_bits_);
};

AttackResponse::AttackResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dnd5e.api.v1alpha1.AttackResponse)
}
PROTOBUF_NDEBUG_INLINE AttackResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::dnd5e::api::v1alpha1::AttackResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        error_(arena, from.error_) {}

AttackResponse::AttackResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AttackResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AttackResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AttackResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_)
                : nullptr;
  _impl_.combat_state_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_)
                : nullptr;
  _impl_.updated_room_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.updated_room_)
                : nullptr;
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:dnd5e.api.v1alpha1.AttackResponse)
}
PROTOBUF_NDEBUG_INLINE AttackResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        error_(arena) {}

inline void AttackResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::success_));
}
AttackResponse::~AttackResponse() {
  // @@protoc_insertion_point(destructor:dnd5e.api.v1alpha1.AttackResponse)
  SharedDtor(*this);
}
inline void AttackResponse::SharedDtor(MessageLite& self) {
  AttackResponse& this_ = static_cast<AttackResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.combat_state_;
  delete this_._impl_.updated_room_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AttackResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AttackResponse(arena);
}
constexpr auto AttackResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AttackResponse),
                                            alignof(AttackResponse));
}
constexpr auto AttackResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AttackResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AttackResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AttackResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AttackResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AttackResponse>(), &AttackResponse::ByteSizeLong,
              &AttackResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_._cached_size_),
          false,
      },
      &AttackResponse::kDescriptorMethods,
      &descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AttackResponse_class_data_ =
        AttackResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AttackResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AttackResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AttackResponse_class_data_.tc_table);
  return AttackResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 47, 2>
AttackResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AttackResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::AttackResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1 [json_name = "success"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AttackResponse, _impl_.success_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.success_)}},
    // string error = 2 [json_name = "error"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.error_)}},
    // .dnd5e.api.v1alpha1.AttackResult result = 3 [json_name = "result"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.result_)}},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 4 [json_name = "combatState"];
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 1, PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.combat_state_)}},
    // .dnd5e.api.v1alpha1.Room updated_room = 5 [json_name = "updatedRoom"];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 2, PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.updated_room_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1 [json_name = "success"];
    {PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.success_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.error_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dnd5e.api.v1alpha1.AttackResult result = 3 [json_name = "result"];
    {PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.result_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.CombatState combat_state = 4 [json_name = "combatState"];
    {PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.combat_state_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dnd5e.api.v1alpha1.Room updated_room = 5 [json_name = "updatedRoom"];
    {PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.updated_room_), _Internal::kHasBitsOffset + 3, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::AttackResult>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::CombatState>()},
      {::_pbi::TcParser::GetTable<::dnd5e::api::v1alpha1::Room>()},
  }},
  {{
    "\41\0\5\0\0\0\0\0"
    "dnd5e.api.v1alpha1.AttackResponse"
    "error"
  }},
};
PROTOBUF_NOINLINE void AttackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dnd5e.api.v1alpha1.AttackResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.combat_state_ != nullptr);
      _impl_.combat_state_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.updated_room_ != nullptr);
      _impl_.updated_room_->Clear();
    }
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AttackResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AttackResponse& this_ = static_cast<const AttackResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AttackResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AttackResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:dnd5e.api.v1alpha1.AttackResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_success(), target);
    }
  }

  // string error = 2 [json_name = "error"];
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error().empty()) {
      const ::std::string& _s = this_._internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dnd5e.api.v1alpha1.AttackResponse.error");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .dnd5e.api.v1alpha1.AttackResult result = 3 [json_name = "result"];
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.CombatState combat_state = 4 [json_name = "combatState"];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.combat_state_, this_._impl_.combat_state_->GetCachedSize(), target,
        stream);
  }

  // .dnd5e.api.v1alpha1.Room updated_room = 5 [json_name = "updatedRoom"];
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.updated_room_, this_._impl_.updated_room_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dnd5e.api.v1alpha1.AttackResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AttackResponse::ByteSizeLong(const MessageLite& base) {
  const AttackResponse& this_ = static_cast<const AttackResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AttackResponse::ByteSizeLong() const {
  const AttackResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:dnd5e.api.v1alpha1.AttackResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string error = 2 [json_name = "error"];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_error());
      }
    }
    // .dnd5e.api.v1alpha1.AttackResult result = 3 [json_name = "result"];
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
    }
    // .dnd5e.api.v1alpha1.CombatState combat_state = 4 [json_name = "combatState"];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.combat_state_);
    }
    // .dnd5e.api.v1alpha1.Room updated_room = 5 [json_name = "updatedRoom"];
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_room_);
    }
    // bool success = 1 [json_name = "success"];
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AttackResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AttackResponse*>(&to_msg);
  auto& from = static_cast<const AttackResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dnd5e.api.v1alpha1.AttackResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error().empty()) {
        _this->_internal_set_error(from._internal_error());
      } else {
        if (_this->_impl_.error_.IsDefault()) {
          _this->_internal_set_error("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.combat_state_ != nullptr);
      if (_this->_impl_.combat_state_ == nullptr) {
        _this->_impl_.combat_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.combat_state_);
      } else {
        _this->_impl_.combat_state_->MergeFrom(*from._impl_.combat_state_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.updated_room_ != nullptr);
      if (_this->_impl_.updated_room_ == nullptr) {
        _this->_impl_.updated_room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.updated_room_);
      } else {
        _this->_impl_.updated_room_->MergeFrom(*from._impl_.updated_room_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_success() != 0) {
        _this->_impl_.success_ = from._impl_.success_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttackResponse::CopyFrom(const AttackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dnd5e.api.v1alpha1.AttackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AttackResponse::InternalSwap(AttackResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, &other->_impl_.error_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.success_)
      + sizeof(AttackResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AttackResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata AttackResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace api
}  // namespace dnd5e
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_dnd5e_2fapi_2fv1alpha1_2fencounter_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
