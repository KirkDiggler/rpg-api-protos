// @generated by protoc-gen-es v2.6.1 with parameter "target=ts"
// @generated from file api/v1alpha1/room_common.proto (package api.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/room_common.proto.
 */
export const file_api_v1alpha1_room_common: GenFile = /*@__PURE__*/
  fileDesc("Ch5hcGkvdjFhbHBoYTEvcm9vbV9jb21tb24ucHJvdG8SDGFwaS52MWFscGhhMSIrCghQb3NpdGlvbhIJCgF4GAEgASgBEgkKAXkYAiABKAESCQoBehgDIAEoASJtCg5Sb29tRGltZW5zaW9ucxINCgV3aWR0aBgBIAEoARIOCgZoZWlnaHQYAiABKAESKQoJZ3JpZF90eXBlGAMgASgOMhYuYXBpLnYxYWxwaGExLkdyaWRUeXBlEhEKCWdyaWRfc2l6ZRgEIAEoASLuAgoGRW50aXR5EgoKAmlkGAEgASgJEgwKBHR5cGUYAiABKAkSDAoEbmFtZRgDIAEoCRIoCghwb3NpdGlvbhgEIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhIMCgRzaXplGAUgASgBEjgKCnByb3BlcnRpZXMYBiADKAsyJC5hcGkudjFhbHBoYTEuRW50aXR5LlByb3BlcnRpZXNFbnRyeRIRCglzcHJpdGVfaWQYByABKAkSDQoFY29sb3IYCCABKAkSFwoPYmxvY2tzX21vdmVtZW50GAkgASgIEhwKFGJsb2Nrc19saW5lX29mX3NpZ2h0GAogASgIEhYKDmlzX2ludGVyYWN0aXZlGAsgASgIEhIKCmNyZWF0ZWRfYXQYDCABKAMSEgoKdXBkYXRlZF9hdBgNIAEoAxoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKcAgoKUm9vbUNvbmZpZxIRCglyb29tX3R5cGUYASABKAkSDQoFdGhlbWUYAiABKAkSEgoKZGlmZmljdWx0eRgDIAEoCRIwCgpkaW1lbnNpb25zGAQgASgLMhwuYXBpLnYxYWxwaGExLlJvb21EaW1lbnNpb25zEjwKCnBhcmFtZXRlcnMYBSADKAsyKC5hcGkudjFhbHBoYTEuUm9vbUNvbmZpZy5QYXJhbWV0ZXJzRW50cnkSNQoMc3Bhd25fY29uZmlnGAYgASgLMh8uYXBpLnYxYWxwaGExLkVudGl0eVNwYXduQ29uZmlnGjEKD1BhcmFtZXRlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIusBChFFbnRpdHlTcGF3bkNvbmZpZxIUCgxtaW5fZW50aXRpZXMYASABKAUSFAoMbWF4X2VudGl0aWVzGAIgASgFEhUKDWFsbG93ZWRfdHlwZXMYAyADKAkSFwoPZm9yYmlkZGVuX3R5cGVzGAQgAygJEkYKDHR5cGVfd2VpZ2h0cxgFIAMoCzIwLmFwaS52MWFscGhhMS5FbnRpdHlTcGF3bkNvbmZpZy5UeXBlV2VpZ2h0c0VudHJ5GjIKEFR5cGVXZWlnaHRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ASLMAgoNUm9vbVN0cnVjdHVyZRIKCgJpZBgBIAEoCRIwCgpkaW1lbnNpb25zGAIgASgLMhwuYXBpLnYxYWxwaGExLlJvb21EaW1lbnNpb25zEiEKBXdhbGxzGAMgAygLMhIuYXBpLnYxYWxwaGExLldhbGwSIQoFZG9vcnMYBCADKAsyEi5hcGkudjFhbHBoYTEuRG9vchI2ChB0ZXJyYWluX2ZlYXR1cmVzGAUgAygLMhwuYXBpLnYxYWxwaGExLlRlcnJhaW5GZWF0dXJlEjEKC2Nvbm5lY3Rpb25zGAYgAygLMhwuYXBpLnYxYWxwaGExLlJvb21Db25uZWN0aW9uEgwKBHNlZWQYByABKAkSKAoGY29uZmlnGAggASgLMhguYXBpLnYxYWxwaGExLlJvb21Db25maWcSFAoMZ2VuZXJhdGVkX2F0GAkgASgDIq0CCgRXYWxsEiUKBXN0YXJ0GAEgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEiMKA2VuZBgCIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhIQCghtYXRlcmlhbBgDIAEoCRIRCgl0aGlja25lc3MYBCABKAESFwoPYmxvY2tzX21vdmVtZW50GAUgASgIEhwKFGJsb2Nrc19saW5lX29mX3NpZ2h0GAYgASgIEhIKCnRleHR1cmVfaWQYByABKAkSNgoKcHJvcGVydGllcxgIIAMoCzIiLmFwaS52MWFscGhhMS5XYWxsLlByb3BlcnRpZXNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL0AgoERG9vchIKCgJpZBgBIAEoCRIoCghwb3NpdGlvbhgCIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhIMCgR0eXBlGAMgASgJEg0KBXN0YXRlGAQgASgJEhUKDWxlYWRzX3RvX3Jvb20YBSABKAkSMQoRbGVhZHNfdG9fcG9zaXRpb24YBiABKAsyFi5hcGkudjFhbHBoYTEuUG9zaXRpb24SEQoJaXNfc2VjcmV0GAcgASgIEhQKDHJlcXVpcmVzX2tleRgIIAEoCBIOCgZrZXlfaWQYCSABKAkSGAoQZGlmZmljdWx0eV9jbGFzcxgKIAEoBRIRCglzcHJpdGVfaWQYCyABKAkSNgoKcHJvcGVydGllcxgMIAMoCzIiLmFwaS52MWFscGhhMS5Eb29yLlByb3BlcnRpZXNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLBAgoOVGVycmFpbkZlYXR1cmUSCgoCaWQYASABKAkSDAoEdHlwZRgCIAEoCRIkCgRhcmVhGAMgAygLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhcKD2Jsb2Nrc19tb3ZlbWVudBgEIAEoCBIcChRibG9ja3NfbGluZV9vZl9zaWdodBgFIAEoCBIgChhtb3ZlbWVudF9jb3N0X211bHRpcGxpZXIYBiABKAESQAoKcHJvcGVydGllcxgHIAMoCzIsLmFwaS52MWFscGhhMS5UZXJyYWluRmVhdHVyZS5Qcm9wZXJ0aWVzRW50cnkSEgoKdGV4dHVyZV9pZBgIIAEoCRINCgVjb2xvchgJIAEoCRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL6AgoOUm9vbUNvbm5lY3Rpb24SCgoCaWQYASABKAkSGQoRY29ubmVjdGVkX3Jvb21faWQYAiABKAkSFwoPY29ubmVjdGlvbl90eXBlGAMgASgJEjIKEnRoaXNfcm9vbV9wb3NpdGlvbhgEIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhIzChNvdGhlcl9yb29tX3Bvc2l0aW9uGAUgASgLMhYuYXBpLnYxYWxwaGExLlBvc2l0aW9uEhgKEGlzX2JpZGlyZWN0aW9uYWwYBiABKAgSFwoPcmVxdWlyZXNfYWN0aW9uGAcgASgIEhcKD3JlcXVpcmVkX2FjdGlvbhgIIAEoCRJACgpwcm9wZXJ0aWVzGAkgAygLMiwuYXBpLnYxYWxwaGExLlJvb21Db25uZWN0aW9uLlByb3BlcnRpZXNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKPAgoEUm9vbRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEi4KCXN0cnVjdHVyZRgEIAEoCzIbLmFwaS52MWFscGhhMS5Sb29tU3RydWN0dXJlEiYKCGVudGl0aWVzGAUgAygLMhQuYXBpLnYxYWxwaGExLkVudGl0eRINCgVzdGF0ZRgGIAEoCRISCgpzZXNzaW9uX2lkGAcgASgJEhAKCG93bmVyX2lkGAggASgJEhIKCmNyZWF0ZWRfYXQYCSABKAMSEgoKdXBkYXRlZF9hdBgKIAEoAxIVCg1sYXN0X2FjY2Vzc2VkGAsgASgDEgwKBHRhZ3MYDCADKAkihwEKCVJvb21FcnJvchIMCgRjb2RlGAEgASgJEg8KB21lc3NhZ2UYAiABKAkSDQoFZmllbGQYAyABKAkSDwoHcm9vbV9pZBgEIAEoCRIoCghwb3NpdGlvbhgFIAEoCzIWLmFwaS52MWFscGhhMS5Qb3NpdGlvbhIRCgllbnRpdHlfaWQYBiABKAkieAoQVmFsaWRhdGlvblJlc3VsdBIQCghpc192YWxpZBgBIAEoCBInCgZlcnJvcnMYAiADKAsyFy5hcGkudjFhbHBoYTEuUm9vbUVycm9yEikKCHdhcm5pbmdzGAMgAygLMhcuYXBpLnYxYWxwaGExLlJvb21FcnJvciJeCghQYWdlSW5mbxIRCglwYWdlX3NpemUYASABKAUSEgoKcGFnZV90b2tlbhgCIAEoCRIXCg9uZXh0X3BhZ2VfdG9rZW4YAyABKAkSEgoKdG90YWxfc2l6ZRgEIAEoBSL4AQoKUm9vbUZpbHRlchISCgpyb29tX3R5cGVzGAEgAygJEg4KBnRoZW1lcxgCIAMoCRIOCgZzdGF0ZXMYAyADKAkSEgoKc2Vzc2lvbl9pZBgEIAEoCRIQCghvd25lcl9pZBgFIAEoCRIMCgR0YWdzGAYgAygJEjsKEGRpbWVuc2lvbl9maWx0ZXIYByABKAsyIS5hcGkudjFhbHBoYTEuUm9vbURpbWVuc2lvbkZpbHRlchIVCg1jcmVhdGVkX2FmdGVyGAggASgDEhYKDmNyZWF0ZWRfYmVmb3JlGAkgASgDEhYKDmFjY2Vzc2VkX2FmdGVyGAogASgDIo8BChNSb29tRGltZW5zaW9uRmlsdGVyEhEKCW1pbl93aWR0aBgBIAEoARIRCgltYXhfd2lkdGgYAiABKAESEgoKbWluX2hlaWdodBgDIAEoARISCgptYXhfaGVpZ2h0GAQgASgBEioKCmdyaWRfdHlwZXMYBSADKA4yFi5hcGkudjFhbHBoYTEuR3JpZFR5cGUqhQEKCEdyaWRUeXBlEhkKFUdSSURfVFlQRV9VTlNQRUNJRklFRBAAEhQKEEdSSURfVFlQRV9TUVVBUkUQARIYChRHUklEX1RZUEVfSEVYX1BPSU5UWRACEhYKEkdSSURfVFlQRV9IRVhfRkxBVBADEhYKEkdSSURfVFlQRV9HUklETEVTUxAEQpYBChBjb20uYXBpLnYxYWxwaGExQg9Sb29tQ29tbW9uUHJvdG9QAVogY2xpZW50cy9hcGkvdjFhbHBoYTE7YXBpdjFhbHBoYTGiAgNBWFiqAgxBcGkuVjFhbHBoYTHKAgxBcGlcVjFhbHBoYTHiAhhBcGlcVjFhbHBoYTFcR1BCTWV0YWRhdGHqAg1BcGk6OlYxYWxwaGExYgZwcm90bzM");

/**
 * Universal position coordinates for all grid systems
 *
 * @generated from message api.v1alpha1.Position
 */
export type Position = Message<"api.v1alpha1.Position"> & {
  /**
   * @generated from field: double x = 1;
   */
  x: number;

  /**
   * @generated from field: double y = 2;
   */
  y: number;

  /**
   * Optional for future 3D support
   *
   * @generated from field: double z = 3;
   */
  z: number;
};

/**
 * Describes the message api.v1alpha1.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export const PositionSchema: GenMessage<Position> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 0);

/**
 * Room dimensions and spatial properties
 *
 * @generated from message api.v1alpha1.RoomDimensions
 */
export type RoomDimensions = Message<"api.v1alpha1.RoomDimensions"> & {
  /**
   * Room width in grid units
   *
   * @generated from field: double width = 1;
   */
  width: number;

  /**
   * Room height in grid units
   *
   * @generated from field: double height = 2;
   */
  height: number;

  /**
   * @generated from field: api.v1alpha1.GridType grid_type = 3;
   */
  gridType: GridType;

  /**
   * Size of each grid cell (e.g., 5 feet)
   *
   * @generated from field: double grid_size = 4;
   */
  gridSize: number;
};

/**
 * Describes the message api.v1alpha1.RoomDimensions.
 * Use `create(RoomDimensionsSchema)` to create a new message.
 */
export const RoomDimensionsSchema: GenMessage<RoomDimensions> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 1);

/**
 * Generic entity that can exist in a room
 *
 * @generated from message api.v1alpha1.Entity
 */
export type Entity = Message<"api.v1alpha1.Entity"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * "character", "monster", "object", "terrain"
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: api.v1alpha1.Position position = 4;
   */
  position?: Position;

  /**
   * Entity size in grid units
   *
   * @generated from field: double size = 5;
   */
  size: number;

  /**
   * Entity-specific properties
   *
   * @generated from field: map<string, string> properties = 6;
   */
  properties: { [key: string]: string };

  /**
   * Visual representation hints
   *
   * @generated from field: string sprite_id = 7;
   */
  spriteId: string;

  /**
   * @generated from field: string color = 8;
   */
  color: string;

  /**
   * Gameplay properties
   *
   * @generated from field: bool blocks_movement = 9;
   */
  blocksMovement: boolean;

  /**
   * @generated from field: bool blocks_line_of_sight = 10;
   */
  blocksLineOfSight: boolean;

  /**
   * @generated from field: bool is_interactive = 11;
   */
  isInteractive: boolean;

  /**
   * Entity metadata
   *
   * @generated from field: int64 created_at = 12;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 13;
   */
  updatedAt: bigint;
};

/**
 * Describes the message api.v1alpha1.Entity.
 * Use `create(EntitySchema)` to create a new message.
 */
export const EntitySchema: GenMessage<Entity> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 2);

/**
 * Room generation configuration
 *
 * @generated from message api.v1alpha1.RoomConfig
 */
export type RoomConfig = Message<"api.v1alpha1.RoomConfig"> & {
  /**
   * "dungeon", "tavern", "forest", etc.
   *
   * @generated from field: string room_type = 1;
   */
  roomType: string;

  /**
   * "medieval", "modern", "sci-fi", etc.
   *
   * @generated from field: string theme = 2;
   */
  theme: string;

  /**
   * "easy", "medium", "hard"
   *
   * @generated from field: string difficulty = 3;
   */
  difficulty: string;

  /**
   * Dimensional constraints
   *
   * @generated from field: api.v1alpha1.RoomDimensions dimensions = 4;
   */
  dimensions?: RoomDimensions;

  /**
   * Generation parameters
   *
   * @generated from field: map<string, string> parameters = 5;
   */
  parameters: { [key: string]: string };

  /**
   * Entity generation hints
   *
   * @generated from field: api.v1alpha1.EntitySpawnConfig spawn_config = 6;
   */
  spawnConfig?: EntitySpawnConfig;
};

/**
 * Describes the message api.v1alpha1.RoomConfig.
 * Use `create(RoomConfigSchema)` to create a new message.
 */
export const RoomConfigSchema: GenMessage<RoomConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 3);

/**
 * Configuration for entity spawning during room generation
 *
 * @generated from message api.v1alpha1.EntitySpawnConfig
 */
export type EntitySpawnConfig = Message<"api.v1alpha1.EntitySpawnConfig"> & {
  /**
   * @generated from field: int32 min_entities = 1;
   */
  minEntities: number;

  /**
   * @generated from field: int32 max_entities = 2;
   */
  maxEntities: number;

  /**
   * @generated from field: repeated string allowed_types = 3;
   */
  allowedTypes: string[];

  /**
   * @generated from field: repeated string forbidden_types = 4;
   */
  forbiddenTypes: string[];

  /**
   * Spawn distribution hints
   *
   * @generated from field: map<string, int32> type_weights = 5;
   */
  typeWeights: { [key: string]: number };
};

/**
 * Describes the message api.v1alpha1.EntitySpawnConfig.
 * Use `create(EntitySpawnConfigSchema)` to create a new message.
 */
export const EntitySpawnConfigSchema: GenMessage<EntitySpawnConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 4);

/**
 * Room structure data (walls, doors, terrain features)
 *
 * @generated from message api.v1alpha1.RoomStructure
 */
export type RoomStructure = Message<"api.v1alpha1.RoomStructure"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: api.v1alpha1.RoomDimensions dimensions = 2;
   */
  dimensions?: RoomDimensions;

  /**
   * Structural elements
   *
   * @generated from field: repeated api.v1alpha1.Wall walls = 3;
   */
  walls: Wall[];

  /**
   * @generated from field: repeated api.v1alpha1.Door doors = 4;
   */
  doors: Door[];

  /**
   * @generated from field: repeated api.v1alpha1.TerrainFeature terrain_features = 5;
   */
  terrainFeatures: TerrainFeature[];

  /**
   * Room connections to other rooms
   *
   * @generated from field: repeated api.v1alpha1.RoomConnection connections = 6;
   */
  connections: RoomConnection[];

  /**
   * Generation metadata
   *
   * Seed used for generation
   *
   * @generated from field: string seed = 7;
   */
  seed: string;

  /**
   * Configuration used
   *
   * @generated from field: api.v1alpha1.RoomConfig config = 8;
   */
  config?: RoomConfig;

  /**
   * @generated from field: int64 generated_at = 9;
   */
  generatedAt: bigint;
};

/**
 * Describes the message api.v1alpha1.RoomStructure.
 * Use `create(RoomStructureSchema)` to create a new message.
 */
export const RoomStructureSchema: GenMessage<RoomStructure> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 5);

/**
 * Wall structure within a room
 *
 * @generated from message api.v1alpha1.Wall
 */
export type Wall = Message<"api.v1alpha1.Wall"> & {
  /**
   * @generated from field: api.v1alpha1.Position start = 1;
   */
  start?: Position;

  /**
   * @generated from field: api.v1alpha1.Position end = 2;
   */
  end?: Position;

  /**
   * "stone", "wood", "metal", etc.
   *
   * @generated from field: string material = 3;
   */
  material: string;

  /**
   * @generated from field: double thickness = 4;
   */
  thickness: number;

  /**
   * @generated from field: bool blocks_movement = 5;
   */
  blocksMovement: boolean;

  /**
   * @generated from field: bool blocks_line_of_sight = 6;
   */
  blocksLineOfSight: boolean;

  /**
   * Visual properties
   *
   * @generated from field: string texture_id = 7;
   */
  textureId: string;

  /**
   * @generated from field: map<string, string> properties = 8;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.Wall.
 * Use `create(WallSchema)` to create a new message.
 */
export const WallSchema: GenMessage<Wall> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 6);

/**
 * Door or passage connecting areas
 *
 * @generated from message api.v1alpha1.Door
 */
export type Door = Message<"api.v1alpha1.Door"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: api.v1alpha1.Position position = 2;
   */
  position?: Position;

  /**
   * "door", "archway", "secret_door", etc.
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * "open", "closed", "locked", "stuck"
   *
   * @generated from field: string state = 4;
   */
  state: string;

  /**
   * Connection information
   *
   * Room ID this door connects to
   *
   * @generated from field: string leads_to_room = 5;
   */
  leadsToRoom: string;

  /**
   * @generated from field: api.v1alpha1.Position leads_to_position = 6;
   */
  leadsToPosition?: Position;

  /**
   * Door properties
   *
   * @generated from field: bool is_secret = 7;
   */
  isSecret: boolean;

  /**
   * @generated from field: bool requires_key = 8;
   */
  requiresKey: boolean;

  /**
   * @generated from field: string key_id = 9;
   */
  keyId: string;

  /**
   * DC for opening if locked/stuck
   *
   * @generated from field: int32 difficulty_class = 10;
   */
  difficultyClass: number;

  /**
   * Visual properties
   *
   * @generated from field: string sprite_id = 11;
   */
  spriteId: string;

  /**
   * @generated from field: map<string, string> properties = 12;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.Door.
 * Use `create(DoorSchema)` to create a new message.
 */
export const DoorSchema: GenMessage<Door> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 7);

/**
 * Terrain features like pits, water, difficult terrain
 *
 * @generated from message api.v1alpha1.TerrainFeature
 */
export type TerrainFeature = Message<"api.v1alpha1.TerrainFeature"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * "pit", "water", "difficult_terrain", etc.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Positions covered by this feature
   *
   * @generated from field: repeated api.v1alpha1.Position area = 3;
   */
  area: Position[];

  /**
   * Gameplay effects
   *
   * @generated from field: bool blocks_movement = 4;
   */
  blocksMovement: boolean;

  /**
   * @generated from field: bool blocks_line_of_sight = 5;
   */
  blocksLineOfSight: boolean;

  /**
   * 2.0 for difficult terrain
   *
   * @generated from field: double movement_cost_multiplier = 6;
   */
  movementCostMultiplier: number;

  /**
   * Feature properties
   *
   * @generated from field: map<string, string> properties = 7;
   */
  properties: { [key: string]: string };

  /**
   * Visual representation
   *
   * @generated from field: string texture_id = 8;
   */
  textureId: string;

  /**
   * @generated from field: string color = 9;
   */
  color: string;
};

/**
 * Describes the message api.v1alpha1.TerrainFeature.
 * Use `create(TerrainFeatureSchema)` to create a new message.
 */
export const TerrainFeatureSchema: GenMessage<TerrainFeature> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 8);

/**
 * Connection between rooms
 *
 * @generated from message api.v1alpha1.RoomConnection
 */
export type RoomConnection = Message<"api.v1alpha1.RoomConnection"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string connected_room_id = 2;
   */
  connectedRoomId: string;

  /**
   * "door", "passage", "stairs", etc.
   *
   * @generated from field: string connection_type = 3;
   */
  connectionType: string;

  /**
   * @generated from field: api.v1alpha1.Position this_room_position = 4;
   */
  thisRoomPosition?: Position;

  /**
   * @generated from field: api.v1alpha1.Position other_room_position = 5;
   */
  otherRoomPosition?: Position;

  /**
   * Connection properties
   *
   * @generated from field: bool is_bidirectional = 6;
   */
  isBidirectional: boolean;

  /**
   * Does using this connection require an action?
   *
   * @generated from field: bool requires_action = 7;
   */
  requiresAction: boolean;

  /**
   * "open_door", "climb", "jump", etc.
   *
   * @generated from field: string required_action = 8;
   */
  requiredAction: string;

  /**
   * Connection metadata
   *
   * @generated from field: map<string, string> properties = 9;
   */
  properties: { [key: string]: string };
};

/**
 * Describes the message api.v1alpha1.RoomConnection.
 * Use `create(RoomConnectionSchema)` to create a new message.
 */
export const RoomConnectionSchema: GenMessage<RoomConnection> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 9);

/**
 * Complete room data with structure and entities
 *
 * @generated from message api.v1alpha1.Room
 */
export type Room = Message<"api.v1alpha1.Room"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Room structure and layout
   *
   * @generated from field: api.v1alpha1.RoomStructure structure = 4;
   */
  structure?: RoomStructure;

  /**
   * Entities currently in the room
   *
   * @generated from field: repeated api.v1alpha1.Entity entities = 5;
   */
  entities: Entity[];

  /**
   * Room state
   *
   * "active", "inactive", "locked", etc.
   *
   * @generated from field: string state = 6;
   */
  state: string;

  /**
   * Session and ownership
   *
   * @generated from field: string session_id = 7;
   */
  sessionId: string;

  /**
   * @generated from field: string owner_id = 8;
   */
  ownerId: string;

  /**
   * Room metadata
   *
   * @generated from field: int64 created_at = 9;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 10;
   */
  updatedAt: bigint;

  /**
   * @generated from field: int64 last_accessed = 11;
   */
  lastAccessed: bigint;

  /**
   * Room tags for organization
   *
   * @generated from field: repeated string tags = 12;
   */
  tags: string[];
};

/**
 * Describes the message api.v1alpha1.Room.
 * Use `create(RoomSchema)` to create a new message.
 */
export const RoomSchema: GenMessage<Room> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 10);

/**
 * Error types for room operations
 *
 * @generated from message api.v1alpha1.RoomError
 */
export type RoomError = Message<"api.v1alpha1.RoomError"> & {
  /**
   * "INVALID_CONFIG", "GENERATION_FAILED", etc.
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Field that caused the error
   *
   * @generated from field: string field = 3;
   */
  field: string;

  /**
   * Error context
   *
   * @generated from field: string room_id = 4;
   */
  roomId: string;

  /**
   * Position related to error if applicable
   *
   * @generated from field: api.v1alpha1.Position position = 5;
   */
  position?: Position;

  /**
   * Entity related to error if applicable
   *
   * @generated from field: string entity_id = 6;
   */
  entityId: string;
};

/**
 * Describes the message api.v1alpha1.RoomError.
 * Use `create(RoomErrorSchema)` to create a new message.
 */
export const RoomErrorSchema: GenMessage<RoomError> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 11);

/**
 * Validation result for room operations
 *
 * @generated from message api.v1alpha1.ValidationResult
 */
export type ValidationResult = Message<"api.v1alpha1.ValidationResult"> & {
  /**
   * @generated from field: bool is_valid = 1;
   */
  isValid: boolean;

  /**
   * @generated from field: repeated api.v1alpha1.RoomError errors = 2;
   */
  errors: RoomError[];

  /**
   * @generated from field: repeated api.v1alpha1.RoomError warnings = 3;
   */
  warnings: RoomError[];
};

/**
 * Describes the message api.v1alpha1.ValidationResult.
 * Use `create(ValidationResultSchema)` to create a new message.
 */
export const ValidationResultSchema: GenMessage<ValidationResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 12);

/**
 * Pagination support for room listings
 *
 * @generated from message api.v1alpha1.PageInfo
 */
export type PageInfo = Message<"api.v1alpha1.PageInfo"> & {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  /**
   * @generated from field: int32 total_size = 4;
   */
  totalSize: number;
};

/**
 * Describes the message api.v1alpha1.PageInfo.
 * Use `create(PageInfoSchema)` to create a new message.
 */
export const PageInfoSchema: GenMessage<PageInfo> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 13);

/**
 * Filter criteria for room queries
 *
 * @generated from message api.v1alpha1.RoomFilter
 */
export type RoomFilter = Message<"api.v1alpha1.RoomFilter"> & {
  /**
   * @generated from field: repeated string room_types = 1;
   */
  roomTypes: string[];

  /**
   * @generated from field: repeated string themes = 2;
   */
  themes: string[];

  /**
   * @generated from field: repeated string states = 3;
   */
  states: string[];

  /**
   * @generated from field: string session_id = 4;
   */
  sessionId: string;

  /**
   * @generated from field: string owner_id = 5;
   */
  ownerId: string;

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * Dimensional filters
   *
   * @generated from field: api.v1alpha1.RoomDimensionFilter dimension_filter = 7;
   */
  dimensionFilter?: RoomDimensionFilter;

  /**
   * Time-based filters
   *
   * @generated from field: int64 created_after = 8;
   */
  createdAfter: bigint;

  /**
   * @generated from field: int64 created_before = 9;
   */
  createdBefore: bigint;

  /**
   * @generated from field: int64 accessed_after = 10;
   */
  accessedAfter: bigint;
};

/**
 * Describes the message api.v1alpha1.RoomFilter.
 * Use `create(RoomFilterSchema)` to create a new message.
 */
export const RoomFilterSchema: GenMessage<RoomFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 14);

/**
 * Filter for room dimensions
 *
 * @generated from message api.v1alpha1.RoomDimensionFilter
 */
export type RoomDimensionFilter = Message<"api.v1alpha1.RoomDimensionFilter"> & {
  /**
   * @generated from field: double min_width = 1;
   */
  minWidth: number;

  /**
   * @generated from field: double max_width = 2;
   */
  maxWidth: number;

  /**
   * @generated from field: double min_height = 3;
   */
  minHeight: number;

  /**
   * @generated from field: double max_height = 4;
   */
  maxHeight: number;

  /**
   * @generated from field: repeated api.v1alpha1.GridType grid_types = 5;
   */
  gridTypes: GridType[];
};

/**
 * Describes the message api.v1alpha1.RoomDimensionFilter.
 * Use `create(RoomDimensionFilterSchema)` to create a new message.
 */
export const RoomDimensionFilterSchema: GenMessage<RoomDimensionFilter> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_room_common, 15);

/**
 * Grid type enumeration for different RPG systems
 *
 * @generated from enum api.v1alpha1.GridType
 */
export enum GridType {
  /**
   * @generated from enum value: GRID_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Chebyshev distance (D&D 5e, Pathfinder)
   *
   * @generated from enum value: GRID_TYPE_SQUARE = 1;
   */
  SQUARE = 1,

  /**
   * Cube coordinates, pointy-top orientation
   *
   * @generated from enum value: GRID_TYPE_HEX_POINTY = 2;
   */
  HEX_POINTY = 2,

  /**
   * Cube coordinates, flat-top orientation
   *
   * @generated from enum value: GRID_TYPE_HEX_FLAT = 3;
   */
  HEX_FLAT = 3,

  /**
   * Euclidean distance (narrative systems)
   *
   * @generated from enum value: GRID_TYPE_GRIDLESS = 4;
   */
  GRIDLESS = 4,
}

/**
 * Describes the enum api.v1alpha1.GridType.
 */
export const GridTypeSchema: GenEnum<GridType> = /*@__PURE__*/
  enumDesc(file_api_v1alpha1_room_common, 0);

